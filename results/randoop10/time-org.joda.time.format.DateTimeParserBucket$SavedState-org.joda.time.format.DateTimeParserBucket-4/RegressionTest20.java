import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        long long18 = dateTimeField15.add((long) (-292275054), 365);
        long long20 = dateTimeField15.roundHalfFloor((long) (-521947));
        org.joda.time.DurationField durationField21 = dateTimeField15.getLeapDurationField();
        java.lang.String str23 = dateTimeField15.getAsShortText((-10L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-292274689L) + "'", long18 == (-292274689L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-521947L) + "'", long20 == (-521947L));
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "86399990" + "'", str23, "86399990");
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology14);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.years();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale34.getDisplayCountry(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale34, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        java.util.Locale locale45 = dateTimeParserBucket43.getLocale();
        int int46 = dateTimeField31.getMaximumShortTextLength(locale45);
        java.lang.String str47 = locale45.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale45, (java.lang.Integer) 31, 292278993);
        org.joda.time.DurationField durationField51 = chronology14.weeks();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readablePeriod55);
        int int57 = localDateTime56.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.minusSeconds(1);
        int[] intArray61 = chronology14.get((org.joda.time.ReadablePartial) localDateTime56, 3155760000072L);
        org.joda.time.DurationField durationField62 = chronology14.minutes();
        long long65 = durationField62.getMillis((long) 47070, (long) 225);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 70 + "'", int57 == 70);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[2070, 1, 1, 72]");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2824200000L + "'", long65 == 2824200000L);
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        boolean boolean16 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.secondOfDay();
        long long22 = chronology13.add(0L, 292275054L, (int) 'u');
        org.joda.time.DateTimeField dateTimeField23 = chronology13.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology13.millis();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField26 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology13.hourOfDay();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 34196181318L + "'", long22 == 34196181318L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.yearOfEra();
        int int9 = property8.getLeapAmount();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.addToCopy((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withDurationAdded(readableDuration13, 53);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        int int17 = localDateTime15.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plus(readablePeriod18);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale22.getDisplayCountry(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology21, locale22, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        java.util.Locale locale33 = dateTimeParserBucket31.getLocale();
        boolean boolean35 = dateTimeParserBucket31.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket31.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        int int44 = property43.getMaximumValueOverall();
        int int45 = property43.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readablePeriod50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.yearOfEra();
        int int53 = property52.getMaximumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime55 = property52.roundHalfFloorCopy();
        int int56 = property43.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        boolean boolean58 = locale57.hasExtensions();
        int int59 = property43.getMaximumTextLength(locale57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property43.getFieldType();
        dateTimeParserBucket31.saveField(dateTimeFieldType60, 28);
        java.lang.String str63 = dateTimeFieldType60.toString();
        int int64 = localDateTime15.get(dateTimeFieldType60);
        int int65 = localDateTime15.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 80 + "'", int17 == 80);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "yearOfEra" + "'", str63, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1980 + "'", int64 == 1980);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getDurationType();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology5, locale6, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.years();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        boolean boolean19 = durationFieldType3.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.hourOfDay();
        boolean boolean21 = durationFieldType2.isSupported(chronology16);
        org.joda.time.DurationField durationField22 = chronology16.seconds();
        org.joda.time.DurationField durationField23 = chronology16.halfdays();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("it-IT");
        java.lang.String str26 = locale25.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(293760000000L, chronology16, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType28.getRangeDurationType();
        dateTimeParserBucket27.saveField(dateTimeFieldType28, 1712035);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNull(durationFieldType29);
        org.junit.Assert.assertNull(durationFieldType30);
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        int int14 = dateTimeField13.getMaximumValue();
        boolean boolean15 = dateTimeField13.isSupported();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86399999 + "'", int14 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale17.getDisplayCountry(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale17, (java.lang.Integer) 2, 70);
        boolean boolean27 = dateTimeFieldType0.isSupported(chronology14);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readablePeriod31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfEra();
        int int34 = property33.getMaximumValueOverall();
        int int35 = property33.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime36 = property33.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime37 = property33.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime38 = property33.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfWeek();
        int int43 = property33.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        long long45 = chronology14.set((org.joda.time.ReadablePartial) localDateTime41, 883612800000L);
        org.joda.time.Chronology chronology46 = localDateTime41.getChronology();
        int[] intArray47 = localDateTime41.getValues();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 52]");
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField21 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField22 = chronology12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfDay();
        java.lang.String str46 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfEra();
        int int54 = property53.getMaximumValueOverall();
        int int55 = property53.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime56 = property53.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minus(readablePeriod60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.yearOfEra();
        int int63 = property62.getMaximumValueOverall();
        int int64 = property62.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime65 = property62.roundHalfFloorCopy();
        int int66 = property53.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.minus(readablePeriod69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plus(readablePeriod71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType73.getRangeDurationType();
        int int75 = localDateTime70.get(dateTimeFieldType73);
        org.joda.time.DateTime dateTime76 = localDateTime70.toDateTime();
        int int77 = dateTimeField47.getMaximumValue((org.joda.time.ReadablePartial) localDateTime70);
        int int78 = property28.compareTo((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minus(readablePeriod82);
        org.joda.time.LocalDateTime.Property property84 = localDateTime81.yearOfEra();
        int int85 = property84.getMaximumValueOverall();
        int int86 = property84.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime87 = property84.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.plusMonths((int) (byte) -1);
        int int90 = localDateTime87.getMillisOfDay();
        int[] intArray91 = localDateTime87.getValues();
        chronology12.validate((org.joda.time.ReadablePartial) localDateTime70, intArray91);
        org.joda.time.DateTimeField dateTimeField93 = chronology12.clockhourOfHalfday();
        org.joda.time.DurationField durationField94 = chronology12.halfdays();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 292278993 + "'", int63 == 292278993);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 365 + "'", int77 == 365);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 292278993 + "'", int85 == 292278993);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(durationField94);
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfWeek();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#', chronology17);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale23, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.hours();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '#', chronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMonths((int) (short) 10);
        boolean boolean38 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime();
        long long40 = dateTime39.getMillis();
        org.joda.time.Instant instant41 = dateTime39.toInstant();
        long long42 = instant41.getMillis();
        org.joda.time.DateTimeZone dateTimeZone43 = instant41.getZone();
        int int44 = property3.getDifference((org.joda.time.ReadableInstant) instant41);
        int int45 = property3.getMinimumValueOverall();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.lang.String str55 = locale49.getDisplayCountry(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology48, locale49, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.hours();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) '#', chronology59);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = null;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale65.getDisplayCountry(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology64, locale65, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.hours();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) '#', chronology75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusMonths((int) (short) 10);
        boolean boolean80 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.DateTime dateTime81 = localDateTime77.toDateTime();
        int int82 = property3.compareTo((org.joda.time.ReadableInstant) dateTime81);
        java.lang.String str83 = property3.toString();
        int int84 = property3.getMinimumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 35L + "'", long40 == 35L);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 35L + "'", long42 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Property[dayOfWeek]" + "'", str83, "Property[dayOfWeek]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField16 = chronology12.minutes();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale16, (java.lang.Integer) 2, 70);
        org.joda.time.DateTimeField dateTimeField26 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology13.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = chronology13.getDateTimeMillis(1919987, 80, 27201190, (-705282), (-1937), 0, 1199232000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -705282 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        int int18 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.secondOfMinute();
        org.joda.time.DurationField durationField20 = property19.getRangeDurationField();
        int int22 = durationField20.getValue(35999947L);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 599 + "'", int22 == 599);
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        long long8 = property7.remainder();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.year();
        org.joda.time.DurationField durationField24 = chronology22.years();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        boolean boolean31 = dateTimeZone25.isLocalDateTimeGap(localDateTime30);
        org.joda.time.Chronology chronology32 = chronology22.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfMonth();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((-1052190046800000L), chronology32, locale34);
        int int36 = property7.getMaximumShortTextLength(locale34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = locale34.getUnicodeLocaleType("ISOCHRONOLOGY[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ISOCHRONOLOGY[UTC]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 259200009L + "'", long8 == 259200009L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        org.joda.time.DurationField durationField16 = chronology14.years();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        boolean boolean23 = dateTimeZone17.isLocalDateTimeGap(localDateTime22);
        org.joda.time.Chronology chronology24 = chronology14.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField25 = durationFieldType1.getField(chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = durationField25.getType();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property32.getFieldType();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology37, locale38, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology48);
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType34.getField(chronology48);
        org.joda.time.Chronology chronology52 = chronology48.withUTC();
        org.joda.time.DurationField durationField53 = durationFieldType26.getField(chronology48);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        java.lang.String str62 = locale54.getDisplayScript(locale58);
        java.util.Locale locale63 = locale58.stripExtensions();
        java.util.Locale.setDefault(locale63);
        java.util.Locale locale65 = locale63.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(7464986352000000L, chronology48, locale65);
        org.joda.time.DateTimeField dateTimeField67 = chronology48.era();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime4.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType6 = null;
        boolean boolean7 = localDateTime4.isSupported(durationFieldType6);
        int[] intArray8 = localDateTime4.getValues();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minus(readablePeriod9);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        dateTimeParserBucket22.setOffset((java.lang.Integer) 2);
        java.util.Locale locale26 = dateTimeParserBucket22.getLocale();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        int int29 = dateTimeZone27.getOffset((long) (short) 0);
        long long32 = dateTimeZone27.convertLocalToUTC(283996800000L, true);
        dateTimeParserBucket22.setZone(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.yearOfEra();
        int int49 = property48.getMaximumValueOverall();
        int int50 = property48.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime51 = property48.roundHalfFloorCopy();
        int int52 = property39.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withYearOfCentury((int) ' ');
        int int56 = localDateTime55.size();
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int59 = dateTime57.get(dateTimeFieldType58);
        dateTimeParserBucket22.saveField(dateTimeFieldType58, (-20999999));
        java.lang.String str62 = dateTimeFieldType58.toString();
        int int63 = localDateTime10.indexOf(dateTimeFieldType58);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime10.minusDays((-35));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1970, 1, 1, 9]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 283996800000L + "'", long32 == 283996800000L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 292278993 + "'", int49 == 292278993);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hourOfDay" + "'", str62, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.hourOfDay();
        int int20 = dateTimeField18.getMaximumValue((long) 'x');
        long long23 = dateTimeField18.add((long) 1, 100);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeField18.getAsShortText(1640995200032L, locale25);
        boolean boolean27 = dateTimeField18.isLenient();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 360000001L + "'", long23 == 360000001L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readablePeriod27);
        boolean boolean30 = localDateTime26.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.era();
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.monthOfYear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime26.withDayOfMonth(2);
        int[] intArray37 = chronology22.get((org.joda.time.ReadablePartial) localDateTime26, (long) 9);
        org.joda.time.DateTimeZone dateTimeZone38 = chronology22.getZone();
        org.joda.time.DurationField durationField39 = chronology22.years();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = chronology22.get(readablePeriod40, (long) 79, (long) 580);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 9]");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfDay();
        org.joda.time.DurationField durationField22 = chronology18.eras();
        java.lang.String str23 = durationField22.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = durationField22.getMillis(2271974400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UnsupportedDurationField[eras]" + "'", str23, "UnsupportedDurationField[eras]");
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale10, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType7.getField(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfHalfday();
        int int27 = dateTimeField25.getMaximumValue(220752000000L);
        long long30 = dateTimeField25.addWrapField((-1431750L), 0);
        int int32 = dateTimeField25.getLeapAmount((long) 199);
        boolean boolean33 = dateTimeField25.isLenient();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1431750L) + "'", long30 == (-1431750L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withPeriodAdded(readablePeriod23, 2);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = property26.addToCopy((-52));
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property26.getFieldType();
        org.joda.time.Interval interval30 = property26.toInterval();
        int int31 = property26.getMaximumValueOverall();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale34.getDisplayCountry(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale34, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.year();
        long long48 = dateTimeField45.set((long) '4', (int) (short) 0);
        long long50 = dateTimeField45.roundFloor((long) (byte) 0);
        long long53 = dateTimeField45.set((-62167219199948L), "10");
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        java.lang.String str62 = dateTimeField45.getAsText(2208988800120L, locale55);
        java.lang.String str63 = property26.getAsText(locale55);
        java.lang.String str64 = property26.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-62167219199948L) + "'", long48 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-61851599999948L) + "'", long53 == (-61851599999948L));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2040" + "'", str62, "2040");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970" + "'", str63, "1970");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970" + "'", str64, "1970");
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale10, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '#', chronology20);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str32 = locale26.getDisplayCountry(locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale26, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.hours();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '#', chronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMonths((int) (short) 10);
        boolean boolean41 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.DateTime dateTime42 = localDateTime38.toDateTime();
        long long43 = dateTime42.getMillis();
        org.joda.time.Instant instant44 = dateTime42.toInstant();
        long long45 = instant44.getMillis();
        java.lang.String str46 = instant44.toString();
        org.joda.time.DateTimeZone dateTimeZone47 = instant44.getZone();
        org.joda.time.Instant instant48 = instant44.toInstant();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.hours();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) '#', chronology62);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale68.getDisplayCountry(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology67, locale68, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.hours();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) '#', chronology78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusMonths((int) (short) 10);
        boolean boolean83 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.DateTime dateTime84 = localDateTime80.toDateTime();
        int int85 = instant44.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Chronology chronology86 = instant44.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(0, 74, 42369, (-80), (-102685), 86398319, 49316, chronology86);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -80 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 27L + "'", long43 == 27L);
        org.junit.Assert.assertNotNull(instant44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 27L + "'", long45 == 27L);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.027Z" + "'", str46, "1970-01-01T00:00:00.027Z");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology86);
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale10, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType7.getField(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.millisOfDay();
        java.lang.String str26 = chronology20.toString();
        org.joda.time.DurationField durationField27 = chronology20.months();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = durationField27.add(20544L, 28496016000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 28496016000000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfHour();
        org.joda.time.DurationField durationField15 = chronology12.centuries();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.yearOfEra();
        int int22 = property21.getMaximumValueOverall();
        int int23 = property21.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime24 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYear((int) ' ');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plus(readableDuration29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readableDuration31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readablePeriod33);
        int[] intArray36 = chronology12.get((org.joda.time.ReadablePartial) localDateTime32, (-1920001L));
        long long40 = chronology12.add((-251880000L), (long) '#', (int) (short) 10);
        java.lang.String str41 = chronology12.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1969, 12, 31, 84479999]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-251879650L) + "'", long40 == (-251879650L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("italiano (Italia)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"italiano (Italia)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology13.add(readablePeriod21, (long) 'x', 0);
        org.joda.time.DateTimeField dateTimeField25 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        int int32 = property31.getMaximumValueOverall();
        int int33 = property31.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfFloorCopy();
        int int35 = property31.getMinimumValue();
        boolean boolean36 = property31.isLeap();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.years();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.hourOfHalfday();
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology53, locale54, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology64 = dateTimeParserBucket63.getChronology();
        java.util.Locale locale65 = dateTimeParserBucket63.getLocale();
        int int66 = dateTimeField51.getMaximumShortTextLength(locale65);
        java.lang.String str67 = property31.getAsText(locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((-5L), chronology13, locale65);
        org.joda.time.DateTimeField dateTimeField69 = chronology13.millisOfDay();
        org.joda.time.DurationField durationField70 = chronology13.months();
        int int73 = durationField70.getValue(0L, 1831L);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 28L + "'", long18 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 120L + "'", long24 == 120L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970" + "'", str67, "1970");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        dateTimeParserBucket11.setPivotYear((java.lang.Integer) 31);
        dateTimeParserBucket11.setOffset((int) ' ');
        long long22 = dateTimeParserBucket11.computeMillis(true, "\u7fa9\u5927\u5229\u6587");
        dateTimeParserBucket11.setOffset((-707840));
        java.lang.Object obj25 = dateTimeParserBucket11.saveState();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 65L + "'", long22 == 65L);
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = property19.getMaximumValueOverall();
        int int21 = property19.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readablePeriod27);
        boolean boolean30 = localDateTime26.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.era();
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.monthOfYear();
        int int33 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        java.lang.String str43 = locale35.getDisplayScript(locale39);
        java.lang.String str44 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime26, (int) (short) 0, locale35);
        org.joda.time.LocalDateTime.Property property45 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.minusMillis(512);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfEra();
        int int54 = property53.getMaximumValueOverall();
        int int55 = property53.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime56 = property53.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minus(readablePeriod60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.yearOfEra();
        int int63 = property62.getMaximumValueOverall();
        int int64 = property62.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime65 = property62.roundHalfFloorCopy();
        int int66 = property53.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        java.lang.String str67 = localDateTime65.toString();
        int int68 = localDateTime65.size();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime47.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime.Property property70 = localDateTime47.weekyear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 292278993 + "'", int63 == 292278993);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.000" + "'", str67, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        dateTimeParserBucket11.saveField(dateTimeFieldType13, "", locale15);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        dateTimeParserBucket34.saveField(dateTimeFieldType36, "", locale38);
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        dateTimeParserBucket11.saveField(dateTimeFieldType36, "yearOfEra", locale47);
        java.lang.Integer int49 = dateTimeParserBucket11.getOffsetInteger();
        boolean boolean51 = dateTimeParserBucket11.restoreState((java.lang.Object) "gio");
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket11.getZone();
        java.lang.String[] strArray64 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        boolean boolean68 = strSet65.add("Italien");
        boolean boolean70 = strSet65.add("19");
        boolean boolean71 = dateTimeZone52.equals((java.lang.Object) strSet65);
        java.lang.Object[] objArray72 = strSet65.toArray();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[UTC, +00:00, DurationField[years], Italia, Italien, , 19]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[UTC, +00:00, DurationField[years], Italia, Italien, , 19]");
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology13.days();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        int int22 = dateTimeZone20.getOffset((long) (short) 0);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = dateTimeZone20.getName((long) (short) 1, locale24);
        java.lang.String str26 = dateTimeZone20.getID();
        java.lang.String str27 = dateTimeZone20.toString();
        boolean boolean29 = dateTimeZone20.isStandardOffset(883612800035L);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str39 = locale33.getDisplayCountry(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology32, locale33, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone46);
        java.lang.String str49 = localDateTime47.toString("1969");
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.year();
        org.joda.time.DurationField durationField64 = chronology62.years();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        boolean boolean71 = dateTimeZone65.isLocalDateTimeGap(localDateTime70);
        org.joda.time.Chronology chronology72 = chronology62.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField73 = chronology72.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minus(readablePeriod77);
        boolean boolean80 = localDateTime76.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property81 = localDateTime76.era();
        org.joda.time.LocalDateTime.Property property82 = localDateTime76.monthOfYear();
        org.joda.time.LocalDateTime.Property property83 = localDateTime76.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime76.withDayOfMonth(2);
        int[] intArray87 = chronology72.get((org.joda.time.ReadablePartial) localDateTime76, (long) 9);
        int int88 = dateTimeField44.getMinimumValue((org.joda.time.ReadablePartial) localDateTime47, intArray87);
        java.util.Locale locale91 = java.util.Locale.forLanguageTag("Deutsch");
        java.lang.String str92 = dateTimeField44.getAsText((long) 69, locale91);
        java.lang.String str93 = dateTimeZone20.getName(31536000000L, locale91);
        java.util.Locale.setDefault(locale91);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket(315569520000L, chronology13, locale91);
        dateTimeParserBucket95.setPivotYear((java.lang.Integer) (-27425248));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1969" + "'", str49, "1969");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1970, 1, 1, 9]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "deutsch");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "69" + "'", str92, "69");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00" + "'", str93, "+00:00");
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        org.joda.time.DurationField durationField37 = chronology35.years();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readablePeriod42);
        boolean boolean44 = dateTimeZone38.isLocalDateTimeGap(localDateTime43);
        org.joda.time.Chronology chronology45 = chronology35.withZone(dateTimeZone38);
        boolean boolean46 = dateTimeFieldType22.isSupported(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.year();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField51 = chronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology45);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMinutes(99);
        int int56 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minus(readablePeriod60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.yearOfEra();
        int int63 = property62.getMaximumValueOverall();
        int int64 = property62.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime65 = property62.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.yearOfEra();
        int int72 = property71.getMaximumValueOverall();
        int int73 = property71.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime74 = property71.roundHalfFloorCopy();
        int int75 = property62.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        java.lang.String str76 = localDateTime74.toString();
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.dayOfYear();
        org.joda.time.LocalDateTime.Property property78 = localDateTime74.weekyear();
        java.util.Locale locale82 = new java.util.Locale("yearOfEra", "Italia", "hi!");
        java.lang.String str83 = locale82.getDisplayVariant();
        java.util.Locale locale87 = new java.util.Locale("mer", "cinese (Taiwan)", "italien");
        java.lang.String str88 = locale82.getDisplayVariant(locale87);
        java.lang.String str89 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime74, locale82);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime74.minusHours(599);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 292278993 + "'", int63 == 292278993);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 292278993 + "'", int72 == 292278993);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000" + "'", str76, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertEquals(locale82.toString(), "yearofera_ITALIA_hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals(locale87.toString(), "mer_CINESE (TAIWAN)_italien");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1" + "'", str89, "1");
        org.junit.Assert.assertNotNull(localDateTime91);
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.millis();
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.lang.String str20 = nameProvider16.getName(locale17, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology14, locale17, (java.lang.Integer) 28, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.era();
        org.joda.time.DateTimeField dateTimeField25 = chronology14.millisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.years();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = chronology38.add(readablePeriod40, (long) 28, 10);
        org.joda.time.DateTimeZone dateTimeZone44 = chronology38.getZone();
        int int46 = dateTimeZone44.getOffsetFromLocal((-2726520305608080000L));
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology50, locale51, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        java.util.Locale locale62 = dateTimeParserBucket60.getLocale();
        boolean boolean64 = dateTimeParserBucket60.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology65 = dateTimeParserBucket60.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.year();
        java.util.Locale locale71 = new java.util.Locale("italiano", "1970-01-01T00:00:00.000", "1");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((-31449599990L), chronology65, locale71);
        java.lang.String str73 = dateTimeZone44.getName(252000001L, locale71);
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(3187296000000L, chronology14, locale71, (java.lang.Integer) (-17150744), 1971);
        java.lang.String str79 = locale71.getExtension('u');
        java.lang.String str80 = locale71.getDisplayScript();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 28L + "'", long43 == 28L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals(locale71.toString(), "italiano_1970-01-01T00:00:00.000_1");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        boolean boolean16 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.monthOfYear();
        long long22 = chronology13.add((-19045L), 283996800000L, 65);
        org.joda.time.DateTimeField dateTimeField23 = chronology13.minuteOfDay();
        org.joda.time.DurationField durationField24 = chronology13.hours();
        org.joda.time.DateTimeField dateTimeField25 = chronology13.dayOfMonth();
        long long29 = chronology13.add(10413792000000L, 4521600000L, 1971);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 18459791980955L + "'", long22 == 18459791980955L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 19325865600000L + "'", long29 == 19325865600000L);
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.yearOfEra();
        int int20 = property19.getMaximumValueOverall();
        int int21 = property19.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readablePeriod27);
        boolean boolean30 = localDateTime26.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.era();
        org.joda.time.LocalDateTime.Property property32 = localDateTime26.monthOfYear();
        int int33 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        java.lang.String str43 = locale35.getDisplayScript(locale39);
        java.lang.String str44 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime26, (int) (short) 0, locale35);
        org.joda.time.DurationField durationField45 = dateTimeField13.getDurationField();
        long long47 = dateTimeField13.roundHalfEven(1091870582401969L);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology50, locale51, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        java.util.Locale locale62 = dateTimeParserBucket60.getLocale();
        boolean boolean64 = dateTimeParserBucket60.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology65 = dateTimeParserBucket60.getChronology();
        java.util.Locale locale66 = dateTimeParserBucket60.getLocale();
        java.lang.String str67 = dateTimeField13.getAsShortText(1261872026953176L, locale66);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1091870582401969L + "'", long47 == 1091870582401969L);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "26953176" + "'", str67, "26953176");
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfMonth();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((-1052190046800000L), chronology23, locale25);
        org.joda.time.DurationField durationField27 = chronology23.months();
        java.lang.String str28 = durationField27.getName();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "months" + "'", str28, "months");
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.lang.String str17 = locale11.getDisplayCountry(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale11, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType8.getField(chronology21);
        org.joda.time.DurationField durationField25 = chronology21.years();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology21.getZone();
        org.joda.time.DurationField durationField27 = chronology21.years();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        java.util.Locale locale42 = dateTimeParserBucket40.getLocale();
        boolean boolean44 = dateTimeParserBucket40.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology45 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readablePeriod50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.yearOfEra();
        int int53 = property52.getMaximumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime55 = property52.roundHalfFloorCopy();
        int int56 = property52.getMinimumValue();
        boolean boolean57 = property52.isLeap();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = null;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.lang.String str66 = locale60.getDisplayCountry(locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology59, locale60, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology70 = dateTimeParserBucket69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.years();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.hourOfHalfday();
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = null;
        java.lang.String str77 = locale75.getDisplayVariant(locale76);
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.util.Locale locale79 = null;
        java.lang.String str80 = locale78.getDisplayVariant(locale79);
        java.lang.String str81 = locale75.getDisplayCountry(locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology74, locale75, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology85 = dateTimeParserBucket84.getChronology();
        java.util.Locale locale86 = dateTimeParserBucket84.getLocale();
        int int87 = dateTimeField72.getMaximumShortTextLength(locale86);
        java.lang.String str88 = property52.getAsText(locale86);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology45, locale86);
        java.lang.Integer int90 = dateTimeParserBucket89.getOffsetInteger();
        java.lang.Object obj91 = dateTimeParserBucket89.saveState();
        java.util.Locale locale92 = dateTimeParserBucket89.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket(62135678884125L, chronology21, locale92, (java.lang.Integer) 212253, 292277024);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1970" + "'", str88, "1970");
        org.junit.Assert.assertNull(int90);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "de");
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusSeconds((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minus(readablePeriod8);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        boolean boolean12 = localDateTime9.equals((java.lang.Object) category10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.yearOfEra();
        int int19 = property18.getMaximumValueOverall();
        int int20 = property18.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime21 = property18.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readablePeriod25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.yearOfEra();
        int int28 = property27.getMaximumValueOverall();
        int int29 = property27.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime30 = property27.roundHalfFloorCopy();
        int int31 = property18.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfCentury((int) ' ');
        int int35 = localDateTime34.size();
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.hours();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) '#', chronology50);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.lang.String str62 = locale56.getDisplayCountry(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology55, locale56, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology66 = dateTimeParserBucket65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.hours();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) '#', chronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusMonths((int) (short) 10);
        boolean boolean71 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.DateTime dateTime72 = localDateTime68.toDateTime();
        int int73 = dateTime36.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime72.getZone();
        org.joda.time.DateTime dateTime75 = localDateTime9.toDateTime(dateTimeZone74);
        org.joda.time.Instant instant76 = dateTime75.toInstant();
        java.lang.String str77 = dateTime75.toString();
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime75.getZone();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str77, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTimeZone78);
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '#', chronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths((int) (short) 10);
        boolean boolean34 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readablePeriod38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfEra();
        int int41 = property40.getMaximumValueOverall();
        int int42 = property40.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.yearOfEra();
        int int50 = property49.getMaximumValueOverall();
        int int51 = property49.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime52 = property49.roundHalfFloorCopy();
        int int53 = property40.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray56 = localDateTime55.getFields();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withWeekyear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.plusYears((-5700000));
        org.joda.time.LocalDateTime.Property property67 = localDateTime58.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime58.minusYears(69);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.minuteOfHour();
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("10 (durationfield[years])");
        int int73 = property70.getMaximumShortTextLength(locale72);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldArray56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray29 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList30, filteringMode32);
        java.lang.String[] strArray45 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        boolean boolean49 = strSet46.add("Italien");
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet46);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet46);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology53, locale54, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology64 = dateTimeParserBucket63.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = null;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        java.lang.String str73 = locale67.getDisplayCountry(locale70);
        dateTimeParserBucket63.saveField(dateTimeFieldType65, "", locale67);
        boolean boolean75 = strSet46.remove((java.lang.Object) dateTimeFieldType65);
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.util.Locale locale80 = null;
        java.lang.String str81 = locale79.getDisplayVariant(locale80);
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.util.Locale locale83 = null;
        java.lang.String str84 = locale82.getDisplayVariant(locale83);
        java.lang.String str85 = locale79.getDisplayCountry(locale82);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology78, locale79, (java.lang.Integer) 0, 0);
        dateTimeParserBucket11.saveField(dateTimeFieldType65, "1970-01-01T00:00:00.052", locale79);
        org.joda.time.Chronology chronology90 = dateTimeParserBucket11.getChronology();
        dateTimeParserBucket11.setOffset((java.lang.Integer) (-5700000));
        org.joda.time.Chronology chronology93 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.centuryOfEra();
        org.joda.time.DurationField durationField95 = chronology93.centuries();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(durationField95);
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone16);
        boolean boolean24 = dateTimeFieldType0.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology23.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        java.lang.String str33 = dateTimeZone32.getID();
        long long36 = dateTimeZone32.adjustOffset(2726520621264000000L, true);
        int int38 = dateTimeZone32.getOffsetFromLocal(9223309849910400000L);
        long long42 = dateTimeZone32.convertLocalToUTC((-19045L), true, (-60589379376000000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeZone30, dateTimeZone32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 2726520621264000000L + "'", long36 == 2726520621264000000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3600000) + "'", int38 == (-3600000));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3580955L + "'", long42 == 3580955L);
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withSecondOfMinute(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.monthOfYear();
        int int27 = property26.getMaximumValue();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale30.getDisplayCountry(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale30, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        boolean boolean49 = dateTimeZone43.isLocalDateTimeGap(localDateTime48);
        org.joda.time.Chronology chronology50 = chronology40.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField51 = chronology40.dayOfMonth();
        boolean boolean52 = dateTimeField51.isLenient();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minus(readablePeriod56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.yearOfEra();
        int int59 = property58.getMaximumValueOverall();
        int int60 = property58.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime61 = property58.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minus(readablePeriod65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.yearOfEra();
        int int68 = property67.getMaximumValueOverall();
        int int69 = property67.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime70 = property67.roundHalfFloorCopy();
        int int71 = property58.compareTo((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withYearOfCentury((int) ' ');
        int int75 = localDateTime74.size();
        int int76 = dateTimeField51.getMaximumValue((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.minusMonths((int) (byte) -1);
        int int79 = localDateTime74.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime74.withMillisOfSecond(35);
        org.joda.time.DateTime dateTime82 = localDateTime81.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime81.withPeriodAdded(readablePeriod83, 20);
        int int86 = property26.compareTo((org.joda.time.ReadablePartial) localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 292278993 + "'", int59 == 292278993);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 31 + "'", int76 == 31);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.year();
        org.joda.time.Chronology chronology19 = chronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField23 = chronology16.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.weekyear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        java.util.Locale locale16 = dateTimeParserBucket14.getLocale();
        boolean boolean18 = dateTimeParserBucket14.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        int int27 = property26.getMaximumValueOverall();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        int int30 = property26.getMinimumValue();
        boolean boolean31 = property26.isLeap();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale34.getDisplayCountry(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale34, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.years();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.hourOfHalfday();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.lang.String str55 = locale49.getDisplayCountry(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology48, locale49, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        java.util.Locale locale60 = dateTimeParserBucket58.getLocale();
        int int61 = dateTimeField46.getMaximumShortTextLength(locale60);
        java.lang.String str62 = property26.getAsText(locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology19, locale60);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology19.withZone(dateTimeZone64);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale68.getDisplayCountry(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology67, locale68, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.year();
        org.joda.time.DurationField durationField80 = chronology78.years();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minus(readablePeriod85);
        boolean boolean87 = dateTimeZone81.isLocalDateTimeGap(localDateTime86);
        org.joda.time.Chronology chronology88 = chronology78.withZone(dateTimeZone81);
        java.lang.String str89 = dateTimeZone81.getID();
        org.joda.time.Chronology chronology90 = chronology65.withZone(dateTimeZone81);
        org.joda.time.DateTimeField dateTimeField91 = chronology90.secondOfDay();
        boolean boolean92 = durationFieldType0.isSupported(chronology90);
        org.joda.time.DurationField durationField93 = chronology90.days();
        org.joda.time.DateTimeField dateTimeField94 = chronology90.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = dateTimeField94.getType();
        java.lang.String str96 = dateTimeFieldType95.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "months" + "'", str1, "months");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "UTC" + "'", str89, "UTC");
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "monthOfYear" + "'", str96, "monthOfYear");
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        long long16 = dateTimeField13.set((long) '4', (int) (short) 0);
        long long18 = dateTimeField13.roundFloor((long) (byte) 0);
        long long21 = dateTimeField13.set((-62167219199948L), "10");
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        java.lang.String str30 = dateTimeField13.getAsText(2208988800120L, locale23);
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale34.getDisplayCountry(locale37);
        java.lang.String str41 = locale33.getDisplayScript(locale37);
        long long42 = dateTimeField13.set(100L, "10", locale33);
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.Locale locale46 = new java.util.Locale("100");
        java.lang.String str47 = dateTimeField13.getAsShortText(readablePartial43, 11, locale46);
        java.lang.String str48 = locale46.getISO3Country();
        java.lang.String str49 = locale46.getDisplayScript();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62167219199948L) + "'", long16 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61851599999948L) + "'", long21 == (-61851599999948L));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2040" + "'", str30, "2040");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-61851599999900L) + "'", long42 == (-61851599999900L));
        org.junit.Assert.assertEquals(locale46.toString(), "100");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "11" + "'", str47, "11");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology12.months();
        long long17 = durationField14.getMillis(575, 120L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1512086400000L + "'", long17 == 1512086400000L);
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        boolean boolean16 = durationFieldType1.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyear();
        org.joda.time.DurationField durationField18 = dateTimeField17.getLeapDurationField();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale21, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField35 = chronology31.days();
        int int36 = durationField18.compareTo(durationField35);
        int int39 = durationField35.getDifference(3155760000072L, 21323415240035L);
        int int41 = durationField35.getValue(1640995200032L);
        long long44 = durationField35.getMillis(28L, 1326767039996880000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-210273) + "'", int39 == (-210273));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 18993 + "'", int41 == 18993);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2419200000L + "'", long44 == 2419200000L);
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType8.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfWeek();
        org.joda.time.Chronology chronology28 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekyearOfCentury();
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(283996800032L, chronology22, locale30, (java.lang.Integer) 86399999, (-8));
        dateTimeParserBucket33.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.year();
        org.joda.time.DurationField durationField51 = chronology49.years();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minus(readablePeriod56);
        boolean boolean58 = dateTimeZone52.isLocalDateTimeGap(localDateTime57);
        org.joda.time.Chronology chronology59 = chronology49.withZone(dateTimeZone52);
        boolean boolean60 = dateTimeFieldType36.isSupported(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.dayOfYear();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.year();
        org.joda.time.DateTimeField dateTimeField64 = chronology59.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField64.getType();
        dateTimeParserBucket33.saveField(dateTimeField64, 9);
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = null;
        java.lang.String str75 = locale73.getDisplayVariant(locale74);
        java.lang.String str76 = locale70.getDisplayCountry(locale73);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology69, locale70, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology80 = dateTimeParserBucket79.getChronology();
        java.util.Locale locale81 = dateTimeParserBucket79.getLocale();
        boolean boolean83 = dateTimeParserBucket79.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology84 = dateTimeParserBucket79.getChronology();
        org.joda.time.DateTimeZone dateTimeZone85 = dateTimeParserBucket79.getZone();
        org.joda.time.Chronology chronology86 = dateTimeParserBucket79.getChronology();
        java.lang.String str87 = chronology86.toString();
        org.joda.time.DateTimeField dateTimeField88 = chronology86.millisOfDay();
        org.joda.time.DurationField durationField89 = chronology86.minutes();
        org.joda.time.DateTimeField dateTimeField90 = chronology86.clockhourOfHalfday();
        boolean boolean91 = dateTimeParserBucket33.restoreState((java.lang.Object) dateTimeField90);
        java.lang.Integer int92 = dateTimeParserBucket33.getOffsetInteger();
        java.lang.Integer int93 = dateTimeParserBucket33.getOffsetInteger();
        long long95 = dateTimeParserBucket33.computeMillis(false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ISOChronology[UTC]" + "'", str87, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(int92);
        org.junit.Assert.assertNull(int93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-62418988799968L) + "'", long95 == (-62418988799968L));
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        boolean boolean19 = localDateTime17.isSupported(durationFieldType18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusYears((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plus(readableDuration22);
        int int24 = localDateTime21.getMinuteOfHour();
        int int25 = localDateTime21.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withHourOfDay((-17150744));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17150744 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        int int7 = property6.getMaximumValueOverall();
        int int8 = property6.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        int int16 = property15.getMaximumValueOverall();
        int int17 = property15.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfFloorCopy();
        int int19 = property6.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minus(readablePeriod22);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        java.util.Locale locale27 = new java.util.Locale("10 (DURATIONFIELD[YEARS])", "\u7fa9\u5927\u5229");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 60264, chronology24, locale27, (java.lang.Integer) 2922750, (-2004));
        java.util.Locale locale31 = locale27.stripExtensions();
        org.joda.time.tz.NameProvider nameProvider32 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str39 = locale33.getDisplayCountry(locale36);
        java.lang.String str42 = nameProvider32.getShortName(locale33, "", "hi!");
        java.lang.String str43 = locale31.getDisplayScript(locale33);
        java.lang.Object obj44 = locale31.clone();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "\u7fa9\u5927\u5229");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "\u7fa9\u5927\u5229");
        org.junit.Assert.assertNotNull(nameProvider32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "\u7fa9\u5927\u5229");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "\u7fa9\u5927\u5229");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "\u7fa9\u5927\u5229");
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property7.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType9.getField(chronology22);
        org.joda.time.DurationField durationField26 = chronology22.years();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.hourOfHalfday();
        java.lang.String str29 = chronology22.toString();
        org.joda.time.DurationField durationField30 = durationFieldType1.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField31 = chronology22.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.years();
        org.joda.time.DurationField durationField48 = chronology46.minutes();
        boolean boolean49 = durationFieldType33.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField50 = chronology46.secondOfMinute();
        org.joda.time.DurationField durationField51 = chronology46.months();
        boolean boolean52 = dateTimeFieldType32.isSupported(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.lang.String str62 = locale56.getDisplayCountry(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology55, locale56, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology66 = dateTimeParserBucket65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.year();
        org.joda.time.DurationField durationField68 = chronology66.years();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minus(readablePeriod73);
        boolean boolean75 = dateTimeZone69.isLocalDateTimeGap(localDateTime74);
        org.joda.time.Chronology chronology76 = chronology66.withZone(dateTimeZone69);
        boolean boolean77 = dateTimeFieldType53.isSupported(chronology76);
        long long81 = chronology76.add(365L, (long) 365, 59);
        org.joda.time.DateTimeField dateTimeField82 = chronology76.secondOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology76.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str86 = dateTimeZone84.getNameKey((long) 10);
        java.util.TimeZone timeZone87 = dateTimeZone84.toTimeZone();
        org.joda.time.LocalDateTime localDateTime88 = org.joda.time.LocalDateTime.now(dateTimeZone84);
        long long91 = dateTimeZone84.convertLocalToUTC(3600000L, false);
        long long94 = dateTimeZone84.adjustOffset(12620102400000L, false);
        org.joda.time.Chronology chronology95 = chronology76.withZone(dateTimeZone84);
        boolean boolean96 = dateTimeFieldType32.isSupported(chronology95);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 21900L + "'", long81 == 21900L);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "UTC" + "'", str86, "UTC");
        org.junit.Assert.assertNotNull(timeZone87);
// flaky:         org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 3600000L + "'", long91 == 3600000L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 12620102400000L + "'", long94 == 12620102400000L);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        long long16 = dateTimeField13.roundHalfEven((long) (-1));
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology29);
        java.util.Locale locale39 = new java.util.Locale("10", "DurationField[years]");
        java.lang.String str40 = locale39.getVariant();
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        java.lang.String str42 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime35, (int) (short) 100, locale39);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.yearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundFloorCopy();
        int int50 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.monthOfYear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.secondOfMinute();
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.getDefault(category53);
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale56);
        java.util.Locale locale58 = locale56.stripExtensions();
        java.util.Locale.Builder builder59 = builder55.setLocale(locale58);
        java.util.Locale locale60 = builder59.build();
        java.util.Locale.setDefault(category53, locale60);
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = null;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.lang.String str69 = locale63.getDisplayCountry(locale66);
        java.lang.String str70 = locale62.getDisplayScript(locale66);
        java.lang.String str71 = locale62.getDisplayCountry();
        java.util.Locale.setDefault(category53, locale62);
        int int73 = property52.getMaximumShortTextLength(locale62);
        java.lang.String str74 = locale62.getISO3Country();
        java.lang.String str75 = locale62.getLanguage();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale39.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100" + "'", str42, "100");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 86399999 + "'", int50 == 86399999);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.FORMAT + "'", category53.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Italia" + "'", str71, "Italia");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ITA" + "'", str74, "ITA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "it" + "'", str75, "it");
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology13);
        org.joda.time.DurationField durationField16 = chronology13.days();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.secondOfMinute();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        org.joda.time.DurationFieldType durationFieldType19 = durationField18.getType();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale22.getDisplayCountry(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology21, locale22, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        java.util.Locale locale33 = dateTimeParserBucket31.getLocale();
        boolean boolean35 = dateTimeParserBucket31.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket31.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfDay();
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        boolean boolean43 = durationFieldType19.isSupported(chronology38);
        org.joda.time.DateTimeField dateTimeField44 = chronology38.halfdayOfDay();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        int int14 = dateTimeParserBucket12.getOffset();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket12.getChronology();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale17);
        java.util.Locale locale19 = locale17.stripExtensions();
        java.util.Locale.Builder builder20 = builder16.setLocale(locale19);
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("120");
        java.util.Locale.Builder builder23 = builder20.clearExtensions();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = locale24.getDisplayLanguage(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((-165888086399988L), chronology15, locale26, (java.lang.Integer) 99);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.monthOfYear();
        org.joda.time.DurationField durationField31 = chronology15.hours();
        long long35 = chronology15.add((-33424L), 372000L, 2922789);
        org.joda.time.DateTimeField dateTimeField36 = chronology15.millisOfSecond();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japanisch" + "'", str27, "Japanisch");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1087277474576L + "'", long35 == 1087277474576L);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = property5.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        int int18 = property17.getMaximumValueOverall();
        int int19 = property17.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        int int27 = property26.getMaximumValueOverall();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        int int30 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfCentury((int) ' ');
        int int34 = localDateTime33.size();
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#', chronology49);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology54, locale55, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.hours();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) '#', chronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMonths((int) (short) 10);
        boolean boolean70 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.DateTime dateTime71 = localDateTime67.toDateTime();
        int int72 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime71.getZone();
        long long74 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology75 = dateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.era();
        org.joda.time.DurationField durationField78 = dateTimeField77.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNull(durationField78);
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = durationFieldType17.toString();
        boolean boolean19 = localDateTime15.isSupported(durationFieldType17);
        org.joda.time.Chronology chronology20 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        int int23 = dateTimeZone21.getOffset((long) (short) 0);
        long long26 = dateTimeZone21.convertLocalToUTC((long) 0, false);
        boolean boolean28 = dateTimeZone21.isStandardOffset((long) 70);
        java.lang.String str30 = dateTimeZone21.getShortName(9223309849824000010L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getRangeDurationType();
        java.lang.String str34 = dateTimeFieldType32.toString();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType32.getDurationType();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withFieldAdded(durationFieldType35, 304);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMillis(323);
        int[] intArray41 = chronology20.get((org.joda.time.ReadablePartial) localDateTime37, (long) (-480479999));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millis" + "'", str18, "millis");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "minuteOfHour" + "'", str34, "minuteOfHour");
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1969, 12, 26, 37920001]");
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        long long16 = dateTimeField13.getDifferenceAsLong(2240611200000L, 0L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        int int23 = property22.getMaximumValueOverall();
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        int int32 = property31.getMaximumValueOverall();
        int int33 = property31.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfFloorCopy();
        int int35 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean37 = localDateTime34.isSupported(dateTimeFieldType36);
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        java.lang.String str49 = nameProvider39.getShortName(locale43, "hi!", "");
        java.lang.String str50 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime34, (-292275054), locale43);
        org.joda.time.DurationField durationField51 = dateTimeField13.getLeapDurationField();
        long long54 = durationField51.add((long) 2032, 19987200);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 71L + "'", long16 == 71L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-292275054" + "'", str50, "-292275054");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1726894080002032L + "'", long54 == 1726894080002032L);
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone0.getNameKey((long) 10);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        long long7 = dateTimeZone0.convertLocalToUTC(3600000L, false);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale10, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfDay();
        java.lang.String str24 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        int int32 = property31.getMaximumValueOverall();
        int int33 = property31.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readablePeriod38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfEra();
        int int41 = property40.getMaximumValueOverall();
        int int42 = property40.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfFloorCopy();
        int int44 = property31.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.minus(readablePeriod47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plus(readablePeriod49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getRangeDurationType();
        int int53 = localDateTime48.get(dateTimeFieldType51);
        org.joda.time.DateTime dateTime54 = localDateTime48.toDateTime();
        int int55 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localDateTime48);
        int int56 = localDateTime48.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property57 = localDateTime48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime48.withWeekOfWeekyear(4);
        boolean boolean60 = dateTimeZone0.isLocalDateTimeGap(localDateTime59);
        long long62 = dateTimeZone0.convertUTCToLocal((-1915906L));
        int int64 = dateTimeZone0.getStandardOffset(62135683200000L);
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeZone0.getName(13L, locale66);
        java.lang.String str68 = dateTimeZone0.getID();
        java.lang.String str69 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3600000L + "'", long7 == 3600000L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 365 + "'", int55 == 365);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1915906L) + "'", long62 == (-1915906L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "UTC" + "'", str69, "UTC");
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths((int) (short) 10);
        int int18 = localDateTime15.getHourOfDay();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks(11);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusMinutes(1960);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfMonth(27180525);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27180525 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType8.getField(chronology22);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(1009843200003L, chronology22, locale26, (java.lang.Integer) 1439, 0);
        org.joda.time.DateTimeField dateTimeField31 = chronology22.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = chronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology22.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology37, locale38, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.years();
        org.joda.time.DurationField durationField50 = chronology48.minutes();
        boolean boolean51 = durationFieldType35.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField52 = chronology48.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.secondOfMinute();
        java.util.Locale locale56 = new java.util.Locale("100");
        int int57 = property54.getMaximumShortTextLength(locale56);
        java.lang.String str58 = locale56.getISO3Country();
        java.lang.String str59 = dateTimeField33.getAsText(1367491846L, locale56);
        java.lang.String str60 = dateTimeField33.getName();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it-IT" + "'", str27, "it-IT");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals(locale56.toString(), "100");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "16" + "'", str59, "16");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "dayOfMonth" + "'", str60, "dayOfMonth");
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        boolean boolean15 = durationField14.isPrecise();
        long long18 = durationField14.getMillis((long) 20, 82800000L);
        long long21 = durationField14.subtract(16L, 12070);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 631152000000L + "'", long18 == 631152000000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-380892412799984L) + "'", long21 == (-380892412799984L));
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        java.util.Locale locale1 = new java.util.Locale("yearOfEra");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        boolean boolean11 = strSet2.contains((java.lang.Object) property8);
        org.joda.time.LocalDateTime localDateTime12 = property8.withMinimumValue();
        int int13 = property8.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property20.getFieldType();
        java.lang.String str23 = property20.toString();
        int int24 = property20.get();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.years();
        org.joda.time.DurationField durationField40 = chronology38.minutes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.lang.String str56 = locale50.getDisplayCountry(locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology49, locale50, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology60 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.hours();
        boolean boolean62 = durationFieldType47.isSupported(chronology60);
        org.joda.time.DurationField durationField63 = durationFieldType45.getField(chronology60);
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology60, locale64, (java.lang.Integer) 1970);
        java.util.Locale locale67 = dateTimeParserBucket66.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((-63271670399965L), chronology38, locale67, (java.lang.Integer) 100);
        java.lang.String str70 = property20.getAsText(locale67);
        java.lang.String str71 = locale67.getDisplayVariant();
        java.util.Locale locale72 = java.util.Locale.CHINESE;
        java.util.Locale locale73 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale73);
        java.util.Locale locale75 = locale73.stripExtensions();
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale73);
        java.lang.String str78 = locale73.getCountry();
        java.lang.String str79 = locale72.getDisplayVariant(locale73);
        java.lang.String str80 = locale67.getDisplayName(locale73);
        java.util.Set<java.lang.String> strSet81 = locale67.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime82 = property8.setCopy("60", locale67);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.yearOfEra();
        org.junit.Assert.assertEquals(locale1.toString(), "yearofera");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[yearOfEra]" + "'", str23, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970" + "'", str70, "1970");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "IT" + "'", str78, "IT");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "francese (Canada)" + "'", str80, "francese (Canada)");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusSeconds(1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        int int14 = property13.getMaximumValueOverall();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property26.getFieldType();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology41);
        int int45 = localDateTime20.get(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime20.withWeekyear(70);
        int int48 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfDay();
        int int50 = property49.getMinimumValue();
        boolean boolean51 = property49.isLeap();
        java.lang.String str52 = property49.getAsText();
        org.joda.time.LocalDateTime localDateTime53 = property49.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = property49.roundFloorCopy();
        org.joda.time.DurationField durationField55 = property49.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNull(durationField55);
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale17.getDisplayCountry(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale17, (java.lang.Integer) 2, 70);
        boolean boolean27 = dateTimeFieldType0.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField28 = chronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology29 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology14.era();
        org.joda.time.DurationField durationField32 = chronology14.minutes();
        long long35 = durationField32.getDifferenceAsLong((long) 626, 1322016L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-22L) + "'", long35 == (-22L));
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray29 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList30, filteringMode32);
        java.lang.String[] strArray45 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        boolean boolean49 = strSet46.add("Italien");
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet46);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet46);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology53, locale54, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology64 = dateTimeParserBucket63.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = null;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        java.lang.String str73 = locale67.getDisplayCountry(locale70);
        dateTimeParserBucket63.saveField(dateTimeFieldType65, "", locale67);
        boolean boolean75 = strSet46.remove((java.lang.Object) dateTimeFieldType65);
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.util.Locale locale80 = null;
        java.lang.String str81 = locale79.getDisplayVariant(locale80);
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.util.Locale locale83 = null;
        java.lang.String str84 = locale82.getDisplayVariant(locale83);
        java.lang.String str85 = locale79.getDisplayCountry(locale82);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology78, locale79, (java.lang.Integer) 0, 0);
        dateTimeParserBucket11.saveField(dateTimeFieldType65, "1970-01-01T00:00:00.052", locale79);
        org.joda.time.Chronology chronology90 = dateTimeParserBucket11.getChronology();
        dateTimeParserBucket11.setOffset((java.lang.Integer) (-5700000));
        org.joda.time.Chronology chronology93 = dateTimeParserBucket11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long96 = dateTimeParserBucket11.computeMillis(false, "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"??????\": Value \"1970-01-01T00:00:00.052\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(chronology93);
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1970-01-01T00:00:00.052");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.minuteOfHour();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        int int21 = property2.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology15);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.years();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.hourOfHalfday();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.lang.String str41 = locale35.getDisplayCountry(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale35, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        java.util.Locale locale46 = dateTimeParserBucket44.getLocale();
        int int47 = dateTimeField32.getMaximumShortTextLength(locale46);
        java.lang.String str48 = locale46.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale46, (java.lang.Integer) 31, 292278993);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 86399001, chronology15);
        org.joda.time.DateTimeField dateTimeField53 = chronology15.minuteOfHour();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "de" + "'", str48, "de");
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withWeekyear((int) ' ');
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField23.getType();
        int int25 = localDateTime9.get(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime9.minusMinutes(100);
        int int28 = localDateTime27.getMinuteOfHour();
        java.lang.String str29 = localDateTime27.toString();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str39 = locale33.getDisplayCountry(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology32, locale33, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.hours();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology43);
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.lang.String str55 = locale49.getDisplayCountry(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology48, locale49, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.hours();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) '#', chronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusMonths((int) (short) 10);
        boolean boolean64 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        int int65 = localDateTime61.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.yearOfEra();
        int int72 = property71.getMaximumValueOverall();
        int int73 = property71.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime74 = property71.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minus(readablePeriod78);
        org.joda.time.LocalDateTime.Property property80 = localDateTime77.yearOfEra();
        int int81 = property80.getMaximumValueOverall();
        int int82 = property80.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime83 = property80.roundHalfFloorCopy();
        int int84 = property71.compareTo((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime83);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withYearOfCentury((int) ' ');
        int int88 = localDateTime85.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime85.withMillisOfDay(31);
        org.joda.time.LocalDateTime.Property property91 = localDateTime90.weekyear();
        org.joda.time.LocalDateTime localDateTime92 = localDateTime61.withFields((org.joda.time.ReadablePartial) localDateTime90);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime90.minusDays(12);
        int int95 = localDateTime90.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property96 = localDateTime90.weekyear();
        boolean boolean97 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0031-12-31T22:20:00.000" + "'", str29, "0031-12-31T22:20:00.000");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 292278993 + "'", int72 == 292278993);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 292278993 + "'", int81 == 292278993);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.era();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DurationField durationField15 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMinutes(1970);
        java.lang.String str21 = localDateTime18.toString();
        int int22 = localDateTime18.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withPeriodAdded(readablePeriod23, 17576);
        int int26 = localDateTime25.getYearOfCentury();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T07:33:47.570" + "'", str21, "2022-02-22T07:33:47.570");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology12.add(62167132800000L, 52238972476800000L, 86399900);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 52238972476800000 * 86399900");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        boolean boolean19 = durationFieldType4.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType2.getField(chronology17);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21, (java.lang.Integer) 1970);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        dateTimeParserBucket23.setZone(dateTimeZone24);
        int int27 = dateTimeZone24.getOffset((-1920001L));
        java.lang.String str29 = dateTimeZone24.getShortName((long) 31);
        long long32 = dateTimeZone24.convertLocalToUTC(31556952000L, false);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        long long35 = dateTimeZone24.getMillisKeepLocal(dateTimeZone33, (long) 1969);
        java.util.TimeZone timeZone36 = dateTimeZone24.toTimeZone();
        java.util.Locale locale42 = new java.util.Locale("292278993", "15768000", "KOORDINIERTE UNIVERSALZEIT");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        boolean boolean44 = locale42.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = timeZone36.getDisplayName(true, 4382982, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 4382982");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 31556952000L + "'", long32 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1969L + "'", long35 == 1969L);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertEquals(locale42.toString(), "292278993_15768000_KOORDINIERTE UNIVERSALZEIT");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DurationField durationField25 = chronology18.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = durationField25.getMillis(26, (long) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone16);
        boolean boolean24 = dateTimeFieldType0.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology23.getZone();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology23.getZone();
        org.joda.time.DurationField durationField31 = chronology23.minutes();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        dateTimeParserBucket11.saveField(dateTimeFieldType13, "", locale15);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        dateTimeParserBucket34.saveField(dateTimeFieldType36, "", locale38);
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        dateTimeParserBucket11.saveField(dateTimeFieldType36, "yearOfEra", locale47);
        java.util.Locale locale49 = dateTimeParserBucket11.getLocale();
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        boolean boolean57 = strSet50.remove((java.lang.Object) property56);
        java.lang.Object[] objArray58 = strSet50.toArray();
        strSet50.clear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(59);
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology5, locale6, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfDay();
        java.lang.String str20 = chronology16.toString();
        org.joda.time.DurationField durationField21 = chronology16.months();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale24.getDisplayCountry(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology23, locale24, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.years();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.year();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.minuteOfDay();
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.lang.String str48 = locale42.getDisplayCountry(locale45);
        java.lang.String str49 = locale41.getDisplayScript(locale45);
        java.util.Set<java.lang.String> strSet50 = locale45.getUnicodeLocaleKeys();
        java.lang.String str51 = dateTimeField39.getAsShortText(0L, locale45);
        java.lang.String str52 = locale45.getISO3Language();
        java.lang.String str53 = locale45.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(12620102400000L, chronology16, locale45);
        java.lang.String str55 = locale45.getDisplayName();
        java.lang.String str56 = dateTimeZone1.getName(85369L, locale45);
        java.lang.String str57 = dateTimeZone1.toString();
        long long61 = dateTimeZone1.convertLocalToUTC((-233820043200L), false, 259051558L);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "deu" + "'", str52, "deu");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tedesco" + "'", str55, "tedesco");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.059" + "'", str56, "+00:00:00.059");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.059" + "'", str57, "+00:00:00.059");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-233820043259L) + "'", long61 == (-233820043259L));
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime4.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType6 = null;
        boolean boolean7 = localDateTime4.isSupported(durationFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfMonth();
        java.lang.String str9 = property8.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        int int16 = property15.getMaximumValueOverall();
        int int17 = property15.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property15.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfCentury((int) ' ');
        int int32 = localDateTime31.size();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        java.lang.String str34 = dateTime33.toString();
        long long35 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime36 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime38 = property8.addToCopy(53L);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime41 = property39.addWrapFieldToCopy((-1688));
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.lang.String str52 = locale46.getDisplayCountry(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology45, locale46, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.hours();
        boolean boolean58 = durationFieldType43.isSupported(chronology56);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.dayOfYear();
        org.joda.time.DateTimeField dateTimeField61 = chronology56.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial62 = null;
        java.util.Locale locale65 = new java.util.Locale("0");
        java.lang.String str66 = locale65.toLanguageTag();
        java.lang.String str67 = locale65.getLanguage();
        java.lang.String str68 = locale65.getDisplayCountry();
        java.lang.String str69 = locale65.getDisplayName();
        java.lang.String str70 = dateTimeField61.getAsShortText(readablePartial62, 26888508, locale65);
        int int71 = property39.getMaximumShortTextLength(locale65);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[dayOfMonth]" + "'", str9, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1932-01-01T00:00:00.000Z" + "'", str34, "1932-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 13880L + "'", long35 == 13880L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals(locale65.toString(), "0");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "und" + "'", str66, "und");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0" + "'", str69, "0");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "26888508" + "'", str70, "26888508");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = property35.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime38 = property35.setCopy(0);
        org.joda.time.DurationField durationField39 = property35.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime40 = property35.roundHalfFloorCopy();
        java.lang.String str41 = property35.getAsText();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10" + "'", str41, "10");
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        int int7 = property6.getMaximumValueOverall();
        int int8 = property6.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        int int16 = property15.getMaximumValueOverall();
        int int17 = property15.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfFloorCopy();
        int int19 = property6.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localDateTime21.isSupported(dateTimeFieldType22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withPeriodAdded(readablePeriod24, 2);
        org.joda.time.Chronology chronology27 = localDateTime21.getChronology();
        java.util.Locale locale29 = new java.util.Locale("Koordinierte Universalzeit");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 53, chronology27, locale29);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfYear();
        java.lang.String str32 = chronology27.toString();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals(locale29.toString(), "koordinierte universalzeit");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        long long23 = chronology18.add(4000L, 34460278L, 41);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology18.months();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1412875398L + "'", long23 == 1412875398L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.yearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundFloorCopy();
        boolean boolean51 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = null;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.lang.String str66 = locale60.getDisplayCountry(locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology59, locale60, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology70 = dateTimeParserBucket69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.hours();
        boolean boolean72 = durationFieldType57.isSupported(chronology70);
        org.joda.time.DurationField durationField73 = chronology70.millis();
        org.joda.time.DateTimeField dateTimeField74 = chronology70.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType55.getField(chronology70);
        org.joda.time.DurationField durationField76 = chronology70.minutes();
        org.joda.time.DateTimeZone dateTimeZone77 = chronology70.getZone();
        org.joda.time.DateTime dateTime78 = localDateTime50.toDateTime(dateTimeZone77);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType8.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfWeek();
        org.joda.time.Chronology chronology28 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekyearOfCentury();
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(283996800032L, chronology22, locale30, (java.lang.Integer) 86399999, (-8));
        org.joda.time.DateTimeField dateTimeField34 = chronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology22.monthOfYear();
        org.joda.time.DurationField durationField36 = chronology22.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology22.weekyearOfCentury();
        org.joda.time.DurationField durationField38 = chronology22.weekyears();
        int int41 = durationField38.getValue((-16187472000000L), 852037704000L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-512) + "'", int41 == (-512));
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        int int32 = localDateTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#', chronology46);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusMinutes(1);
        int int52 = localDateTime48.getCenturyOfEra();
        boolean boolean53 = localDateTime16.equals((java.lang.Object) localDateTime48);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime16.plus(readablePeriod54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusYears(14);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.era();
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = localDateTime55.toString(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:00.001" + "'", str61, "1970-01-01T00:00:00.001");
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property24.getMinimumValue();
        boolean boolean29 = property24.isLeap();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        int int59 = dateTimeField44.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property24.getAsText(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale58);
        org.joda.time.DateTimeField dateTimeField62 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField63 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField64 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField65 = chronology17.hours();
        org.joda.time.DurationField durationField66 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField67 = chronology17.yearOfCentury();
        org.joda.time.Chronology chronology68 = chronology17.withUTC();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology68);
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        boolean boolean19 = localDateTime17.isSupported(durationFieldType18);
        java.lang.String str20 = durationFieldType18.getName();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale23, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfHour();
        boolean boolean36 = durationFieldType18.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.minuteOfHour();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.year();
        org.joda.time.DurationField durationField52 = chronology50.years();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minus(readablePeriod57);
        boolean boolean59 = dateTimeZone53.isLocalDateTimeGap(localDateTime58);
        org.joda.time.Chronology chronology60 = chronology50.withZone(dateTimeZone53);
        int int62 = dateTimeZone53.getOffsetFromLocal(1L);
        long long65 = dateTimeZone53.convertLocalToUTC((long) 32, false);
        boolean boolean67 = dateTimeZone53.isStandardOffset((-61851599999900L));
        org.joda.time.Chronology chronology68 = chronology33.withZone(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField69 = chronology68.minuteOfDay();
        java.lang.String str71 = dateTimeField69.getAsShortText((long) 800);
        java.lang.String str72 = dateTimeField69.toString();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "years" + "'", str20, "years");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 32L + "'", long65 == 32L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str72, "DateTimeField[minuteOfDay]");
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.weekyear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology12.add(readablePeriod19, (-61883148744000L), 80700);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-61883148744000L) + "'", long22 == (-61883148744000L));
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray16 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList17, filteringMode19);
        java.lang.String[] strArray32 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean36 = strSet33.add("Italien");
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet33);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        dateTimeParserBucket50.saveField(dateTimeFieldType52, "", locale54);
        boolean boolean62 = strSet33.remove((java.lang.Object) dateTimeFieldType52);
        boolean boolean63 = strSet33.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator64 = strSet33.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator65 = strSet33.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertNotNull(strSpliterator65);
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property18.getFieldType();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale23, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType20.getField(chronology33);
        int int37 = localDateTime12.get(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime12.withMillisOfDay(52);
        int int40 = localDateTime12.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        int int19 = property18.get();
        int int20 = property18.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime21 = property18.roundHalfFloorCopy();
        int int22 = property18.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = property18.addToCopy(37);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyear();
        org.joda.time.DurationField durationField16 = chronology12.seconds();
        org.joda.time.DurationField durationField17 = chronology12.seconds();
        long long20 = durationField17.getMillis((int) (short) 0, (long) 86399100);
        long long23 = durationField17.add(601002115200000L, 0L);
        long long26 = durationField17.getMillis(59979L, 567993600040L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 601002115200000L + "'", long23 == 601002115200000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 59979000L + "'", long26 == 59979000L);
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology13.days();
        boolean boolean17 = dateTimeFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology13.getZone();
        boolean boolean21 = dateTimeZone19.isStandardOffset(1672518456000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        int int16 = localDateTime15.getYear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) (-292275054));
        java.lang.String str21 = property18.getName();
        org.joda.time.Interval interval22 = property18.toInterval();
        org.joda.time.DurationField durationField23 = property18.getRangeDurationField();
        long long26 = durationField23.getMillis(365L, (long) 23535);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "monthOfYear" + "'", str21, "monthOfYear");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 11518243200000L + "'", long26 == 11518243200000L);
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField24 = chronology12.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology12.monthOfYear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        java.lang.String str17 = chronology13.toString();
        org.joda.time.DurationField durationField18 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(2L, chronology13);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        int int23 = dateTimeZone21.getOffset((long) (short) 0);
        long long26 = dateTimeZone21.convertLocalToUTC((long) 0, false);
        boolean boolean28 = dateTimeZone21.isStandardOffset((long) 70);
        java.lang.String str30 = dateTimeZone21.getShortName(9223309849824000010L);
        org.joda.time.Chronology chronology31 = chronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField32 = chronology13.months();
        long long35 = durationField32.getDifferenceAsLong((-7214400000L), (-87093259L));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-2L) + "'", long35 == (-2L));
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType8.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfWeek();
        org.joda.time.Chronology chronology28 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekyearOfCentury();
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(283996800032L, chronology22, locale30, (java.lang.Integer) 86399999, (-8));
        dateTimeParserBucket33.setPivotYear((java.lang.Integer) 1);
        long long37 = dateTimeParserBucket33.computeMillis(false);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfSecond();
        int int41 = dateTimeField40.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 283996800032L + "'", long37 == 283996800032L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        boolean boolean16 = localDateTime12.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.monthOfYear();
        int int19 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale24.getDisplayCountry(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology23, locale24, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.ReadablePartial readablePartial36 = null;
        int int37 = dateTimeField35.getMaximumValue(readablePartial36);
        long long40 = dateTimeField35.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField41 = dateTimeField35.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        int int48 = property47.getMaximumValueOverall();
        int int49 = property47.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime50 = property47.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        int int57 = property56.getMaximumValueOverall();
        int int58 = property56.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime59 = property56.roundHalfFloorCopy();
        int int60 = property47.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withMinuteOfHour((int) ' ');
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.lang.String str65 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime62, (-1), locale64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.yearOfEra();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundFloorCopy();
        boolean boolean73 = localDateTime62.isAfter((org.joda.time.ReadablePartial) localDateTime72);
        int int74 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime21.minus(readableDuration75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withPeriodAdded(readablePeriod77, 11);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.withDurationAdded(readableDuration80, 19);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone84);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.minus(readablePeriod86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime85.yearOfEra();
        org.joda.time.LocalDateTime localDateTime89 = property88.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property88.getFieldType();
        boolean boolean91 = localDateTime76.isSupported(dateTimeFieldType90);
        int int92 = localDateTime76.size();
        int int93 = localDateTime76.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1" + "'", str65, "-1");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.Chronology chronology16 = chronology12.withUTC();
        org.joda.time.DurationField durationField17 = chronology12.years();
        org.joda.time.DurationField durationField18 = chronology12.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.weekyearOfCentury();
        long long21 = dateTimeField19.remainder((-59L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 31535999941L + "'", long21 == 31535999941L);
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusSeconds(1970);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        org.joda.time.DurationField durationField25 = chronology23.years();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        boolean boolean32 = dateTimeZone26.isLocalDateTimeGap(localDateTime31);
        org.joda.time.Chronology chronology33 = chronology23.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime6, chronology33);
        int[] intArray37 = localDateTime36.getValues();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.years();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.year();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.dayOfMonth();
        org.joda.time.DurationField durationField56 = chronology50.weeks();
        org.joda.time.DurationFieldType durationFieldType57 = durationField56.getType();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime36.withFieldAdded(durationFieldType57, (-366));
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfYear();
        int int61 = property60.get();
        org.joda.time.DurationField durationField62 = property60.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 361 + "'", int61 == 361);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '#', chronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths((int) (short) 10);
        boolean boolean34 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.lang.String str43 = locale37.getDisplayCountry(locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology36, locale37, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.year();
        org.joda.time.ReadablePartial readablePartial49 = null;
        int int50 = dateTimeField48.getMaximumValue(readablePartial49);
        long long53 = dateTimeField48.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField54 = dateTimeField48.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minus(readablePeriod58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.yearOfEra();
        int int61 = property60.getMaximumValueOverall();
        int int62 = property60.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime63 = property60.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readablePeriod67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.yearOfEra();
        int int70 = property69.getMaximumValueOverall();
        int int71 = property69.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime72 = property69.roundHalfFloorCopy();
        int int73 = property60.compareTo((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withMinuteOfHour((int) ' ');
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) localDateTime75, (-1), locale77);
        org.joda.time.tz.NameProvider nameProvider79 = org.joda.time.DateTimeZone.getNameProvider();
        boolean boolean80 = localDateTime75.equals((java.lang.Object) nameProvider79);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime75);
        int int82 = localDateTime15.size();
        org.joda.time.LocalDateTime.Property property83 = localDateTime15.era();
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime15.minus(readablePeriod84);
        int int86 = localDateTime15.size();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNull(durationField54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 292278993 + "'", int61 == 292278993);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 292278993 + "'", int70 == 292278993);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1" + "'", str78, "-1");
        org.junit.Assert.assertNotNull(nameProvider79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime15.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMonthOfYear(4);
        int int22 = localDateTime15.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str24 = durationFieldType23.getName();
        boolean boolean25 = localDateTime15.isSupported(durationFieldType23);
        org.joda.time.tz.Provider provider26 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider26);
        org.joda.time.DateTimeZone dateTimeZone29 = provider26.getZone("0");
        java.util.Set<java.lang.String> strSet30 = provider26.getAvailableIDs();
        boolean boolean31 = localDateTime15.equals((java.lang.Object) provider26);
        org.joda.time.LocalDateTime.Property property32 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime15.withYearOfEra(43200000);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYear((-105197));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyears" + "'", str24, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology12);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = property19.addWrapFieldToCopy(1920000);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(100L);
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '#', chronology15);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readableDuration18);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime17.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withMonthOfYear(4);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.withSecondOfMinute((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale30.getDisplayCountry(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale30, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField41 = durationFieldType27.getField(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime17.withFieldAdded(durationFieldType27, (-8));
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.yearOfEra();
        int int50 = property49.getMaximumValueOverall();
        int int51 = property49.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime52 = property49.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minus(readablePeriod56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.yearOfEra();
        int int59 = property58.getMaximumValueOverall();
        int int60 = property58.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime61 = property58.roundHalfFloorCopy();
        int int62 = property49.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withYearOfCentury((int) ' ');
        int int66 = localDateTime65.size();
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime();
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minus(readablePeriod72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.yearOfEra();
        int int75 = property74.getMaximumValueOverall();
        int int76 = property74.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime77 = property74.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minus(readablePeriod81);
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.yearOfEra();
        int int84 = property83.getMaximumValueOverall();
        int int85 = property83.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime86 = property83.roundHalfFloorCopy();
        int int87 = property74.compareTo((org.joda.time.ReadablePartial) localDateTime86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime86.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray90 = localDateTime89.getFields();
        org.joda.time.LocalDateTime localDateTime92 = localDateTime89.withMillisOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean94 = localDateTime89.isSupported(dateTimeFieldType93);
        int int95 = dateTime67.get(dateTimeFieldType93);
        org.joda.time.LocalDateTime.Property property96 = localDateTime43.property(dateTimeFieldType93);
        boolean boolean97 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType99 = localDateTime43.getFieldType((-1726866528));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1726866528");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 292278993 + "'", int59 == 292278993);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1932-01-01T00:00:00.000Z" + "'", str68, "1932-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 292278993 + "'", int75 == 292278993);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 292278993 + "'", int84 == 292278993);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(dateTimeFieldArray90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 19 + "'", int95 == 19);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(70);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.era();
        java.util.Locale locale4 = null;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale10, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.millis();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str26 = nameProvider22.getName(locale23, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology20, locale23, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str30 = locale23.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = property3.setCopy("-251999999", locale23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-251999999\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "dopo Cristo" + "'", str5, "dopo Cristo");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        int int24 = property23.getMaximumValueOverall();
        int int25 = property23.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        int int33 = property32.getMaximumValueOverall();
        int int34 = property32.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime35 = property32.roundHalfFloorCopy();
        int int36 = property23.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plus(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getRangeDurationType();
        int int45 = localDateTime40.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = localDateTime40.toDateTime();
        int int47 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime40);
        int int48 = localDateTime40.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property49 = localDateTime40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withWeekOfWeekyear(4);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology54, locale55, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.hours();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) '#', chronology65);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plus(readableDuration68);
        org.joda.time.DateTimeField dateTimeField71 = localDateTime67.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.withMonthOfYear(4);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime67.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withMinuteOfHour(28);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = localDateTime77.getFieldType(0);
        int int80 = localDateTime51.indexOf(dateTimeFieldType79);
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType79.getDurationType();
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType79.getRangeDurationType();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 365 + "'", int47 == 365);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertNull(durationFieldType82);
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property24.getMinimumValue();
        boolean boolean29 = property24.isLeap();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        int int59 = dateTimeField44.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property24.getAsText(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology17.withZone(dateTimeZone62);
        java.lang.String str64 = chronology17.toString();
        java.lang.String str65 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField66 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField67 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology17.minuteOfDay();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[UTC]" + "'", str65, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.dayOfWeek();
        int int23 = localDateTime19.getEra();
        int int24 = localDateTime19.getDayOfMonth();
        int int25 = localDateTime19.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime19.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime19.withDurationAdded(readableDuration27, 38);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.lang.String str39 = locale33.getDisplayCountry(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology32, locale33, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology43 = dateTimeParserBucket42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.hours();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) '#', chronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusMonths((int) (short) 10);
        int int48 = localDateTime45.getHourOfDay();
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology54, locale55, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        java.util.Locale locale66 = dateTimeParserBucket64.getLocale();
        boolean boolean68 = dateTimeParserBucket64.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology69 = dateTimeParserBucket64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket64.getZone();
        org.joda.time.Chronology chronology71 = dateTimeParserBucket64.getChronology();
        java.lang.String str72 = chronology71.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.millisOfDay();
        long long77 = chronology71.add((long) 'a', 10L, (int) (short) 0);
        boolean boolean78 = durationFieldType51.isSupported(chronology71);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime45.withFieldAdded(durationFieldType51, 9);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime29.withFieldAdded(durationFieldType51, 366);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType83.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.property(dateTimeFieldType83);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.LocalDateTime localDateTime88 = localDateTime82.withDurationAdded(readableDuration86, 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "weekyears" + "'", str52, "weekyears");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[UTC]" + "'", str72, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 97L + "'", long77 == 97L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        java.util.Locale locale2 = new java.util.Locale("", "ITA");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        boolean boolean9 = localDateTime5.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.era();
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.withDayOfMonth(2);
        org.joda.time.LocalDateTime.Property property15 = localDateTime5.weekyear();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        org.joda.time.DurationField durationField31 = chronology29.years();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.yearOfCentury();
        long long36 = chronology29.add((-1920001L), 117L, (int) '#');
        org.joda.time.Chronology chronology37 = chronology29.withUTC();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        java.util.Locale locale51 = dateTimeParserBucket49.getLocale();
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = locale51.getDisplayLanguage(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 70, chronology29, locale52, (java.lang.Integer) 0);
        int int56 = property15.getMaximumShortTextLength(locale52);
        java.lang.String str57 = locale52.getDisplayLanguage();
        java.lang.String str58 = locale2.getDisplayName(locale52);
        java.lang.String str59 = locale52.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet60 = locale52.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale2.toString(), "_ITA");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1915906L) + "'", long36 == (-1915906L));
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str53, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "giapponese" + "'", str57, "giapponese");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ITA" + "'", str58, "ITA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "giapponese" + "'", str59, "giapponese");
        org.junit.Assert.assertNotNull(strSet60);
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.years();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology14.add(readablePeriod16, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology14.add(readablePeriod22, (long) 'x', 0);
        org.joda.time.DateTimeField dateTimeField26 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        int int33 = property32.getMaximumValueOverall();
        int int34 = property32.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime35 = property32.roundHalfFloorCopy();
        int int36 = property32.getMinimumValue();
        boolean boolean37 = property32.isLeap();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.years();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfHalfday();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology54, locale55, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        java.util.Locale locale66 = dateTimeParserBucket64.getLocale();
        int int67 = dateTimeField52.getMaximumShortTextLength(locale66);
        java.lang.String str68 = property32.getAsText(locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((-5L), chronology14, locale66);
        org.joda.time.DateTimeField dateTimeField70 = chronology14.dayOfWeek();
        java.util.Locale locale72 = new java.util.Locale("69");
        java.lang.String str73 = locale72.getISO3Country();
        boolean boolean74 = locale72.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 86390, chronology14, locale72);
        java.lang.String str76 = locale72.toString();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 28L + "'", long19 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 120L + "'", long25 == 120L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970" + "'", str68, "1970");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals(locale72.toString(), "69");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "69" + "'", str76, "69");
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        int int14 = property13.getMaximumValueOverall();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        int int23 = property22.getMaximumValueOverall();
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        int int26 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minus(readablePeriod29);
        int int31 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        int int32 = localDateTime30.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withYear(292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.year();
        org.joda.time.DurationField durationField51 = chronology49.years();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minus(readablePeriod56);
        boolean boolean58 = dateTimeZone52.isLocalDateTimeGap(localDateTime57);
        org.joda.time.Chronology chronology59 = chronology49.withZone(dateTimeZone52);
        boolean boolean60 = dateTimeFieldType36.isSupported(chronology59);
        boolean boolean61 = localDateTime35.isSupported(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.minuteOfDay();
        org.joda.time.DurationField durationField18 = dateTimeField17.getRangeDurationField();
        long long21 = durationField18.add((long) (byte) -1, (long) 18);
        long long23 = durationField18.getMillis(1971L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1555199999L + "'", long21 == 1555199999L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 170294400000L + "'", long23 == 170294400000L);
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale17.getDisplayCountry(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale17, (java.lang.Integer) 2, 70);
        boolean boolean27 = dateTimeFieldType0.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField28 = chronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology14.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readablePeriod33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withDayOfWeek(2);
        int int38 = localDateTime32.getYear();
        int int39 = localDateTime32.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime32.plus(readablePeriod40);
        java.util.Locale locale44 = new java.util.Locale("\u610f\u5927\u5229", "+70:00");
        java.lang.String str45 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, locale44);
        java.lang.String str46 = locale44.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertEquals(locale44.toString(), "\u610f\u5927\u5229_+70:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "12" + "'", str45, "12");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u610f\u5927\u5229_+70:00" + "'", str46, "\u610f\u5927\u5229_+70:00");
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        dateTimeParserBucket11.setPivotYear((java.lang.Integer) 31);
        dateTimeParserBucket11.setOffset((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket11.saveField(dateTimeFieldType20, 70);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType20.getDurationType();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str32 = locale26.getDisplayCountry(locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale26, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.millisOfDay();
        java.lang.String str40 = chronology36.toString();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField42 = chronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = chronology36.weekyear();
        org.joda.time.DurationField durationField44 = durationFieldType23.getField(chronology36);
        org.joda.time.DateTimeField dateTimeField45 = chronology36.minuteOfDay();
        org.joda.time.DurationField durationField46 = chronology36.weekyears();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology14);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.years();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.hourOfHalfday();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale34.getDisplayCountry(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale34, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        java.util.Locale locale45 = dateTimeParserBucket43.getLocale();
        int int46 = dateTimeField31.getMaximumShortTextLength(locale45);
        java.lang.String str47 = locale45.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale45, (java.lang.Integer) 31, 292278993);
        org.joda.time.DurationField durationField51 = chronology14.weeks();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readablePeriod55);
        int int57 = localDateTime56.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.minusSeconds(1);
        int[] intArray61 = chronology14.get((org.joda.time.ReadablePartial) localDateTime56, 3155760000072L);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = localDateTime56.getFieldTypes();
        org.joda.time.LocalDateTime.Property property63 = localDateTime56.weekyear();
        org.joda.time.LocalDateTime.Property property64 = localDateTime56.weekyear();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 70 + "'", int57 == 70);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[2070, 1, 1, 72]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology12.era();
        org.joda.time.DurationField durationField27 = chronology12.halfdays();
        long long31 = chronology12.add((-61851599999900L), 3600000L, 69);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.yearOfEra();
        int int38 = property37.getMaximumValueOverall();
        int int39 = property37.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfFloorCopy();
        int int41 = property37.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime42 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusDays((int) 'x');
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.minuteOfHour();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.lang.String str55 = locale49.getDisplayCountry(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology48, locale49, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.yearOfEra();
        int int67 = property66.getMaximumValueOverall();
        int int68 = property66.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime69 = property66.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minus(readablePeriod74);
        boolean boolean77 = localDateTime73.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property78 = localDateTime73.era();
        org.joda.time.LocalDateTime.Property property79 = localDateTime73.monthOfYear();
        int int80 = localDateTime69.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        java.util.Locale locale84 = null;
        java.lang.String str85 = locale83.getDisplayVariant(locale84);
        java.util.Locale locale86 = java.util.Locale.GERMAN;
        java.util.Locale locale87 = null;
        java.lang.String str88 = locale86.getDisplayVariant(locale87);
        java.lang.String str89 = locale83.getDisplayCountry(locale86);
        java.lang.String str90 = locale82.getDisplayScript(locale86);
        java.lang.String str91 = dateTimeField60.getAsText((org.joda.time.ReadablePartial) localDateTime73, (int) (short) 0, locale82);
        org.joda.time.LocalDateTime.Property property92 = localDateTime73.hourOfDay();
        int[] intArray93 = localDateTime73.getValues();
        chronology12.validate((org.joda.time.ReadablePartial) localDateTime42, intArray93);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-61851351599900L) + "'", long31 == (-61851351599900L));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0" + "'", str91, "0");
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1970, 1, 1, 1]");
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        int int18 = localDateTime17.getYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.weekOfWeekyear();
        org.joda.time.Chronology chronology20 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfYear();
        java.util.Locale locale25 = new java.util.Locale("1969", "Ora media di Greenwich");
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale25.getDisplayVariant(locale26);
        java.lang.String str29 = locale26.getDisplayLanguage();
        java.lang.String str30 = dateTimeField21.getAsText(8064000080L, locale26);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale25.toString(), "1969_ORA MEDIA DI GREENWICH");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "francese" + "'", str29, "francese");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "94" + "'", str30, "94");
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.dayOfWeek();
        int int24 = localDateTime20.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        int int43 = property30.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfCentury((int) ' ');
        int int47 = localDateTime46.size();
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.hours();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) '#', chronology62);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale68.getDisplayCountry(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology67, locale68, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.hours();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) '#', chronology78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusMonths((int) (short) 10);
        boolean boolean83 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.DateTime dateTime84 = localDateTime80.toDateTime();
        int int85 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime84.getZone();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone86);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.LocalDateTime localDateTime89 = localDateTime20.plus(readableDuration88);
        org.joda.time.LocalDateTime.Property property90 = localDateTime89.year();
        int int91 = property90.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        long long16 = dateTimeField13.set((long) '4', (int) (short) 0);
        long long18 = dateTimeField13.roundFloor((long) (byte) 0);
        long long21 = dateTimeField13.set((-62167219199948L), "10");
        long long23 = dateTimeField13.roundCeiling(2208988800120L);
        long long26 = dateTimeField13.set((long) ' ', "10");
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = locale29.getDisplayCountry(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale29, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.years();
        org.joda.time.DurationField durationField41 = chronology39.minutes();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology39);
        int int43 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        int int44 = localDateTime42.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime42);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfMonth();
        int int47 = property46.getMinimumValue();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62167219199948L) + "'", long16 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61851599999948L) + "'", long21 == (-61851599999948L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2240611200000L + "'", long23 == 2240611200000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61851599999968L) + "'", long26 == (-61851599999968L));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("32");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 8);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfDay();
        java.lang.String str21 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.millisOfDay();
        org.joda.time.DurationField durationField23 = durationFieldType2.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField24 = chronology17.year();
        java.lang.String str26 = dateTimeField24.getAsText((-52254701584320004L));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1653916" + "'", str26, "-1653916");
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime15.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMonthOfYear(4);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        int int29 = property28.getMaximumValueOverall();
        int int30 = property28.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime31 = property28.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.yearOfEra();
        int int38 = property37.getMaximumValueOverall();
        int int39 = property37.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfFloorCopy();
        int int41 = property28.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = localDateTime43.getFields();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withWeekyear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.dayOfYear();
        int int50 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        java.util.Date date51 = localDateTime21.toDate();
        int int52 = localDateTime21.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minus(readablePeriod56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.yearOfEra();
        int int59 = property58.getMaximumValueOverall();
        int int60 = property58.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime61 = property58.roundHalfFloorCopy();
        int int62 = property58.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime63 = property58.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusDays(14);
        int int67 = localDateTime63.getYear();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.withMillisOfDay(10);
        boolean boolean70 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime69);
        int int71 = localDateTime69.getYearOfEra();
        int int72 = localDateTime69.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.withMinuteOfHour(0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Wed Apr 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 292278993 + "'", int59 == 292278993);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1971 + "'", int67 == 1971);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1971 + "'", int71 == 1971);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(localDateTime74);
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.lang.String str15 = locale9.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology8, locale9, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        java.util.Locale locale20 = dateTimeParserBucket18.getLocale();
        boolean boolean22 = dateTimeParserBucket18.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology23 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.DurationField durationField25 = dateTimeField24.getDurationField();
        org.joda.time.DurationFieldType durationFieldType26 = durationField25.getType();
        java.lang.String str27 = durationFieldType26.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readablePeriod31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfEra();
        int int34 = property33.getMaximumValueOverall();
        int int35 = property33.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime36 = property33.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readablePeriod40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.yearOfEra();
        int int43 = property42.getMaximumValueOverall();
        int int44 = property42.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime45 = property42.roundHalfFloorCopy();
        int int46 = property33.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean48 = localDateTime45.isSupported(dateTimeFieldType47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.withPeriodAdded(readablePeriod49, (int) 'a');
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusMonths(31);
        org.joda.time.Chronology chronology54 = localDateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DurationField durationField56 = durationFieldType26.getField(chronology54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(2038, 1972, 0, 70, 198, 27083754, 0, chronology54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hours" + "'", str27, "hours");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        long long16 = dateTimeField13.set((long) '4', (int) (short) 0);
        long long18 = dateTimeField13.roundFloor((long) (byte) 0);
        long long21 = dateTimeField13.set((-62167219199948L), "10");
        int int23 = dateTimeField13.getLeapAmount(978307200000L);
        int int24 = dateTimeField13.getMinimumValue();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62167219199948L) + "'", long16 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61851599999948L) + "'", long21 == (-61851599999948L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        dateTimeParserBucket11.saveField(dateTimeFieldType13, "", locale15);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        dateTimeParserBucket34.saveField(dateTimeFieldType36, "", locale38);
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        dateTimeParserBucket11.saveField(dateTimeFieldType36, "yearOfEra", locale47);
        java.util.Locale locale49 = dateTimeParserBucket11.getLocale();
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        boolean boolean57 = strSet50.remove((java.lang.Object) property56);
        org.joda.time.LocalDateTime localDateTime58 = property56.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withDayOfWeek(5601);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5601 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology12.getZone();
        java.lang.String str17 = chronology12.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int4 = timeZone0.getOffset((-5L));
        java.time.ZoneId zoneId5 = timeZone0.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.lang.String str15 = locale9.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology8, locale9, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.year();
        org.joda.time.ReadablePartial readablePartial21 = null;
        int int22 = dateTimeField20.getMaximumValue(readablePartial21);
        long long25 = dateTimeField20.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField26 = dateTimeField20.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        int int33 = property32.getMaximumValueOverall();
        int int34 = property32.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime35 = property32.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.yearOfEra();
        int int42 = property41.getMaximumValueOverall();
        int int43 = property41.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime44 = property41.roundHalfFloorCopy();
        int int45 = property32.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withMinuteOfHour((int) ' ');
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, (-1), locale49);
        java.util.Date date51 = localDateTime47.toDate();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.fromDateFields(date51);
        boolean boolean53 = timeZone6.inDaylightTime(date51);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1" + "'", str50, "-1");
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Thu Jan 01 00:32:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField24 = chronology12.weeks();
        int int26 = durationField24.getValue((-62198755198031L));
        boolean boolean27 = durationField24.isSupported();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-102841) + "'", int26 == (-102841));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property24.getMinimumValue();
        boolean boolean29 = property24.isLeap();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        int int59 = dateTimeField44.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property24.getAsText(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology17.withZone(dateTimeZone62);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = null;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = null;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        java.lang.String str72 = locale66.getDisplayCountry(locale69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology65, locale66, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology76 = dateTimeParserBucket75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.year();
        org.joda.time.DurationField durationField78 = chronology76.years();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minus(readablePeriod83);
        boolean boolean85 = dateTimeZone79.isLocalDateTimeGap(localDateTime84);
        org.joda.time.Chronology chronology86 = chronology76.withZone(dateTimeZone79);
        java.lang.String str87 = dateTimeZone79.getID();
        org.joda.time.Chronology chronology88 = chronology63.withZone(dateTimeZone79);
        org.joda.time.DateTimeField dateTimeField89 = chronology88.secondOfDay();
        org.joda.time.DurationField durationField90 = chronology88.weeks();
        long long91 = durationField90.getUnitMillis();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "UTC" + "'", str87, "UTC");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 604800000L + "'", long91 == 604800000L);
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        boolean boolean6 = localDateTime2.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.era();
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.plusWeeks(19);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        int int18 = property17.getMaximumValueOverall();
        int int19 = property17.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        int int27 = property26.getMaximumValueOverall();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        int int30 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        int int33 = property17.getMaximumTextLength(locale31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property17.getFieldType();
        int int35 = localDateTime11.get(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology37, locale38, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        dateTimeParserBucket47.saveField(dateTimeFieldType49, "", locale51);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.weekyear();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType34.getField(chronology59);
        org.joda.time.DurationField durationField62 = chronology59.millis();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField64 = chronology59.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.lang.String str17 = locale11.getDisplayCountry(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale11, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType7.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfWeek();
        org.joda.time.DurationField durationField26 = chronology21.weeks();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology21);
        java.util.Date date28 = localDateTime27.toDate();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = property34.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime36 = property34.roundFloorCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = localDateTime36.getFields();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readablePeriod42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.yearOfEra();
        int int45 = property44.getMaximumValueOverall();
        int int46 = property44.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime47 = property44.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfEra();
        int int54 = property53.getMaximumValueOverall();
        int int55 = property53.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime56 = property53.roundHalfFloorCopy();
        int int57 = property44.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = localDateTime59.getFields();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withMillisOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean64 = localDateTime59.isSupported(dateTimeFieldType63);
        boolean boolean65 = dateTime38.isSupported(dateTimeFieldType63);
        boolean boolean66 = localDateTime27.isSupported(dateTimeFieldType63);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 53);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.dayOfYear();
        int int70 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Feb 22 07:33:50 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        int int14 = dateTimeParserBucket12.getOffset();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket12.getChronology();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale17);
        java.util.Locale locale19 = locale17.stripExtensions();
        java.util.Locale.Builder builder20 = builder16.setLocale(locale19);
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("120");
        java.util.Locale.Builder builder23 = builder20.clearExtensions();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = locale24.getDisplayLanguage(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((-165888086399988L), chronology15, locale26, (java.lang.Integer) 99);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.monthOfYear();
        org.joda.time.DurationField durationField31 = chronology15.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology15.millisOfSecond();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japanisch" + "'", str27, "Japanisch");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        java.lang.String str14 = locale13.getScript();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property21.getFieldType();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str32 = locale26.getDisplayCountry(locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale26, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType23.getField(chronology36);
        org.joda.time.DurationField durationField40 = chronology36.years();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.weekyear();
        boolean boolean42 = strSet15.contains((java.lang.Object) chronology36);
        java.util.Spliterator<java.lang.String> strSpliterator43 = strSet15.spliterator();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSpliterator43);
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        dateTimeParserBucket11.saveField(dateTimeFieldType17, (int) (byte) -1);
        java.lang.Object obj21 = dateTimeParserBucket11.saveState();
        java.lang.Integer int22 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property28.getFieldType();
        java.lang.String str31 = property28.toString();
        org.joda.time.LocalDateTime localDateTime33 = property28.addToCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean35 = localDateTime33.isSupported(dateTimeFieldType34);
        dateTimeParserBucket11.saveField(dateTimeFieldType34, (-330960));
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType34.getRangeDurationType();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        java.util.Locale locale52 = dateTimeParserBucket50.getLocale();
        java.lang.String str53 = locale52.getScript();
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minus(readablePeriod58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.yearOfEra();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property60.getFieldType();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = null;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale65.getDisplayCountry(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology64, locale65, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.millisOfDay();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType62.getField(chronology75);
        org.joda.time.DurationField durationField79 = chronology75.years();
        org.joda.time.DateTimeField dateTimeField80 = chronology75.weekyear();
        boolean boolean81 = strSet54.contains((java.lang.Object) chronology75);
        boolean boolean82 = durationFieldType38.isSupported(chronology75);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[yearOfEra]" + "'", str31, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) '#');
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        org.joda.time.LocalDateTime localDateTime13 = property8.roundHalfEvenCopy();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale16, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DurationField durationField28 = chronology26.years();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readablePeriod33);
        boolean boolean35 = dateTimeZone29.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology36 = chronology26.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField37 = chronology26.dayOfMonth();
        boolean boolean38 = dateTimeField37.isLenient();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readablePeriod42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.yearOfEra();
        int int45 = property44.getMaximumValueOverall();
        int int46 = property44.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime47 = property44.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfEra();
        int int54 = property53.getMaximumValueOverall();
        int int55 = property53.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime56 = property53.roundHalfFloorCopy();
        int int57 = property44.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYearOfCentury((int) ' ');
        int int61 = localDateTime60.size();
        int int62 = dateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withWeekyear(1);
        int int65 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.minusMinutes(36000000);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minus(readablePeriod71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.yearOfEra();
        org.joda.time.LocalDateTime localDateTime74 = property73.roundFloorCopy();
        int int75 = localDateTime74.getWeekyear();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.withWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withDayOfYear((int) ' ');
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.monthOfYear();
        org.joda.time.LocalDateTime localDateTime81 = property80.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plusMillis(14);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType84.getDurationType();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType84.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType84.getRangeDurationType();
        java.lang.String str88 = dateTimeFieldType84.getName();
        int int89 = localDateTime83.get(dateTimeFieldType84);
        int int90 = localDateTime67.indexOf(dateTimeFieldType84);
        org.joda.time.DateTime dateTime91 = localDateTime67.toDateTime();
        org.joda.time.Instant instant92 = dateTime91.toInstant();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 31 + "'", int62 == 31);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNull(durationFieldType86);
        org.junit.Assert.assertNull(durationFieldType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "era" + "'", str88, "era");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(instant92);
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        java.lang.String str18 = localDateTime16.toString("1969");
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale21, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.years();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readablePeriod38);
        boolean boolean40 = dateTimeZone34.isLocalDateTimeGap(localDateTime39);
        org.joda.time.Chronology chronology41 = chronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        boolean boolean49 = localDateTime45.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property50 = localDateTime45.era();
        org.joda.time.LocalDateTime.Property property51 = localDateTime45.monthOfYear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime45.withDayOfMonth(2);
        int[] intArray56 = chronology41.get((org.joda.time.ReadablePartial) localDateTime45, (long) 9);
        int int57 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime16, intArray56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime16.withYear(23);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.yearOfEra();
        org.joda.time.LocalDateTime localDateTime67 = property66.roundFloorCopy();
        int int68 = localDateTime67.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property69 = localDateTime67.yearOfEra();
        org.joda.time.LocalDateTime localDateTime71 = property69.setCopy((int) '#');
        org.joda.time.DurationField durationField72 = property69.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField73 = property69.getField();
        org.joda.time.LocalDateTime localDateTime74 = property69.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plus(readableDuration75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withYearOfCentury(60);
        boolean boolean79 = localDateTime16.isEqual((org.joda.time.ReadablePartial) localDateTime74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime81 = localDateTime16.withDayOfWeek(24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969" + "'", str18, "1969");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 9]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfCentury((int) ' ');
        int int22 = localDateTime21.size();
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime();
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        int int43 = property30.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray46 = localDateTime45.getFields();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean50 = localDateTime45.isSupported(dateTimeFieldType49);
        int int51 = dateTime23.get(dateTimeFieldType49);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology53, locale54, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology64 = dateTimeParserBucket63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.year();
        org.joda.time.DurationField durationField66 = chronology64.years();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minus(readablePeriod71);
        boolean boolean73 = dateTimeZone67.isLocalDateTimeGap(localDateTime72);
        org.joda.time.Chronology chronology74 = chronology64.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.halfdayOfDay();
        org.joda.time.DurationField durationField77 = chronology74.seconds();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.weekyear();
        org.joda.time.DateTimeField dateTimeField79 = chronology74.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType49.getField(chronology74);
        org.joda.time.DurationField durationField81 = chronology74.weeks();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(chronology74);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1932-01-01T00:00:00.000Z" + "'", str24, "1932-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldArray46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 19 + "'", int51 == 19);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        int int22 = localDateTime21.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusDays((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis(3);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMinutes(19);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusDays((-35));
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.lang.String str41 = locale35.getDisplayCountry(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale35, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.years();
        org.joda.time.DurationField durationField47 = chronology45.years();
        org.joda.time.DurationField durationField48 = chronology45.months();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.secondOfMinute();
        boolean boolean50 = localDateTime32.equals((java.lang.Object) chronology45);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.monthOfYear();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 28 + "'", int22 == 28);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray13 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList14, filteringMode16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        dateTimeParserBucket37.saveField(dateTimeFieldType39, "", locale41);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology50, locale51, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = null;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = null;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.lang.String str70 = locale64.getDisplayCountry(locale67);
        dateTimeParserBucket60.saveField(dateTimeFieldType62, "", locale64);
        java.util.Locale locale73 = java.util.Locale.JAPAN;
        dateTimeParserBucket37.saveField(dateTimeFieldType62, "yearOfEra", locale73);
        java.util.Locale locale75 = dateTimeParserBucket37.getLocale();
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minus(readablePeriod80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.yearOfEra();
        boolean boolean83 = strSet76.remove((java.lang.Object) property82);
        java.lang.Object[] objArray84 = strSet76.toArray();
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strSet76, filteringMode85);
        boolean boolean88 = strSet76.contains((java.lang.Object) "50");
        int int89 = strSet76.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.year();
        org.joda.time.Chronology chronology19 = chronology16.withUTC();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = chronology16.add(readablePeriod20, (-61851599999948L), 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long30 = dateTimeZone26.convertLocalToUTC(220752000000L, false, 9L);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.monthOfYear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.weekyear();
        int[] intArray35 = chronology16.get((org.joda.time.ReadablePartial) localDateTime31, (-62198236799903L));
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long41 = dateTimeZone37.convertLocalToUTC(220752000000L, false, 9L);
        long long43 = dateTimeZone37.previousTransition((long) 1199232000);
        org.joda.time.Chronology chronology44 = chronology16.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField45 = chronology16.halfdayOfDay();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61851599999948L) + "'", long23 == (-61851599999948L));
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 220752000000L + "'", long30 == 220752000000L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 7, 97]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 220752000000L + "'", long41 == 220752000000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1199232000L + "'", long43 == 1199232000L);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = durationFieldType1.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        dateTimeParserBucket28.saveField(dateTimeFieldType30, "", locale32);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.seconds();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.clockhourOfDay();
        org.joda.time.DurationField durationField45 = chronology40.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((java.lang.Object) chronology14, chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology19.add(readablePeriod22, 0L, 53);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType0.getField(chronology19);
        boolean boolean27 = dateTimeField26.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.yearOfEra();
        int int9 = property8.getLeapAmount();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        int int11 = property8.getLeapAmount();
        boolean boolean12 = property8.isLeap();
        org.joda.time.tz.NameProvider nameProvider14 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        java.lang.String str24 = nameProvider14.getShortName(locale15, "", "hi!");
        java.util.Locale locale28 = new java.util.Locale("Ora media di Greenwich", "DurationField[years]", "cinese (Cina)");
        java.lang.String str31 = nameProvider14.getName(locale28, "", "dayOfWeek");
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        boolean boolean38 = localDateTime34.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property39 = localDateTime34.era();
        org.joda.time.LocalDateTime.Property property40 = localDateTime34.monthOfYear();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.lang.String str50 = locale44.getDisplayCountry(locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology43, locale44, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        java.util.Locale locale55 = dateTimeParserBucket53.getLocale();
        boolean boolean57 = dateTimeParserBucket53.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology58 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.year();
        java.util.Locale locale64 = new java.util.Locale("italiano", "1970-01-01T00:00:00.000", "1");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((-31449599990L), chronology58, locale64);
        java.util.Locale.Category category66 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale67 = java.util.Locale.getDefault(category66);
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale69);
        java.util.Locale locale71 = locale69.stripExtensions();
        java.util.Locale.Builder builder72 = builder68.setLocale(locale71);
        java.util.Locale locale73 = builder72.build();
        java.util.Locale.setDefault(category66, locale73);
        java.util.Locale locale75 = java.util.Locale.getDefault(category66);
        java.lang.String str76 = locale64.getDisplayScript(locale75);
        int int77 = property40.getMaximumShortTextLength(locale75);
        java.lang.String str80 = nameProvider14.getName(locale75, "giapponese", "francese (Canada)");
        java.lang.String str82 = locale75.getExtension('u');
        java.lang.String str83 = locale75.getLanguage();
        org.joda.time.LocalDateTime localDateTime84 = property8.setCopy("18993", locale75);
        java.lang.String str85 = locale75.getCountry();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nameProvider14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals(locale28.toString(), "ora media di greenwich_DURATIONFIELD[YEARS]_cinese (Cina)");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals(locale64.toString(), "italiano_1970-01-01T00:00:00.000_1");
        org.junit.Assert.assertTrue("'" + category66 + "' != '" + java.util.Locale.Category.FORMAT + "'", category66.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "it" + "'", str83, "it");
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "IT" + "'", str85, "IT");
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property5.getFieldType();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.lang.String str17 = locale11.getDisplayCountry(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale11, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        java.util.Locale locale22 = dateTimeParserBucket20.getLocale();
        boolean boolean24 = dateTimeParserBucket20.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology25 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket20.getChronology();
        java.lang.String str28 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.millisOfDay();
        long long33 = chronology27.add((long) 'a', 10L, (int) (short) 0);
        java.lang.String str34 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((-3652));
        org.joda.time.Chronology chronology38 = chronology27.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = chronology27.millisOfSecond();
        boolean boolean40 = dateTimeFieldType8.isSupported(chronology27);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale43.getDisplayCountry(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology42, locale43, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology53 = dateTimeParserBucket52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.year();
        org.joda.time.DurationField durationField55 = chronology53.years();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.yearOfCentury();
        long long60 = chronology53.add((-1920001L), 117L, (int) '#');
        org.joda.time.DateTimeField dateTimeField61 = chronology53.monthOfYear();
        long long65 = chronology53.add(32L, (long) (byte) 100, 0);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        long long69 = chronology53.add(readablePeriod66, 3155760000072L, 20);
        org.joda.time.DurationField durationField70 = chronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType8.getField(chronology53);
        org.joda.time.DateTimeField dateTimeField72 = chronology53.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 97L + "'", long33 == 97L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1915906L) + "'", long60 == (-1915906L));
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 32L + "'", long65 == 32L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3155760000072L + "'", long69 == 3155760000072L);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfHour();
        long long17 = dateTimeField14.getDifferenceAsLong(10L, 883612800035L);
        int int18 = dateTimeField14.getMinimumValue();
        long long21 = dateTimeField14.addWrapField(82800000L, 1970);
        int int23 = dateTimeField14.get((long) 2922789);
        java.lang.String str25 = dateTimeField14.getAsShortText(662695997183400000L);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = locale29.getDisplayCountry(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale29, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.year();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfDay();
        java.lang.String str43 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology39.getZone();
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getDisplayCountry();
        java.lang.String str49 = locale46.getDisplayCountry(locale47);
        java.util.Set<java.lang.Character> charSet50 = locale47.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((-1959L), chronology39, locale47, (java.lang.Integer) 86399100, 25);
        int int54 = dateTimeField14.getMaximumShortTextLength(locale47);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-14726880L) + "'", long17 == (-14726880L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 85800000L + "'", long21 == 85800000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 48 + "'", int23 == 48);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "50" + "'", str25, "50");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Canada" + "'", str49, "Canada");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        boolean boolean19 = durationFieldType4.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType2.getField(chronology17);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21, (java.lang.Integer) 1970);
        java.util.Locale locale24 = dateTimeParserBucket23.getLocale();
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.lang.String str26 = locale24.getDisplayScript();
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale30.getDisplayCountry(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale30, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        java.util.Locale locale41 = dateTimeParserBucket39.getLocale();
        java.lang.String str42 = locale41.toLanguageTag();
        java.util.Locale.setDefault(category27, locale41);
        java.util.Locale locale44 = java.util.Locale.getDefault(category27);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        boolean boolean60 = dateTimeParserBucket56.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology61 = dateTimeParserBucket56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket56.getZone();
        org.joda.time.Chronology chronology63 = dateTimeParserBucket56.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.minuteOfHour();
        org.joda.time.DurationField durationField65 = chronology63.seconds();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.yearOfEra();
        long long68 = dateTimeField66.roundHalfEven(117L);
        long long70 = dateTimeField66.remainder((long) (-292275054));
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.util.Locale locale73 = null;
        java.lang.String str74 = locale72.getDisplayVariant(locale73);
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = null;
        java.lang.String str77 = locale75.getDisplayVariant(locale76);
        java.lang.String str78 = locale72.getDisplayCountry(locale75);
        java.lang.String str79 = locale71.getDisplayScript(locale75);
        int int80 = dateTimeField66.getMaximumTextLength(locale75);
        java.util.Locale.setDefault(category27, locale75);
        java.lang.String str82 = locale24.getDisplayLanguage(locale75);
        java.lang.String str83 = locale75.getISO3Country();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.FORMAT + "'", category27.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "de" + "'", str42, "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 31243724946L + "'", long70 == 31243724946L);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Franz\366sisch" + "'", str82, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        java.util.Locale locale2 = new java.util.Locale("10", "DurationField[years]");
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.DurationField durationField17 = chronology15.years();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        boolean boolean24 = dateTimeZone18.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology25 = chronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekyear();
        long long31 = dateTimeField28.addWrapField(292275054L, (-705282));
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minus(readablePeriod36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfEra();
        int int39 = property38.getMaximumValueOverall();
        int int40 = property38.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime41 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime42 = property38.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime43 = property38.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime44 = property38.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = property38.roundHalfFloorCopy();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.lang.String str55 = locale49.getDisplayCountry(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology48, locale49, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.year();
        org.joda.time.DurationField durationField61 = chronology59.years();
        org.joda.time.DateTimeField dateTimeField62 = chronology59.yearOfCentury();
        long long66 = chronology59.add((-1920001L), 117L, (int) '#');
        org.joda.time.Chronology chronology67 = chronology59.withUTC();
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = null;
        java.lang.String str75 = locale73.getDisplayVariant(locale74);
        java.lang.String str76 = locale70.getDisplayCountry(locale73);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology69, locale70, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology80 = dateTimeParserBucket79.getChronology();
        java.util.Locale locale81 = dateTimeParserBucket79.getLocale();
        java.util.Locale locale82 = java.util.Locale.JAPANESE;
        java.lang.String str83 = locale81.getDisplayLanguage(locale82);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) 70, chronology59, locale82, (java.lang.Integer) 0);
        int int86 = property38.getMaximumTextLength(locale82);
        java.lang.String str87 = locale82.getLanguage();
        java.lang.String str88 = dateTimeField28.getAsShortText(23, locale82);
        java.util.Locale locale91 = java.util.Locale.forLanguageTag("HI!");
        java.lang.String str92 = locale91.getDisplayLanguage();
        java.lang.String str93 = dateTimeField28.getAsText((-2004), locale91);
        java.lang.String str94 = locale2.getDisplayCountry(locale91);
        java.lang.String str95 = locale91.toLanguageTag();
        java.lang.String str96 = locale91.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-22256549592524946L) + "'", long31 == (-22256549592524946L));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1915906L) + "'", long66 == (-1915906L));
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str83, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ja" + "'", str87, "ja");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "23" + "'", str88, "23");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "-2004" + "'", str93, "-2004");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "DURATIONFIELD[YEARS]" + "'", str94, "DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "und" + "'", str95, "und");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray13 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList14, filteringMode16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList25, strMap26);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags(languageRangeList27, strCollection28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfDay();
        java.lang.String str46 = chronology42.toString();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField48 = chronology42.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) strList29, chronology42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField24 = durationFieldType0.getField(chronology23);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology38);
        org.joda.time.DurationField durationField41 = chronology38.days();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(chronology38);
        long long46 = chronology38.add((-2726520305608080000L), 1970L, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField47 = chronology38.era();
        boolean boolean48 = durationFieldType0.isSupported(chronology38);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology50, locale51, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.year();
        org.joda.time.DurationField durationField63 = chronology61.years();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minus(readablePeriod68);
        boolean boolean70 = dateTimeZone64.isLocalDateTimeGap(localDateTime69);
        org.joda.time.Chronology chronology71 = chronology61.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField72 = chronology61.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone74);
        long long77 = chronology61.set((org.joda.time.ReadablePartial) localDateTime75, (long) 59);
        org.joda.time.DurationField durationField78 = chronology61.halfdays();
        org.joda.time.DurationField durationField79 = chronology61.seconds();
        org.joda.time.DateTimeField dateTimeField80 = chronology61.clockhourOfDay();
        boolean boolean81 = durationFieldType0.isSupported(chronology61);
        org.joda.time.DurationField durationField82 = chronology61.millis();
        org.joda.time.Chronology chronology83 = chronology61.withUTC();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-2726520305608081970L) + "'", long46 == (-2726520305608081970L));
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(79);
        org.joda.time.Chronology chronology18 = chronology12.withZone(dateTimeZone17);
        org.joda.time.Chronology chronology19 = chronology12.withUTC();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime15.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMonthOfYear(4);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withSecondOfMinute((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readablePeriod27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        int int30 = property29.getMaximumValueOverall();
        int int31 = property29.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minus(readablePeriod36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfEra();
        int int39 = property38.getMaximumValueOverall();
        int int40 = property38.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime41 = property38.roundHalfFloorCopy();
        int int42 = property29.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        boolean boolean44 = locale43.hasExtensions();
        int int45 = property29.getMaximumTextLength(locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property29.getFieldType();
        int int47 = localDateTime23.indexOf(dateTimeFieldType46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime23.withPeriodAdded(readablePeriod48, 365);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusSeconds(18);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withYearOfEra(53);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 292278993 + "'", int30 == 292278993);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        long long17 = dateTimeField14.add((-525600L), 0L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundFloorCopy();
        int int26 = localDateTime25.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        java.lang.String str29 = property27.getAsText();
        int int30 = property27.get();
        java.util.Locale locale35 = new java.util.Locale("Englisch", "italien (Italie)", "69");
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str40 = nameProvider36.getName(locale37, "1", "Ora media di Greenwich");
        java.lang.String str41 = locale35.getDisplayScript(locale37);
        org.joda.time.LocalDateTime localDateTime42 = property27.setCopy("3", locale37);
        java.lang.String str43 = locale37.getDisplayName();
        java.lang.String str44 = dateTimeField14.getAsShortText((-26L), locale37);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.yearOfEra();
        int int52 = property51.getMaximumValueOverall();
        int int53 = property51.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minus(readablePeriod58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.yearOfEra();
        int int61 = property60.getMaximumValueOverall();
        int int62 = property60.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime63 = property60.roundHalfFloorCopy();
        int int64 = property51.compareTo((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.minus(readablePeriod67);
        org.joda.time.Chronology chronology69 = localDateTime68.getChronology();
        java.util.Locale locale72 = new java.util.Locale("10 (DURATIONFIELD[YEARS])", "\u7fa9\u5927\u5229");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 60264, chronology69, locale72, (java.lang.Integer) 2922750, (-2004));
        java.util.Locale locale76 = locale72.stripExtensions();
        java.util.Locale locale77 = locale76.stripExtensions();
        java.lang.String str78 = locale37.getDisplayName(locale77);
        boolean boolean79 = locale37.hasExtensions();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-525600L) + "'", long17 == (-525600L));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals(locale35.toString(), "englisch_ITALIEN (ITALIE)_69");
        org.junit.Assert.assertNotNull(nameProvider36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (Taiwan)" + "'", str43, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "31" + "'", str44, "31");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 292278993 + "'", int61 == 292278993);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(chronology69);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "\u7fa9\u5927\u5229");
        org.junit.Assert.assertNotNull(locale76);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "\u7fa9\u5927\u5229");
        org.junit.Assert.assertNotNull(locale77);
// flaky:         org.junit.Assert.assertEquals(locale77.toString(), "\u7fa9\u5927\u5229");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Chinese (Taiwan)" + "'", str78, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        int int14 = property13.getMaximumValueOverall();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        int int23 = property22.getMaximumValueOverall();
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        int int26 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minus(readablePeriod29);
        int int31 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        boolean boolean33 = localDateTime30.equals((java.lang.Object) 'u');
        int int34 = localDateTime30.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str37 = dateTimeZone35.getNameKey((long) 10);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.year();
        org.joda.time.DurationField durationField52 = chronology50.years();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minus(readablePeriod57);
        boolean boolean59 = dateTimeZone53.isLocalDateTimeGap(localDateTime58);
        org.joda.time.Chronology chronology60 = chronology50.withZone(dateTimeZone53);
        long long62 = dateTimeZone35.getMillisKeepLocal(dateTimeZone53, (long) (short) 0);
        long long64 = dateTimeZone53.nextTransition(52L);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusYears((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime71 = localDateTime66.withMinuteOfHour(6574);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6574 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 52L + "'", long64 == 52L);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getDurationType();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        boolean boolean17 = durationFieldType2.isSupported(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology15);
        org.joda.time.DurationField durationField21 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.millisOfSecond();
        org.joda.time.DurationField durationField23 = chronology15.hours();
        long long27 = chronology15.add((-62040990715906L), (-1645513309L), (-3652));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-56031576111438L) + "'", long27 == (-56031576111438L));
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.millis();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfMinute();
        java.lang.String str17 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundFloorCopy();
        int int27 = localDateTime26.getWeekyear();
        int int28 = localDateTime26.getEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withYearOfEra(70);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(19, 4);
        int int37 = dateTimeZone35.getStandardOffset((long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.year();
        org.joda.time.DurationField durationField53 = chronology51.years();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minus(readablePeriod58);
        boolean boolean60 = dateTimeZone54.isLocalDateTimeGap(localDateTime59);
        org.joda.time.Chronology chronology61 = chronology51.withZone(dateTimeZone54);
        boolean boolean62 = dateTimeFieldType38.isSupported(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology61);
        boolean boolean65 = dateTimeZone35.equals((java.lang.Object) chronology61);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.yearOfEra();
        int int72 = property71.getMaximumValueOverall();
        int int73 = property71.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime74 = property71.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minus(readablePeriod78);
        org.joda.time.LocalDateTime.Property property80 = localDateTime77.yearOfEra();
        int int81 = property80.getMaximumValueOverall();
        int int82 = property80.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime83 = property80.roundHalfFloorCopy();
        int int84 = property71.compareTo((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime83);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withYearOfCentury((int) ' ');
        int int88 = localDateTime85.getYearOfEra();
        org.joda.time.DateTime dateTime89 = localDateTime85.toDateTime();
        int[] intArray91 = chronology61.get((org.joda.time.ReadablePartial) localDateTime85, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = dateTimeField19.set((org.joda.time.ReadablePartial) localDateTime30, 582, intArray91, (-2861952));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2861952 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 68640000 + "'", int37 == 68640000);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 292278993 + "'", int72 == 292278993);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 292278993 + "'", int81 == 292278993);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1970, 1, 1, 0]");
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMillis(19);
        int int21 = localDateTime20.getYearOfEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime20.getFields();
        org.joda.time.Chronology chronology23 = localDateTime20.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = chronology23.getDateTimeMillis(385, 1920001, 0, 35, (int) (short) 10, (-23068799), (-292275018));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property24.getMinimumValue();
        boolean boolean29 = property24.isLeap();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        int int59 = dateTimeField44.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property24.getAsText(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology17.withZone(dateTimeZone62);
        java.lang.String str64 = chronology17.toString();
        org.joda.time.DurationField durationField65 = chronology17.years();
        int int67 = durationField65.getValue(0L);
        long long68 = durationField65.getUnitMillis();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 31556952000L + "'", long68 == 31556952000L);
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology5, locale6, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        boolean boolean18 = durationFieldType3.isSupported(chronology16);
        org.joda.time.DurationField durationField19 = durationFieldType1.getField(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology16.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property24.getMinimumValue();
        boolean boolean29 = property24.isLeap();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        int int59 = dateTimeField44.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property24.getAsText(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale58);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = null;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = null;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.lang.String str70 = locale64.getDisplayCountry(locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology63, locale64, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology74 = dateTimeParserBucket73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.year();
        org.joda.time.DurationField durationField76 = chronology74.years();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minus(readablePeriod81);
        boolean boolean83 = dateTimeZone77.isLocalDateTimeGap(localDateTime82);
        org.joda.time.Chronology chronology84 = chronology74.withZone(dateTimeZone77);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone77);
        java.util.TimeZone timeZone86 = dateTimeZone77.toTimeZone();
        dateTimeParserBucket61.setZone(dateTimeZone77);
        java.util.Locale locale88 = dateTimeParserBucket61.getLocale();
        long long91 = dateTimeParserBucket61.computeMillis(false, "GMT");
        long long94 = dateTimeParserBucket61.computeMillis(true, "10 (DURATIONFIELD[YEARS])");
        java.util.Locale locale95 = dateTimeParserBucket61.getLocale();
        dateTimeParserBucket61.setOffset((java.lang.Integer) 3287);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(timeZone86);
        org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1L + "'", long91 == 1L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1L + "'", long94 == 1L);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "de");
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.hours();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#', chronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays(0);
        int int29 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plusDays(35999947);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusMonths((int) (byte) -1);
        int int45 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.yearOfEra();
        int int52 = property51.getMaximumValueOverall();
        int int53 = property51.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minus(readablePeriod62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.yearOfEra();
        org.joda.time.LocalDateTime localDateTime65 = property64.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property64.getFieldType();
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = null;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.util.Locale locale73 = null;
        java.lang.String str74 = locale72.getDisplayVariant(locale73);
        java.lang.String str75 = locale69.getDisplayCountry(locale72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology68, locale69, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology79 = dateTimeParserBucket78.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.millisOfDay();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType66.getField(chronology79);
        int int83 = localDateTime58.get(dateTimeFieldType66);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime58.withWeekyear(70);
        int int86 = localDateTime85.getMinuteOfHour();
        int int87 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime26.withMillisOfSecond(21);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 32 + "'", int83 == 32);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DurationField durationField15 = chronology12.years();
        long long18 = durationField15.getValueAsLong((-7524857663999999L), 17180999L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-238453L) + "'", long18 == (-238453L));
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DurationField durationField15 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField20 = dateTimeField19.getRangeDurationField();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        java.lang.String str43 = locale35.getDisplayScript(locale39);
        java.lang.String str44 = locale35.getDisplayCountry();
        java.lang.String str45 = localDateTime16.toString("-1", locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = localDateTime16.isSupported(dateTimeFieldType46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime16.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime49 = property48.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMinuteOfHour(22461);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22461 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italia" + "'", str44, "Italia");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone16);
        boolean boolean24 = dateTimeFieldType0.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.DateTimeField dateTimeField32 = chronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime12 = property9.addToCopy((int) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale16, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '#', chronology26);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '#', chronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusMonths((int) (short) 10);
        boolean boolean47 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime();
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime50 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        int int51 = property5.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime50.getZone();
        org.joda.time.Instant instant53 = dateTime50.toInstant();
        org.joda.time.Instant instant54 = dateTime50.toInstant();
        long long55 = dateTime50.getMillis();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = locale58.getDisplayCountry(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology57, locale58, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology68 = dateTimeParserBucket67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minus(readablePeriod73);
        org.joda.time.tz.NameProvider nameProvider76 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = null;
        java.lang.String str79 = locale77.getDisplayVariant(locale78);
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.util.Locale locale81 = null;
        java.lang.String str82 = locale80.getDisplayVariant(locale81);
        java.lang.String str83 = locale77.getDisplayCountry(locale80);
        java.lang.String str86 = nameProvider76.getShortName(locale77, "", "hi!");
        java.lang.String str87 = dateTimeField69.getAsShortText((org.joda.time.ReadablePartial) localDateTime72, (int) (byte) 10, locale77);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime72.withMillisOfSecond(10);
        org.joda.time.LocalDateTime.Property property90 = localDateTime89.millisOfDay();
        java.lang.String str91 = property90.getAsShortText();
        org.joda.time.LocalDateTime localDateTime93 = property90.addToCopy((long) 4382982);
        boolean boolean94 = dateTime50.equals((java.lang.Object) localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 35L + "'", long49 == 35L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(nameProvider76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "10" + "'", str87, "10");
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "10" + "'", str91, "10");
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property7.getFieldType();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType9.getField(chronology23);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale27.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(1009843200003L, chronology23, locale27, (java.lang.Integer) 1439, 0);
        org.joda.time.DateTimeField dateTimeField32 = chronology23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.centuryOfEra();
        org.joda.time.DurationField durationField34 = chronology23.hours();
        org.joda.time.DateTimeField dateTimeField35 = chronology23.centuryOfEra();
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 1920, chronology23, locale36, (java.lang.Integer) 100, (-36810));
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.yearOfEra();
        int int46 = property45.getMaximumValueOverall();
        int int47 = property45.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime48 = property45.roundHalfFloorCopy();
        int int49 = property45.getMinimumValue();
        boolean boolean50 = property45.isLeap();
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.lang.String str59 = locale53.getDisplayCountry(locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology52, locale53, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology63 = dateTimeParserBucket62.getChronology();
        java.util.Locale locale64 = dateTimeParserBucket62.getLocale();
        boolean boolean66 = dateTimeParserBucket62.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.DateTimeZone dateTimeZone67 = dateTimeParserBucket62.getZone();
        java.lang.String str69 = dateTimeZone67.getName((long) 'a');
        int int71 = dateTimeZone67.getOffsetFromLocal((long) 1969);
        java.util.Locale locale75 = new java.util.Locale("zho", "1969-12-31T22:25:00.001Z", "DurationField[weekyears]");
        java.lang.String str76 = locale75.getVariant();
        boolean boolean77 = dateTimeZone67.equals((java.lang.Object) locale75);
        java.lang.String str79 = dateTimeZone67.getShortName(44179776001969L);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(dateTimeZone67);
        boolean boolean81 = property45.equals((java.lang.Object) dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime82 = property45.roundHalfFloorCopy();
        boolean boolean83 = dateTimeParserBucket39.restoreState((java.lang.Object) localDateTime82);
        long long85 = dateTimeParserBucket39.computeMillis(false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it-IT" + "'", str28, "it-IT");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 292278993 + "'", int46 == 292278993);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals(locale75.toString(), "zho_1969-12-31T22:25:00.001Z_DurationField[weekyears]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "DurationField[weekyears]" + "'", str76, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1920L + "'", long85 == 1920L);
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.lang.String str7 = locale1.getDisplayCountry(locale4);
        java.lang.String str10 = nameProvider0.getShortName(locale1, "", "hi!");
        java.util.Locale locale14 = new java.util.Locale("Ora media di Greenwich", "DurationField[years]", "cinese (Cina)");
        java.lang.String str17 = nameProvider0.getName(locale14, "", "dayOfWeek");
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.lang.String[] strArray35 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList36, filteringMode38);
        java.lang.String[] strArray51 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean55 = strSet52.add("Italien");
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet52);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet52);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = null;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.lang.String str66 = locale60.getDisplayCountry(locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology59, locale60, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology70 = dateTimeParserBucket69.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = null;
        java.lang.String str75 = locale73.getDisplayVariant(locale74);
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Locale locale77 = null;
        java.lang.String str78 = locale76.getDisplayVariant(locale77);
        java.lang.String str79 = locale73.getDisplayCountry(locale76);
        dateTimeParserBucket69.saveField(dateTimeFieldType71, "", locale73);
        boolean boolean81 = strSet52.remove((java.lang.Object) dateTimeFieldType71);
        boolean boolean82 = strSet52.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator83 = strSet52.spliterator();
        java.util.stream.Stream<java.lang.String> strStream84 = strSet52.parallelStream();
        boolean boolean85 = strSet18.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.stream.Stream<java.lang.String> strStream86 = strSet18.parallelStream();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals(locale14.toString(), "ora media di greenwich_DURATIONFIELD[YEARS]_cinese (Cina)");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSpliterator83);
        org.junit.Assert.assertNotNull(strStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strStream86);
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        java.lang.String str43 = locale35.getDisplayScript(locale39);
        java.lang.String str44 = locale35.getDisplayCountry();
        java.lang.String str45 = localDateTime16.toString("-1", locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = localDateTime16.isSupported(dateTimeFieldType46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime16.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime16.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.era();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = property56.addWrapFieldToCopy(48);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italia" + "'", str44, "Italia");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        java.lang.String str43 = locale35.getDisplayScript(locale39);
        java.lang.String str44 = locale35.getDisplayCountry();
        java.lang.String str45 = localDateTime16.toString("-1", locale35);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.lang.String str54 = locale48.getDisplayCountry(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology47, locale48, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DurationField durationField60 = chronology58.years();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minus(readablePeriod65);
        boolean boolean67 = dateTimeZone61.isLocalDateTimeGap(localDateTime66);
        org.joda.time.Chronology chronology68 = chronology58.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime69 = localDateTime16.toDateTime(dateTimeZone61);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.Instant instant71 = dateTime69.toInstant();
        org.joda.time.DateTimeZone dateTimeZone72 = instant71.getZone();
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.now(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minus(readablePeriod77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.yearOfEra();
        org.joda.time.LocalDateTime localDateTime80 = property79.roundFloorCopy();
        int int81 = localDateTime80.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property82 = localDateTime80.yearOfEra();
        org.joda.time.LocalDateTime localDateTime84 = property82.setCopy((int) '#');
        org.joda.time.DurationField durationField85 = property82.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime87 = property82.setCopy(31);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.withDayOfYear(38);
        boolean boolean90 = dateTimeZone72.isLocalDateTimeGap(localDateTime87);
        long long94 = dateTimeZone72.convertLocalToUTC((long) 365242, true, 25200015L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italia" + "'", str44, "Italia");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNull(durationField85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 365242L + "'", long94 == 365242L);
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DurationField durationField15 = chronology13.seconds();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        java.util.Locale locale30 = dateTimeParserBucket28.getLocale();
        boolean boolean32 = dateTimeParserBucket28.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology33 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket28.getChronology();
        java.lang.String str36 = chronology35.toString();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.yearOfCentury();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.years();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.year();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology51.minuteOfDay();
        java.util.Locale locale58 = java.util.Locale.ITALY;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = null;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.lang.String str65 = locale59.getDisplayCountry(locale62);
        java.lang.String str66 = locale58.getDisplayScript(locale62);
        java.util.Set<java.lang.String> strSet67 = locale62.getUnicodeLocaleKeys();
        java.lang.String str68 = dateTimeField56.getAsShortText(0L, locale62);
        java.lang.String str69 = locale62.getISO3Language();
        java.lang.String str70 = locale62.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) (-35), chronology35, locale62);
        java.lang.String str72 = locale62.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((-1959L), chronology13, locale62);
        org.joda.time.Chronology chronology75 = null;
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Locale locale77 = null;
        java.lang.String str78 = locale76.getDisplayVariant(locale77);
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.util.Locale locale80 = null;
        java.lang.String str81 = locale79.getDisplayVariant(locale80);
        java.lang.String str82 = locale76.getDisplayCountry(locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology75, locale76, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology86 = dateTimeParserBucket85.getChronology();
        java.util.Locale locale87 = dateTimeParserBucket85.getLocale();
        boolean boolean89 = dateTimeParserBucket85.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology90 = dateTimeParserBucket85.getChronology();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = dateTimeField91.getType();
        dateTimeParserBucket73.saveField(dateTimeFieldType92, 23);
        org.joda.time.Chronology chronology95 = dateTimeParserBucket73.getChronology();
        java.util.Locale locale96 = dateTimeParserBucket73.getLocale();
        org.joda.time.DateTimeZone dateTimeZone97 = dateTimeParserBucket73.getZone();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "deu" + "'", str69, "deu");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone97);
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.dayOfWeek();
        int int24 = localDateTime20.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        int int43 = property30.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfCentury((int) ' ');
        int int47 = localDateTime46.size();
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.hours();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) '#', chronology62);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale68.getDisplayCountry(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology67, locale68, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.hours();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) '#', chronology78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusMonths((int) (short) 10);
        boolean boolean83 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.DateTime dateTime84 = localDateTime80.toDateTime();
        int int85 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime84.getZone();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone86);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        long long90 = dateTimeZone86.getMillisKeepLocal(dateTimeZone88, (-1052053423200000L));
        java.lang.String str92 = dateTimeZone86.getShortName(1866241313999948L);
        long long94 = dateTimeZone86.convertUTCToLocal(315532801000L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1052053423200000L) + "'", long90 == (-1052053423200000L));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+00:00" + "'", str92, "+00:00");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 315532801000L + "'", long94 == 315532801000L);
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 10);
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology5, locale6, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime24);
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone19);
        long long28 = dateTimeZone1.getMillisKeepLocal(dateTimeZone19, (long) (short) 0);
        boolean boolean30 = dateTimeZone1.isStandardOffset((long) 2016);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(10521900000000L, dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.year();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DurationField durationField19 = dateTimeField18.getDurationField();
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        java.lang.String str21 = durationFieldType20.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str32 = locale26.getDisplayCountry(locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale26, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.millisOfDay();
        org.joda.time.DurationField durationField38 = durationFieldType23.getField(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.hourOfHalfday();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale43.getDisplayCountry(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology42, locale43, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology53 = dateTimeParserBucket52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '#', chronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusMonths((int) (short) 10);
        int int58 = localDateTime55.getHourOfDay();
        int int59 = localDateTime55.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.minus(readablePeriod60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime55.minus(readablePeriod62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime55.millisOfSecond();
        int[] intArray66 = chronology36.get((org.joda.time.ReadablePartial) localDateTime55, (long) 35999947);
        boolean boolean67 = durationFieldType20.isSupported(chronology36);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 4, chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withDate((-35), 119, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 119 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hours" + "'", str21, "hours");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1970, 1, 1, 35999947]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.toString();
        java.lang.String str3 = durationFieldType1.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType4.getDurationType();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.lang.String str14 = locale8.getDisplayCountry(locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology7, locale8, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        boolean boolean20 = durationFieldType5.isSupported(chronology18);
        boolean boolean21 = durationFieldType1.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weekyears" + "'", str2, "weekyears");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weekyears" + "'", str3, "weekyears");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        int int24 = property23.getMaximumValueOverall();
        int int25 = property23.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        int int33 = property32.getMaximumValueOverall();
        int int34 = property32.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime35 = property32.roundHalfFloorCopy();
        int int36 = property23.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plus(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getRangeDurationType();
        int int45 = localDateTime40.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = localDateTime40.toDateTime();
        int int47 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.Chronology chronology48 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfYear();
        org.joda.time.DurationField durationField51 = chronology48.weeks();
        org.joda.time.DurationField durationField52 = chronology48.weekyears();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 365 + "'", int47 == 365);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusSeconds(1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        int int14 = property13.getMaximumValueOverall();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property26.getFieldType();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology41);
        int int45 = localDateTime20.get(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime20.withWeekyear(70);
        int int48 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfDay();
        int int50 = property49.getMinimumValue();
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((-1420070400000L), chronology52, locale53);
        java.lang.String str55 = locale53.getISO3Country();
        int int56 = property49.getMaximumShortTextLength(locale53);
        org.joda.time.LocalDateTime localDateTime58 = property49.addToCopy(27143365);
        int int59 = property49.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 86399999 + "'", int59 == 86399999);
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        boolean boolean7 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        int int8 = localDateTime6.getYearOfEra();
        org.joda.time.Chronology chronology9 = localDateTime6.getChronology();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.hours();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '#', chronology23);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = locale29.getDisplayCountry(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale29, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.hours();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '#', chronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusMonths((int) (short) 10);
        boolean boolean44 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTime dateTime45 = localDateTime41.toDateTime();
        long long46 = dateTime45.getMillis();
        org.joda.time.Instant instant47 = dateTime45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str50 = dateTimeZone48.getNameKey((long) 10);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.lang.String str59 = locale53.getDisplayCountry(locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology52, locale53, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology63 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.year();
        org.joda.time.DurationField durationField65 = chronology63.years();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minus(readablePeriod70);
        boolean boolean72 = dateTimeZone66.isLocalDateTimeGap(localDateTime71);
        org.joda.time.Chronology chronology73 = chronology63.withZone(dateTimeZone66);
        long long75 = dateTimeZone48.getMillisKeepLocal(dateTimeZone66, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((java.lang.Object) instant47, dateTimeZone48);
        org.joda.time.Chronology chronology77 = chronology9.withZone(dateTimeZone48);
        java.util.Locale.Category category78 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale79 = java.util.Locale.getDefault(category78);
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale locale81 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale81);
        java.util.Locale locale83 = locale81.stripExtensions();
        java.util.Locale.Builder builder84 = builder80.setLocale(locale83);
        java.util.Locale locale85 = builder84.build();
        java.util.Locale.setDefault(category78, locale85);
        java.util.Locale locale87 = java.util.Locale.getDefault(category78);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.UTC;
        int int90 = dateTimeZone88.getOffset((long) (short) 0);
        java.util.Locale locale92 = java.util.Locale.GERMAN;
        java.lang.String str93 = dateTimeZone88.getName((long) (short) 1, locale92);
        java.util.Locale.setDefault(category78, locale92);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket96 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale92, (java.lang.Integer) 60);
        java.util.Locale locale97 = null;
        java.lang.String str98 = locale92.getDisplayVariant(locale97);
        java.lang.String str99 = locale92.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 35L + "'", long46 == 35L);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.FORMAT + "'", category78.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "de");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00" + "'", str93, "+00:00");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "tedesco" + "'", str99, "tedesco");
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        org.joda.time.DurationField durationField15 = dateTimeField13.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = durationField15.getValue(391250402399919L, 12622780800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 391250402399919");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        java.lang.String str44 = localDateTime40.toString();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.minusHours(192000169);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology50, locale51, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.years();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = null;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale65.getDisplayCountry(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology64, locale65, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.year();
        org.joda.time.DurationField durationField77 = chronology75.years();
        int int78 = durationField62.compareTo(durationField77);
        int int80 = durationField77.getValue((-1L));
        long long82 = durationField77.getMillis((long) 9);
        long long85 = durationField77.getDifferenceAsLong((long) 0, (-62167219200000L));
        int int87 = durationField77.getValue((long) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType88 = durationField77.getType();
        java.lang.String str89 = durationFieldType88.getName();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime48.withFieldAdded(durationFieldType88, 1932);
        int int92 = localDateTime48.getWeekyear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:32:00.000" + "'", str44, "1970-01-01T00:32:00.000");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 284012568000L + "'", long82 == 284012568000L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1970L + "'", long85 == 1970L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "years" + "'", str89, "years");
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-19934) + "'", int92 == (-19934));
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime20.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withWeekyear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.dayOfYear();
        org.joda.time.Interval interval27 = property26.toInterval();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        int int44 = property43.getMaximumValueOverall();
        int int45 = property43.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        int int47 = property34.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.minus(readablePeriod50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plus(readablePeriod52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getRangeDurationType();
        int int56 = localDateTime51.get(dateTimeFieldType54);
        org.joda.time.DateTime dateTime57 = localDateTime51.toDateTime();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = null;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.lang.String str67 = locale61.getDisplayCountry(locale64);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology60, locale61, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology71 = dateTimeParserBucket70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.hours();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) '#', chronology71);
        org.joda.time.Chronology chronology76 = null;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = null;
        java.lang.String str79 = locale77.getDisplayVariant(locale78);
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.util.Locale locale81 = null;
        java.lang.String str82 = locale80.getDisplayVariant(locale81);
        java.lang.String str83 = locale77.getDisplayCountry(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology76, locale77, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology87 = dateTimeParserBucket86.getChronology();
        org.joda.time.DurationField durationField88 = chronology87.hours();
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime((long) '#', chronology87);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.plusMonths((int) (short) 10);
        boolean boolean92 = localDateTime73.isBefore((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.DateTime dateTime93 = localDateTime89.toDateTime();
        long long94 = dateTime93.getMillis();
        boolean boolean95 = dateTime57.isEqual((org.joda.time.ReadableInstant) dateTime93);
        int int96 = property26.getDifference((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDateTime localDateTime98 = property26.addToCopy(24);
        org.joda.time.DurationField durationField99 = property26.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 35L + "'", long94 == 35L);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(localDateTime98);
        org.junit.Assert.assertNotNull(durationField99);
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.year();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1961, chronology23);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset((long) (short) 0);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = dateTimeZone0.getName((long) (short) 1, locale4);
        boolean boolean7 = dateTimeZone0.isStandardOffset(32L);
        int int9 = dateTimeZone0.getOffset((long) (-3600000));
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.lang.String str11 = dateTimeZone0.getID();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale15, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology25);
        org.joda.time.DurationField durationField28 = chronology25.days();
        org.joda.time.DurationField durationField29 = chronology25.weeks();
        long long32 = durationField29.getValueAsLong(11880000L, 4519598225L);
        boolean boolean33 = dateTimeZone0.equals((java.lang.Object) long32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        int int44 = property43.getMaximumValueOverall();
        int int45 = property43.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readablePeriod50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.yearOfEra();
        int int53 = property52.getMaximumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime55 = property52.roundHalfFloorCopy();
        int int56 = property43.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean58 = localDateTime55.isSupported(dateTimeFieldType57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.withPeriodAdded(readablePeriod59, (int) 'a');
        boolean boolean62 = localDateTime36.isEqual((org.joda.time.ReadablePartial) localDateTime61);
        int int63 = localDateTime61.getEra();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minusMinutes((-518400));
        org.joda.time.DateTime dateTime66 = localDateTime65.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime66.getZone();
        int int68 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minus(readablePeriod21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        int int27 = localDateTime22.get(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = localDateTime22.toDateTime();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '#', chronology42);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plus(readableDuration45);
        org.joda.time.DateTimeField dateTimeField48 = localDateTime44.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.withMonthOfYear(4);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime44.withSecondOfMinute((int) ' ');
        int int53 = localDateTime44.getHourOfDay();
        boolean boolean54 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime.Property property55 = localDateTime44.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime56 = property55.roundCeilingCopy();
        int int57 = localDateTime56.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withYearOfCentury(319);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 319 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        boolean boolean33 = dateTimeField13.isLeap((-1104537600000L));
        boolean boolean34 = dateTimeField13.isSupported();
        long long36 = dateTimeField13.roundHalfCeiling((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minus(readablePeriod40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.yearOfEra();
        int int43 = property42.getMaximumValueOverall();
        int int44 = property42.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime45 = property42.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.yearOfEra();
        int int52 = property51.getMaximumValueOverall();
        int int53 = property51.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfFloorCopy();
        int int55 = property42.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.yearOfCentury();
        int int59 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minus(readablePeriod63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.yearOfEra();
        int int66 = property65.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime68 = property65.addToCopy((long) (byte) 1);
        int int69 = localDateTime68.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = localDateTime68.getFieldType(0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime54.property(dateTimeFieldType71);
        org.joda.time.LocalDateTime localDateTime74 = property72.setCopy(1320);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86399999L + "'", long36 == 86399999L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 292278993 + "'", int66 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology12.getZone();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        int int24 = dateTimeZone22.getOffset((long) (short) 0);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = dateTimeZone22.getName((long) (short) 1, locale26);
        boolean boolean29 = dateTimeZone22.isStandardOffset(32L);
        int int31 = dateTimeZone22.getOffsetFromLocal((long) 'x');
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.yearOfEra();
        int int38 = property37.getMaximumValueOverall();
        int int39 = property37.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime40 = property37.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readablePeriod44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.yearOfEra();
        int int47 = property46.getMaximumValueOverall();
        int int48 = property46.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime49 = property46.roundHalfFloorCopy();
        int int50 = property37.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray53 = localDateTime52.getFields();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withWeekyear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.withDayOfYear(9);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.yearOfEra();
        int int67 = property66.getMaximumValueOverall();
        int int68 = property66.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime69 = property66.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minus(readablePeriod73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.yearOfEra();
        int int76 = property75.getMaximumValueOverall();
        int int77 = property75.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime78 = property75.roundHalfFloorCopy();
        int int79 = property66.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray82 = localDateTime81.getFields();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusMonths((int) (byte) 0);
        boolean boolean87 = localDateTime60.isEqual((org.joda.time.ReadablePartial) localDateTime84);
        boolean boolean88 = dateTimeZone22.isLocalDateTimeGap(localDateTime84);
        org.joda.time.LocalDateTime localDateTime89 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        int int91 = dateTimeZone22.getOffset(100L);
        java.util.TimeZone timeZone92 = dateTimeZone22.toTimeZone();
        boolean boolean93 = timeZone21.hasSameRules(timeZone92);
        timeZone92.setID("2022-02-22T07:32:47.111");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292278993 + "'", int47 == 292278993);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldArray53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 292278993 + "'", int76 == 292278993);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldArray82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(timeZone92);
        org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        dateTimeParserBucket11.saveField(dateTimeFieldType13, "", locale15);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfDay();
        org.joda.time.DurationField durationField26 = chronology23.years();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = chronology23.getDateTimeMillis((int) 'a', 27720, 86399, 615);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27720 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property7.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType9.getField(chronology22);
        java.util.Locale locale28 = new java.util.Locale("10", "DurationField[years]");
        java.lang.String str29 = locale28.getVariant();
        java.util.Set<java.lang.Character> charSet30 = locale28.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(170208000010L, chronology22, locale28, (java.lang.Integer) 365, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(95L, chronology22);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.monthOfYear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withCenturyOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusMinutes(18993);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale28.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfMinute();
        java.lang.String str16 = dateTimeField15.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField15.set(2726520621264000000L, "weeks");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weeks\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str16, "DateTimeField[secondOfMinute]");
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = property10.setCopy((int) '#');
        org.joda.time.DurationField durationField13 = property10.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField14 = property10.getField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        int int21 = property20.getMaximumValueOverall();
        int int22 = property20.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readablePeriod27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        int int30 = property29.getMaximumValueOverall();
        int int31 = property29.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfFloorCopy();
        int int33 = property20.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.minus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plus(readablePeriod38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        int int42 = localDateTime37.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = localDateTime37.toDateTime();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.hours();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) '#', chronology57);
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = null;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.lang.String str69 = locale63.getDisplayCountry(locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology62, locale63, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology73 = dateTimeParserBucket72.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.hours();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) '#', chronology73);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusMonths((int) (short) 10);
        boolean boolean78 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.DateTime dateTime79 = localDateTime75.toDateTime();
        long long80 = dateTime79.getMillis();
        boolean boolean81 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime79);
        int int82 = property10.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology83 = dateTime43.getChronology();
        org.joda.time.DurationField durationField84 = durationFieldType1.getField(chronology83);
        org.joda.time.DateTimeField dateTimeField85 = chronology83.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime(chronology83);
        org.joda.time.DurationField durationField87 = chronology83.millis();
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime(252000076L, chronology83);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 292278993 + "'", int30 == 292278993);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 35L + "'", long80 == 35L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField87);
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        java.lang.String str2 = durationFieldType1.getName();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology5, locale6, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.years();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        boolean boolean19 = durationFieldType3.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.monthOfYear();
        boolean boolean22 = durationFieldType1.isSupported(chronology16);
        org.joda.time.DurationField durationField23 = chronology16.hours();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale27, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        java.util.Locale locale38 = dateTimeParserBucket36.getLocale();
        boolean boolean40 = dateTimeParserBucket36.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket36.getChronology();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        int int43 = localDateTime42.getYear();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.weekOfWeekyear();
        java.lang.String str45 = property44.getAsString();
        org.joda.time.DurationField durationField46 = property44.getDurationField();
        org.joda.time.LocalDateTime localDateTime48 = property44.addToCopy(20L);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfCentury();
        boolean boolean50 = localDateTime24.equals((java.lang.Object) localDateTime48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eras" + "'", str2, "eras");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "8" + "'", str45, "8");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withPeriodAdded(readablePeriod23, 2);
        org.joda.time.Chronology chronology26 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.clockhourOfDay();
        java.util.Locale locale33 = new java.util.Locale("1902-01-01T00:32:00.000", "ISOChronology[UTC]", "millis");
        java.lang.String str34 = dateTimeField28.getAsShortText(3295L, locale33);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.parse("1970-01-01T00:00:00.087");
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plus(readablePeriod37);
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder42 = builder40.setLocale(locale41);
        java.lang.String str43 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime36, 5, locale41);
        org.joda.time.DurationField durationField44 = dateTimeField28.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale33.toString(), "1902-01-01t00:32:00.000_ISOCHRONOLOGY[UTC]_millis");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "24" + "'", str34, "24");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "5" + "'", str43, "5");
        org.junit.Assert.assertNull(durationField44);
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = locale29.getDisplayCountry(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale29, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.hours();
        boolean boolean41 = durationFieldType26.isSupported(chronology39);
        org.joda.time.DurationField durationField42 = durationFieldType24.getField(chronology39);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology39, locale43, (java.lang.Integer) 1970);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        dateTimeParserBucket45.setZone(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = localDateTime19.toDateTime(dateTimeZone46);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology50 = dateTime48.getChronology();
        org.joda.time.Instant instant51 = dateTime48.toInstant();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str49, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(instant51);
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        int int18 = dateTimeField16.getMinimumValue(31556952000L);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale21, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.years();
        org.joda.time.DurationField durationField33 = chronology31.years();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readablePeriod38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfEra();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundFloorCopy();
        int int42 = localDateTime41.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider45 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.lang.String str52 = locale46.getDisplayCountry(locale49);
        java.lang.String str55 = nameProvider45.getShortName(locale49, "hi!", "");
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = null;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.lang.String str65 = locale59.getDisplayCountry(locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology58, locale59, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology69 = dateTimeParserBucket68.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.millis();
        org.joda.time.tz.NameProvider nameProvider71 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.lang.String str75 = nameProvider71.getName(locale72, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology69, locale72, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str81 = nameProvider45.getName(locale72, "ISOChronology[UTC]", "DurationField[years]");
        java.lang.String str82 = locale72.getISO3Language();
        java.lang.String str83 = locale72.getVariant();
        java.lang.String str84 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime41, 292278993, locale72);
        int int85 = dateTimeField16.getMaximumShortTextLength(locale72);
        long long87 = dateTimeField16.remainder(0L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(nameProvider45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(nameProvider71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "zho" + "'", str82, "zho");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "292278993" + "'", str84, "292278993");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5 + "'", int85 == 5);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.minus(readablePeriod44);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.lang.String str54 = locale48.getDisplayCountry(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology47, locale48, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        java.util.Locale locale59 = dateTimeParserBucket57.getLocale();
        boolean boolean61 = dateTimeParserBucket57.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology62 = dateTimeParserBucket57.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = dateTimeField63.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale68.getDisplayCountry(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology67, locale68, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.year();
        org.joda.time.DurationField durationField80 = chronology78.years();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minus(readablePeriod85);
        boolean boolean87 = dateTimeZone81.isLocalDateTimeGap(localDateTime86);
        org.joda.time.Chronology chronology88 = chronology78.withZone(dateTimeZone81);
        boolean boolean89 = dateTimeFieldType65.isSupported(chronology88);
        org.joda.time.DateTimeField dateTimeField90 = chronology88.dayOfYear();
        org.joda.time.DateTimeField dateTimeField91 = chronology88.millisOfSecond();
        boolean boolean92 = dateTimeFieldType64.isSupported(chronology88);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime40.withField(dateTimeFieldType64, 14);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime94.minusSeconds(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime98 = localDateTime96.withHourOfDay((-38));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -38 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.Chronology chronology16 = chronology12.withUTC();
        org.joda.time.DurationField durationField17 = chronology12.years();
        org.joda.time.DurationField durationField18 = chronology12.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.minuteOfHour();
        org.joda.time.DurationField durationField20 = chronology12.years();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minus(readablePeriod21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readablePeriod23);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime();
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        java.lang.String str36 = nameProvider26.getShortName(locale30, "hi!", "");
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.years();
        org.joda.time.DurationField durationField51 = chronology49.years();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.year();
        int int55 = dateTimeField52.getDifference(0L, (long) 0);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minus(readablePeriod61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.yearOfEra();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property63.getFieldType();
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale68.getDisplayCountry(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology67, locale68, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.millisOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology78.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType65.getField(chronology78);
        java.util.Locale locale84 = new java.util.Locale("10", "DurationField[years]");
        java.lang.String str85 = locale84.getVariant();
        java.util.Set<java.lang.Character> charSet86 = locale84.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket(170208000010L, chronology78, locale84, (java.lang.Integer) 365, (int) (short) 0);
        java.lang.String str90 = dateTimeField52.getAsShortText(38L, locale84);
        java.lang.String str93 = nameProvider26.getShortName(locale84, "2087-01-01T00:00:00.000", "Englisch");
        boolean boolean94 = localDateTime22.equals((java.lang.Object) nameProvider26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime96 = localDateTime22.withDayOfWeek(111213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 111213 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertEquals(locale84.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(charSet86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1970" + "'", str90, "1970");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        dateTimeParserBucket11.setOffset((java.lang.Integer) 2);
        java.util.Locale locale15 = dateTimeParserBucket11.getLocale();
        long long18 = dateTimeParserBucket11.computeMillis(true, "2087-01-01T00:00:00.000");
        org.joda.time.Chronology chronology19 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.years();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.halfdayOfDay();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 95L + "'", long18 == 95L);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.yearOfEra();
        int int22 = property21.getMaximumValueOverall();
        int int23 = property21.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime24 = property21.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        int int34 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean36 = localDateTime33.isSupported(dateTimeFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withPeriodAdded(readablePeriod37, (int) 'a');
        int[] intArray40 = new int[] {};
        int int41 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33, intArray40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        int int48 = property47.getMaximumValueOverall();
        int int49 = property47.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime50 = property47.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        int int57 = property56.getMaximumValueOverall();
        int int58 = property56.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime59 = property56.roundHalfFloorCopy();
        int int60 = property47.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withYearOfCentury((int) ' ');
        int int64 = localDateTime63.size();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime63, (int) (byte) 1, locale66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = localDateTime63.withTime(86399001, 74, 84720, 192000169);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399001 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-292275054) + "'", int41 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        boolean boolean14 = durationField13.isPrecise();
        boolean boolean15 = durationField13.isPrecise();
        long long18 = durationField13.subtract(315569520000L, (long) 86399999);
        org.joda.time.DurationFieldType durationFieldType19 = durationField13.getType();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale22.getDisplayCountry(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology21, locale22, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        java.util.Locale locale33 = dateTimeParserBucket31.getLocale();
        boolean boolean35 = dateTimeParserBucket31.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.minuteOfHour();
        org.joda.time.DurationField durationField40 = chronology38.seconds();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.DurationField durationField46 = durationFieldType19.getField(chronology38);
        int int49 = durationField46.getValue(9223309849824000010L, (-43199L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-2726520305608080000L) + "'", long18 == (-2726520305608080000L));
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 292275054 + "'", int49 == 292275054);
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        dateTimeParserBucket11.setPivotYear((java.lang.Integer) 31);
        dateTimeParserBucket11.setOffset((java.lang.Integer) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        dateTimeParserBucket11.saveField(dateTimeFieldType20, (int) (byte) 0);
        dateTimeParserBucket11.setPivotYear((java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket11.getZone();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = chronology22.seconds();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology22.getDateTimeMillis(35, (-480479999), 3, 719);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -480479999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.lang.String str17 = locale11.getDisplayCountry(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale11, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType8.getField(chronology21);
        java.util.Locale locale27 = new java.util.Locale("10", "DurationField[years]");
        java.lang.String str28 = locale27.getVariant();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(170208000010L, chronology21, locale27, (java.lang.Integer) 365, (int) (short) 0);
        int int33 = dateTimeParserBucket32.getOffset();
        long long34 = dateTimeParserBucket32.computeMillis();
        dateTimeParserBucket32.setOffset(14);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals(locale27.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 170208000010L + "'", long34 == 170208000010L);
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology2 = null;
        boolean boolean3 = dateTimeFieldType1.isSupported(chronology2);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#', chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType1.getField(chronology17);
        org.joda.time.DurationField durationField23 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.weekyearOfCentury();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale27, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        long long41 = dateTimeField38.set((long) '4', (int) (short) 0);
        long long43 = dateTimeField38.roundFloor((long) (byte) 0);
        long long46 = dateTimeField38.set((-62167219199948L), "10");
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.lang.String str54 = locale48.getDisplayCountry(locale51);
        java.lang.String str55 = dateTimeField38.getAsText(2208988800120L, locale48);
        java.util.Locale locale58 = java.util.Locale.ITALY;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = null;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.lang.String str65 = locale59.getDisplayCountry(locale62);
        java.lang.String str66 = locale58.getDisplayScript(locale62);
        long long67 = dateTimeField38.set(100L, "10", locale58);
        java.lang.String str68 = locale58.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(82800000L, chronology17, locale58);
        org.joda.time.Chronology chronology70 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekyear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(chronology70);
        org.joda.time.Chronology chronology73 = localDateTime72.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-62167219199948L) + "'", long41 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-61851599999948L) + "'", long46 == (-61851599999948L));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2040" + "'", str55, "2040");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-61851599999900L) + "'", long67 == (-61851599999900L));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ita" + "'", str68, "ita");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology73);
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        long long24 = chronology18.add((long) 'a', 10L, (int) (short) 0);
        org.joda.time.DurationField durationField25 = chronology18.hours();
        org.joda.time.Chronology chronology26 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField30 = chronology26.days();
        long long33 = durationField30.getMillis(0L, (-61409836800000L));
        long long34 = durationField30.getUnitMillis();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 97L + "'", long24 == 97L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 86400000L + "'", long34 == 86400000L);
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1970-01-01T00:00:00.052");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.weekyear();
        org.joda.time.DurationField durationField19 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology12.weekyearOfCentury();
        boolean boolean24 = dateTimeField22.isLeap((-61441080521007L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '#', chronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths((int) (short) 10);
        boolean boolean34 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTime dateTime35 = localDateTime31.toDateTime();
        org.joda.time.LocalDateTime.Property property36 = localDateTime31.yearOfEra();
        int int37 = property36.get();
        org.joda.time.LocalDateTime localDateTime38 = property36.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime39 = property36.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.yearOfEra();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property45.getFieldType();
        java.lang.String str48 = property45.toString();
        int int49 = property45.get();
        org.joda.time.DurationField durationField50 = property45.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime51 = property45.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (-19045));
        boolean boolean54 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime51.yearOfCentury();
        boolean boolean56 = property36.equals((java.lang.Object) localDateTime51);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.plus(readablePeriod57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime51.withCenturyOfEra(10000);
        org.joda.time.LocalDateTime.Property property61 = localDateTime51.yearOfEra();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[yearOfEra]" + "'", str48, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNull(durationField50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray16 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList17, filteringMode19);
        java.lang.String[] strArray32 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean36 = strSet33.add("Italien");
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet33);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        dateTimeParserBucket50.saveField(dateTimeFieldType52, "", locale54);
        boolean boolean62 = strSet33.remove((java.lang.Object) dateTimeFieldType52);
        java.util.Spliterator<java.lang.String> strSpliterator63 = strSet33.spliterator();
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = null;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        java.lang.String str73 = locale67.getDisplayCountry(locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology66, locale67, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology77 = dateTimeParserBucket76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.hours();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) '#', chronology77);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.plus(readableDuration80);
        org.joda.time.DateTimeField dateTimeField83 = localDateTime79.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime79.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime79.plusWeeks(0);
        boolean boolean88 = strSet33.contains((java.lang.Object) localDateTime79);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime79.minusWeeks(32);
        int int91 = localDateTime90.getMonthOfYear();
        org.joda.time.Chronology chronology92 = localDateTime90.getChronology();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 5 + "'", int91 == 5);
        org.junit.Assert.assertNotNull(chronology92);
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DurationField durationField15 = chronology12.seconds();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField31.getMaximumValue(readablePartial32);
        long long36 = dateTimeField31.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField37 = dateTimeField31.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        int int44 = property43.getMaximumValueOverall();
        int int45 = property43.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readablePeriod50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.yearOfEra();
        int int53 = property52.getMaximumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime55 = property52.roundHalfFloorCopy();
        int int56 = property43.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withMinuteOfHour((int) ' ');
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, (-1), locale60);
        org.joda.time.tz.NameProvider nameProvider62 = org.joda.time.DateTimeZone.getNameProvider();
        boolean boolean63 = localDateTime58.equals((java.lang.Object) nameProvider62);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider62);
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale66);
        java.util.Locale locale68 = locale66.stripExtensions();
        java.util.Locale.Builder builder69 = builder65.setLocale(locale68);
        java.util.Locale locale70 = builder69.build();
        java.lang.String str73 = nameProvider62.getShortName(locale70, "Deutsch", "era");
        java.lang.String str74 = locale70.getDisplayName();
        java.lang.String str75 = dateTimeField16.getAsText((-62167219199948L), locale70);
        java.lang.String str77 = dateTimeField16.getAsShortText((-43199L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(durationField37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1" + "'", str61, "-1");
        org.junit.Assert.assertNotNull(nameProvider62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "italiano (Italia)" + "'", str74, "italiano (Italia)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "52" + "'", str75, "52");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket12.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.centuryOfEra();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = locale29.getDisplayCountry(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale29, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology39);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.lang.String str50 = locale44.getDisplayCountry(locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology43, locale44, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.years();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.hourOfHalfday();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = null;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.lang.String str65 = locale59.getDisplayCountry(locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology58, locale59, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology69 = dateTimeParserBucket68.getChronology();
        java.util.Locale locale70 = dateTimeParserBucket68.getLocale();
        int int71 = dateTimeField56.getMaximumShortTextLength(locale70);
        java.lang.String str72 = locale70.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale70, (java.lang.Integer) 31, 292278993);
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.Character> charSet77 = locale76.getExtensionKeys();
        java.lang.String str78 = locale70.getDisplayScript(locale76);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket(7237155937362L, chronology19, locale76, (java.lang.Integer) 2554, (-52));
        java.lang.Integer int82 = dateTimeParserBucket81.getOffsetInteger();
        long long84 = dateTimeParserBucket81.computeMillis(true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "de" + "'", str72, "de");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertNotNull(charSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNull(int82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 7237155937362L + "'", long84 == 7237155937362L);
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        int int32 = localDateTime16.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime16.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readablePeriod38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfEra();
        int int41 = property40.getMaximumValueOverall();
        int int42 = property40.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.yearOfEra();
        int int50 = property49.getMaximumValueOverall();
        int int51 = property49.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime52 = property49.roundHalfFloorCopy();
        int int53 = property40.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.minus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plus(readablePeriod58);
        org.joda.time.Chronology chronology60 = localDateTime57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = property66.withMaximumValue();
        int int68 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        boolean boolean69 = localDateTime16.equals((java.lang.Object) localDateTime67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime16.minusSeconds(0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withYear(42);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withPeriodAdded(readablePeriod74, 35999947);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime20.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withWeekyear((int) (byte) 0);
        int int26 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withMillisOfDay(100);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        long long45 = dateTimeField42.set((long) '4', (int) (short) 0);
        long long47 = dateTimeField42.roundFloor((long) (byte) 0);
        long long50 = dateTimeField42.set((-62167219199948L), "10");
        int int52 = dateTimeField42.getMinimumValue((long) 365);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = dateTimeField42.getType();
        boolean boolean54 = localDateTime23.isSupported(dateTimeFieldType53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime23.withDayOfWeek(4);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime23.withMillisOfDay((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minus(readablePeriod62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.yearOfEra();
        int int65 = property64.getMaximumValueOverall();
        int int66 = property64.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime67 = property64.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minus(readablePeriod71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.yearOfEra();
        int int74 = property73.getMaximumValueOverall();
        int int75 = property73.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime76 = property73.roundHalfFloorCopy();
        int int77 = property64.compareTo((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime76);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.minusMinutes(28);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType84.getRangeDurationType();
        boolean boolean86 = localDateTime83.isSupported(dateTimeFieldType84);
        int int87 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime.Property property88 = localDateTime83.monthOfYear();
        int int89 = localDateTime83.getYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-62167219199948L) + "'", long45 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-61851599999948L) + "'", long50 == (-61851599999948L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-292275054) + "'", int52 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292278993 + "'", int65 == 292278993);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 292278993 + "'", int74 == 292278993);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1969 + "'", int89 == 1969);
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.dayOfMonth();
        org.joda.time.DurationField durationField24 = dateTimeField23.getLeapDurationField();
        org.joda.time.DurationField durationField25 = dateTimeField23.getRangeDurationField();
        long long28 = durationField25.getValueAsLong((long) 292278970, 0L);
        int int30 = durationField25.getValue(2952000L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType8.getField(chronology22);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(1009843200003L, chronology22, locale26, (java.lang.Integer) 1439, 0);
        org.joda.time.DurationField durationField31 = chronology22.hours();
        org.joda.time.DurationField durationField32 = chronology22.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology22.weekyearOfCentury();
        int int34 = dateTimeField33.getMinimumValue();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology37, locale38, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.year();
        org.joda.time.DurationField durationField50 = chronology48.years();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readablePeriod55);
        boolean boolean57 = dateTimeZone51.isLocalDateTimeGap(localDateTime56);
        org.joda.time.Chronology chronology58 = chronology48.withZone(dateTimeZone51);
        java.lang.String str59 = dateTimeZone51.toString();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (short) 100, dateTimeZone51);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plus(readablePeriod61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withYearOfCentury(0);
        java.util.Locale locale67 = new java.util.Locale("yearOfEra");
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str69 = locale67.getDisplayScript();
        java.lang.String str70 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime64, 27055252, locale67);
        org.joda.time.LocalDateTime.Property property71 = localDateTime64.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getDurationType();
        java.lang.String str74 = dateTimeFieldType72.toString();
        int int75 = localDateTime64.indexOf(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it-IT" + "'", str27, "it-IT");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertEquals(locale67.toString(), "yearofera");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "27055252" + "'", str70, "27055252");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "era" + "'", str74, "era");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        long long23 = dateTimeField20.addWrapField((long) 50491197, 1944);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 21823291197L + "'", long23 == 21823291197L);
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        boolean boolean19 = localDateTime17.isSupported(durationFieldType18);
        java.lang.String str20 = durationFieldType18.getName();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale23, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfHour();
        boolean boolean36 = durationFieldType18.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.hourOfHalfday();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "years" + "'", str20, "years");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.yearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundFloorCopy();
        boolean boolean51 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology15);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.years();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.hourOfHalfday();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.lang.String str41 = locale35.getDisplayCountry(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale35, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        java.util.Locale locale46 = dateTimeParserBucket44.getLocale();
        int int47 = dateTimeField32.getMaximumShortTextLength(locale46);
        java.lang.String str48 = locale46.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale46, (java.lang.Integer) 31, 292278993);
        org.joda.time.DurationField durationField52 = chronology15.weeks();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minus(readablePeriod56);
        int int58 = localDateTime57.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.minusSeconds(1);
        int[] intArray62 = chronology15.get((org.joda.time.ReadablePartial) localDateTime57, 3155760000072L);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (-52), chronology15);
        org.joda.time.DateTimeField dateTimeField64 = chronology15.weekyear();
        org.joda.time.DurationField durationField65 = chronology15.seconds();
        org.joda.time.DateTimeField dateTimeField66 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField68 = chronology15.centuryOfEra();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "de" + "'", str48, "de");
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 70 + "'", int58 == 70);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[2070, 1, 1, 72]");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.hourOfHalfday();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale23, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.years();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.hourOfHalfday();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology37, locale38, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        java.util.Locale locale49 = dateTimeParserBucket47.getLocale();
        int int50 = dateTimeField35.getMaximumShortTextLength(locale49);
        java.lang.String str51 = locale49.getLanguage();
        java.lang.String str52 = locale49.getDisplayScript();
        java.util.Locale locale53 = locale49.stripExtensions();
        java.lang.String str54 = dateTimeField19.getAsText((long) 0, locale49);
        java.lang.String str55 = locale49.getLanguage();
        java.util.Set<java.lang.String> strSet56 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str57 = locale49.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "de" + "'", str51, "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "de" + "'", str55, "de");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tedesco" + "'", str57, "tedesco");
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        boolean boolean20 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property26.getFieldType();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology41);
        org.joda.time.DurationField durationField45 = chronology41.years();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfHalfday();
        long long48 = dateTimeField46.roundHalfCeiling(31536000001L);
        long long51 = dateTimeField46.set((-61851579048000L), 4);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField46.getType();
        int int53 = localDateTime18.get(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 31536000000L + "'", long48 == 31536000000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-61851582648000L) + "'", long51 == (-61851582648000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology13.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology13.minuteOfHour();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property24.getMinimumValue();
        boolean boolean29 = property24.isLeap();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        int int59 = dateTimeField44.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property24.getAsText(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology17.withZone(dateTimeZone62);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = null;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = null;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        java.lang.String str72 = locale66.getDisplayCountry(locale69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology65, locale66, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology76 = dateTimeParserBucket75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.year();
        org.joda.time.DurationField durationField78 = chronology76.years();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minus(readablePeriod83);
        boolean boolean85 = dateTimeZone79.isLocalDateTimeGap(localDateTime84);
        org.joda.time.Chronology chronology86 = chronology76.withZone(dateTimeZone79);
        java.lang.String str87 = dateTimeZone79.getID();
        org.joda.time.Chronology chronology88 = chronology63.withZone(dateTimeZone79);
        org.joda.time.DurationField durationField89 = chronology88.seconds();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.hourOfDay();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "UTC" + "'", str87, "UTC");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = chronology12.withZone(dateTimeZone17);
        org.joda.time.DurationField durationField19 = chronology18.months();
        long long22 = durationField19.add((-715L), (long) 372);
        boolean boolean23 = durationField19.isPrecise();
        long long26 = durationField19.subtract(92237467904700000L, (-102267L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 978307199285L + "'", long22 == 978307199285L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 92506404061500000L + "'", long26 == 92506404061500000L);
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusMinutes(70);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime16.plus(readablePeriod36);
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusHours(21893);
        int int41 = localDateTime40.getMinuteOfHour();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone0.getNameKey((long) 10);
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.DurationField durationField17 = chronology15.years();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        boolean boolean24 = dateTimeZone18.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology25 = chronology15.withZone(dateTimeZone18);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, (long) (short) 0);
        long long29 = dateTimeZone18.nextTransition(52L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusYears((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        boolean boolean40 = localDateTime36.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property41 = localDateTime36.era();
        org.joda.time.LocalDateTime.Property property42 = localDateTime36.monthOfYear();
        org.joda.time.LocalDateTime.Property property43 = localDateTime36.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusMillis(292275054);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours((-5));
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMillisOfSecond(372);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology54, locale55, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.year();
        org.joda.time.DurationField durationField67 = chronology65.years();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minus(readablePeriod72);
        boolean boolean74 = dateTimeZone68.isLocalDateTimeGap(localDateTime73);
        org.joda.time.Chronology chronology75 = chronology65.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField76 = chronology75.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minus(readablePeriod80);
        boolean boolean83 = localDateTime79.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property84 = localDateTime79.era();
        org.joda.time.LocalDateTime.Property property85 = localDateTime79.monthOfYear();
        org.joda.time.LocalDateTime.Property property86 = localDateTime79.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime79.withDayOfMonth(2);
        int[] intArray90 = chronology75.get((org.joda.time.ReadablePartial) localDateTime79, (long) 9);
        org.joda.time.DateTimeField dateTimeField91 = chronology75.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = dateTimeField91.getType();
        org.joda.time.LocalDateTime.Property property93 = localDateTime52.property(dateTimeFieldType92);
        org.joda.time.LocalDateTime.Property property94 = localDateTime52.dayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray95 = localDateTime52.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[1970, 1, 1, 9]");
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray95);
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder7 = builder4.setLanguageTag("de");
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale9);
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale11);
        java.util.Locale.Builder builder14 = builder12.addUnicodeLocaleAttribute("120");
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale.Builder builder17 = builder15.setLocale(locale16);
        java.util.Locale.Builder builder20 = builder17.setExtension('x', "CAN");
        java.util.Locale locale21 = builder20.build();
        java.util.Locale locale22 = builder20.build();
        java.util.Locale.Builder builder23 = builder4.setLocale(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet25 = locale22.getExtensionKeys();
        java.util.Set<java.lang.String> strSet26 = locale22.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.hours();
        boolean boolean43 = durationFieldType28.isSupported(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.minuteOfHour();
        org.joda.time.DurationField durationField46 = chronology41.months();
        long long49 = durationField46.getMillis(38, 28L);
        long long52 = durationField46.add((long) 2922789, (int) (byte) 0);
        long long54 = durationField46.getValueAsLong(62135683200000L);
        boolean boolean55 = strSet26.contains((java.lang.Object) durationField46);
        java.lang.Object[] objArray56 = strSet26.toArray();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP_#x-can");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP_#x-can");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 99792000000L + "'", long49 == 99792000000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 2922789L + "'", long52 == 2922789L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 23628L + "'", long54 == 23628L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfYear();
        org.joda.time.DurationField durationField24 = chronology22.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.centuryOfEra();
        int int29 = dateTimeField26.getDifference(284012568000000L, 4165603200000L);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getVariant();
        java.lang.String str33 = locale31.getVariant();
        java.lang.String str34 = dateTimeField26.getAsText((long) (short) 0, locale31);
        java.lang.String str35 = locale31.getDisplayLanguage();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.years();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        long long54 = chronology49.add(readablePeriod51, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.dayOfWeek();
        org.joda.time.tz.NameProvider nameProvider57 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = locale58.getDisplayCountry(locale61);
        java.lang.String str67 = nameProvider57.getShortName(locale61, "hi!", "");
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.util.Locale locale75 = null;
        java.lang.String str76 = locale74.getDisplayVariant(locale75);
        java.lang.String str77 = locale71.getDisplayCountry(locale74);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology70, locale71, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology81 = dateTimeParserBucket80.getChronology();
        org.joda.time.DurationField durationField82 = chronology81.millis();
        org.joda.time.tz.NameProvider nameProvider83 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale84 = java.util.Locale.TAIWAN;
        java.lang.String str87 = nameProvider83.getName(locale84, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology81, locale84, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str93 = nameProvider57.getName(locale84, "ISOChronology[UTC]", "DurationField[years]");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket96 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology49, locale84, (java.lang.Integer) 2, (int) (short) 1);
        java.lang.String str97 = locale31.getDisplayLanguage(locale84);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 88 + "'", int29 == 88);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "19" + "'", str34, "19");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "italiano" + "'", str35, "italiano");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 28L + "'", long54 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(nameProvider57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(nameProvider83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str97, "\u7fa9\u5927\u5229\u6587");
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("Englisch");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder7.setVariant("80700000");
        java.util.Locale locale10 = builder9.build();
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        java.lang.String str21 = nameProvider11.getShortName(locale15, "hi!", "");
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale24.getDisplayCountry(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology23, locale24, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.yearOfEra();
        int int42 = property41.getMaximumValueOverall();
        int int43 = property41.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime44 = property41.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        boolean boolean52 = localDateTime48.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property53 = localDateTime48.era();
        org.joda.time.LocalDateTime.Property property54 = localDateTime48.monthOfYear();
        int int55 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = locale58.getDisplayCountry(locale61);
        java.lang.String str65 = locale57.getDisplayScript(locale61);
        java.lang.String str66 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDateTime48, (int) (short) 0, locale57);
        java.lang.String str67 = locale15.getDisplayName(locale57);
        java.lang.String str68 = locale57.getDisplayVariant();
        java.lang.String str69 = locale57.toLanguageTag();
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.lang.String str71 = locale70.toLanguageTag();
        java.lang.String str72 = locale57.getDisplayName(locale70);
        java.util.Locale.Builder builder73 = builder9.setLocale(locale70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder76 = builder9.setExtension('4', "centuryOfEra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tedesco" + "'", str67, "tedesco");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "it-IT" + "'", str69, "it-IT");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "it-IT" + "'", str71, "it-IT");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "italiano (Italia)" + "'", str72, "italiano (Italia)");
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        int int22 = localDateTime21.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.yearOfEra();
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.lang.String str25 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime21, locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        boolean boolean44 = durationFieldType29.isSupported(chronology42);
        org.joda.time.DurationField durationField45 = durationFieldType27.getField(chronology42);
        java.lang.String str46 = durationFieldType27.toString();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime21.withFieldAdded(durationFieldType27, 3287);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withDayOfWeek(30000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30000000 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hours" + "'", str46, "hours");
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        java.lang.String str14 = locale1.getDisplayName(locale4);
        java.lang.String str15 = locale1.getISO3Country();
        java.lang.String str16 = locale0.getDisplayVariant(locale1);
        boolean boolean17 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet18 = locale0.getUnicodeLocaleKeys();
        strSet18.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = strSet18.add("DateTimeField[hourOfHalfday]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Englisch" + "'", str14, "Englisch");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.millis();
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.lang.String str20 = nameProvider16.getName(locale17, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology14, locale17, (java.lang.Integer) 28, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology14.era();
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault(category26);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale29);
        java.util.Locale locale31 = locale29.stripExtensions();
        java.util.Locale.Builder builder32 = builder28.setLocale(locale31);
        java.util.Locale locale33 = builder32.build();
        java.util.Locale.setDefault(category26, locale33);
        java.util.Locale locale35 = java.util.Locale.getDefault(category26);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        int int38 = dateTimeZone36.getOffset((long) (short) 0);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = dateTimeZone36.getName((long) (short) 1, locale40);
        java.util.Locale.setDefault(category26, locale40);
        java.util.Locale locale43 = java.util.Locale.getDefault(category26);
        java.util.Locale locale44 = java.util.Locale.getDefault(category26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(2592000000L, chronology14, locale44, (java.lang.Integer) 32400000);
        long long47 = dateTimeParserBucket46.computeMillis();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2592000000L + "'", long47 == 2592000000L);
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DurationField durationField18 = dateTimeField17.getRangeDurationField();
        boolean boolean19 = durationField18.isPrecise();
        long long21 = durationField18.getValueAsLong((long) 64801970);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        boolean boolean16 = localDateTime12.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.monthOfYear();
        int int19 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale24.getDisplayCountry(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology23, locale24, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.ReadablePartial readablePartial36 = null;
        int int37 = dateTimeField35.getMaximumValue(readablePartial36);
        long long40 = dateTimeField35.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField41 = dateTimeField35.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        int int48 = property47.getMaximumValueOverall();
        int int49 = property47.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime50 = property47.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        int int57 = property56.getMaximumValueOverall();
        int int58 = property56.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime59 = property56.roundHalfFloorCopy();
        int int60 = property47.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withMinuteOfHour((int) ' ');
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.lang.String str65 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime62, (-1), locale64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.yearOfEra();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundFloorCopy();
        boolean boolean73 = localDateTime62.isAfter((org.joda.time.ReadablePartial) localDateTime72);
        int int74 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime21.minus(readableDuration75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withPeriodAdded(readablePeriod77, 11);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withPeriodAdded(readablePeriod80, 1914);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.minusYears(192000169);
        org.joda.time.LocalDateTime.Property property85 = localDateTime84.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1" + "'", str65, "-1");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfDay();
        boolean boolean25 = dateTimeField23.isLeap(17677059408000001L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale30.getDisplayCountry(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale30, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.hours();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '#', chronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays(0);
        int int47 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale51);
        java.util.Locale locale53 = locale51.stripExtensions();
        java.util.Locale.Builder builder54 = builder50.setLocale(locale53);
        java.util.Locale locale55 = builder54.build();
        java.util.Locale.setDefault(category48, locale55);
        java.util.Locale locale57 = java.util.Locale.getDefault(category48);
        java.util.Locale locale58 = java.util.Locale.getDefault(category48);
        java.lang.String str59 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, locale58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime26.plusDays((-1959));
        int int62 = localDateTime61.getYear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "7" + "'", str59, "7");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2016 + "'", int62 == 2016);
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology12.getZone();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.weekyear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider1 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        java.lang.String str11 = nameProvider1.getShortName(locale5, "hi!", "");
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale15, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str31 = nameProvider27.getName(locale28, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology25, locale28, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str37 = nameProvider1.getName(locale28, "ISOChronology[UTC]", "DurationField[years]");
        java.util.Locale.setDefault(category0, locale28);
        java.util.Locale locale39 = java.util.Locale.getDefault(category0);
        java.util.Locale locale40 = java.util.Locale.getDefault(category0);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(nameProvider27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.yearOfEra();
        int int22 = property21.getMaximumValueOverall();
        int int23 = property21.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime24 = property21.roundHalfFloorCopy();
        int int25 = property21.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = property21.roundFloorCopy();
        long long27 = property21.remainder();
        org.joda.time.LocalDateTime localDateTime29 = property21.setCopy(1970);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readablePeriod33);
        int int35 = localDateTime32.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = property36.setCopy(1);
        org.joda.time.DateTimeField dateTimeField39 = property36.getField();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        int int41 = dateTimeField39.getMaximumTextLength(locale40);
        java.lang.String str42 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, locale40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime29.withDayOfYear(5);
        int int45 = localDateTime29.getCenturyOfEra();
        int int46 = localDateTime29.getEra();
        int int47 = localDateTime29.size();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        boolean boolean54 = localDateTime50.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property55 = localDateTime50.era();
        org.joda.time.LocalDateTime.Property property56 = localDateTime50.monthOfYear();
        org.joda.time.LocalDateTime.Property property57 = localDateTime50.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.year();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime61 = property59.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.era();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = null;
        java.lang.String str65 = localDateTime63.toString(dateTimeFormatter64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withMillisOfDay(11826);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01T00:00:00.000" + "'", str65, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone0.getNameKey((long) 10);
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.DurationField durationField17 = chronology15.years();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        boolean boolean24 = dateTimeZone18.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology25 = chronology15.withZone(dateTimeZone18);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, (long) (short) 0);
        java.util.TimeZone timeZone28 = dateTimeZone18.toTimeZone();
        boolean boolean29 = timeZone28.observesDaylightTime();
        boolean boolean30 = timeZone28.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) '#', chronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMonths((int) (short) 10);
        int int20 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale27, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        java.util.Locale locale38 = dateTimeParserBucket36.getLocale();
        boolean boolean40 = dateTimeParserBucket36.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology41 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology43 = dateTimeParserBucket36.getChronology();
        java.lang.String str44 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.millisOfDay();
        long long49 = chronology43.add((long) 'a', 10L, (int) (short) 0);
        boolean boolean50 = durationFieldType23.isSupported(chronology43);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime17.withFieldAdded(durationFieldType23, 9);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology54, locale55, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.years();
        org.joda.time.DurationField durationField67 = chronology65.minutes();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.DateTimeField dateTimeField69 = chronology65.clockhourOfHalfday();
        boolean boolean70 = durationFieldType23.isSupported(chronology65);
        org.joda.time.DateTimeField dateTimeField71 = chronology65.hourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology65.weekOfWeekyear();
        boolean boolean73 = durationFieldType1.isSupported(chronology65);
        org.joda.time.Chronology chronology75 = null;
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Locale locale77 = null;
        java.lang.String str78 = locale76.getDisplayVariant(locale77);
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.util.Locale locale80 = null;
        java.lang.String str81 = locale79.getDisplayVariant(locale80);
        java.lang.String str82 = locale76.getDisplayCountry(locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology75, locale76, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology86 = dateTimeParserBucket85.getChronology();
        java.util.Locale locale87 = dateTimeParserBucket85.getLocale();
        boolean boolean89 = dateTimeParserBucket85.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology90 = dateTimeParserBucket85.getChronology();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField92 = chronology90.year();
        org.joda.time.Chronology chronology93 = chronology90.withUTC();
        org.joda.time.DateTimeField dateTimeField94 = chronology90.secondOfDay();
        org.joda.time.DateTimeField dateTimeField95 = chronology90.centuryOfEra();
        org.joda.time.DurationField durationField96 = chronology90.weeks();
        boolean boolean97 = durationFieldType1.isSupported(chronology90);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyears" + "'", str24, "weekyears");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 97L + "'", long49 == 97L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(durationField96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        long long16 = dateTimeField13.getDifferenceAsLong(2240611200000L, 0L);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#', chronology30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plus(readableDuration33);
        org.joda.time.DateTimeField dateTimeField36 = localDateTime32.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withDayOfYear((int) (short) 100);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.year();
        org.joda.time.ReadablePartial readablePartial53 = null;
        int int54 = dateTimeField52.getMaximumValue(readablePartial53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minus(readablePeriod58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.yearOfEra();
        int int61 = property60.getMaximumValueOverall();
        int int62 = property60.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime63 = property60.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readablePeriod67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.yearOfEra();
        int int70 = property69.getMaximumValueOverall();
        int int71 = property69.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime72 = property69.roundHalfFloorCopy();
        int int73 = property60.compareTo((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean75 = localDateTime72.isSupported(dateTimeFieldType74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime72.withPeriodAdded(readablePeriod76, (int) 'a');
        int[] intArray79 = new int[] {};
        int int80 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDateTime72, intArray79);
        int int81 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime38, intArray79);
        long long83 = dateTimeField13.roundHalfCeiling(35L);
        int int85 = dateTimeField13.getMaximumValue(311038358400000L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 71L + "'", long16 == 71L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 292278993 + "'", int61 == 292278993);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 292278993 + "'", int70 == 292278993);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-292275054) + "'", int80 == (-292275054));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-292275054) + "'", int81 == (-292275054));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 292278993 + "'", int85 == 292278993);
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone0.getNameKey((long) 10);
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.DurationField durationField17 = chronology15.years();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        boolean boolean24 = dateTimeZone18.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology25 = chronology15.withZone(dateTimeZone18);
        long long27 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, (long) (short) 0);
        long long30 = dateTimeZone18.convertLocalToUTC(2726520621264000000L, true);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale34.getDisplayCountry(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale34, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.years();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.hourOfHalfday();
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology44, locale47, (java.lang.Integer) 2, 70);
        org.joda.time.DateTimeField dateTimeField57 = chronology44.year();
        org.joda.time.DateTimeField dateTimeField58 = chronology44.centuryOfEra();
        boolean boolean59 = dateTimeZone18.equals((java.lang.Object) dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2726520621264000000L + "'", long30 == 2726520621264000000L);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime20.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withWeekyear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime23.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.withDayOfMonth(14);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getRangeDurationType();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = durationFieldType33.getField(chronology46);
        java.lang.String str48 = durationFieldType33.getName();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime31.withFieldAdded(durationFieldType33, 35999947);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime53 = property51.setCopy(53);
        boolean boolean54 = property51.isLeap();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "halfdays" + "'", str48, "halfdays");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        java.util.Locale locale16 = dateTimeParserBucket14.getLocale();
        boolean boolean18 = dateTimeParserBucket14.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket14.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weeks();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 19, chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = locale29.getDisplayCountry(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale29, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.hours();
        boolean boolean41 = durationFieldType26.isSupported(chronology39);
        org.joda.time.DurationField durationField42 = durationFieldType24.getField(chronology39);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology39, locale43, (java.lang.Integer) 1970);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        dateTimeParserBucket45.setZone(dateTimeZone46);
        int int49 = dateTimeZone46.getOffset((-1920001L));
        org.joda.time.Chronology chronology50 = chronology19.withZone(dateTimeZone46);
        boolean boolean51 = durationFieldType1.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField52 = chronology19.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long55 = dateTimeField52.set((long) (-1199232002), "zh");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"zh\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        long long24 = chronology18.add((long) 'a', 10L, (int) (short) 0);
        org.joda.time.DurationField durationField25 = chronology18.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.dayOfWeek();
        org.joda.time.DurationField durationField27 = dateTimeField26.getLeapDurationField();
        int int29 = dateTimeField26.getMaximumValue(432000000L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 97L + "'", long24 == 97L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        int int24 = property23.getMaximumValueOverall();
        int int25 = property23.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfFloorCopy();
        int int27 = property23.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime28 = property23.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readablePeriod31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean34 = localDateTime30.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMinutes((-20999999));
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        int int44 = property43.getMaximumValueOverall();
        int int45 = property43.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readablePeriod50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.yearOfEra();
        int int53 = property52.getMaximumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime55 = property52.roundHalfFloorCopy();
        int int56 = property43.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusSeconds((int) ' ');
        int int60 = localDateTime59.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.plusDays((int) ' ');
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusMillis(3);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withSecondOfMinute(10);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.dayOfYear();
        boolean boolean68 = property67.isLeap();
        java.util.Locale locale70 = new java.util.Locale("0");
        java.lang.String str71 = locale70.toLanguageTag();
        java.lang.String str72 = locale70.getDisplayName();
        int int73 = property67.getMaximumShortTextLength(locale70);
        java.lang.String str74 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, 60264, locale70);
        java.util.Set<java.lang.String> strSet75 = locale70.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 28 + "'", int60 == 28);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals(locale70.toString(), "0");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "und" + "'", str71, "und");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "60264" + "'", str74, "60264");
        org.junit.Assert.assertNotNull(strSet75);
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = durationFieldType1.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.secondOfMinute();
        java.lang.String str19 = dateTimeField17.getAsText(1341120000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        dateTimeParserBucket11.saveField(dateTimeFieldType13, "", locale15);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        dateTimeParserBucket34.saveField(dateTimeFieldType36, "", locale38);
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        dateTimeParserBucket11.saveField(dateTimeFieldType36, "yearOfEra", locale47);
        java.lang.Integer int49 = dateTimeParserBucket11.getOffsetInteger();
        boolean boolean51 = dateTimeParserBucket11.restoreState((java.lang.Object) "gio");
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket11.getZone();
        java.lang.String[] strArray64 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        boolean boolean68 = strSet65.add("Italien");
        boolean boolean70 = strSet65.add("19");
        boolean boolean71 = dateTimeZone52.equals((java.lang.Object) strSet65);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = null;
        java.lang.String str77 = locale75.getDisplayVariant(locale76);
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.util.Locale locale79 = null;
        java.lang.String str80 = locale78.getDisplayVariant(locale79);
        java.lang.String str81 = locale75.getDisplayCountry(locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology74, locale75, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology85 = dateTimeParserBucket84.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.hours();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((long) '#', chronology85);
        org.joda.time.LocalDateTime.Property property88 = localDateTime87.weekyear();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime87.minusMinutes(1);
        org.joda.time.LocalDateTime.Property property91 = localDateTime90.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime90.withYear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property94 = localDateTime90.weekyear();
        org.joda.time.LocalDateTime localDateTime96 = localDateTime90.minusYears((int) (short) 10);
        boolean boolean97 = strSet65.contains((java.lang.Object) localDateTime90);
        org.joda.time.DateTime dateTime98 = localDateTime90.toDateTime();
        org.joda.time.Chronology chronology99 = dateTime98.getChronology();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(chronology99);
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfWeek();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale19.getDisplayName();
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleKeys();
        java.lang.String str23 = locale19.getVariant();
        java.lang.String str24 = locale19.getDisplayName();
        java.lang.String str25 = locale19.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = dateTimeField17.getAsText((-19), locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tedesco" + "'", str21, "tedesco");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tedesco" + "'", str24, "tedesco");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de" + "'", str25, "de");
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        long long17 = durationField14.subtract((long) 10, (int) (short) 10);
        long long20 = durationField14.getValueAsLong((long) 10, (long) 366);
        long long22 = durationField14.getValueAsLong(5615748000L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-599990L) + "'", long17 == (-599990L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 93595L + "'", long22 == 93595L);
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        int int18 = localDateTime17.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.minuteOfHour();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withPeriodAdded(readablePeriod23, 2);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.weekyear();
        int int28 = property27.getMaximumValue();
        org.joda.time.DurationField durationField29 = property27.getDurationField();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale34.getDisplayCountry(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale34, (java.lang.Integer) 0, 0);
        java.lang.String str44 = locale31.getDisplayName(locale34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = property27.setCopy("GMT+23:59", locale34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GMT+23:59\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Englisch" + "'", str44, "Englisch");
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        java.lang.String str20 = dateTimeField17.getAsShortText((long) 'a');
        long long22 = dateTimeField17.roundHalfCeiling((long) (-363));
        long long24 = dateTimeField17.roundFloor((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(36000000);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds(41);
        java.util.Locale locale31 = new java.util.Locale("dayOfMonth");
        java.lang.String str32 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime27, locale31);
        java.lang.String str33 = locale31.getISO3Country();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals(locale31.toString(), "dayofmonth");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "5" + "'", str32, "5");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale17.getDisplayCountry(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology16, locale17, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        java.util.Locale locale28 = dateTimeParserBucket26.getLocale();
        int int29 = dateTimeField14.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale28.getLanguage();
        java.lang.String str31 = locale28.getDisplayVariant();
        java.lang.String str32 = locale28.getLanguage();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "de" + "'", str30, "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "de" + "'", str32, "de");
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfDay();
        long long25 = chronology17.getDateTimeMillis((-62167219199948L), (int) (short) 1, 28, (int) (byte) 10, (int) 'u');
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology17.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((-1052053423200000L), chronology17);
        org.joda.time.DateTimeField dateTimeField30 = chronology17.secondOfDay();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-62167213909883L) + "'", long25 == (-62167213909883L));
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        int int14 = property13.getMaximumValueOverall();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        int int23 = property22.getMaximumValueOverall();
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        int int26 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minus(readablePeriod29);
        int int31 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        boolean boolean33 = localDateTime30.equals((java.lang.Object) 'u');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.minusMonths(31);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekyear(1969);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        java.util.Locale locale52 = dateTimeParserBucket50.getLocale();
        boolean boolean54 = dateTimeParserBucket50.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology55 = dateTimeParserBucket50.getChronology();
        boolean boolean56 = durationFieldType38.isSupported(chronology55);
        boolean boolean57 = localDateTime35.isSupported(durationFieldType38);
        org.joda.time.LocalDateTime.Property property58 = localDateTime35.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime59 = property58.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str11 = dateTimeFieldType10.toString();
        int int12 = localDateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.era();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        int int21 = dateTimeZone19.getOffset((long) (short) 0);
        boolean boolean22 = dateTimeZone19.isFixed();
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone19.isLocalDateTimeGap(localDateTime23);
        int int26 = dateTimeZone19.getStandardOffset((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(365L, dateTimeZone19);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale30.getDisplayCountry(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale30, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale43.getDisplayCountry(locale46);
        dateTimeParserBucket39.saveField(dateTimeFieldType41, "", locale43);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.lang.String str59 = locale53.getDisplayCountry(locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology52, locale53, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology63 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = null;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = null;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        java.lang.String str72 = locale66.getDisplayCountry(locale69);
        dateTimeParserBucket62.saveField(dateTimeFieldType64, "", locale66);
        java.util.Locale locale75 = java.util.Locale.JAPAN;
        dateTimeParserBucket39.saveField(dateTimeFieldType64, "yearOfEra", locale75);
        dateTimeParserBucket39.setOffset(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str80 = dateTimeFieldType79.toString();
        dateTimeParserBucket39.saveField(dateTimeFieldType79, 14);
        java.lang.String str83 = dateTimeFieldType79.getName();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime27.withField(dateTimeFieldType79, 1959);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime15.withField(dateTimeFieldType79, 1971);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "weekyear" + "'", str80, "weekyear");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "weekyear" + "'", str83, "weekyear");
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.millis();
        org.joda.time.tz.NameProvider nameProvider15 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str19 = nameProvider15.getName(locale16, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology13, locale16, (java.lang.Integer) 28, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField23 = chronology13.era();
        org.joda.time.DateTimeField dateTimeField24 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        int int43 = property30.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean47 = localDateTime45.isSupported(dateTimeFieldType46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readablePeriod53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.yearOfEra();
        org.joda.time.LocalDateTime localDateTime56 = property55.roundFloorCopy();
        int int57 = localDateTime56.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime49.withField(dateTimeFieldType59, 35);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plus(readableDuration62);
        java.util.Locale locale64 = java.util.Locale.getDefault();
        java.lang.String str65 = locale64.getVariant();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.lang.String str69 = locale64.getDisplayLanguage(locale67);
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleKeys();
        java.lang.String str71 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, locale67);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime61.minusYears(198);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date74 = localDateTime73.toDate();
// flaky:             org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -12 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(nameProvider15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Italian" + "'", str69, "Italian");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "24" + "'", str71, "24");
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray16 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList17, filteringMode19);
        java.lang.String[] strArray32 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean36 = strSet33.add("Italien");
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet33);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        java.lang.Object[] objArray39 = strSet33.toArray();
        java.util.stream.Stream<java.lang.String> strStream40 = strSet33.stream();
        java.util.stream.Stream<java.lang.String> strStream41 = strSet33.parallelStream();
        strSet33.clear();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.lang.String str51 = locale45.getDisplayCountry(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology44, locale45, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.years();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.hourOfHalfday();
        long long60 = dateTimeField57.add((long) 28, (long) 'u');
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = null;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = null;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.lang.String str68 = locale62.getDisplayCountry(locale65);
        java.lang.String str69 = dateTimeField57.getAsShortText(100, locale65);
        java.util.Set<java.lang.String> strSet70 = locale65.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale locale72 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale72);
        java.util.Locale locale74 = locale72.stripExtensions();
        java.util.Locale.Builder builder75 = builder71.setLocale(locale74);
        java.util.Locale.Builder builder76 = new java.util.Locale.Builder();
        java.util.Locale locale77 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder78 = builder76.setLocale(locale77);
        java.util.Locale.Builder[] builderArray79 = new java.util.Locale.Builder[] { builder71, builder76 };
        java.util.Locale.Builder[] builderArray80 = strSet70.toArray(builderArray79);
        java.util.Locale.Builder[] builderArray81 = strSet33.toArray(builderArray79);
        java.util.Collection<java.lang.String> strCollection82 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = strSet33.containsAll(strCollection82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[UTC, +00:00, DurationField[years], Italia, Italien, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[UTC, +00:00, DurationField[years], Italia, Italien, ]");
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 421200028L + "'", long60 == 421200028L);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100" + "'", str69, "100");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builderArray79);
        org.junit.Assert.assertNotNull(builderArray80);
        org.junit.Assert.assertNotNull(builderArray81);
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        boolean boolean16 = durationFieldType0.isSupported(chronology13);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.millis();
        org.joda.time.DurationField durationField31 = chronology29.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.millisOfDay();
        boolean boolean33 = durationFieldType0.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.era();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = dateTimeField34.add(234927300035L, 1932);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 3287, chronology13);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getDurationType();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        boolean boolean17 = durationFieldType2.isSupported(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology15);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(32400000);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        java.util.Locale locale2 = new java.util.Locale("-31363", "Property[millisOfDay]");
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.ReadablePartial readablePartial17 = null;
        int int18 = dateTimeField16.getMaximumValue(readablePartial17);
        int int21 = dateTimeField16.getDifference(32L, 283996800000L);
        int int22 = dateTimeField16.getMinimumValue();
        int int24 = dateTimeField16.getMinimumValue((long) 1);
        long long26 = dateTimeField16.roundHalfCeiling((long) 69);
        org.joda.time.DurationField durationField27 = dateTimeField16.getRangeDurationField();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.hours();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) '#', chronology41);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plus(readableDuration44);
        org.joda.time.DateTimeField dateTimeField47 = localDateTime43.getField((int) (short) 1);
        java.util.Locale.Category category49 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale50 = java.util.Locale.getDefault(category49);
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale52);
        java.util.Locale locale54 = locale52.stripExtensions();
        java.util.Locale.Builder builder55 = builder51.setLocale(locale54);
        java.util.Locale locale56 = builder55.build();
        java.util.Locale.setDefault(category49, locale56);
        java.util.Locale locale58 = java.util.Locale.getDefault(category49);
        java.util.Locale locale59 = java.util.Locale.getDefault(category49);
        java.lang.String str60 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime43, (int) (byte) 10, locale59);
        java.lang.String str61 = locale2.getDisplayName(locale59);
        org.junit.Assert.assertEquals(locale2.toString(), "-31363_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-8) + "'", int21 == (-8));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-292275054) + "'", int22 == (-292275054));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-292275054) + "'", int24 == (-292275054));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + category49 + "' != '" + java.util.Locale.Category.FORMAT + "'", category49.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "10" + "'", str60, "10");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-31363 (PROPERTY[MILLISOFDAY])" + "'", str61, "-31363 (PROPERTY[MILLISOFDAY])");
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime20.getFields();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readablePeriod25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfWeek();
        int int32 = property31.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime34 = property31.addToCopy((int) (byte) 0);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology37, locale38, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.hours();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) '#', chronology48);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology53, locale54, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology64 = dateTimeParserBucket63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.hours();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) '#', chronology64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusMonths((int) (short) 10);
        boolean boolean69 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.DateTime dateTime70 = localDateTime66.toDateTime();
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime72 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        int int73 = property27.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime72.getZone();
        org.joda.time.Instant instant75 = dateTime72.toInstant();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime72.getZone();
        org.joda.time.DateTime dateTime77 = localDateTime20.toDateTime(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime77.getZone();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 35L + "'", long71 == 35L);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        int int9 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusDays(12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime10.toString(dateTimeFormatter15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.minusDays(80);
        org.joda.time.LocalDateTime.Property property19 = localDateTime10.millisOfDay();
        java.util.Locale locale22 = new java.util.Locale("0");
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        java.util.Locale locale36 = dateTimeParserBucket34.getLocale();
        boolean boolean38 = dateTimeParserBucket34.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket34.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.yearOfEra();
        int int49 = property48.getMaximumValueOverall();
        int int50 = property48.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime51 = property48.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readablePeriod55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.yearOfEra();
        int int58 = property57.getMaximumValueOverall();
        int int59 = property57.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime60 = property57.roundHalfFloorCopy();
        int int61 = property48.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean65 = localDateTime63.isSupported(dateTimeFieldType64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.withPeriodAdded(readablePeriod66, 2);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.weekyear();
        int int70 = localDateTime68.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.plus(readableDuration71);
        org.joda.time.DateTimeField[] dateTimeFieldArray73 = localDateTime68.getFields();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime68.withMillisOfSecond((int) (byte) 100);
        java.util.Locale locale80 = new java.util.Locale("CN", "UnsupportedDurationField[eras]", "coreano");
        java.lang.String str81 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime68, (-521947), locale80);
        java.lang.String str82 = locale22.getDisplayName(locale80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime83 = property19.setCopy("2022-02-22T07:30:27.855", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:30:27.855\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000" + "'", str16, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale22.toString(), "0");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 292278993 + "'", int49 == 292278993);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 19 + "'", int70 == 19);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldArray73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertEquals(locale80.toString(), "cn_UNSUPPORTEDDURATIONFIELD[ERAS]_coreano");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-521947" + "'", str81, "-521947");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale16, (java.lang.Integer) 2, 70);
        org.joda.time.DateTimeField dateTimeField26 = chronology13.year();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundFloorCopy();
        int int34 = localDateTime33.getWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withDayOfYear((int) ' ');
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.monthOfYear();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale43.getDisplayCountry(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology42, locale43, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology53 = dateTimeParserBucket52.getChronology();
        java.util.Locale locale54 = dateTimeParserBucket52.getLocale();
        boolean boolean56 = dateTimeParserBucket52.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology57 = dateTimeParserBucket52.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.year();
        boolean boolean60 = dateTimeField59.isSupported();
        long long63 = dateTimeField59.set((long) 1969, 3);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        int[] intArray70 = new int[] { (byte) 10, ' ', (short) 10, 'x' };
        int[] intArray72 = dateTimeField59.set((org.joda.time.ReadablePartial) localDateTime64, 0, intArray70, (int) (byte) 100);
        int[] intArray74 = dateTimeField26.add((org.joda.time.ReadablePartial) localDateTime38, 0, intArray70, (int) (byte) 10);
        org.joda.time.Chronology chronology76 = null;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = null;
        java.lang.String str79 = locale77.getDisplayVariant(locale78);
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.util.Locale locale81 = null;
        java.lang.String str82 = locale80.getDisplayVariant(locale81);
        java.lang.String str83 = locale77.getDisplayCountry(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology76, locale77, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology87 = dateTimeParserBucket86.getChronology();
        java.util.Locale locale88 = dateTimeParserBucket86.getLocale();
        boolean boolean90 = dateTimeParserBucket86.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology91 = dateTimeParserBucket86.getChronology();
        org.joda.time.DateTimeZone dateTimeZone92 = dateTimeParserBucket86.getZone();
        org.joda.time.Chronology chronology93 = dateTimeParserBucket86.getChronology();
        org.joda.time.DateTimeZone dateTimeZone94 = dateTimeParserBucket86.getZone();
        boolean boolean95 = localDateTime38.equals((java.lang.Object) dateTimeZone94);
        java.lang.String str96 = dateTimeZone94.toString();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-62072524798031L) + "'", long63 == (-62072524798031L));
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[110, 12, 10, 120]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[110, 12, 10, 120]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[110, 12, 10, 120]");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeZone94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "UTC" + "'", str96, "UTC");
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.years();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        boolean boolean17 = durationFieldType1.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.secondOfMinute();
        java.lang.String str19 = chronology14.toString();
        org.joda.time.DurationField durationField20 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str23 = dateTimeZone21.getNameKey((long) 10);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str32 = locale26.getDisplayCountry(locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale26, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.year();
        org.joda.time.DurationField durationField38 = chronology36.years();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        boolean boolean45 = dateTimeZone39.isLocalDateTimeGap(localDateTime44);
        org.joda.time.Chronology chronology46 = chronology36.withZone(dateTimeZone39);
        long long48 = dateTimeZone21.getMillisKeepLocal(dateTimeZone39, (long) (short) 0);
        long long50 = dateTimeZone39.nextTransition(52L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone39);
        int[] intArray54 = chronology14.get((org.joda.time.ReadablePartial) localDateTime52, 496720799999L);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(915148800000L, chronology14);
        org.joda.time.DurationField durationField56 = chronology14.hours();
        long long59 = durationField56.getMillis((-27425248), (long) 835);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 52L + "'", long50 == 52L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1985, 9, 28, 7199999]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-98730892800000L) + "'", long59 == (-98730892800000L));
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology12.getZone();
        int int20 = dateTimeZone18.getOffsetFromLocal((-2726520305608080000L));
        long long24 = dateTimeZone18.convertLocalToUTC(307331999999L, true, 283996800000L);
        int int26 = dateTimeZone18.getStandardOffset((long) 22);
        java.util.Locale locale29 = new java.util.Locale("25");
        java.lang.String str30 = dateTimeZone18.getShortName((-61851600001870L), locale29);
        java.lang.String str31 = locale29.getISO3Country();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 307331999999L + "'", long24 == 307331999999L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale29.toString(), "25");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField16 = chronology12.days();
        boolean boolean17 = durationField16.isSupported();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        java.util.Locale locale12 = dateTimeParserBucket11.getLocale();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket11.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        long long18 = dateTimeZone13.convertLocalToUTC((long) 2922789, true, 50400000L);
        long long21 = dateTimeZone13.adjustOffset((long) (-1595236248), false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2922789L + "'", long18 == 2922789L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1595236248L) + "'", long21 == (-1595236248L));
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        int int9 = property5.getMinimumValue();
        boolean boolean10 = property5.isLeap();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.hourOfHalfday();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        java.util.Locale locale39 = dateTimeParserBucket37.getLocale();
        int int40 = dateTimeField25.getMaximumShortTextLength(locale39);
        java.lang.String str41 = property5.getAsText(locale39);
        int int42 = property5.getMaximumValue();
        java.lang.String str43 = property5.getAsShortText();
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale45);
        java.util.Locale locale47 = locale45.stripExtensions();
        java.util.Locale.Builder builder48 = builder44.setLocale(locale47);
        java.lang.String str49 = property5.getAsShortText(locale47);
        int int50 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime51 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970" + "'", str41, "1970");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970" + "'", str43, "1970");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970" + "'", str49, "1970");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str32 = locale26.getDisplayCountry(locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale26, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.hours();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) '#', chronology36);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plus(readableDuration39);
        org.joda.time.DateTimeField dateTimeField42 = localDateTime38.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withMonthOfYear(4);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.weekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.yearOfEra();
        int int52 = property51.getMaximumValueOverall();
        int int53 = property51.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minus(readablePeriod58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.yearOfEra();
        int int61 = property60.getMaximumValueOverall();
        int int62 = property60.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime63 = property60.roundHalfFloorCopy();
        int int64 = property51.compareTo((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray67 = localDateTime66.getFields();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withWeekyear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.dayOfYear();
        int int73 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        int[] intArray75 = chronology22.get((org.joda.time.ReadablePartial) localDateTime44, (long) 31);
        org.joda.time.DateTimeField dateTimeField76 = chronology22.secondOfDay();
        org.joda.time.DurationField durationField77 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField78 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField79 = chronology22.centuries();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 292278993 + "'", int61 == 292278993);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldArray67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 1, 31]");
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone16);
        java.lang.String str24 = dateTimeZone16.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) 100, dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readablePeriod26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusYears(292277024);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusDays((-1199232002));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        long long17 = dateTimeField14.add((-465787648713600000L), (-14));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-465787649923200000L) + "'", long17 == (-465787649923200000L));
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfYear();
        org.joda.time.DurationField durationField20 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.yearOfCentury();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        boolean boolean19 = durationFieldType4.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType2.getField(chronology17);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21, (java.lang.Integer) 1970);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        dateTimeParserBucket23.setZone(dateTimeZone24);
        int int27 = dateTimeZone24.getOffset((-1920001L));
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale30.getDisplayCountry(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale30, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        boolean boolean49 = dateTimeZone43.isLocalDateTimeGap(localDateTime48);
        org.joda.time.Chronology chronology50 = chronology40.withZone(dateTimeZone43);
        java.lang.String str51 = dateTimeZone43.toString();
        boolean boolean52 = dateTimeZone24.equals((java.lang.Object) dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        java.lang.String str17 = chronology13.toString();
        org.joda.time.DurationField durationField18 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(2L, chronology13);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        int int23 = dateTimeZone21.getOffset((long) (short) 0);
        long long26 = dateTimeZone21.convertLocalToUTC((long) 0, false);
        boolean boolean28 = dateTimeZone21.isStandardOffset((long) 70);
        java.lang.String str30 = dateTimeZone21.getShortName(9223309849824000010L);
        org.joda.time.Chronology chronology31 = chronology13.withZone(dateTimeZone21);
        org.joda.time.DurationField durationField32 = chronology13.months();
        int int35 = durationField32.getDifference(1008000L, 0L);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("120");
        java.util.Locale locale9 = new java.util.Locale("", "hi!");
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.Builder builder12 = builder6.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder6.clearExtensions();
        java.util.Locale.Builder builder15 = builder6.setLanguageTag("de");
        java.util.Locale locale16 = builder6.build();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        org.joda.time.ReadablePartial readablePartial31 = null;
        int int32 = dateTimeField30.getMaximumValue(readablePartial31);
        long long35 = dateTimeField30.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.yearOfEra();
        int int42 = property41.getMaximumValueOverall();
        int int43 = property41.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime44 = property41.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readablePeriod48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfEra();
        int int51 = property50.getMaximumValueOverall();
        int int52 = property50.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime53 = property50.roundHalfFloorCopy();
        int int54 = property41.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime53);
        int int56 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localDateTime55);
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.lang.String str59 = dateTimeField30.getAsText(8035200035L, locale58);
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder61 = builder6.setLocale(locale58);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder63 = builder61.setScript("292278993");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 292278993 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "HI!" + "'", str11, "HI!");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292278993 + "'", int51 == 292278993);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 292278993 + "'", int56 == 292278993);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970" + "'", str59, "1970");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.lang.String str7 = locale1.getDisplayCountry(locale4);
        java.lang.String str10 = nameProvider0.getShortName(locale4, "hi!", "");
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale14.getDisplayCountry(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale14, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.millis();
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str30 = nameProvider26.getName(locale27, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology24, locale27, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str36 = nameProvider0.getName(locale27, "ISOChronology[UTC]", "DurationField[years]");
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale38 = java.util.Locale.getDefault(category37);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale40);
        java.util.Locale locale42 = locale40.stripExtensions();
        java.util.Locale.Builder builder43 = builder39.setLocale(locale42);
        java.util.Locale locale44 = builder43.build();
        java.util.Locale.setDefault(category37, locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.lang.String str59 = locale53.getDisplayCountry(locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology52, locale53, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology63 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.hours();
        boolean boolean65 = durationFieldType50.isSupported(chronology63);
        org.joda.time.DurationField durationField66 = durationFieldType48.getField(chronology63);
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology63, locale67, (java.lang.Integer) 1970);
        java.util.Locale locale70 = dateTimeParserBucket69.getLocale();
        java.util.Set<java.lang.Character> charSet71 = locale70.getExtensionKeys();
        java.lang.String str72 = locale70.getScript();
        java.lang.String str73 = locale44.getDisplayName(locale70);
        java.lang.String str74 = locale27.getDisplayScript(locale44);
        java.util.Locale locale75 = java.util.Locale.ITALY;
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Locale locale77 = null;
        java.lang.String str78 = locale76.getDisplayVariant(locale77);
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.util.Locale locale80 = null;
        java.lang.String str81 = locale79.getDisplayVariant(locale80);
        java.lang.String str82 = locale76.getDisplayCountry(locale79);
        java.lang.String str83 = locale75.getDisplayScript(locale79);
        java.lang.String str84 = locale27.getDisplayCountry(locale79);
        java.util.Set<java.lang.String> strSet85 = locale79.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet85.spliterator();
        java.util.stream.Stream<java.lang.String> strStream87 = strSet85.parallelStream();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + category37 + "' != '" + java.util.Locale.Category.FORMAT + "'", category37.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "italien (Italie)" + "'", str73, "italien (Italie)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Taiwan" + "'", str84, "Taiwan");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertNotNull(strStream87);
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfMonth();
        org.joda.time.DurationField durationField18 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.clockhourOfHalfday();
        org.joda.time.Chronology chronology20 = chronology12.withUTC();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.year();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider1 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        java.lang.String str11 = nameProvider1.getShortName(locale5, "hi!", "");
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale15, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str31 = nameProvider27.getName(locale28, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology25, locale28, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str37 = nameProvider1.getName(locale28, "ISOChronology[UTC]", "DurationField[years]");
        java.util.Locale.setDefault(category0, locale28);
        java.util.Locale locale39 = java.util.Locale.getDefault(category0);
        java.util.Locale locale40 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.lang.String str51 = locale45.getDisplayCountry(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology44, locale45, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology55);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = null;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.lang.String str66 = locale60.getDisplayCountry(locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology59, locale60, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology70 = dateTimeParserBucket69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.years();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.hourOfHalfday();
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = null;
        java.lang.String str77 = locale75.getDisplayVariant(locale76);
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.util.Locale locale79 = null;
        java.lang.String str80 = locale78.getDisplayVariant(locale79);
        java.lang.String str81 = locale75.getDisplayCountry(locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology74, locale75, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology85 = dateTimeParserBucket84.getChronology();
        java.util.Locale locale86 = dateTimeParserBucket84.getLocale();
        int int87 = dateTimeField72.getMaximumShortTextLength(locale86);
        java.lang.String str88 = locale86.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology55, locale86, (java.lang.Integer) 31, 292278993);
        java.util.Locale locale92 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.Character> charSet93 = locale92.getExtensionKeys();
        java.lang.String str94 = locale86.getDisplayScript(locale92);
        java.util.Locale.setDefault(category0, locale92);
        java.lang.String str96 = locale92.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(nameProvider27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "de" + "'", str88, "de");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "de");
        org.junit.Assert.assertNotNull(charSet93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "deu" + "'", str96, "deu");
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.yearOfCentury();
        long long21 = dateTimeField19.roundCeiling((-86400000L));
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readablePeriod25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.yearOfEra();
        int int28 = property27.getMaximumValueOverall();
        int int29 = property27.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime30 = property27.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readablePeriod34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        int int37 = property36.getMaximumValueOverall();
        int int38 = property36.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime39 = property36.roundHalfFloorCopy();
        int int40 = property27.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        java.lang.String str41 = localDateTime39.toString();
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.dayOfYear();
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.weekyear();
        java.lang.String str44 = property43.getAsText();
        java.lang.String str45 = property43.getAsShortText();
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("DurationField[centuries]");
        java.lang.String str48 = property43.getAsShortText(locale47);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.year();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.millisOfDay();
        java.lang.String str66 = chronology62.toString();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(2208988800120L, chronology62);
        int int68 = property43.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        java.util.Locale locale72 = new java.util.Locale("yearOfEra", "Italia", "hi!");
        java.lang.String str73 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime67, locale72);
        java.util.Set<java.lang.String> strSet74 = locale72.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.000" + "'", str41, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970" + "'", str44, "1970");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970" + "'", str45, "1970");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970" + "'", str48, "1970");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[UTC]" + "'", str66, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals(locale72.toString(), "yearofera_ITALIA_hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "40" + "'", str73, "40");
        org.junit.Assert.assertNotNull(strSet74);
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.lang.String str7 = locale1.getDisplayCountry(locale4);
        java.lang.String str10 = nameProvider0.getShortName(locale4, "hi!", "");
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale14.getDisplayCountry(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale14, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.millis();
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str30 = nameProvider26.getName(locale27, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology24, locale27, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str36 = nameProvider0.getName(locale27, "ISOChronology[UTC]", "DurationField[years]");
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.lang.String str43 = locale37.getDisplayCountry(locale40);
        java.lang.String str46 = nameProvider0.getName(locale40, "UTC", "Greenwich Mean Time");
        java.util.Locale locale48 = new java.util.Locale("-01:00");
        java.lang.String str51 = nameProvider0.getShortName(locale48, "yearOfCentury", "38");
        java.util.Locale locale55 = new java.util.Locale("zh-TW", "TW", "2");
        java.lang.String str56 = locale48.getDisplayLanguage(locale55);
        java.util.Set<java.lang.String> strSet57 = locale55.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals(locale48.toString(), "-01:00");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals(locale55.toString(), "zh-tw_TW_2");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-01:00" + "'", str56, "-01:00");
        org.junit.Assert.assertNotNull(strSet57);
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(1);
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        int int11 = dateTimeField9.getMaximumTextLength(locale10);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale16, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology26);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.years();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfHalfday();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.lang.String str52 = locale46.getDisplayCountry(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology45, locale46, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        java.util.Locale locale57 = dateTimeParserBucket55.getLocale();
        int int58 = dateTimeField43.getMaximumShortTextLength(locale57);
        java.lang.String str59 = locale57.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale57, (java.lang.Integer) 31, 292278993);
        java.lang.String str63 = locale10.getDisplayScript(locale57);
        java.util.Set<java.lang.String> strSet64 = locale57.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator65 = strSet64.spliterator();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "de" + "'", str59, "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strSpliterator65);
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusSeconds((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks(2);
        int int10 = localDateTime9.getMinuteOfHour();
        int int11 = localDateTime9.getMillisOfSecond();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        boolean boolean15 = localDateTime9.equals((java.lang.Object) locale13);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale16.getDisplayCountry();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        java.lang.String str48 = nameProvider38.getShortName(locale39, "", "hi!");
        java.lang.String str49 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, (int) (byte) 10, locale39);
        java.lang.String str50 = locale39.getVariant();
        java.lang.String str51 = locale16.getDisplayScript(locale39);
        java.lang.String str52 = locale13.getDisplayName(locale39);
        java.util.Set<java.lang.String> strSet53 = locale13.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.lang.String str62 = locale56.getDisplayCountry(locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology55, locale56, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology66 = dateTimeParserBucket65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.years();
        org.joda.time.DurationField durationField68 = chronology66.minutes();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.dayOfWeek();
        boolean boolean74 = localDateTime69.isEqual((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime69.minusHours(69);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.dayOfWeek();
        org.joda.time.LocalDateTime.Property property80 = localDateTime78.dayOfWeek();
        int int81 = localDateTime78.getWeekyear();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.plusSeconds(675);
        boolean boolean84 = strSet53.contains((java.lang.Object) localDateTime83);
        int int85 = strSet53.size();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "10" + "'", str49, "10");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2032 + "'", int81 == 2032);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        long long23 = chronology12.add(readablePeriod20, (long) 'x', 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology12.year();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = chronology12.get(readablePeriod25, (long) 512);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 120L + "'", long23 == 120L);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        java.lang.String str9 = property5.getAsShortText();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundFloorCopy();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfDay();
        java.lang.String str27 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        int int44 = property43.getMaximumValueOverall();
        int int45 = property43.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        int int47 = property34.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.minus(readablePeriod50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plus(readablePeriod52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getRangeDurationType();
        int int56 = localDateTime51.get(dateTimeFieldType54);
        org.joda.time.DateTime dateTime57 = localDateTime51.toDateTime();
        int int58 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDateTime51);
        long long60 = dateTimeField28.remainder(9L);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = dateTimeField28.getType();
        int int62 = localDateTime10.get(dateTimeFieldType61);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = null;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale65.getDisplayCountry(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology64, locale65, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket74.getChronology();
        java.util.Locale locale76 = dateTimeParserBucket74.getLocale();
        boolean boolean78 = dateTimeParserBucket74.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology79 = dateTimeParserBucket74.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.year();
        org.joda.time.Chronology chronology82 = chronology79.withUTC();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        org.joda.time.Chronology chronology86 = chronology82.withZone(dateTimeZone85);
        boolean boolean87 = dateTimeFieldType61.isSupported(chronology86);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970" + "'", str9, "1970");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 365 + "'", int58 == 365);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 9L + "'", long60 == 9L);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        int int22 = localDateTime21.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusDays((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis(3);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withSecondOfMinute(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMinutes(19);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusDays((-35));
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.lang.String str41 = locale35.getDisplayCountry(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale35, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.years();
        org.joda.time.DurationField durationField47 = chronology45.years();
        org.joda.time.DurationField durationField48 = chronology45.months();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.secondOfMinute();
        boolean boolean50 = localDateTime32.equals((java.lang.Object) chronology45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = localDateTime32.withDayOfWeek((-8));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -8 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 28 + "'", int22 == 28);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField24 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField25 = chronology12.dayOfYear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.hours();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#', chronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays(0);
        int int29 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime8.yearOfEra();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime8.withDurationAdded(readableDuration31, 6574);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology12);
        int int18 = localDateTime17.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds((int) '4');
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.yearOfEra();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale10, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.hours();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) '#', chronology20);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readableDuration23);
        org.joda.time.DateTimeField dateTimeField26 = localDateTime22.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withMonthOfYear(4);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear(28);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readableDuration31);
        org.joda.time.Chronology chronology33 = localDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(518400361, (-521947), (-31373), 48, (-3), (-521947), 20544, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        java.lang.String str18 = localDateTime16.toString("1969");
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale21, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.years();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readablePeriod38);
        boolean boolean40 = dateTimeZone34.isLocalDateTimeGap(localDateTime39);
        org.joda.time.Chronology chronology41 = chronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        boolean boolean49 = localDateTime45.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property50 = localDateTime45.era();
        org.joda.time.LocalDateTime.Property property51 = localDateTime45.monthOfYear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime45.withDayOfMonth(2);
        int[] intArray56 = chronology41.get((org.joda.time.ReadablePartial) localDateTime45, (long) 9);
        int int57 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime16, intArray56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime16.weekyear();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        java.lang.String str60 = dateTimeField59.getName();
        org.joda.time.DurationField durationField61 = dateTimeField59.getDurationField();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969" + "'", str18, "1969");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 9]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "weekyear" + "'", str60, "weekyear");
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minus(readablePeriod7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property9.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale14.getDisplayCountry(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale14, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType11.getField(chronology24);
        java.util.Locale locale30 = new java.util.Locale("10", "DurationField[years]");
        java.lang.String str31 = locale30.getVariant();
        java.util.Set<java.lang.Character> charSet32 = locale30.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(170208000010L, chronology24, locale30, (java.lang.Integer) 365, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(95L, chronology24);
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (byte) -1, chronology24, locale37, (java.lang.Integer) (-52));
        org.joda.time.DateTimeField dateTimeField40 = chronology24.yearOfEra();
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        java.util.Locale locale43 = java.util.Locale.getDefault(category41);
        java.util.Locale.setDefault(locale43);
        java.lang.String str45 = locale43.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(142232747212799L, chronology24, locale43, (java.lang.Integer) 2022);
        java.util.Locale.setDefault(locale43);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals(locale30.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ITA" + "'", str45, "ITA");
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        long long17 = dateTimeField14.add((long) 28, (long) 'u');
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        java.lang.String str26 = dateTimeField14.getAsShortText(100, locale22);
        java.util.Set<java.lang.String> strSet27 = locale22.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream28 = strSet27.stream();
        int int29 = strSet27.size();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 421200028L + "'", long17 == 421200028L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100" + "'", str26, "100");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider1 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        java.lang.String str11 = nameProvider1.getShortName(locale5, "hi!", "");
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale15, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.millis();
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str31 = nameProvider27.getName(locale28, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology25, locale28, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str37 = nameProvider1.getName(locale28, "ISOChronology[UTC]", "DurationField[years]");
        java.util.Locale.setDefault(category0, locale28);
        java.util.Locale locale39 = java.util.Locale.getDefault(category0);
        java.util.Locale locale40 = java.util.Locale.getDefault(category0);
        java.util.Locale locale41 = java.util.Locale.getDefault(category0);
        java.lang.String str42 = locale41.getScript();
        java.lang.String str43 = locale41.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(nameProvider27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str43, "\u4e2d\u6587\u53f0\u7063)");
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        boolean boolean20 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        int int21 = localDateTime15.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.withDurationAdded(readableDuration22, (-3652));
        int int25 = localDateTime15.getYear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minus(readablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readablePeriod26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundFloorCopy();
        int int30 = localDateTime29.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.yearOfEra();
        int int32 = property31.getLeapAmount();
        java.lang.String str33 = property31.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property31.getFieldType();
        boolean boolean35 = localDateTime22.equals((java.lang.Object) dateTimeFieldType34);
        java.lang.String str36 = dateTimeFieldType34.toString();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        java.util.Locale locale50 = dateTimeParserBucket48.getLocale();
        boolean boolean52 = dateTimeParserBucket48.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology53 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket48.getChronology();
        java.lang.String str56 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.millisOfDay();
        long long61 = chronology55.add((long) 'a', 10L, (int) (short) 0);
        org.joda.time.DurationField durationField62 = chronology55.hours();
        org.joda.time.Chronology chronology63 = chronology55.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType34.getField(chronology63);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970" + "'", str33, "1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "yearOfEra" + "'", str36, "yearOfEra");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 97L + "'", long61 == 97L);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '#', chronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays(0);
        int int21 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        int int22 = localDateTime18.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.yearOfCentury();
        int int24 = localDateTime18.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.weekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        java.lang.String str17 = chronology13.toString();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(2208988800120L, chronology13);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale23, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.hours();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '#', chronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMonths((int) (short) 10);
        int int38 = localDateTime35.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readablePeriod42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.yearOfEra();
        int int45 = property44.getMaximumValueOverall();
        int int46 = property44.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime47 = property44.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfEra();
        int int54 = property53.getMaximumValueOverall();
        int int55 = property53.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime56 = property53.roundHalfFloorCopy();
        int int57 = property44.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYearOfCentury((int) ' ');
        int int61 = localDateTime60.size();
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime();
        org.joda.time.Instant instant63 = dateTime62.toInstant();
        org.joda.time.DateTime dateTime64 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime64.getZone();
        int int66 = property19.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        int int9 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plus(readablePeriod13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean16 = localDateTime12.isSupported(dateTimeFieldType15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = localDateTime12.toString(dateTimeFormatter17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readablePeriod31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfEra();
        int int34 = property33.getMaximumValueOverall();
        int int35 = property33.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime36 = property33.roundHalfFloorCopy();
        int int37 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.minusMinutes(28);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getRangeDurationType();
        boolean boolean46 = localDateTime43.isSupported(dateTimeFieldType44);
        boolean boolean47 = localDateTime12.isSupported(dateTimeFieldType44);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology50, locale51, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.year();
        org.joda.time.DurationField durationField63 = chronology61.years();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minus(readablePeriod68);
        boolean boolean70 = dateTimeZone64.isLocalDateTimeGap(localDateTime69);
        org.joda.time.Chronology chronology71 = chronology61.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField72 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField73 = chronology61.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology61.weekOfWeekyear();
        org.joda.time.Chronology chronology76 = null;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = null;
        java.lang.String str79 = locale77.getDisplayVariant(locale78);
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.util.Locale locale81 = null;
        java.lang.String str82 = locale80.getDisplayVariant(locale81);
        java.lang.String str83 = locale77.getDisplayCountry(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology76, locale77, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology87 = dateTimeParserBucket86.getChronology();
        java.util.Locale locale88 = dateTimeParserBucket86.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket((-165888086399988L), chronology61, locale88);
        org.joda.time.DateTimeField dateTimeField90 = chronology61.clockhourOfDay();
        boolean boolean91 = dateTimeFieldType44.isSupported(chronology61);
        org.joda.time.DurationField durationField92 = chronology61.months();
        org.joda.time.DurationField durationField93 = chronology61.minutes();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0000-01-01T00:00:00.000" + "'", str18, "0000-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        boolean boolean6 = dateTimeZone0.isLocalDateTimeGap(localDateTime5);
        int int7 = localDateTime5.getYearOfEra();
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.hours();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#', chronology22);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.hours();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '#', chronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMonths((int) (short) 10);
        boolean boolean43 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.DateTime dateTime44 = localDateTime40.toDateTime();
        long long45 = dateTime44.getMillis();
        org.joda.time.Instant instant46 = dateTime44.toInstant();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str49 = dateTimeZone47.getNameKey((long) 10);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.year();
        org.joda.time.DurationField durationField64 = chronology62.years();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        boolean boolean71 = dateTimeZone65.isLocalDateTimeGap(localDateTime70);
        org.joda.time.Chronology chronology72 = chronology62.withZone(dateTimeZone65);
        long long74 = dateTimeZone47.getMillisKeepLocal(dateTimeZone65, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) instant46, dateTimeZone47);
        org.joda.time.Chronology chronology76 = chronology8.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField77 = chronology8.weekyear();
        org.joda.time.DurationField durationField78 = chronology8.millis();
        long long80 = durationField78.getMillis(23199038L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 23199038L + "'", long80 == 23199038L);
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        int int32 = localDateTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#', chronology46);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusMinutes(1);
        int int52 = localDateTime48.getCenturyOfEra();
        boolean boolean53 = localDateTime16.equals((java.lang.Object) localDateTime48);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime16.plus(readablePeriod54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusYears(14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField59 = localDateTime57.getField(15);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 15");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.weekyear();
        org.joda.time.DurationField durationField19 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField21 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology12.weekyearOfCentury();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        long long39 = dateTimeField36.set((long) '4', (int) (short) 0);
        long long41 = dateTimeField36.roundFloor((long) (byte) 0);
        long long44 = dateTimeField36.set((-62167219199948L), "10");
        long long46 = dateTimeField36.roundCeiling(2208988800120L);
        long long49 = dateTimeField36.set((long) ' ', "10");
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.years();
        org.joda.time.DurationField durationField64 = chronology62.minutes();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology62);
        int int66 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.DurationField durationField67 = dateTimeField36.getLeapDurationField();
        long long70 = dateTimeField36.set(31556952000L, (int) (byte) 10);
        long long72 = dateTimeField36.remainder(3155760000072L);
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str76 = dateTimeField36.getAsText((-1937), locale75);
        int int77 = dateTimeField22.getMaximumShortTextLength(locale75);
        int int79 = dateTimeField22.getMinimumValue((-518550364L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62167219199948L) + "'", long39 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-61851599999948L) + "'", long44 == (-61851599999948L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2240611200000L + "'", long46 == 2240611200000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-61851599999968L) + "'", long49 == (-61851599999968L));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 292278993 + "'", int66 == 292278993);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-61851579048000L) + "'", long70 == (-61851579048000L));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 72L + "'", long72 == 72L);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "-1937" + "'", str76, "-1937");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        long long16 = dateTimeField13.set((long) '4', (int) (short) 0);
        long long18 = dateTimeField13.roundFloor((long) (byte) 0);
        long long21 = dateTimeField13.set((-62167219199948L), "10");
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        java.lang.String str30 = dateTimeField13.getAsText(2208988800120L, locale23);
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale34.getDisplayCountry(locale37);
        java.lang.String str41 = locale33.getDisplayScript(locale37);
        long long42 = dateTimeField13.set(100L, "10", locale33);
        org.joda.time.ReadablePartial readablePartial43 = null;
        java.util.Locale locale46 = new java.util.Locale("100");
        java.lang.String str47 = dateTimeField13.getAsShortText(readablePartial43, 11, locale46);
        java.lang.String str48 = locale46.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = locale46.getUnicodeLocaleType("1970-01-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1970-01-01T00:00:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62167219199948L) + "'", long16 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61851599999948L) + "'", long21 == (-61851599999948L));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2040" + "'", str30, "2040");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-61851599999900L) + "'", long42 == (-61851599999900L));
        org.junit.Assert.assertEquals(locale46.toString(), "100");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "11" + "'", str47, "11");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("0");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("minutes");
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet6.spliterator();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale10, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.joda.time.ReadablePartial readablePartial22 = null;
        int int23 = dateTimeField21.getMaximumValue(readablePartial22);
        int int26 = dateTimeField21.getDifference(32L, 283996800000L);
        int int27 = dateTimeField21.getMinimumValue();
        int int29 = dateTimeField21.getMinimumValue((long) 1);
        long long31 = dateTimeField21.roundHalfCeiling((long) 69);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField21.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.lang.String str43 = locale37.getDisplayCountry(locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology36, locale37, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology47 = dateTimeParserBucket46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.hours();
        boolean boolean49 = durationFieldType34.isSupported(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType32.getField(chronology47);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Locale locale57 = new java.util.Locale("zho", "1969-12-31T22:25:00.001Z", "DurationField[weekyears]");
        java.lang.String str58 = locale52.getDisplayCountry(locale57);
        java.util.Locale.setDefault(locale52);
        java.util.Locale locale60 = locale52.stripExtensions();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = null;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale65.getDisplayCountry(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology64, locale65, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.hours();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) '#', chronology75);
        org.joda.time.DurationField durationField78 = chronology75.months();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology75.clockhourOfHalfday();
        java.util.Locale.Builder builder81 = new java.util.Locale.Builder();
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale82);
        java.util.Locale locale84 = locale82.stripExtensions();
        java.util.Locale.Builder builder85 = builder81.setLocale(locale84);
        java.lang.String str86 = locale84.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket((-9223309849618121007L), chronology75, locale84, (java.lang.Integer) 48, 44);
        java.lang.String str90 = locale52.getDisplayLanguage(locale84);
        int int91 = dateTimeField51.getMaximumTextLength(locale52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = strSet6.remove((java.lang.Object) locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-8) + "'", int26 == (-8));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-292275054) + "'", int27 == (-292275054));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-292275054) + "'", int29 == (-292275054));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "und" + "'", str53, "und");
        org.junit.Assert.assertEquals(locale57.toString(), "zho_1969-12-31T22:25:00.001Z_DurationField[weekyears]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Italia" + "'", str86, "Italia");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 9 + "'", int91 == 9);
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology12.weekOfWeekyear();
        int int26 = dateTimeField24.getMinimumValue(35999947L);
        long long28 = dateTimeField24.roundHalfEven(2246400000L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2160000000L + "'", long28 == 2160000000L);
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime12 = property9.addToCopy((int) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale16, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '#', chronology26);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '#', chronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusMonths((int) (short) 10);
        boolean boolean47 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime();
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime50 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        int int51 = property5.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        int int53 = dateTime50.get(dateTimeFieldType52);
        java.lang.String str54 = dateTimeFieldType52.getName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 35L + "'", long49 == 35L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "year" + "'", str54, "year");
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.minus(readablePeriod44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusHours(4);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.plusMinutes((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        int int52 = dateTimeZone50.getOffset((long) (short) 0);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = dateTimeZone50.getName((long) (short) 1, locale54);
        java.lang.String str56 = dateTimeZone50.getID();
        java.lang.String str58 = dateTimeZone50.getShortName((long) '#');
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale61);
        java.util.Locale locale63 = locale61.stripExtensions();
        java.util.Locale.Builder builder64 = builder60.setLocale(locale63);
        java.lang.String str65 = dateTimeZone50.getName((long) (-52), locale63);
        int int67 = dateTimeZone50.getOffsetFromLocal((long) 28);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime69 = localDateTime49.toDateTime(dateTimeZone50);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime49.minus(readableDuration70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime49.dayOfMonth();
        org.joda.time.DurationField durationField73 = property72.getDurationField();
        org.joda.time.LocalDateTime localDateTime74 = property72.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plus(readablePeriod75);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale16, (java.lang.Integer) 2, 70);
        org.joda.time.DateTimeField dateTimeField26 = chronology13.year();
        org.joda.time.DurationField durationField27 = chronology13.eras();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale17.getDisplayCountry(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale17, (java.lang.Integer) 2, 70);
        boolean boolean27 = dateTimeFieldType0.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField28 = chronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology29 = chronology14.withUTC();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology29.getZone();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1902-01-01T00:32:00.000");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusHours(6574);
        int int4 = localDateTime1.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("6");
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("Italien");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        int int8 = dateTimeZone6.getOffset((long) (short) 0);
        long long11 = dateTimeZone6.convertLocalToUTC(283996800000L, true);
        long long14 = dateTimeZone6.convertLocalToUTC((long) 9, true);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        int int21 = property20.getMaximumValueOverall();
        int int22 = property20.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readablePeriod27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        int int30 = property29.getMaximumValueOverall();
        int int31 = property29.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfFloorCopy();
        int int33 = property20.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYearOfCentury((int) ' ');
        int int37 = localDateTime36.size();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        int int39 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime38);
        java.util.TimeZone timeZone41 = dateTimeZone5.toTimeZone();
        boolean boolean42 = timeZone4.hasSameRules(timeZone41);
        boolean boolean43 = timeZone1.hasSameRules(timeZone4);
        java.time.ZoneId zoneId44 = timeZone4.toZoneId();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        timeZone45.setRawOffset((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        boolean boolean49 = timeZone4.hasSameRules(timeZone45);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.year();
        org.joda.time.DurationField durationField64 = chronology62.years();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        boolean boolean71 = dateTimeZone65.isLocalDateTimeGap(localDateTime70);
        org.joda.time.Chronology chronology72 = chronology62.withZone(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minus(readablePeriod76);
        int int78 = localDateTime77.getYearOfCentury();
        java.util.Date date79 = localDateTime77.toDate();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime83 = localDateTime81.toDateTime(dateTimeZone82);
        org.joda.time.Chronology chronology84 = chronology62.withZone(dateTimeZone82);
        java.util.TimeZone timeZone85 = dateTimeZone82.toTimeZone();
        java.time.ZoneId zoneId86 = timeZone85.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.forTimeZone(timeZone85);
        timeZone85.setRawOffset((int) (byte) 0);
        boolean boolean90 = timeZone45.hasSameRules(timeZone85);
        java.lang.Object obj91 = timeZone45.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 283996800000L + "'", long11 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9L + "'", long14 == 9L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 292278993 + "'", int30 == 292278993);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 70 + "'", int78 == 70);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(timeZone85);
        org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(zoneId86);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        int int24 = localDateTime23.getYearOfCentury();
        java.util.Date date25 = localDateTime23.toDate();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundFloorCopy();
        int int33 = localDateTime32.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.yearOfEra();
        int int35 = property34.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime36 = property34.withMinimumValue();
        boolean boolean37 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        int int38 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.minus(readablePeriod40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusHours(35999947);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getRangeDurationType();
        boolean boolean47 = localDateTime43.isSupported(dateTimeFieldType44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType49 = localDateTime43.getFieldType((-31373));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -31373");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNull(durationFieldType45);
        org.junit.Assert.assertNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        long long19 = chronology12.add((-1920001L), 117L, (int) '#');
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale23, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.hours();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '#', chronology33);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#', chronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusMonths((int) (short) 10);
        boolean boolean54 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        java.lang.String str55 = localDateTime35.toString();
        int[] intArray57 = chronology12.get((org.joda.time.ReadablePartial) localDateTime35, 2L);
        org.joda.time.DurationField durationField58 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField59 = chronology12.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology12.getZone();
        long long64 = dateTimeZone60.convertLocalToUTC((-62419161599903L), true, (long) 615);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1915906L) + "'", long19 == (-1915906L));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.035" + "'", str55, "1970-01-01T00:00:00.035");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1, 2]");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-62419161599903L) + "'", long64 == (-62419161599903L));
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        long long16 = dateTimeField13.set((long) '4', (int) (short) 0);
        long long18 = dateTimeField13.roundFloor((long) (byte) 0);
        long long21 = dateTimeField13.set((-62167219199948L), "10");
        java.lang.String str23 = dateTimeField13.getAsText((-599990L));
        long long25 = dateTimeField13.roundFloor((-62167213909883L));
        int int27 = dateTimeField13.getMaximumValue(3600000L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readablePeriod31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property33.getFieldType();
        org.joda.time.LocalDateTime localDateTime36 = property33.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.hours();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) '#', chronology51);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plus(readableDuration54);
        org.joda.time.DateTimeField dateTimeField57 = localDateTime53.getField((int) (short) 1);
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str60 = dateTimeField57.getAsShortText((int) (byte) 10, locale59);
        java.util.Locale locale64 = new java.util.Locale("10", "DurationField[years]");
        java.lang.String str65 = locale64.getVariant();
        java.util.Locale locale67 = new java.util.Locale("yearOfEra");
        java.lang.String str68 = locale64.getDisplayCountry(locale67);
        java.lang.String str69 = dateTimeField57.getAsShortText((-61851599999948L), locale67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minus(readablePeriod73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.dayOfYear();
        org.joda.time.LocalDateTime localDateTime76 = property75.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime77 = property75.roundFloorCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray78 = localDateTime77.getFields();
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minus(readablePeriod83);
        int int85 = localDateTime84.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType86 = null;
        boolean boolean87 = localDateTime84.isSupported(durationFieldType86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime84.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime84.plusMonths((int) (short) 100);
        int[] intArray91 = localDateTime84.getValues();
        int int92 = dateTimeField57.getMaximumValue((org.joda.time.ReadablePartial) localDateTime77, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = dateTimeField13.set((org.joda.time.ReadablePartial) localDateTime36, 27009301, intArray91, 30680369);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27009301");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62167219199948L) + "'", long16 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61851599999948L) + "'", long21 == (-61851599999948L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969" + "'", str23, "1969");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-62167219200000L) + "'", long25 == (-62167219200000L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u5341\u6708" + "'", str60, "\u5341\u6708");
        org.junit.Assert.assertEquals(locale64.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals(locale67.toString(), "yearofera");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DURATIONFIELD[YEARS]" + "'", str68, "DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Jan" + "'", str69, "Jan");
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldArray78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 70 + "'", int85 == 70);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[1970, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 12 + "'", int92 == 12);
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.dayOfMonth();
        java.lang.String str25 = dateTimeField23.getAsShortText((long) 53);
        long long27 = dateTimeField23.roundHalfEven((-11074880L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        boolean boolean19 = durationFieldType4.isSupported(chronology17);
        org.joda.time.DurationField durationField20 = durationFieldType2.getField(chronology17);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale21, (java.lang.Integer) 1970);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        dateTimeParserBucket23.setZone(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        int int31 = localDateTime30.getYearOfCentury();
        java.util.Date date32 = localDateTime30.toDate();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(dateTimeZone35);
        long long40 = dateTimeZone35.convertLocalToUTC(315569520000L, false, (long) (short) 100);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone35);
        dateTimeParserBucket23.setZone(dateTimeZone35);
        long long44 = dateTimeZone35.nextTransition((long) (short) 100);
        int int46 = dateTimeZone35.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readablePeriod50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.yearOfEra();
        int int53 = property52.getMaximumValueOverall();
        int int54 = property52.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime55 = property52.roundHalfFloorCopy();
        int int56 = property52.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime57 = property52.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusDays((int) 'x');
        boolean boolean61 = dateTimeZone35.isLocalDateTimeGap(localDateTime60);
        int int62 = localDateTime60.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 70 + "'", int31 == 70);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 315569520000L + "'", long40 == 315569520000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1971 + "'", int62 == 1971);
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.year();
        long long27 = dateTimeField24.getDifferenceAsLong(52L, 1L);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale31);
        java.util.Locale locale33 = locale31.stripExtensions();
        java.util.Locale.Builder builder34 = builder30.setLocale(locale33);
        org.joda.time.tz.NameProvider nameProvider35 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str39 = nameProvider35.getName(locale36, "1", "Ora media di Greenwich");
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        java.lang.String str49 = nameProvider35.getName(locale43, "0", "\u30c9\u30a4\u30c4\u8a9e");
        java.lang.String str50 = locale43.getScript();
        java.util.Locale.Builder builder51 = builder30.setLocale(locale43);
        java.util.Set<java.lang.String> strSet52 = locale43.getUnicodeLocaleKeys();
        java.lang.String str53 = locale28.getDisplayVariant(locale43);
        int int54 = dateTimeField24.getMaximumShortTextLength(locale28);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minus(readablePeriod59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.yearOfEra();
        org.joda.time.LocalDateTime localDateTime62 = property61.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property61.getFieldType();
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = null;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = null;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        java.lang.String str72 = locale66.getDisplayCountry(locale69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology65, locale66, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology76 = dateTimeParserBucket75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.millisOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType63.getField(chronology76);
        java.util.Locale locale82 = new java.util.Locale("10", "DurationField[years]");
        java.lang.String str83 = locale82.getVariant();
        java.util.Set<java.lang.Character> charSet84 = locale82.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket(170208000010L, chronology76, locale82, (java.lang.Integer) 365, (int) (short) 0);
        java.lang.String str88 = locale28.getDisplayCountry(locale82);
        java.util.Set<java.lang.String> strSet89 = locale28.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(nameProvider35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals(locale82.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(charSet84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        long long18 = dateTimeField15.add((long) (-292275054), 365);
        long long20 = dateTimeField15.roundHalfFloor((long) (-521947));
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("");
        java.lang.String str24 = dateTimeField15.getAsShortText((-1052190172800000L), locale23);
        int int26 = dateTimeField15.getMaximumValue(17677059407999901L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-292274689L) + "'", long18 == (-292274689L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-521947L) + "'", long20 == (-521947L));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 86399999 + "'", int26 == 86399999);
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray13 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList14, filteringMode16);
        java.lang.String[] strArray29 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean33 = strSet30.add("Italien");
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet30);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology37, locale38, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.years();
        org.joda.time.DurationField durationField50 = chronology48.minutes();
        boolean boolean51 = durationFieldType35.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField52 = chronology48.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.secondOfMinute();
        java.util.Locale locale56 = new java.util.Locale("100");
        int int57 = property54.getMaximumShortTextLength(locale56);
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet58, filteringMode59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap61);
        org.joda.time.tz.Provider provider63 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider63);
        java.util.Set<java.lang.String> strSet65 = provider63.getAvailableIDs();
        java.util.Set<java.lang.String> strSet66 = provider63.getAvailableIDs();
        java.util.Set<java.lang.String> strSet67 = provider63.getAvailableIDs();
        java.lang.Object[] objArray68 = strSet67.toArray();
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags(languageRangeList62, (java.util.Collection<java.lang.String>) strSet67, filteringMode69);
        java.lang.String[] strArray82 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        boolean boolean86 = strSet83.add("Italien");
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.UTC;
        int int89 = dateTimeZone87.getOffset((long) (short) 0);
        long long92 = dateTimeZone87.convertLocalToUTC(283996800000L, true);
        long long95 = dateTimeZone87.convertLocalToUTC((long) 9, true);
        java.lang.String str96 = dateTimeZone87.toString();
        boolean boolean97 = strSet83.contains((java.lang.Object) dateTimeZone87);
        java.lang.String str98 = java.util.Locale.lookupTag(languageRangeList62, (java.util.Collection<java.lang.String>) strSet83);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals(locale56.toString(), "100");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode59.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode69.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 283996800000L + "'", long92 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 9L + "'", long95 == 9L);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "UTC" + "'", str96, "UTC");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setRegion("265");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        int int7 = dateTimeZone5.getOffset((long) (short) 0);
        boolean boolean8 = dateTimeZone5.isFixed();
        java.lang.String str9 = dateTimeZone5.toString();
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.lang.String str12 = locale11.getVariant();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale11.getDisplayLanguage(locale14);
        java.lang.String str17 = locale11.getCountry();
        java.util.Locale locale18 = locale11.stripExtensions();
        java.lang.String str19 = dateTimeZone5.getName((long) 36000000, locale18);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale22.getDisplayCountry(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology21, locale22, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        java.util.Locale locale33 = dateTimeParserBucket31.getLocale();
        boolean boolean35 = dateTimeParserBucket31.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology36 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.year();
        java.util.Locale locale42 = new java.util.Locale("yearofera (ITALIA,hi!)", "86399999");
        java.lang.String str43 = dateTimeField38.getAsText((-47070), locale42);
        java.lang.String str44 = locale18.getDisplayLanguage(locale42);
        java.util.Locale.Builder builder45 = builder4.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder48 = builder45.setUnicodeLocaleKeyword("DateTimeField[weekyearOfCentury]", "-32");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: DateTimeField[weekyearOfCentury] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italian" + "'", str16, "Italian");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "IT" + "'", str17, "IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals(locale42.toString(), "yearofera (italia,hi!)_86399999");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-47070" + "'", str43, "-47070");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italian" + "'", str44, "Italian");
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.yearOfEra();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundFloorCopy();
        boolean boolean51 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime40.dayOfYear();
        org.joda.time.DurationField durationField53 = property52.getLeapDurationField();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNull(durationField53);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale24.getDisplayCountry(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology23, locale24, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        org.joda.time.tz.NameProvider nameProvider42 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale43.getDisplayCountry(locale46);
        java.lang.String str52 = nameProvider42.getShortName(locale43, "", "hi!");
        java.lang.String str53 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime38, (int) (byte) 10, locale43);
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = dateTimeField35.getAsShortText((long) 'x', locale55);
        java.lang.String str57 = dateTimeField20.getAsShortText((int) (byte) 100, locale55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minus(readablePeriod61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.yearOfEra();
        int int64 = property63.getMaximumValueOverall();
        int int65 = property63.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime66 = property63.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minus(readablePeriod70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.yearOfEra();
        int int73 = property72.getMaximumValueOverall();
        int int74 = property72.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime75 = property72.roundHalfFloorCopy();
        int int76 = property63.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean78 = localDateTime75.isSupported(dateTimeFieldType77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime75.withPeriodAdded(readablePeriod79, (-292275054));
        int int82 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.Chronology chronology83 = localDateTime81.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.dayOfYear();
        java.util.Locale locale87 = java.util.Locale.ENGLISH;
        java.lang.String str88 = dateTimeField85.getAsText((int) 'x', locale87);
        java.lang.String str89 = locale87.getScript();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(nameProvider42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "10" + "'", str53, "10");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "120" + "'", str56, "120");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "100" + "'", str57, "100");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 292278993 + "'", int64 == 292278993);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 292278993 + "'", int73 == 292278993);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "120" + "'", str88, "120");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfHour();
        org.joda.time.DurationField durationField15 = chronology12.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = durationField15.getMillis(631151999052L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 63115199905200 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#', chronology30);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plus(readableDuration33);
        org.joda.time.DateTimeField dateTimeField36 = localDateTime32.getField((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfWeek();
        int int41 = localDateTime39.getHourOfDay();
        boolean boolean42 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        int[] intArray44 = chronology12.get((org.joda.time.ReadablePartial) localDateTime32, 283996800000L);
        org.joda.time.DateTimeField dateTimeField45 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField46 = chronology12.years();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1979, 1, 1, 0]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        java.util.Locale locale24 = new java.util.Locale("italiano", "1970-01-01T00:00:00.000", "1");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(2629746000L, chronology19, locale24, (java.lang.Integer) (-23519), 25);
        org.joda.time.DateTimeField dateTimeField28 = chronology19.monthOfYear();
        org.joda.time.DurationField durationField29 = chronology19.minutes();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(locale24.toString(), "italiano_1970-01-01T00:00:00.000_1");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        int int6 = localDateTime5.getYearOfCentury();
        java.util.Date date7 = localDateTime5.toDate();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(dateTimeZone10);
        long long15 = dateTimeZone10.convertLocalToUTC(315569520000L, false, (long) (short) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        int int18 = dateTimeZone10.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        boolean boolean25 = localDateTime21.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.era();
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.monthOfYear();
        boolean boolean28 = dateTimeZone10.isLocalDateTimeGap(localDateTime21);
        boolean boolean29 = dateTimeZone10.isFixed();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(obj0, dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int32 = localDateTime30.indexOf(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getDurationType();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.years();
        org.joda.time.DurationField durationField48 = chronology46.years();
        org.joda.time.DurationField durationField49 = chronology46.seconds();
        org.joda.time.DurationField durationField50 = durationFieldType33.getField(chronology46);
        boolean boolean51 = durationField50.isSupported();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 315569520000L + "'", long15 == 315569520000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone0.getNameKey((long) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long7 = dateTimeZone0.convertLocalToUTC(0L, true, (-1199231999903L));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        int int13 = localDateTime12.getYearOfCentury();
        java.util.Date date14 = localDateTime12.toDate();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.minusHours(53);
        int int23 = localDateTime16.getWeekyear();
        boolean boolean24 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        boolean boolean31 = localDateTime27.equals((java.lang.Object) 'x');
        java.util.Date date32 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.fromDateFields(date32);
        int int34 = localDateTime33.getEra();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusSeconds(59);
        boolean boolean37 = dateTimeZone0.equals((java.lang.Object) localDateTime36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.year();
        org.joda.time.DurationField durationField52 = chronology50.years();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minus(readablePeriod57);
        boolean boolean59 = dateTimeZone53.isLocalDateTimeGap(localDateTime58);
        org.joda.time.Chronology chronology60 = chronology50.withZone(dateTimeZone53);
        java.lang.String str61 = dateTimeZone53.toString();
        long long64 = dateTimeZone53.adjustOffset((long) (short) -1, false);
        long long66 = dateTimeZone0.getMillisKeepLocal(dateTimeZone53, 1199232000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 70 + "'", int13 == 70);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1199232000L + "'", long66 == 1199232000L);
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        java.lang.String[] strArray11 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        boolean boolean15 = strSet12.add("Italien");
        java.lang.Object[] objArray16 = strSet12.toArray();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        java.util.Locale locale30 = dateTimeParserBucket28.getLocale();
        boolean boolean32 = dateTimeParserBucket28.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology33 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekOfWeekyear();
        boolean boolean36 = strSet12.contains((java.lang.Object) chronology33);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale38);
        java.util.Locale locale40 = locale38.stripExtensions();
        java.util.Locale.Builder builder41 = builder37.setLocale(locale40);
        java.util.Locale.Builder builder43 = builder41.addUnicodeLocaleAttribute("Englisch");
        java.util.Locale.Builder builder45 = builder41.removeUnicodeLocaleAttribute("seconds");
        java.util.Locale locale46 = builder41.build();
        boolean boolean47 = strSet12.contains((java.lang.Object) builder41);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[UTC, +00:00, DurationField[years], Italia, Italien, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[UTC, +00:00, DurationField[years], Italia, Italien, ]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT_#u-englisch");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        long long34 = dateTimeField31.set((long) '4', (int) (short) 0);
        long long36 = dateTimeField31.roundFloor(284012568000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField31.getType();
        dateTimeParserBucket11.saveField(dateTimeFieldType37, 252000000);
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType37.getRangeDurationType();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale43.getDisplayCountry(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology42, locale43, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology53 = dateTimeParserBucket52.getChronology();
        java.util.Locale locale54 = dateTimeParserBucket52.getLocale();
        boolean boolean56 = dateTimeParserBucket52.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology57 = dateTimeParserBucket52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeParserBucket52.getZone();
        org.joda.time.Chronology chronology59 = dateTimeParserBucket52.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.DurationField durationField62 = chronology59.eras();
        boolean boolean63 = dateTimeFieldType37.isSupported(chronology59);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-62167219199948L) + "'", long34 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 283996800000L + "'", long36 == 283996800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNull(durationFieldType40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '#', chronology14);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#', chronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMonths((int) (short) 10);
        boolean boolean35 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.yearOfEra();
        int int42 = property41.getMaximumValueOverall();
        int int43 = property41.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime44 = property41.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readablePeriod48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfEra();
        int int51 = property50.getMaximumValueOverall();
        int int52 = property50.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime53 = property50.roundHalfFloorCopy();
        int int54 = property41.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray57 = localDateTime56.getFields();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withWeekyear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime16.withHourOfDay(9);
        org.joda.time.Chronology chronology68 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.secondOfDay();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((-292274689L), chronology68);
        int int71 = localDateTime70.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property72 = localDateTime70.weekyear();
        org.joda.time.Interval interval73 = property72.toInterval();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292278993 + "'", int51 == 292278993);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldArray57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 311 + "'", int71 == 311);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(interval73);
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property18.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        int int27 = property26.getMaximumValueOverall();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readablePeriod33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfEra();
        int int36 = property35.getMaximumValueOverall();
        int int37 = property35.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime38 = property35.roundHalfFloorCopy();
        int int39 = property26.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.dayOfWeek();
        int int44 = localDateTime40.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        java.lang.String str47 = dateTimeFieldType45.getName();
        boolean boolean48 = localDateTime40.isSupported(dateTimeFieldType45);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology50, locale51, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        java.util.Locale locale62 = dateTimeParserBucket60.getLocale();
        boolean boolean64 = dateTimeParserBucket60.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology65 = dateTimeParserBucket60.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.year();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.hourOfDay();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType45.getField(chronology65);
        boolean boolean70 = dateTimeFieldType20.isSupported(chronology65);
        org.joda.time.DateTimeField dateTimeField71 = chronology65.yearOfCentury();
        java.lang.String str73 = dateTimeField71.getAsText((long) 111213);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 292278993 + "'", int36 == 292278993);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekyear" + "'", str47, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "70" + "'", str73, "70");
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.minus(readablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.yearOfEra();
        int int52 = property51.getMaximumValueOverall();
        int int53 = property51.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusMonths((int) (byte) -1);
        int int57 = localDateTime54.getMillisOfDay();
        boolean boolean58 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime45.plusMonths(4);
        java.util.Date date61 = localDateTime45.toDate();
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.fromDateFields(date61);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:32:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        dateTimeParserBucket11.saveField(dateTimeFieldType13, "", locale15);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        dateTimeParserBucket34.saveField(dateTimeFieldType36, "", locale38);
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        dateTimeParserBucket11.saveField(dateTimeFieldType36, "yearOfEra", locale47);
        java.lang.Integer int49 = dateTimeParserBucket11.getOffsetInteger();
        java.lang.Integer int50 = dateTimeParserBucket11.getOffsetInteger();
        dateTimeParserBucket11.setOffset((java.lang.Integer) 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getRangeDurationType();
        dateTimeParserBucket11.saveField(dateTimeFieldType53, 38);
        java.lang.String str57 = dateTimeFieldType53.getName();
        java.lang.String str58 = dateTimeFieldType53.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "minuteOfHour" + "'", str57, "minuteOfHour");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "minuteOfHour" + "'", str58, "minuteOfHour");
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusMillis(31);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMillisOfDay(2022);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.plusSeconds(5700035);
        int int40 = localDateTime39.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusHours(1959);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime39.getFieldTypes();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale16, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DurationField durationField28 = chronology26.years();
        int int29 = durationField13.compareTo(durationField28);
        int int31 = durationField28.getValue((-1L));
        long long33 = durationField28.getMillis((long) 9);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.years();
        long long50 = durationField47.add((long) 'x', 70);
        boolean boolean51 = durationField47.isSupported();
        int int52 = durationField28.compareTo(durationField47);
        int int55 = durationField28.getValue(1097L, 421200028L);
        long long58 = durationField28.getDifferenceAsLong((long) (-1), 315619200000L);
        org.joda.time.DurationFieldType durationFieldType59 = durationField28.getType();
        long long62 = durationField28.getValueAsLong(1087461344332800000L, 2524556160000L);
        long long64 = durationField28.getMillis((long) 347);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 284012568000L + "'", long33 == 284012568000L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2208988800120L + "'", long50 == 2208988800120L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-10L) + "'", long58 == (-10L));
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 34460278L + "'", long62 == 34460278L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10950262344000L + "'", long64 == 10950262344000L);
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        int int21 = dateTimeZone19.getOffset((long) (short) 0);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = dateTimeZone19.getName((long) (short) 1, locale23);
        boolean boolean26 = dateTimeZone19.isStandardOffset(32L);
        org.joda.time.Chronology chronology27 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyearOfCentury();
        java.lang.String str31 = dateTimeField29.getAsShortText((long) 1368);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.lang.String str41 = locale35.getDisplayCountry(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale35, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.year();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfDay();
        java.lang.String str49 = chronology45.toString();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology45.getZone();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.lang.String str54 = locale53.getDisplayCountry();
        java.lang.String str55 = locale52.getDisplayCountry(locale53);
        java.util.Set<java.lang.Character> charSet56 = locale53.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((-1959L), chronology45, locale53, (java.lang.Integer) 86399100, 25);
        int int60 = dateTimeField29.getMaximumShortTextLength(locale53);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "70" + "'", str31, "70");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Canada" + "'", str55, "Canada");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        dateTimeParserBucket11.saveField(dateTimeFieldType17, (int) (byte) -1);
        java.lang.Object obj21 = dateTimeParserBucket11.saveState();
        java.lang.Integer int22 = dateTimeParserBucket11.getOffsetInteger();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket11.getChronology();
        long long26 = dateTimeParserBucket11.computeMillis(true, "117");
        long long29 = dateTimeParserBucket11.computeMillis(true, "2922750");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-62198496000000L) + "'", long26 == (-62198496000000L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-62198496000000L) + "'", long29 == (-62198496000000L));
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        boolean boolean6 = localDateTime2.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.era();
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.plusWeeks(19);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        int int18 = property17.getMaximumValueOverall();
        int int19 = property17.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        int int27 = property26.getMaximumValueOverall();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        int int30 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        boolean boolean32 = locale31.hasExtensions();
        int int33 = property17.getMaximumTextLength(locale31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property17.getFieldType();
        int int35 = localDateTime11.get(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology37, locale38, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        dateTimeParserBucket47.saveField(dateTimeFieldType49, "", locale51);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.weekyear();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType34.getField(chronology59);
        org.joda.time.DurationField durationField62 = chronology59.millis();
        org.joda.time.DurationField durationField63 = chronology59.days();
        org.joda.time.DateTimeField dateTimeField64 = chronology59.secondOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.dayOfWeek();
        java.lang.String str24 = property23.getAsString();
        int int25 = property23.get();
        org.joda.time.LocalDateTime localDateTime26 = property23.getLocalDateTime();
        int int27 = localDateTime26.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readablePeriod31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundFloorCopy();
        int int35 = localDateTime34.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.yearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = property36.setCopy((int) '#');
        org.joda.time.DurationField durationField39 = property36.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField40 = property36.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField40.getType();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType41.getRangeDurationType();
        java.lang.String str43 = dateTimeFieldType41.toString();
        int int44 = localDateTime26.get(dateTimeFieldType41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.lang.String str56 = locale50.getDisplayCountry(locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology49, locale50, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology60 = dateTimeParserBucket59.getChronology();
        java.util.Locale locale61 = dateTimeParserBucket59.getLocale();
        boolean boolean63 = dateTimeParserBucket59.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology64 = dateTimeParserBucket59.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.year();
        org.joda.time.Chronology chronology67 = chronology64.withUTC();
        org.joda.time.DurationField durationField68 = durationFieldType46.getField(chronology67);
        org.joda.time.DurationField durationField69 = chronology67.months();
        boolean boolean70 = dateTimeFieldType41.isSupported(chronology67);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "4" + "'", str24, "4");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yearOfEra" + "'", str43, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekyears" + "'", str47, "weekyears");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray13 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList14, filteringMode16);
        java.lang.String[] strArray29 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean33 = strSet30.add("Italien");
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet30);
        boolean boolean36 = strSet30.remove((java.lang.Object) "era");
        java.lang.Object obj37 = null;
        boolean boolean38 = strSet30.equals(obj37);
        java.util.stream.Stream<java.lang.String> strStream39 = strSet30.stream();
        boolean boolean40 = strSet30.isEmpty();
        java.util.Iterator<java.lang.String> strItor41 = strSet30.iterator();
        boolean boolean43 = strSet30.add("97");
        int int44 = strSet30.size();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone("1969");
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("Italien");
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        java.lang.String str50 = timeZone46.getID();
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.lang.String str59 = locale53.getDisplayCountry(locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology52, locale53, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology63 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.year();
        org.joda.time.DurationField durationField65 = chronology63.years();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minus(readablePeriod70);
        boolean boolean72 = dateTimeZone66.isLocalDateTimeGap(localDateTime71);
        org.joda.time.Chronology chronology73 = chronology63.withZone(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minus(readablePeriod77);
        int int79 = localDateTime78.getYearOfCentury();
        java.util.Date date80 = localDateTime78.toDate();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime84 = localDateTime82.toDateTime(dateTimeZone83);
        org.joda.time.Chronology chronology85 = chronology63.withZone(dateTimeZone83);
        java.util.TimeZone timeZone86 = dateTimeZone83.toTimeZone();
        int int88 = timeZone86.getOffset((long) 28);
        timeZone86.setID("tedesco");
        boolean boolean91 = timeZone46.hasSameRules(timeZone86);
        java.util.TimeZone.setDefault(timeZone86);
        boolean boolean93 = strSet30.remove((java.lang.Object) timeZone86);
        int int94 = timeZone86.getRawOffset();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "GMT" + "'", str50, "GMT");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 70 + "'", int79 == 70);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(timeZone86);
        org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffset((long) (short) 0);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = dateTimeZone0.getName((long) (short) 1, locale4);
        java.lang.String str6 = dateTimeZone0.getID();
        java.lang.String str8 = dateTimeZone0.getShortName((long) '#');
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale13 = locale11.stripExtensions();
        java.util.Locale.Builder builder14 = builder10.setLocale(locale13);
        java.lang.String str15 = dateTimeZone0.getName((long) (-52), locale13);
        int int17 = dateTimeZone0.getOffsetFromLocal((long) 28);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfCentury(70);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale24.getDisplayCountry(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology23, locale24, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.hours();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '#', chronology34);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.hours();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) '#', chronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMonths((int) (short) 10);
        boolean boolean55 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.DateTime dateTime56 = localDateTime52.toDateTime();
        long long57 = dateTime56.getMillis();
        org.joda.time.Instant instant58 = dateTime56.toInstant();
        long long59 = instant58.getMillis();
        org.joda.time.DateTimeZone dateTimeZone60 = instant58.getZone();
        java.lang.String str61 = instant58.toString();
        org.joda.time.DateTime dateTime62 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) instant58);
        java.lang.String str63 = instant58.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 35L + "'", long57 == 35L);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 35L + "'", long59 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:00.035Z" + "'", str61, "1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01T00:00:00.035Z" + "'", str63, "1970-01-01T00:00:00.035Z");
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime15.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMonthOfYear(4);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withSecondOfMinute((int) ' ');
        int int24 = localDateTime23.size();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.millis();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.hourOfHalfday();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DurationField durationField17 = chronology12.years();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = durationField17.getMillis(907200000000012L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 907200000000012 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        long long16 = dateTimeField13.set((long) '4', (int) (short) 0);
        long long18 = dateTimeField13.roundFloor((long) (byte) 0);
        long long21 = dateTimeField13.set((-62167219199948L), "10");
        long long23 = dateTimeField13.roundCeiling(2208988800120L);
        long long26 = dateTimeField13.set((long) ' ', "10");
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = locale29.getDisplayCountry(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale29, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.years();
        org.joda.time.DurationField durationField41 = chronology39.minutes();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology39);
        int int43 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DurationField durationField44 = dateTimeField13.getLeapDurationField();
        boolean boolean46 = dateTimeField13.isLeap((long) 80700);
        int int48 = dateTimeField13.getMinimumValue(103727779200071L);
        org.joda.time.DurationField durationField49 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readablePeriod53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.yearOfEra();
        int int56 = property55.getMaximumValueOverall();
        int int57 = property55.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime58 = property55.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime59 = property55.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime60 = property55.roundHalfEvenCopy();
        org.joda.time.DurationField durationField61 = property55.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime62 = property55.roundHalfEvenCopy();
        int int63 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime62);
        int int65 = dateTimeField13.getMinimumValue(20544L);
        org.joda.time.DurationField durationField66 = dateTimeField13.getRangeDurationField();
        java.lang.String str67 = dateTimeField13.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62167219199948L) + "'", long16 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61851599999948L) + "'", long21 == (-61851599999948L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2240611200000L + "'", long23 == 2240611200000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61851599999968L) + "'", long26 == (-61851599999968L));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 292278993 + "'", int43 == 292278993);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-292275054) + "'", int48 == (-292275054));
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 292278993 + "'", int56 == 292278993);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNull(durationField61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 292278993 + "'", int63 == 292278993);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-292275054) + "'", int65 == (-292275054));
        org.junit.Assert.assertNull(durationField66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DateTimeField[year]" + "'", str67, "DateTimeField[year]");
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.yearOfEra();
        int int22 = property21.getMaximumValueOverall();
        int int23 = property21.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime24 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime26 = property21.roundHalfEvenCopy();
        java.util.Locale locale28 = new java.util.Locale("0");
        java.util.Locale locale31 = new java.util.Locale("10", "DurationField[years]");
        java.lang.String str32 = locale31.getVariant();
        java.util.Set<java.lang.Character> charSet33 = locale31.getExtensionKeys();
        java.lang.String str34 = locale28.getDisplayName(locale31);
        java.lang.String str35 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime26, locale31);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime26.withMinuteOfHour(0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals(locale28.toString(), "0");
        org.junit.Assert.assertEquals(locale31.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.lang.String str17 = locale11.getDisplayCountry(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale11, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType7.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfWeek();
        org.joda.time.Chronology chronology27 = chronology21.withUTC();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(chronology21);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("en-US");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        org.joda.time.DurationField durationField16 = chronology14.years();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        boolean boolean23 = dateTimeZone17.isLocalDateTimeGap(localDateTime22);
        org.joda.time.Chronology chronology24 = chronology14.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        int int30 = localDateTime29.getYearOfCentury();
        java.util.Date date31 = localDateTime29.toDate();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology36 = chronology14.withZone(dateTimeZone34);
        java.util.TimeZone timeZone37 = dateTimeZone34.toTimeZone();
        boolean boolean38 = timeZone37.observesDaylightTime();
        boolean boolean39 = timeZone1.hasSameRules(timeZone37);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 70 + "'", int30 == 70);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        long long16 = dateTimeField13.set((long) '4', (int) (short) 0);
        long long18 = dateTimeField13.roundFloor((long) (byte) 0);
        long long21 = dateTimeField13.set((-62167219199948L), "10");
        java.lang.String str23 = dateTimeField13.getAsText((-599990L));
        boolean boolean24 = dateTimeField13.isSupported();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.hours();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '#', chronology38);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.lang.String str50 = locale44.getDisplayCountry(locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology43, locale44, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.hours();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '#', chronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusMonths((int) (short) 10);
        boolean boolean59 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        int int60 = localDateTime56.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.yearOfEra();
        int int67 = property66.getMaximumValueOverall();
        int int68 = property66.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime69 = property66.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minus(readablePeriod73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.yearOfEra();
        int int76 = property75.getMaximumValueOverall();
        int int77 = property75.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime78 = property75.roundHalfFloorCopy();
        int int79 = property66.compareTo((org.joda.time.ReadablePartial) localDateTime78);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withYearOfCentury((int) ' ');
        int int83 = localDateTime80.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime80.withMillisOfDay(31);
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.weekyear();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime85.minusYears(22);
        int int90 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.Chronology chronology91 = localDateTime89.getChronology();
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        long long95 = chronology91.add(readablePeriod92, (long) 1112, 323);
        java.lang.String str96 = chronology91.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62167219199948L) + "'", long16 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61851599999948L) + "'", long21 == (-61851599999948L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969" + "'", str23, "1969");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 292278993 + "'", int76 == 292278993);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1970 + "'", int83 == 1970);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-292275054) + "'", int90 == (-292275054));
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1112L + "'", long95 == 1112L);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ISOChronology[UTC]" + "'", str96, "ISOChronology[UTC]");
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        long long18 = dateTimeField15.add((long) (-292275054), 365);
        long long20 = dateTimeField15.roundHalfFloor((long) (-521947));
        java.lang.String str21 = dateTimeField15.getName();
        java.util.Locale locale23 = new java.util.Locale("dayOfMonth");
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale24);
        java.util.Locale locale26 = locale24.stripExtensions();
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale24);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        org.joda.time.ReadablePartial readablePartial43 = null;
        int int44 = dateTimeField42.getMaximumValue(readablePartial43);
        long long47 = dateTimeField42.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfEra();
        int int54 = property53.getMaximumValueOverall();
        int int55 = property53.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime56 = property53.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minus(readablePeriod60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.yearOfEra();
        int int63 = property62.getMaximumValueOverall();
        int int64 = property62.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime65 = property62.roundHalfFloorCopy();
        int int66 = property53.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime65);
        int int68 = dateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) localDateTime67);
        java.util.Locale locale71 = new java.util.Locale("", "hi!");
        java.util.Locale locale72 = java.util.Locale.PRC;
        java.lang.String str73 = locale71.getDisplayName(locale72);
        int int74 = dateTimeField42.getMaximumTextLength(locale72);
        java.lang.String str75 = locale24.getDisplayScript(locale72);
        java.lang.String str76 = locale23.getDisplayVariant(locale72);
        java.util.Set<java.lang.Character> charSet77 = locale72.getExtensionKeys();
        int int78 = dateTimeField15.getMaximumShortTextLength(locale72);
        java.lang.String str79 = locale72.getISO3Country();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-292274689L) + "'", long18 == (-292274689L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-521947L) + "'", long20 == (-521947L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfDay" + "'", str21, "millisOfDay");
        org.junit.Assert.assertEquals(locale23.toString(), "dayofmonth");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 292278993 + "'", int54 == 292278993);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 292278993 + "'", int63 == 292278993);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
        org.junit.Assert.assertEquals(locale71.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "HI!" + "'", str73, "HI!");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(charSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 8 + "'", int78 == 8);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "CHN" + "'", str79, "CHN");
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        int int32 = localDateTime16.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minus(readablePeriod36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfEra();
        int int39 = property38.getMaximumValueOverall();
        int int40 = property38.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime41 = property38.roundHalfFloorCopy();
        java.lang.String str42 = property38.getAsShortText();
        org.joda.time.LocalDateTime localDateTime43 = property38.getLocalDateTime();
        boolean boolean44 = localDateTime16.isAfter((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime16.withDayOfYear(9);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMillis(0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970" + "'", str42, "1970");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMinutes(1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusHours((int) 'u');
        org.joda.time.Chronology chronology22 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.years();
        long long16 = durationField14.getValueAsLong((-61851579048000L));
        boolean boolean17 = durationField14.isPrecise();
        long long19 = durationField14.getMillis((long) 80);
        boolean boolean20 = durationField14.isSupported();
        long long23 = durationField14.subtract((-46270L), 300000);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1959L) + "'", long16 == (-1959L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2524556160000L + "'", long19 == 2524556160000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-9467085600046270L) + "'", long23 == (-9467085600046270L));
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        int int3 = dateTimeZone1.getOffset((long) (short) 0);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 1, locale5);
        long long8 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 31);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale15, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.years();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.weekyear();
        org.joda.time.DurationField durationField32 = chronology25.years();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.yearOfEra();
        int int49 = property48.getMaximumValueOverall();
        int int50 = property48.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime51 = property48.roundHalfFloorCopy();
        int int52 = property39.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray55 = localDateTime54.getFields();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withWeekyear((int) (byte) 0);
        int int60 = localDateTime57.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.minusMinutes((-5700000));
        org.joda.time.LocalDateTime localDateTime66 = localDateTime57.withHourOfDay(22);
        java.util.Locale locale67 = java.util.Locale.CHINA;
        boolean boolean68 = locale67.hasExtensions();
        java.lang.String str69 = locale67.getScript();
        java.lang.String str70 = locale67.getDisplayCountry();
        java.lang.String str71 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, locale67);
        java.lang.String str72 = dateTimeZone0.getName(1081236297600000L, locale67);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 31L + "'", long8 == 31L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 292278993 + "'", int49 == 292278993);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldArray55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Cina" + "'", str70, "Cina");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "70" + "'", str71, "70");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = property5.setCopy(52);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale24.getDisplayCountry(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology23, locale24, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.hours();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) '#', chronology34);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plus(readableDuration37);
        org.joda.time.DateTimeField dateTimeField40 = localDateTime36.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withMonthOfYear(4);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime36.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property45 = localDateTime36.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime36.withHourOfDay(0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime36);
        int int49 = localDateTime36.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.lang.String str4 = nameProvider0.getName(locale1, "1", "Ora media di Greenwich");
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        java.lang.String str14 = nameProvider0.getName(locale8, "0", "\u30c9\u30a4\u30c4\u8a9e");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale19);
        java.util.Locale locale21 = locale19.stripExtensions();
        java.util.Locale.Builder builder22 = builder18.setLocale(locale21);
        java.util.Locale.Builder builder24 = builder22.addUnicodeLocaleAttribute("120");
        java.util.Locale locale27 = new java.util.Locale("", "hi!");
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Locale.Builder builder30 = builder24.setLocale(locale28);
        java.util.Locale.Builder builder31 = builder24.clear();
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale35);
        java.util.Locale locale37 = locale35.stripExtensions();
        java.util.Locale.Builder builder38 = builder34.setLocale(locale37);
        java.util.Locale locale39 = builder38.build();
        java.util.Locale.setDefault(category32, locale39);
        java.util.Locale.Builder builder41 = builder31.setLocale(locale39);
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        java.util.Locale.Builder builder43 = builder41.clearExtensions();
        java.util.Locale locale44 = builder41.build();
        java.lang.String str47 = nameProvider0.getName(locale44, "chinese", "1970-01-01T00:00:00.024");
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.years();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.year();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.minuteOfDay();
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = null;
        java.lang.String str75 = locale73.getDisplayVariant(locale74);
        java.lang.String str76 = locale70.getDisplayCountry(locale73);
        java.lang.String str77 = locale69.getDisplayScript(locale73);
        java.util.Set<java.lang.String> strSet78 = locale73.getUnicodeLocaleKeys();
        java.lang.String str79 = dateTimeField67.getAsShortText(0L, locale73);
        java.lang.String str80 = locale48.getDisplayLanguage(locale73);
        java.lang.String str83 = nameProvider0.getName(locale73, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", "-102841");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "HI!" + "'", str29, "HI!");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Chinesisch" + "'", str80, "Chinesisch");
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str45 = dateTimeFieldType44.getName();
        org.joda.time.LocalDateTime.Property property46 = localDateTime40.property(dateTimeFieldType44);
        java.lang.String str47 = property46.getAsString();
        org.joda.time.Interval interval48 = property46.toInterval();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "secondOfDay" + "'", str45, "secondOfDay");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1920" + "'", str47, "1920");
        org.junit.Assert.assertNotNull(interval48);
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("120");
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder12 = builder8.setExtension('x', "Englisch");
        java.util.Locale locale13 = builder8.build();
        java.util.Locale locale14 = builder8.build();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale17.getDisplayCountry(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology16, locale17, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField28.getType();
        org.joda.time.DurationField durationField30 = dateTimeField28.getDurationField();
        java.util.Locale locale35 = new java.util.Locale("yearOfEra", "Italia", "hi!");
        java.lang.String str36 = locale35.getDisplayVariant();
        java.util.Locale locale40 = new java.util.Locale("mer", "cinese (Taiwan)", "italien");
        java.lang.String str41 = locale35.getDisplayVariant(locale40);
        java.lang.String str42 = dateTimeField28.getAsText(7200000L, locale40);
        java.lang.String str43 = locale14.getDisplayLanguage(locale40);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals(locale35.toString(), "yearofera_ITALIA_hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals(locale40.toString(), "mer_CINESE (TAIWAN)_italien");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "7200000" + "'", str42, "7200000");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        int int7 = property6.getMaximumValueOverall();
        int int8 = property6.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        int int16 = property15.getMaximumValueOverall();
        int int17 = property15.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfFloorCopy();
        int int19 = property6.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minus(readablePeriod22);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        java.util.Locale locale27 = new java.util.Locale("10 (DURATIONFIELD[YEARS])", "\u7fa9\u5927\u5229");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 60264, chronology24, locale27, (java.lang.Integer) 2922750, (-2004));
        java.util.Locale locale31 = dateTimeParserBucket30.getLocale();
        long long32 = dateTimeParserBucket30.computeMillis();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "\u7fa9\u5927\u5229");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "\u7fa9\u5927\u5229");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 60264L + "'", long32 == 60264L);
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale16, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DurationField durationField28 = chronology26.years();
        int int29 = durationField13.compareTo(durationField28);
        int int31 = durationField28.getValue((-1L));
        long long33 = durationField28.getMillis((long) 9);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.years();
        long long50 = durationField47.add((long) 'x', 70);
        boolean boolean51 = durationField47.isSupported();
        int int52 = durationField28.compareTo(durationField47);
        long long55 = durationField28.subtract((-1645513008L), 26888508);
        long long57 = durationField28.getMillis(27);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 284012568000L + "'", long33 == 284012568000L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2208988800120L + "'", long50 == 2208988800120L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-848519357936713008L) + "'", long55 == (-848519357936713008L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 852037704000L + "'", long57 == 852037704000L);
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.lang.String str7 = locale1.getDisplayCountry(locale4);
        java.lang.String str10 = nameProvider0.getShortName(locale1, "", "hi!");
        java.util.Locale.setDefault(locale1);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale14.getDisplayCountry(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale14, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        java.util.Locale locale25 = dateTimeParserBucket23.getLocale();
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.lang.String str27 = locale25.getDisplayLanguage(locale26);
        java.lang.String str28 = locale1.getDisplayVariant(locale26);
        java.util.Set<java.lang.Character> charSet29 = locale26.getExtensionKeys();
        java.lang.String str30 = locale26.getISO3Country();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str27, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.dayOfWeek();
        org.joda.time.DurationField durationField17 = chronology12.weeks();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology5, locale6, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '#', chronology16);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readableDuration19);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime18.getField((int) (short) 1);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = dateTimeField22.getAsShortText((int) (byte) 10, locale24);
        java.lang.String str26 = locale24.getISO3Country();
        java.util.Locale.setDefault(category0, locale24);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.ReadablePartial readablePartial44 = null;
        int int45 = dateTimeField43.getMaximumValue(readablePartial44);
        long long48 = dateTimeField43.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField49 = dateTimeField43.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readablePeriod53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.yearOfEra();
        int int56 = property55.getMaximumValueOverall();
        int int57 = property55.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime58 = property55.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minus(readablePeriod62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.yearOfEra();
        int int65 = property64.getMaximumValueOverall();
        int int66 = property64.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime67 = property64.roundHalfFloorCopy();
        int int68 = property55.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withMinuteOfHour((int) ' ');
        java.util.Locale locale72 = java.util.Locale.CHINESE;
        java.lang.String str73 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime70, (-1), locale72);
        org.joda.time.tz.NameProvider nameProvider74 = org.joda.time.DateTimeZone.getNameProvider();
        boolean boolean75 = localDateTime70.equals((java.lang.Object) nameProvider74);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider74);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str80 = nameProvider74.getShortName(locale77, "kor", "italiano");
        java.lang.String str81 = locale77.toLanguageTag();
        java.util.Locale.setDefault(category0, locale77);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u5341\u6708" + "'", str25, "\u5341\u6708");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CHN" + "'", str26, "CHN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 292278993 + "'", int56 == 292278993);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292278993 + "'", int65 == 292278993);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-1" + "'", str73, "-1");
        org.junit.Assert.assertNotNull(nameProvider74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "und" + "'", str81, "und");
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray16 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList17, filteringMode19);
        java.lang.String[] strArray32 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean36 = strSet33.add("Italien");
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet33);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        java.lang.Object[] objArray39 = strSet33.toArray();
        java.util.stream.Stream<java.lang.String> strStream40 = strSet33.stream();
        java.util.stream.Stream<java.lang.String> strStream41 = strSet33.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet33.spliterator();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.lang.String str51 = locale45.getDisplayCountry(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology44, locale45, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.years();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.clockhourOfDay();
        org.joda.time.DurationField durationField59 = chronology55.millis();
        boolean boolean60 = strSet33.equals((java.lang.Object) durationField59);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[UTC, +00:00, DurationField[years], Italia, Italien, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[UTC, +00:00, DurationField[years], Italia, Italien, ]");
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property24.getMinimumValue();
        boolean boolean29 = property24.isLeap();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        int int59 = dateTimeField44.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property24.getAsText(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale58);
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = null;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = null;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.lang.String str70 = locale64.getDisplayCountry(locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology63, locale64, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology74 = dateTimeParserBucket73.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.year();
        org.joda.time.DurationField durationField76 = chronology74.years();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minus(readablePeriod81);
        boolean boolean83 = dateTimeZone77.isLocalDateTimeGap(localDateTime82);
        org.joda.time.Chronology chronology84 = chronology74.withZone(dateTimeZone77);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone77);
        java.util.TimeZone timeZone86 = dateTimeZone77.toTimeZone();
        dateTimeParserBucket61.setZone(dateTimeZone77);
        java.util.Locale locale88 = dateTimeParserBucket61.getLocale();
        long long91 = dateTimeParserBucket61.computeMillis(false, "GMT");
        dateTimeParserBucket61.setOffset((int) (short) 1);
        int int94 = dateTimeParserBucket61.getOffset();
        org.joda.time.DateTimeZone dateTimeZone95 = dateTimeParserBucket61.getZone();
        org.joda.time.LocalDateTime localDateTime96 = new org.joda.time.LocalDateTime(dateTimeZone95);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(timeZone86);
        org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1L + "'", long91 == 1L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone95);
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        dateTimeParserBucket11.setPivotYear((java.lang.Integer) 31);
        dateTimeParserBucket11.setOffset((int) ' ');
        long long22 = dateTimeParserBucket11.computeMillis(true, "\u7fa9\u5927\u5229\u6587");
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale27, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.hours();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) '#', chronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays(0);
        int int44 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localDateTime41.getFieldTypes();
        boolean boolean46 = dateTimeParserBucket11.restoreState((java.lang.Object) dateTimeFieldTypeArray45);
        long long48 = dateTimeParserBucket11.computeMillis(false);
        long long50 = dateTimeParserBucket11.computeMillis(false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 65L + "'", long22 == 65L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 65L + "'", long48 == 65L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 65L + "'", long50 == 65L);
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        java.lang.String str1 = durationFieldType0.toString();
        java.lang.String str2 = durationFieldType0.getName();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.year();
        org.joda.time.DurationField durationField17 = chronology15.years();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        boolean boolean24 = dateTimeZone18.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology25 = chronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology25.seconds();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology25.weeks();
        org.joda.time.DurationField durationField32 = durationFieldType0.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField33 = chronology25.weekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        int int39 = localDateTime38.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusSeconds(1);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        int int48 = property47.getMaximumValueOverall();
        int int49 = property47.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime50 = property47.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minus(readablePeriod58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.yearOfEra();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property60.getFieldType();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = null;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale65.getDisplayCountry(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology64, locale65, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.millisOfDay();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType62.getField(chronology75);
        int int79 = localDateTime54.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime54.withWeekyear(70);
        int int82 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.minusDays(28);
        int int85 = localDateTime84.size();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime84.plusMillis(35);
        org.joda.time.Chronology chronology88 = localDateTime84.getChronology();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime84.withYear((int) (short) 1);
        int int91 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localDateTime90);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "months" + "'", str1, "months");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "months" + "'", str2, "months");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 70 + "'", int39 == 70);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 32 + "'", int79 == 32);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-292275054) + "'", int91 == (-292275054));
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        long long25 = dateTimeZone21.convertLocalToUTC(1555199999L, true, (long) 1970);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1555199999L + "'", long25 == 1555199999L);
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        int int18 = localDateTime17.getYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale22.getDisplayCountry(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology21, locale22, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.year();
        org.joda.time.DurationField durationField34 = chronology32.years();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        boolean boolean41 = dateTimeZone35.isLocalDateTimeGap(localDateTime40);
        org.joda.time.Chronology chronology42 = chronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        long long47 = dateTimeZone35.convertLocalToUTC((long) 1, false, (long) 1970);
        org.joda.time.DateTime dateTime48 = localDateTime17.toDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime17.withYear(1920001);
        int int51 = localDateTime50.getEra();
        org.joda.time.Chronology chronology52 = localDateTime50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology52.getZone();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        dateTimeParserBucket11.saveField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.lang.String str32 = locale26.getDisplayCountry(locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale26, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.years();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfHalfday();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology36, locale39, (java.lang.Integer) 2, 70);
        boolean boolean49 = dateTimeFieldType22.isSupported(chronology36);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readablePeriod53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.yearOfEra();
        int int56 = property55.getMaximumValueOverall();
        int int57 = property55.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime58 = property55.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime59 = property55.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime60 = property55.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.dayOfWeek();
        int int65 = property55.compareTo((org.joda.time.ReadablePartial) localDateTime63);
        long long67 = chronology36.set((org.joda.time.ReadablePartial) localDateTime63, 883612800000L);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 6, chronology36);
        boolean boolean69 = dateTimeFieldType17.isSupported(chronology36);
        org.joda.time.DateTimeField dateTimeField70 = chronology36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = chronology36.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = chronology36.clockhourOfHalfday();
        org.joda.time.DurationField durationField73 = chronology36.weekyears();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 292278993 + "'", int56 == 292278993);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 52L + "'", long67 == 52L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType8.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfWeek();
        org.joda.time.Chronology chronology28 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekyearOfCentury();
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(283996800032L, chronology22, locale30, (java.lang.Integer) 86399999, (-8));
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        int int39 = localDateTime38.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusSeconds(1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusSeconds(3287);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withWeekyear(1972);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime.Property property47 = localDateTime41.property(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType46.getRangeDurationType();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder52 = builder50.setLocale(locale51);
        java.util.Locale.Builder builder53 = builder52.clear();
        java.util.Locale.Builder builder55 = builder52.setVariant("Italien");
        java.util.Locale.Builder builder56 = builder55.clear();
        java.util.Locale.Builder builder58 = builder55.setLanguage("");
        java.util.Locale locale59 = builder58.build();
        dateTimeParserBucket33.saveField(dateTimeFieldType46, "1969-12-31T22:25:00.001Z", locale59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeParserBucket33, dateTimeZone61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeParserBucket");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 70 + "'", int39 == 70);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#', chronology30);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#', chronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusMonths((int) (short) 10);
        boolean boolean51 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTime dateTime52 = localDateTime48.toDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.minusHours(292278993);
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        java.lang.String str58 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime48, 0, locale57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime48.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime48.minusMinutes(59);
        int int63 = localDateTime62.getYearOfEra();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1969 + "'", int63 == 1969);
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        boolean boolean16 = localDateTime12.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.monthOfYear();
        int int19 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.withYear((int) (byte) -1);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.lang.String str30 = locale24.getDisplayCountry(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology23, locale24, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.year();
        org.joda.time.ReadablePartial readablePartial36 = null;
        int int37 = dateTimeField35.getMaximumValue(readablePartial36);
        long long40 = dateTimeField35.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField41 = dateTimeField35.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        int int48 = property47.getMaximumValueOverall();
        int int49 = property47.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime50 = property47.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        int int57 = property56.getMaximumValueOverall();
        int int58 = property56.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime59 = property56.roundHalfFloorCopy();
        int int60 = property47.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withMinuteOfHour((int) ' ');
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.lang.String str65 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime62, (-1), locale64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.yearOfEra();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundFloorCopy();
        boolean boolean73 = localDateTime62.isAfter((org.joda.time.ReadablePartial) localDateTime72);
        int int74 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime21.minus(readableDuration75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withPeriodAdded(readablePeriod77, 11);
        int int80 = localDateTime76.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.plusWeeks(1961);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1" + "'", str65, "-1");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology5, locale6, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        boolean boolean18 = durationFieldType3.isSupported(chronology16);
        org.joda.time.DurationField durationField19 = durationFieldType1.getField(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        long long27 = dateTimeZone22.nextTransition(283996800000L);
        long long29 = dateTimeZone22.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology30 = chronology16.withZone(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology30.add(readablePeriod31, (-1052190172800000L), 3);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.era();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.clockhourOfHalfday();
        long long39 = dateTimeField37.roundFloor(259200120L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 283996800000L + "'", long27 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1052190172800000L) + "'", long34 == (-1052190172800000L));
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 259200000L + "'", long39 == 259200000L);
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        long long21 = durationField18.subtract((-15746918400000L), 1972);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-77977209600000L) + "'", long21 == (-77977209600000L));
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone15);
        java.lang.String str18 = localDateTime16.toString("1969");
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale21, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.years();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readablePeriod38);
        boolean boolean40 = dateTimeZone34.isLocalDateTimeGap(localDateTime39);
        org.joda.time.Chronology chronology41 = chronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        boolean boolean49 = localDateTime45.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property50 = localDateTime45.era();
        org.joda.time.LocalDateTime.Property property51 = localDateTime45.monthOfYear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime45.withDayOfMonth(2);
        int[] intArray56 = chronology41.get((org.joda.time.ReadablePartial) localDateTime45, (long) 9);
        int int57 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime16, intArray56);
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("Deutsch");
        java.lang.String str61 = dateTimeField13.getAsText((long) 69, locale60);
        int int62 = dateTimeField13.getMinimumValue();
        java.lang.String str64 = dateTimeField13.getAsText(946708560000000000L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969" + "'", str18, "1969");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 9]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "deutsch");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "69" + "'", str61, "69");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 10);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.previousTransition((long) (-3600000));
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((-10372770057600000L), dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        int int14 = property13.getMaximumValueOverall();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        int int23 = property22.getMaximumValueOverall();
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        int int26 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfCentury((int) ' ');
        int int30 = localDateTime29.size();
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime();
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minus(readablePeriod36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfEra();
        int int39 = property38.getMaximumValueOverall();
        int int40 = property38.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime41 = property38.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        int int48 = property47.getMaximumValueOverall();
        int int49 = property47.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime50 = property47.roundHalfFloorCopy();
        int int51 = property38.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = localDateTime53.getFields();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withMillisOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean58 = localDateTime53.isSupported(dateTimeFieldType57);
        int int59 = dateTime31.get(dateTimeFieldType57);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = null;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = null;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.lang.String str68 = locale62.getDisplayCountry(locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology61, locale62, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology72 = dateTimeParserBucket71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.year();
        org.joda.time.DurationField durationField74 = chronology72.years();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minus(readablePeriod79);
        boolean boolean81 = dateTimeZone75.isLocalDateTimeGap(localDateTime80);
        org.joda.time.Chronology chronology82 = chronology72.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField83 = chronology82.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.halfdayOfDay();
        org.joda.time.DurationField durationField85 = chronology82.seconds();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.weekyear();
        org.joda.time.DateTimeField dateTimeField87 = chronology82.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType57.getField(chronology82);
        java.lang.String str89 = dateTimeFieldType57.getName();
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType57.getRangeDurationType();
        boolean boolean91 = localDateTime7.isSupported(durationFieldType90);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3600000L) + "'", long6 == (-3600000L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1932-01-01T00:00:00.000Z" + "'", str32, "1932-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 19 + "'", int59 == 19);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "centuryOfEra" + "'", str89, "centuryOfEra");
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone16);
        boolean boolean24 = dateTimeFieldType0.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology23.era();
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("10_DURATIONFIELD[YEARS]");
        int int34 = dateTimeField31.getMaximumTextLength(locale33);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale16, (java.lang.Integer) 2, 70);
        org.joda.time.DateTimeField dateTimeField26 = chronology13.year();
        long long28 = dateTimeField26.roundHalfCeiling((-62167219200000L));
        boolean boolean29 = dateTimeField26.isSupported();
        int int30 = dateTimeField26.getMaximumValue();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-62167219200000L) + "'", long28 == (-62167219200000L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 292278993 + "'", int30 == 292278993);
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfSecond();
        boolean boolean18 = dateTimeField16.isLeap((-61851579048000L));
        long long20 = dateTimeField16.roundCeiling((long) (-525600));
        java.lang.String str21 = dateTimeField16.getName();
        long long24 = dateTimeField16.getDifferenceAsLong(85800000L, 2130094281600000L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (-52));
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays(100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withYear(0);
        java.util.Locale locale32 = new java.util.Locale("0");
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.String str34 = locale32.getDisplayName();
        java.lang.String str35 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale32);
        java.lang.String str36 = locale32.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-525600L) + "'", long20 == (-525600L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfSecond" + "'", str21, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-2130094195800000L) + "'", long24 == (-2130094195800000L));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals(locale32.toString(), "0");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "und" + "'", str33, "und");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "948" + "'", str35, "948");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = dateTimeFieldType0.getName();
        java.lang.String str3 = dateTimeFieldType0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minus(readablePeriod7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property9.getFieldType();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale14.getDisplayCountry(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale14, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType11.getField(chronology24);
        org.joda.time.DurationField durationField28 = chronology24.years();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType0.getField(chronology24);
        java.lang.String str32 = dateTimeField31.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weekyear" + "'", str2, "weekyear");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weekyear" + "'", str3, "weekyear");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "weekyear" + "'", str32, "weekyear");
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        long long16 = dateTimeField13.roundHalfEven((long) (-1));
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology29);
        java.util.Locale locale39 = new java.util.Locale("10", "DurationField[years]");
        java.lang.String str40 = locale39.getVariant();
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        java.lang.String str42 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime35, (int) (short) 100, locale39);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minus(readablePeriod46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.yearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundFloorCopy();
        int int50 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.monthOfYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray52 = localDateTime49.getFields();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.withYearOfCentury(0);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.minus(readablePeriod55);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale39.toString(), "10_DURATIONFIELD[YEARS]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100" + "'", str42, "100");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 86399999 + "'", int50 == 86399999);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldArray52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfDay();
        boolean boolean25 = dateTimeField23.isLeap(17677059408000001L);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale30.getDisplayCountry(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale30, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.hours();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) '#', chronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays(0);
        int int47 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale51);
        java.util.Locale locale53 = locale51.stripExtensions();
        java.util.Locale.Builder builder54 = builder50.setLocale(locale53);
        java.util.Locale locale55 = builder54.build();
        java.util.Locale.setDefault(category48, locale55);
        java.util.Locale locale57 = java.util.Locale.getDefault(category48);
        java.util.Locale locale58 = java.util.Locale.getDefault(category48);
        java.lang.String str59 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getRangeDurationType();
        java.lang.String str62 = dateTimeFieldType60.toString();
        org.joda.time.LocalDateTime.Property property63 = localDateTime26.property(dateTimeFieldType60);
        java.lang.String str64 = property63.getAsText();
        boolean boolean65 = property63.isLeap();
        int int66 = property63.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "7" + "'", str59, "7");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "minuteOfHour" + "'", str62, "minuteOfHour");
        org.junit.Assert.assertNotNull(property63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "33" + "'", str64, "33");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 59 + "'", int66 == 59);
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        int int24 = property23.getMaximumValueOverall();
        int int25 = property23.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        int int33 = property32.getMaximumValueOverall();
        int int34 = property32.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime35 = property32.roundHalfFloorCopy();
        int int36 = property23.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plus(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getRangeDurationType();
        int int45 = localDateTime40.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = localDateTime40.toDateTime();
        int int47 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime40);
        int int48 = localDateTime40.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property49 = localDateTime40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.withWeekOfWeekyear(4);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minus(readablePeriod52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.millisOfDay();
        org.joda.time.Chronology chronology55 = localDateTime51.getChronology();
        int int56 = localDateTime51.size();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 365 + "'", int47 == 365);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        boolean boolean16 = durationFieldType1.isSupported(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.minuteOfHour();
        org.joda.time.DurationField durationField19 = chronology14.months();
        org.joda.time.ReadablePartial readablePartial20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = chronology14.get(readablePartial20, 1306785169L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.minus(readablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.yearOfEra();
        int int52 = property51.getMaximumValueOverall();
        int int53 = property51.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime54 = property51.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusMonths((int) (byte) -1);
        int int57 = localDateTime54.getMillisOfDay();
        boolean boolean58 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime45.plusMonths(4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = localDateTime45.toString(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01T00:32:00.000" + "'", str62, "1970-01-01T00:32:00.000");
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(62135596800001L, chronology13);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        dateTimeParserBucket11.saveField(dateTimeFieldType13, "", locale15);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.year();
        org.joda.time.DurationField durationField37 = chronology35.years();
        boolean boolean38 = durationField37.isSupported();
        boolean boolean39 = dateTimeParserBucket11.restoreState((java.lang.Object) boolean38);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.millis();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale17 = dateTimeParserBucket11.getLocale();
        java.util.Locale.setDefault(locale17);
        java.util.Set<java.lang.Character> charSet19 = locale17.getExtensionKeys();
        java.lang.String str20 = locale17.getISO3Language();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "deu" + "'", str20, "deu");
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        boolean boolean16 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        int int18 = dateTimeField17.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfWeek();
        org.joda.time.tz.NameProvider nameProvider30 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str36 = nameProvider30.getShortName(locale32, "14", "+00:00:00.007");
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.year();
        long long53 = dateTimeField50.set((long) '4', (int) (short) 0);
        long long55 = dateTimeField50.roundFloor((long) (byte) 0);
        long long58 = dateTimeField50.set((-62167219199948L), "10");
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = null;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.lang.String str66 = locale60.getDisplayCountry(locale63);
        java.lang.String str67 = dateTimeField50.getAsText(2208988800120L, locale60);
        java.util.Locale locale70 = java.util.Locale.ITALY;
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.util.Locale locale75 = null;
        java.lang.String str76 = locale74.getDisplayVariant(locale75);
        java.lang.String str77 = locale71.getDisplayCountry(locale74);
        java.lang.String str78 = locale70.getDisplayScript(locale74);
        long long79 = dateTimeField50.set(100L, "10", locale70);
        java.lang.String str80 = locale70.getISO3Language();
        java.lang.String str81 = locale32.getDisplayScript(locale70);
        java.util.Locale locale82 = null;
        java.lang.String str83 = locale32.getDisplayVariant(locale82);
        java.lang.String str84 = locale32.toLanguageTag();
        java.lang.String str85 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime25, 512, locale32);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime25.plus(readableDuration86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property89 = localDateTime87.property(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(nameProvider30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-62167219199948L) + "'", long53 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-61851599999948L) + "'", long58 == (-61851599999948L));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2040" + "'", str67, "2040");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-61851599999900L) + "'", long79 == (-61851599999900L));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ita" + "'", str80, "ita");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "und" + "'", str84, "und");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "512" + "'", str85, "512");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology14);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readablePeriod34);
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale38.getDisplayCountry(locale41);
        java.lang.String str47 = nameProvider37.getShortName(locale38, "", "hi!");
        java.lang.String str48 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime33, (int) (byte) 10, locale38);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime33.withMillisOfSecond(10);
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.lang.String str59 = locale53.getDisplayCountry(locale56);
        java.lang.String str60 = locale52.getDisplayScript(locale56);
        java.lang.String str61 = locale52.getDisplayCountry();
        java.lang.String str62 = localDateTime33.toString("-1", locale52);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = null;
        java.lang.String str67 = locale65.getDisplayVariant(locale66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.lang.String str71 = locale65.getDisplayCountry(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology64, locale65, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology75 = dateTimeParserBucket74.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.year();
        org.joda.time.DurationField durationField77 = chronology75.years();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minus(readablePeriod82);
        boolean boolean84 = dateTimeZone78.isLocalDateTimeGap(localDateTime83);
        org.joda.time.Chronology chronology85 = chronology75.withZone(dateTimeZone78);
        org.joda.time.DateTime dateTime86 = localDateTime33.toDateTime(dateTimeZone78);
        org.joda.time.DateTime dateTime87 = localDateTime16.toDateTime(dateTimeZone78);
        long long89 = dateTimeZone78.convertUTCToLocal((long) '#');
        int int91 = dateTimeZone78.getOffsetFromLocal(360000001L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone78);
        org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime(dateTimeZone78);
        org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime((-31449599990L), dateTimeZone78);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "10" + "'", str48, "10");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Italien" + "'", str61, "Italien");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-1" + "'", str62, "-1");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 35L + "'", long89 == 35L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekOfWeekyear(10);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withCenturyOfEra((int) 'x');
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.years();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        long long47 = chronology42.add(readablePeriod44, (long) 28, 10);
        org.joda.time.DateTimeZone dateTimeZone48 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology42.getZone();
        org.joda.time.DateTime dateTime51 = localDateTime29.toDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readablePeriod55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.yearOfEra();
        int int58 = property57.getMaximumValueOverall();
        int int59 = property57.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime60 = property57.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.yearOfEra();
        int int67 = property66.getMaximumValueOverall();
        int int68 = property66.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime69 = property66.roundHalfFloorCopy();
        int int70 = property57.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray73 = localDateTime72.getFields();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minus(readablePeriod79);
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.yearOfEra();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime75.withFields((org.joda.time.ReadablePartial) localDateTime78);
        int int83 = localDateTime75.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int85 = localDateTime75.get(dateTimeFieldType84);
        int int86 = dateTime51.get(dateTimeFieldType84);
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType84.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetHours((-35));
        java.util.TimeZone timeZone90 = dateTimeZone89.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime((java.lang.Object) durationFieldType87, dateTimeZone89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 28L + "'", long47 == 28L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldArray73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1970 + "'", int83 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 12 + "'", int86 == 12);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(timeZone90);
        org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.DurationField durationField16 = durationFieldType1.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.hourOfHalfday();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale21, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '#', chronology31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plus(readableDuration34);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.years();
        boolean boolean37 = localDateTime35.isSupported(durationFieldType36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusYears((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plus(readableDuration40);
        java.util.Locale locale43 = new java.util.Locale("dayOfMonth");
        java.lang.String str44 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime41, locale43);
        java.util.Locale locale47 = new java.util.Locale("1920", "1970-01-31T23:40:00.000");
        java.lang.String str48 = locale43.getDisplayVariant(locale47);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertEquals(locale43.toString(), "dayofmonth");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertEquals(locale47.toString(), "1920_1970-01-31T23:40:00.000");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfYear();
        long long26 = dateTimeField23.addWrapField((long) (-102685), 300000);
        java.lang.String str27 = dateTimeField23.toString();
        org.joda.time.DurationField durationField28 = dateTimeField23.getLeapDurationField();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-2592102685L) + "'", long26 == (-2592102685L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DateTimeField[dayOfYear]" + "'", str27, "DateTimeField[dayOfYear]");
        org.junit.Assert.assertNull(durationField28);
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        java.lang.String str44 = localDateTime40.toString();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfEra();
        int int48 = property47.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:32:00.000" + "'", str44, "1970-01-01T00:32:00.000");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray16 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList17, filteringMode19);
        java.lang.String[] strArray32 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean36 = strSet33.add("Italien");
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet33);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        dateTimeParserBucket50.saveField(dateTimeFieldType52, "", locale54);
        boolean boolean62 = strSet33.remove((java.lang.Object) dateTimeFieldType52);
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = null;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = null;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.lang.String str70 = locale64.getDisplayCountry(locale67);
        java.lang.String str71 = locale63.getDisplayScript(locale67);
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale67.getDisplayCountry(locale72);
        java.lang.String str74 = locale67.getCountry();
        boolean boolean75 = strSet33.remove((java.lang.Object) locale67);
        java.lang.String str76 = locale67.getDisplayLanguage();
        java.lang.String str77 = locale67.getVariant();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Deutsch" + "'", str76, "Deutsch");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        boolean boolean6 = localDateTime2.equals((java.lang.Object) 'x');
        java.util.Date date7 = localDateTime2.toDate();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromDateFields(date7);
        int int9 = localDateTime8.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        int int16 = property15.getMaximumValueOverall();
        int int17 = property15.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property15.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.minus(readablePeriod31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plus(readablePeriod33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        int int37 = localDateTime32.get(dateTimeFieldType35);
        org.joda.time.DateTime dateTime38 = localDateTime32.toDateTime();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.lang.String str48 = locale42.getDisplayCountry(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology41, locale42, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology52 = dateTimeParserBucket51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.hours();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) '#', chronology52);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = locale58.getDisplayCountry(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology57, locale58, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology68 = dateTimeParserBucket67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.hours();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) '#', chronology68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusMonths((int) (short) 10);
        boolean boolean73 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.DateTime dateTime74 = localDateTime70.toDateTime();
        long long75 = dateTime74.getMillis();
        boolean boolean76 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime77 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int int78 = localDateTime8.getYearOfEra();
        java.util.Date date79 = localDateTime8.toDate();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 35L + "'", long75 == 35L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1970 + "'", int78 == 1970);
        org.junit.Assert.assertNotNull(date79);
// flaky:         org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readablePeriod26);
        int int28 = localDateTime27.getYearOfCentury();
        java.util.Date date29 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology34 = chronology12.withZone(dateTimeZone32);
        java.util.TimeZone timeZone35 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        timeZone35.setID("DurationField[centuries]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = timeZone35.getDisplayName(true, 64801970);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 64801970");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 70 + "'", int28 == 70);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone36);
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology2 = null;
        boolean boolean3 = dateTimeFieldType1.isSupported(chronology2);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#', chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType1.getField(chronology17);
        org.joda.time.DurationField durationField23 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.weekyearOfCentury();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale27, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        long long41 = dateTimeField38.set((long) '4', (int) (short) 0);
        long long43 = dateTimeField38.roundFloor((long) (byte) 0);
        long long46 = dateTimeField38.set((-62167219199948L), "10");
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.lang.String str54 = locale48.getDisplayCountry(locale51);
        java.lang.String str55 = dateTimeField38.getAsText(2208988800120L, locale48);
        java.util.Locale locale58 = java.util.Locale.ITALY;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = null;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.lang.String str65 = locale59.getDisplayCountry(locale62);
        java.lang.String str66 = locale58.getDisplayScript(locale62);
        long long67 = dateTimeField38.set(100L, "10", locale58);
        java.lang.String str68 = locale58.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(82800000L, chronology17, locale58);
        long long73 = chronology17.add(3155695200000L, (-13883L), 2922789);
        org.joda.time.DurationField durationField74 = chronology17.days();
        boolean boolean75 = durationField74.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-62167219199948L) + "'", long41 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-61851599999948L) + "'", long46 == (-61851599999948L));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2040" + "'", str55, "2040");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-61851599999900L) + "'", long67 == (-61851599999900L));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ita" + "'", str68, "ita");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3115118120313L + "'", long73 == 3115118120313L);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        int int9 = property5.getMinimumValue();
        boolean boolean10 = property5.isLeap();
        int int11 = property5.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime12 = property5.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        int int18 = localDateTime17.getYearOfCentury();
        java.util.Date date19 = localDateTime17.toDate();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        int int43 = property30.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfCentury((int) ' ');
        int int47 = localDateTime46.size();
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime();
        boolean boolean49 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime48);
        long long50 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime51 = property5.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readablePeriod55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.yearOfEra();
        org.joda.time.LocalDateTime localDateTime58 = property57.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property57.getFieldType();
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = null;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.lang.String str69 = locale63.getDisplayCountry(locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology62, locale63, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology73 = dateTimeParserBucket72.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology73);
        org.joda.time.DateTimeField dateTimeField76 = dateTimeFieldType59.getField(chronology73);
        org.joda.time.DateTimeField dateTimeField77 = chronology73.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField78 = chronology73.dayOfWeek();
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.util.Locale locale81 = null;
        java.lang.String str82 = locale80.getDisplayVariant(locale81);
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        java.util.Locale locale84 = null;
        java.lang.String str85 = locale83.getDisplayVariant(locale84);
        java.lang.String str86 = locale80.getDisplayCountry(locale83);
        java.lang.String str87 = locale79.getDisplayScript(locale83);
        int int88 = dateTimeField78.getMaximumTextLength(locale83);
        boolean boolean89 = property5.equals((java.lang.Object) dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 70 + "'", int18 == 70);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 38L + "'", long50 == 38L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale10, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType7.getField(chronology20);
        long long25 = dateTimeField23.roundHalfFloor((long) '#');
        int int26 = dateTimeField23.getMaximumValue();
        long long29 = dateTimeField23.add((long) 35, (int) 'x');
        java.util.Locale locale35 = new java.util.Locale("-52192730", "2022-02-22T07:28:52.852", "0032-12-01T00:00:00.000");
        long long36 = dateTimeField23.set(0L, "1712035", locale35);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3786912000035L + "'", long29 == 3786912000035L);
        org.junit.Assert.assertEquals(locale35.toString(), "-52192730_2022-02-22T07:28:52.852_0032-12-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 53964439142400000L + "'", long36 == 53964439142400000L);
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology12.add(readablePeriod22, 3155760000072L, 32);
        org.joda.time.DurationField durationField26 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField27 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology12.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = chronology12.get(readablePeriod29, (-1595236248L), 62198755200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3155760000072L + "'", long25 == 3155760000072L);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusMinutes(70);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime16.plus(readablePeriod36);
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMillisOfSecond(120);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime15.getField((int) (short) 1);
        int int20 = localDateTime15.getCenturyOfEra();
        int int21 = localDateTime15.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withWeekyear((-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale27, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DurationField durationField39 = chronology37.years();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readablePeriod44);
        boolean boolean46 = dateTimeZone40.isLocalDateTimeGap(localDateTime45);
        org.joda.time.Chronology chronology47 = chronology37.withZone(dateTimeZone40);
        boolean boolean48 = dateTimeFieldType24.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.year();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology47.getZone();
        org.joda.time.DurationField durationField54 = chronology47.centuries();
        org.joda.time.DurationFieldType durationFieldType55 = durationField54.getType();
        boolean boolean56 = localDateTime23.isSupported(durationFieldType55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minus(readablePeriod60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.yearOfEra();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundFloorCopy();
        int int64 = localDateTime63.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property65 = localDateTime63.yearOfEra();
        org.joda.time.LocalDateTime localDateTime67 = property65.setCopy((int) '#');
        org.joda.time.DurationField durationField68 = property65.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField69 = property65.getField();
        org.joda.time.LocalDateTime localDateTime70 = property65.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime72);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.secondOfDay();
        int int21 = dateTimeField19.getLeapAmount(2726520621264000000L);
        long long24 = dateTimeField19.add(0L, 48);
        java.lang.String str25 = dateTimeField19.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 48000L + "'", long24 == 48000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DateTimeField[secondOfDay]" + "'", str25, "DateTimeField[secondOfDay]");
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusSeconds(1970);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        org.joda.time.DurationField durationField25 = chronology23.years();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        boolean boolean32 = dateTimeZone26.isLocalDateTimeGap(localDateTime31);
        org.joda.time.Chronology chronology33 = chronology23.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime6, chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone39 = chronology33.getZone();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        int int41 = timeZone40.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology19.add(readablePeriod22, 0L, 53);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType0.getField(chronology19);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType0.getRangeDurationType();
        java.lang.String str29 = dateTimeFieldType0.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "secondOfDay" + "'", str29, "secondOfDay");
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale19 = new java.util.Locale("10 (DURATIONFIELD[YEARS])", "\u7fa9\u5927\u5229");
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale22 = new java.util.Locale("14 (ITALIAN)");
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale25 = java.util.Locale.getDefault(category0);
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        java.lang.String str36 = nameProvider26.getShortName(locale30, "hi!", "");
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.millis();
        org.joda.time.tz.NameProvider nameProvider52 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str56 = nameProvider52.getName(locale53, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology50, locale53, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str62 = nameProvider26.getName(locale53, "ISOChronology[UTC]", "DurationField[years]");
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = null;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        java.lang.String str69 = locale63.getDisplayCountry(locale66);
        java.lang.String str72 = nameProvider26.getName(locale66, "UTC", "Greenwich Mean Time");
        java.util.Locale locale74 = new java.util.Locale("-01:00");
        java.lang.String str77 = nameProvider26.getShortName(locale74, "yearOfCentury", "38");
        java.lang.String str78 = locale74.toLanguageTag();
        java.util.Locale.setDefault(locale74);
        java.util.Set<java.lang.String> strSet80 = locale74.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale74);
        java.util.Locale locale82 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de" + "'", str15, "de");
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "\u7fa9\u5927\u5229");
        org.junit.Assert.assertEquals(locale22.toString(), "14 (italian)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "14 (italian)" + "'", str23, "14 (italian)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "14 (italian)");
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(nameProvider52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals(locale74.toString(), "-01:00");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "und" + "'", str78, "und");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "-01:00");
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DurationField durationField18 = dateTimeField17.getRangeDurationField();
        boolean boolean19 = durationField18.isPrecise();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale22.getDisplayCountry(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology21, locale22, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.year();
        org.joda.time.DurationField durationField34 = chronology32.years();
        long long36 = durationField34.getMillis((int) (short) 10);
        java.lang.String str37 = durationField34.toString();
        long long38 = durationField34.getUnitMillis();
        long long41 = durationField34.subtract(9L, (-35));
        long long42 = durationField34.getUnitMillis();
        int int43 = durationField18.compareTo(durationField34);
        java.lang.String str44 = durationField18.toString();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 315569520000L + "'", long36 == 315569520000L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DurationField[years]" + "'", str37, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 31556952000L + "'", long38 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1104537600009L + "'", long41 == 1104537600009L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 31556952000L + "'", long42 == 31556952000L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DurationField[halfdays]" + "'", str44, "DurationField[halfdays]");
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.yearOfEra();
        int int22 = property21.getMaximumValueOverall();
        int int23 = property21.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime24 = property21.roundHalfFloorCopy();
        int int25 = property21.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = property21.roundFloorCopy();
        long long27 = property21.remainder();
        org.joda.time.LocalDateTime localDateTime29 = property21.setCopy(1970);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readablePeriod33);
        int int35 = localDateTime32.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = property36.setCopy(1);
        org.joda.time.DateTimeField dateTimeField39 = property36.getField();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        int int41 = dateTimeField39.getMaximumTextLength(locale40);
        java.lang.String str42 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, locale40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime29.withDayOfYear(5);
        org.joda.time.DateTime dateTime45 = localDateTime29.toDateTime();
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        long long47 = dateTime45.getMillis();
        org.joda.time.Instant instant48 = dateTime45.toInstant();
        long long49 = dateTime45.getMillis();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.lang.String str17 = locale11.getDisplayCountry(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale11, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType7.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfWeek();
        org.joda.time.Chronology chronology27 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.dayOfWeek();
        long long30 = dateTimeField28.roundHalfCeiling(0L);
        long long32 = dateTimeField28.roundCeiling(1136229120000000000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField28.getType();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField47.getType();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minus(readablePeriod52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.yearOfEra();
        org.joda.time.LocalDateTime localDateTime55 = property54.roundFloorCopy();
        int int56 = localDateTime55.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.yearOfEra();
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.lang.String str59 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, locale58);
        java.lang.String str61 = dateTimeField47.getAsShortText(97L);
        java.lang.String str62 = dateTimeField47.toString();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minus(readablePeriod66);
        int int68 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.minusHours(27049004);
        int int71 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.withWeekyear((-14831));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1136229120000000000L + "'", long32 == 1136229120000000000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "97" + "'", str61, "97");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DateTimeField[millisOfDay]" + "'", str62, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = localDateTime6.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.yearOfCentury();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        java.util.Locale locale24 = dateTimeParserBucket22.getLocale();
        boolean boolean26 = dateTimeParserBucket22.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology27 = dateTimeParserBucket22.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        int int29 = localDateTime28.getYear();
        int int30 = localDateTime28.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.year();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-52));
        int int34 = localDateTime33.getWeekyear();
        org.joda.time.Chronology chronology35 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.withFields((org.joda.time.ReadablePartial) localDateTime33);
        int int37 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        int int38 = localDateTime36.getSecondOfMinute();
        org.joda.time.Chronology chronology39 = localDateTime36.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType10.getField(chronology23);
        org.joda.time.DurationField durationField27 = chronology23.years();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.hourOfHalfday();
        java.lang.String str30 = chronology23.toString();
        org.joda.time.DurationField durationField31 = durationFieldType2.getField(chronology23);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.lang.String str33 = locale32.getDisplayCountry();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.tz.NameProvider nameProvider54 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        java.lang.String str64 = nameProvider54.getShortName(locale55, "", "hi!");
        java.lang.String str65 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime50, (int) (byte) 10, locale55);
        java.lang.String str66 = locale55.getVariant();
        java.lang.String str67 = locale32.getDisplayScript(locale55);
        java.util.Locale locale68 = locale32.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((-221356800000L), chronology23, locale32, (java.lang.Integer) (-1));
        org.joda.time.Chronology chronology71 = dateTimeParserBucket70.getChronology();
        java.util.Locale locale72 = dateTimeParserBucket70.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(nameProvider54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "10" + "'", str65, "10");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it");
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = null;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.lang.String str17 = locale11.getDisplayCountry(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale11, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType7.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfWeek();
        org.joda.time.Chronology chronology27 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfWeek();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#', chronology17);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.lang.String str29 = locale23.getDisplayCountry(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology22, locale23, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.hours();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) '#', chronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMonths((int) (short) 10);
        boolean boolean38 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime();
        long long40 = dateTime39.getMillis();
        org.joda.time.Instant instant41 = dateTime39.toInstant();
        long long42 = instant41.getMillis();
        org.joda.time.DateTimeZone dateTimeZone43 = instant41.getZone();
        int int44 = property3.getDifference((org.joda.time.ReadableInstant) instant41);
        int int45 = property3.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.centuryOfEra();
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale55);
        java.util.Locale locale57 = locale55.stripExtensions();
        java.util.Locale.Builder builder58 = builder54.setLocale(locale57);
        java.util.Locale locale59 = builder58.build();
        java.util.Locale.setDefault(category52, locale59);
        java.util.Locale locale61 = java.util.Locale.getDefault(category52);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minus(readablePeriod65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.yearOfEra();
        int int68 = property67.getMaximumValueOverall();
        int int69 = property67.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime70 = property67.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minus(readablePeriod74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.yearOfEra();
        int int77 = property76.getMaximumValueOverall();
        int int78 = property76.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime79 = property76.roundHalfFloorCopy();
        int int80 = property67.compareTo((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.minus(readablePeriod83);
        org.joda.time.LocalDateTime.Property property85 = localDateTime79.weekyear();
        int int86 = property85.getMinimumValue();
        java.util.Locale locale87 = java.util.Locale.ITALIAN;
        java.lang.String str88 = locale87.getDisplayCountry();
        java.lang.String str89 = locale87.getVariant();
        java.lang.String str90 = property85.getAsText(locale87);
        java.util.Locale.setDefault(category52, locale87);
        java.lang.String str92 = locale87.getDisplayName();
        int int93 = property51.getMaximumShortTextLength(locale87);
        java.lang.String str94 = property3.getAsShortText(locale87);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 35L + "'", long40 == 35L);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 35L + "'", long42 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + category52 + "' != '" + java.util.Locale.Category.FORMAT + "'", category52.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "-01:00");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 292278993 + "'", int68 == 292278993);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 292278993 + "'", int77 == 292278993);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-292275054) + "'", int86 == (-292275054));
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "it");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1970" + "'", str90, "1970");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "italiano" + "'", str92, "italiano");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 7 + "'", int93 == 7);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "gio" + "'", str94, "gio");
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DurationField durationField25 = dateTimeField24.getDurationField();
        long long28 = durationField25.getValueAsLong((-3600000L), 5700097L);
        long long30 = durationField25.getMillis((-1977));
        int int32 = durationField25.getValue((long) 200);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-85406400000L) + "'", long30 == (-85406400000L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.lang.String str11 = locale5.getDisplayCountry(locale8);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale5, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket14.getChronology();
        java.util.Locale locale16 = dateTimeParserBucket14.getLocale();
        boolean boolean18 = dateTimeParserBucket14.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology19 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        int int27 = property26.getMaximumValueOverall();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        int int30 = property26.getMinimumValue();
        boolean boolean31 = property26.isLeap();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.lang.String str40 = locale34.getDisplayCountry(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale34, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology44 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.years();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.hourOfHalfday();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.lang.String str55 = locale49.getDisplayCountry(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology48, locale49, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        java.util.Locale locale60 = dateTimeParserBucket58.getLocale();
        int int61 = dateTimeField46.getMaximumShortTextLength(locale60);
        java.lang.String str62 = property26.getAsText(locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology19, locale60);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = chronology19.withZone(dateTimeZone64);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale68.getDisplayCountry(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology67, locale68, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.year();
        org.joda.time.DurationField durationField80 = chronology78.years();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minus(readablePeriod85);
        boolean boolean87 = dateTimeZone81.isLocalDateTimeGap(localDateTime86);
        org.joda.time.Chronology chronology88 = chronology78.withZone(dateTimeZone81);
        java.lang.String str89 = dateTimeZone81.getID();
        org.joda.time.Chronology chronology90 = chronology65.withZone(dateTimeZone81);
        org.joda.time.DateTimeField dateTimeField91 = chronology90.secondOfDay();
        boolean boolean92 = durationFieldType0.isSupported(chronology90);
        org.joda.time.DurationField durationField93 = chronology90.days();
        org.joda.time.DateTimeField dateTimeField94 = chronology90.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = dateTimeField94.getType();
        org.joda.time.DurationField durationField96 = dateTimeField94.getDurationField();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "months" + "'", str1, "months");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "UTC" + "'", str89, "UTC");
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(durationField96);
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology13);
        org.joda.time.DurationField durationField16 = chronology13.days();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        int int20 = dateTimeZone18.getOffset((long) (short) 0);
        long long23 = dateTimeZone18.convertLocalToUTC(283996800000L, true);
        long long26 = dateTimeZone18.convertLocalToUTC((long) 9, true);
        java.lang.String str27 = dateTimeZone18.toString();
        long long29 = dateTimeZone18.nextTransition((long) 86399999);
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime(dateTimeZone18);
        java.lang.String str32 = dateTimeZone18.getNameKey(1501526192616L);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 283996800000L + "'", long23 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9L + "'", long26 == 9L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86399999L + "'", long29 == 86399999L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray16 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList17, filteringMode19);
        java.lang.String[] strArray32 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean36 = strSet33.add("Italien");
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet33);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        dateTimeParserBucket50.saveField(dateTimeFieldType52, "", locale54);
        boolean boolean62 = strSet33.remove((java.lang.Object) dateTimeFieldType52);
        java.lang.Object[] objArray63 = strSet33.toArray();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[UTC, +00:00, DurationField[years], Italia, Italien, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[UTC, +00:00, DurationField[years], Italia, Italien, ]");
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.lang.String str7 = locale1.getDisplayCountry(locale4);
        java.lang.String str8 = locale0.getDisplayScript(locale4);
        java.util.Locale locale9 = null;
        java.lang.String str10 = locale4.getDisplayCountry(locale9);
        java.util.Set<java.lang.String> strSet11 = locale4.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.lang.String str20 = locale14.getDisplayCountry(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale14, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology24 = dateTimeParserBucket23.getChronology();
        java.util.Locale locale25 = dateTimeParserBucket23.getLocale();
        java.lang.String str26 = locale25.toLanguageTag();
        java.lang.String str27 = locale25.getDisplayVariant();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readablePeriod31);
        int int33 = localDateTime30.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = property34.setCopy(1);
        org.joda.time.DateTimeField dateTimeField37 = property34.getField();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        int int39 = dateTimeField37.getMaximumTextLength(locale38);
        java.lang.String str40 = locale25.getDisplayVariant(locale38);
        java.lang.String str41 = locale4.getDisplayLanguage(locale38);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        int int47 = localDateTime46.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusSeconds((int) (short) 10);
        int int50 = localDateTime49.getEra();
        int int51 = localDateTime49.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withWeekyear(1960);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plus(readablePeriod54);
        boolean boolean56 = locale38.equals((java.lang.Object) readablePeriod54);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "de" + "'", str26, "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Deutsch" + "'", str41, "Deutsch");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 70 + "'", int47 == 70);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.year();
        boolean boolean19 = dateTimeField18.isSupported();
        long long22 = dateTimeField18.set((long) 1969, 3);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        int[] intArray29 = new int[] { (byte) 10, ' ', (short) 10, 'x' };
        int[] intArray31 = dateTimeField18.set((org.joda.time.ReadablePartial) localDateTime23, 0, intArray29, (int) (byte) 100);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField18.getAsText(116121702816000000L, locale33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        int int37 = dateTimeZone35.getOffset((long) (short) 0);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = dateTimeZone35.getName((long) (short) 1, locale39);
        java.lang.String str41 = dateTimeZone35.getID();
        java.lang.String str43 = dateTimeZone35.getShortName((long) '#');
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.lang.String str55 = locale49.getDisplayCountry(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology48, locale49, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.hours();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) '#', chronology59);
        int int62 = localDateTime61.getYear();
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime64 = property63.getLocalDateTime();
        int int65 = property63.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime66 = property63.roundHalfEvenCopy();
        int[] intArray67 = localDateTime66.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dateTimeField18.add((org.joda.time.ReadablePartial) localDateTime44, 11826, intArray67, (-366));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11826");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-62072524798031L) + "'", long22 == (-62072524798031L));
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 12, 10, 120]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 12, 10, 120]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "3681720" + "'", str34, "3681720");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1970, 1, 1, 0]");
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.lang.String str7 = locale1.getDisplayCountry(locale4);
        java.lang.String str8 = locale0.getDisplayScript(locale4);
        java.util.Set<java.lang.String> strSet9 = locale4.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor10 = strSet9.iterator();
        strSet9.clear();
        java.util.stream.Stream<java.lang.String> strStream12 = strSet9.stream();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.lang.String str24 = locale18.getDisplayCountry(locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology17, locale18, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology28 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.year();
        org.joda.time.DurationField durationField30 = chronology28.years();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minus(readablePeriod35);
        boolean boolean37 = dateTimeZone31.isLocalDateTimeGap(localDateTime36);
        org.joda.time.Chronology chronology38 = chronology28.withZone(dateTimeZone31);
        boolean boolean39 = dateTimeFieldType15.isSupported(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.year();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology38.getZone();
        boolean boolean45 = durationFieldType14.isSupported(chronology38);
        java.lang.String str46 = durationFieldType14.getName();
        boolean boolean47 = strSet9.contains((java.lang.Object) str46);
        boolean boolean48 = strSet9.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.lang.String[] strArray65 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.Locale.FilteringMode filteringMode68 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strList66, filteringMode68);
        java.lang.String[] strArray81 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        boolean boolean85 = strSet82.add("Italien");
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strSet82);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strSet82);
        strSet82.clear();
        java.util.Iterator<java.lang.String> strItor89 = strSet82.iterator();
        boolean boolean90 = strSet9.addAll((java.util.Collection<java.lang.String>) strSet82);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "halfdays" + "'", str46, "halfdays");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + filteringMode68 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode68.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(strItor89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMillis(3287);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getDisplayCountry(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale13, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.hours();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) '#', chronology23);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = locale29.getDisplayCountry(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale29, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.hours();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '#', chronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusMonths((int) (short) 10);
        boolean boolean44 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.DateTime dateTime45 = localDateTime41.toDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.minusHours(292278993);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusMinutes(32);
        boolean boolean50 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = localDateTime7.toString(dateTimeFormatter51);
        int int53 = localDateTime7.getDayOfYear();
        int int54 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime7.plusWeeks(31);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYear((-2000));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date59 = localDateTime58.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -712 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:03.288" + "'", str52, "1970-01-01T00:00:03.288");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#', chronology30);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#', chronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusMonths((int) (short) 10);
        boolean boolean51 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTime dateTime52 = localDateTime48.toDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.minusHours(292278993);
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        java.lang.String str58 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime48, 0, locale57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime48.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusYears((-1937));
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime64 = property63.roundHalfFloorCopy();
        org.joda.time.Chronology chronology65 = localDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.year();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(chronology65);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology12.getZone();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology12);
        int int22 = localDateTime21.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plus(readableDuration23);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        int int24 = dateTimeZone15.getOffsetFromLocal(1L);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = null;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getDisplayCountry(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology26, locale27, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        org.joda.time.DurationField durationField39 = chronology37.years();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readablePeriod44);
        boolean boolean46 = dateTimeZone40.isLocalDateTimeGap(localDateTime45);
        org.joda.time.Chronology chronology47 = chronology37.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        int int53 = localDateTime52.getYearOfCentury();
        java.util.Date date54 = localDateTime52.toDate();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(dateTimeZone57);
        org.joda.time.Chronology chronology59 = chronology37.withZone(dateTimeZone57);
        java.util.TimeZone timeZone60 = dateTimeZone57.toTimeZone();
        long long62 = dateTimeZone15.getMillisKeepLocal(dateTimeZone57, 5700035L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        int int65 = dateTimeZone57.getStandardOffset((long) (-1959));
        boolean boolean66 = dateTimeZone57.isFixed();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 70 + "'", int53 == 70);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 5700035L + "'", long62 == 5700035L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        long long18 = dateTimeField13.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField19 = dateTimeField13.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.yearOfEra();
        int int26 = property25.getMaximumValueOverall();
        int int27 = property25.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        int int38 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withMinuteOfHour((int) ' ');
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime40, (-1), locale42);
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        boolean boolean45 = localDateTime40.equals((java.lang.Object) nameProvider44);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider44);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str50 = nameProvider44.getShortName(locale47, "kor", "italiano");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider44);
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder54 = builder52.setLocale(locale53);
        java.util.Locale locale55 = builder52.build();
        java.lang.String str56 = locale55.getScript();
        java.lang.String str59 = nameProvider44.getName(locale55, "fr", "3991-02-25T05:29:37.020");
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("DateTimeField[hourOfHalfday]");
        java.lang.String str64 = nameProvider44.getName(locale61, "DateTimeField[millisOfSecond]", "311");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1" + "'", str43, "-1");
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType8.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfWeek();
        org.joda.time.Chronology chronology28 = chronology22.withUTC();
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder31 = builder29.setLocale(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 100, chronology22, locale30);
        long long34 = dateTimeParserBucket32.computeMillis(true);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.util.Locale locale40 = new java.util.Locale("CAN", "yearofera (ITALIA,hi!)", "69");
        dateTimeParserBucket32.saveField(dateTimeFieldType35, "TW", locale40);
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        boolean boolean43 = strSet42.isEmpty();
        java.lang.Object[] objArray44 = strSet42.toArray();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals(locale40.toString(), "can_YEAROFERA (ITALIA,HI!)_69");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(1);
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfEra();
        int int16 = property15.getMaximumValueOverall();
        int int17 = property15.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property15.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfCentury((int) ' ');
        int int32 = localDateTime31.size();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        org.joda.time.Instant instant34 = dateTime33.toInstant();
        java.lang.String str35 = instant34.toString();
        long long36 = instant34.getMillis();
        int int37 = property6.compareTo((org.joda.time.ReadableInstant) instant34);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.toLanguageTag();
        java.util.Locale locale43 = new java.util.Locale("zho", "1969-12-31T22:25:00.001Z", "DurationField[weekyears]");
        java.lang.String str44 = locale38.getDisplayCountry(locale43);
        java.util.Locale.setDefault(locale38);
        java.lang.String str46 = locale38.getISO3Country();
        int int47 = property6.getMaximumShortTextLength(locale38);
        boolean boolean48 = property6.isLeap();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology50, locale51, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology61 = dateTimeParserBucket60.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = null;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = null;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.lang.String str70 = locale64.getDisplayCountry(locale67);
        dateTimeParserBucket60.saveField(dateTimeFieldType62, "", locale64);
        java.util.Locale locale72 = dateTimeParserBucket60.getLocale();
        int int73 = property6.getMaximumShortTextLength(locale72);
        int int74 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1932-01-01T00:00:00.000Z" + "'", str35, "1932-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1199232000000L) + "'", long36 == (-1199232000000L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "und" + "'", str39, "und");
        org.junit.Assert.assertEquals(locale43.toString(), "zho_1969-12-31T22:25:00.001Z_DurationField[weekyears]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        java.lang.String str43 = locale35.getDisplayScript(locale39);
        java.lang.String str44 = locale35.getDisplayCountry();
        java.lang.String str45 = localDateTime16.toString("-1", locale35);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.lang.String str54 = locale48.getDisplayCountry(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology47, locale48, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DurationField durationField60 = chronology58.years();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minus(readablePeriod65);
        boolean boolean67 = dateTimeZone61.isLocalDateTimeGap(localDateTime66);
        org.joda.time.Chronology chronology68 = chronology58.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime69 = localDateTime16.toDateTime(dateTimeZone61);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getRangeDurationType();
        int int72 = dateTime69.get(dateTimeFieldType70);
        org.joda.time.Instant instant73 = dateTime69.toInstant();
        org.joda.time.Instant instant74 = instant73.toInstant();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italy" + "'", str44, "Italy");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(instant74);
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        java.util.Locale locale15 = dateTimeParserBucket13.getLocale();
        boolean boolean17 = dateTimeParserBucket13.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology18 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket13.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology20);
        boolean boolean23 = dateTimeFieldType0.isSupported(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.eras();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "secondOfDay" + "'", str1, "secondOfDay");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale17.getDisplayCountry(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology14, locale17, (java.lang.Integer) 2, 70);
        boolean boolean27 = dateTimeFieldType0.isSupported(chronology14);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readablePeriod31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfEra();
        int int34 = property33.getMaximumValueOverall();
        int int35 = property33.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime36 = property33.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime37 = property33.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime38 = property33.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfWeek();
        int int43 = property33.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        long long45 = chronology14.set((org.joda.time.ReadablePartial) localDateTime41, 883612800000L);
        org.joda.time.DateTimeField dateTimeField46 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology14.minuteOfHour();
        org.joda.time.Chronology chronology48 = chronology14.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime20.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withWeekyear((int) (byte) 0);
        int int26 = localDateTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withMillisOfDay(100);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        long long45 = dateTimeField42.set((long) '4', (int) (short) 0);
        long long47 = dateTimeField42.roundFloor((long) (byte) 0);
        long long50 = dateTimeField42.set((-62167219199948L), "10");
        int int52 = dateTimeField42.getMinimumValue((long) 365);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = dateTimeField42.getType();
        boolean boolean54 = localDateTime23.isSupported(dateTimeFieldType53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime23.withDayOfWeek(4);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime23.withMillisOfDay((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minus(readablePeriod62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.yearOfEra();
        int int65 = property64.getMaximumValueOverall();
        int int66 = property64.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime67 = property64.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minus(readablePeriod71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime70.yearOfEra();
        int int74 = property73.getMaximumValueOverall();
        int int75 = property73.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime76 = property73.roundHalfFloorCopy();
        int int77 = property64.compareTo((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime76);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.minusMinutes(28);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType84.getRangeDurationType();
        boolean boolean86 = localDateTime83.isSupported(dateTimeFieldType84);
        int int87 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime.Property property88 = localDateTime83.monthOfYear();
        org.joda.time.LocalDateTime.Property property89 = localDateTime83.era();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-62167219199948L) + "'", long45 == (-62167219199948L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-61851599999948L) + "'", long50 == (-61851599999948L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-292275054) + "'", int52 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 292278993 + "'", int65 == 292278993);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 292278993 + "'", int74 == 292278993);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfYear();
        int int19 = dateTimeField17.get(0L);
        long long22 = dateTimeField17.getDifferenceAsLong(1645515166453L, (-5699948L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 19045L + "'", long22 == 19045L);
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        boolean boolean16 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        int int19 = dateTimeField17.getLeapAmount((long) 19);
        boolean boolean21 = dateTimeField17.isLeap((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readablePeriod25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.yearOfEra();
        int int28 = property27.getMaximumValueOverall();
        int int29 = property27.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime30 = property27.roundHalfFloorCopy();
        java.lang.String str31 = property27.getAsShortText();
        org.joda.time.LocalDateTime localDateTime32 = property27.getLocalDateTime();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.lang.String str41 = locale35.getDisplayCountry(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale35, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField46.getType();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.yearOfEra();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundFloorCopy();
        int int55 = localDateTime54.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property56 = localDateTime54.yearOfEra();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.lang.String str58 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localDateTime54, locale57);
        java.lang.String str60 = dateTimeField46.getAsShortText(97L);
        java.lang.String str61 = dateTimeField46.toString();
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale63);
        java.lang.String str65 = dateTimeField46.getAsShortText(2, locale63);
        int int66 = property27.getMaximumTextLength(locale63);
        org.joda.time.LocalDateTime localDateTime67 = property27.withMaximumValue();
        int int68 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minus(readablePeriod72);
        int int74 = localDateTime73.getYearOfCentury();
        java.util.Date date75 = localDateTime73.toDate();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(dateTimeZone78);
        long long83 = dateTimeZone78.convertLocalToUTC(315569520000L, false, (long) (short) 100);
        java.util.Locale locale86 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str87 = locale86.getDisplayName();
        java.lang.String str88 = dateTimeZone78.getShortName((long) 0, locale86);
        org.joda.time.DateTime dateTime89 = localDateTime67.toDateTime(dateTimeZone78);
        java.lang.String str91 = dateTimeZone78.getShortName(0L);
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(dateTimeZone78);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "97" + "'", str60, "97");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DateTimeField[millisOfDay]" + "'", str61, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2" + "'", str65, "2");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 70 + "'", int74 == 70);
        org.junit.Assert.assertNotNull(date75);
// flaky:         org.junit.Assert.assertEquals(date75.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 315569520000L + "'", long83 == 315569520000L);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00" + "'", str88, "+00:00");
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((-14726880L));
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale21, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.DurationField durationField33 = chronology31.years();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readablePeriod38);
        boolean boolean40 = dateTimeZone34.isLocalDateTimeGap(localDateTime39);
        org.joda.time.Chronology chronology41 = chronology31.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField42 = chronology31.dayOfMonth();
        boolean boolean43 = dateTimeField42.isLenient();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        int int49 = localDateTime48.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusSeconds((int) (short) 10);
        int int52 = localDateTime51.getEra();
        int[] intArray55 = new int[] { (byte) 1, 7 };
        int int56 = dateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) localDateTime51, intArray55);
        int int57 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18, intArray55);
        org.joda.time.LocalDateTime.Property property58 = localDateTime18.secondOfMinute();
        java.lang.String str59 = localDateTime18.toString();
        org.joda.time.LocalDateTime.Property property60 = localDateTime18.dayOfYear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 70 + "'", int49 == 70);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 7]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 31 + "'", int56 == 31);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1969-12-31T19:54:33.120" + "'", str59, "1969-12-31T19:54:33.120");
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        java.util.Locale locale1 = new java.util.Locale("yearOfEra");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        boolean boolean11 = strSet2.contains((java.lang.Object) property8);
        org.joda.time.LocalDateTime localDateTime12 = property8.withMinimumValue();
        int int13 = property8.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property20.getFieldType();
        java.lang.String str23 = property20.toString();
        int int24 = property20.get();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.years();
        org.joda.time.DurationField durationField40 = chronology38.minutes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.lang.String str56 = locale50.getDisplayCountry(locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology49, locale50, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology60 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.hours();
        boolean boolean62 = durationFieldType47.isSupported(chronology60);
        org.joda.time.DurationField durationField63 = durationFieldType45.getField(chronology60);
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology60, locale64, (java.lang.Integer) 1970);
        java.util.Locale locale67 = dateTimeParserBucket66.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((-63271670399965L), chronology38, locale67, (java.lang.Integer) 100);
        java.lang.String str70 = property20.getAsText(locale67);
        java.lang.String str71 = locale67.getDisplayVariant();
        java.util.Locale locale72 = java.util.Locale.CHINESE;
        java.util.Locale locale73 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale73);
        java.util.Locale locale75 = locale73.stripExtensions();
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale73);
        java.lang.String str78 = locale73.getCountry();
        java.lang.String str79 = locale72.getDisplayVariant(locale73);
        java.lang.String str80 = locale67.getDisplayName(locale73);
        java.util.Set<java.lang.String> strSet81 = locale67.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime82 = property8.setCopy("60", locale67);
        int int83 = property8.getLeapAmount();
        org.junit.Assert.assertEquals(locale1.toString(), "yearofera");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[yearOfEra]" + "'", str23, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970" + "'", str70, "1970");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "IT" + "'", str78, "IT");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "francese (Canada)" + "'", str80, "francese (Canada)");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone1.getNameKey((long) 10);
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology5, locale6, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.year();
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        boolean boolean25 = dateTimeZone19.isLocalDateTimeGap(localDateTime24);
        org.joda.time.Chronology chronology26 = chronology16.withZone(dateTimeZone19);
        long long28 = dateTimeZone1.getMillisKeepLocal(dateTimeZone19, (long) (short) 0);
        long long30 = dateTimeZone19.nextTransition(52L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(292275054L, dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = property33.setCopy(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfDay();
        org.joda.time.DurationField durationField21 = chronology18.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.minuteOfHour();
        org.joda.time.DurationField durationField23 = chronology18.seconds();
        org.joda.time.DurationField durationField24 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField25 = chronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.hourOfDay();
        long long28 = dateTimeField26.roundHalfEven(1645514547038L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645513200000L + "'", long28 == 1645513200000L);
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMaximumValue(readablePartial14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.yearOfEra();
        int int22 = property21.getMaximumValueOverall();
        int int23 = property21.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime24 = property21.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        int int34 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean36 = localDateTime33.isSupported(dateTimeFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withPeriodAdded(readablePeriod37, (int) 'a');
        int[] intArray40 = new int[] {};
        int int41 = dateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33, intArray40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.yearOfEra();
        int int48 = property47.getMaximumValueOverall();
        int int49 = property47.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime50 = property47.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.yearOfEra();
        int int57 = property56.getMaximumValueOverall();
        int int58 = property56.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime59 = property56.roundHalfFloorCopy();
        int int60 = property47.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withYearOfCentury((int) ' ');
        int int64 = localDateTime63.size();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime63, (int) (byte) 1, locale66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime63.weekyear();
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.util.Locale locale73 = null;
        java.lang.String str74 = locale72.getDisplayVariant(locale73);
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = null;
        java.lang.String str77 = locale75.getDisplayVariant(locale76);
        java.lang.String str78 = locale72.getDisplayCountry(locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology71, locale72, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology82 = dateTimeParserBucket81.getChronology();
        org.joda.time.DurationField durationField83 = chronology82.hours();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) '#', chronology82);
        org.joda.time.DateTimeField dateTimeField85 = chronology82.hourOfHalfday();
        long long87 = dateTimeField85.remainder((long) 2);
        long long90 = dateTimeField85.add((-61851599999948L), 0L);
        boolean boolean91 = property68.equals((java.lang.Object) long90);
        int int92 = property68.getMaximumValueOverall();
        boolean boolean93 = property68.isLeap();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-292275054) + "'", int41 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 292278993 + "'", int48 == 292278993);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 2L + "'", long87 == 2L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-61851599999948L) + "'", long90 == (-61851599999948L));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 292278993 + "'", int92 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime15.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMonthOfYear(4);
        int int22 = localDateTime15.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str24 = durationFieldType23.getName();
        boolean boolean25 = localDateTime15.isSupported(durationFieldType23);
        org.joda.time.tz.Provider provider26 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider26);
        org.joda.time.DateTimeZone dateTimeZone29 = provider26.getZone("0");
        java.util.Set<java.lang.String> strSet30 = provider26.getAvailableIDs();
        boolean boolean31 = localDateTime15.equals((java.lang.Object) provider26);
        org.joda.time.LocalDateTime.Property property32 = localDateTime15.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime15.minus(readablePeriod33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime15.getFieldType(1368);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1368");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weekyears" + "'", str24, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        dateTimeParserBucket11.setPivotYear((java.lang.Integer) 31);
        dateTimeParserBucket11.setOffset((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket11.getZone();
        long long23 = dateTimeZone20.adjustOffset(915148800000L, false);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str26 = dateTimeZone24.getNameKey((long) 10);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone24);
        boolean boolean29 = dateTimeZone20.isLocalDateTimeGap(localDateTime28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfWeek();
        java.lang.String str35 = property34.getAsShortText();
        org.joda.time.LocalDateTime localDateTime36 = property34.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.millisOfSecond();
        org.joda.time.DurationField durationField38 = property37.getDurationField();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        boolean boolean40 = locale39.hasExtensions();
        int int41 = property37.getMaximumTextLength(locale39);
        java.lang.String str42 = dateTimeZone20.getName((long) 2554, locale39);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.lang.String str51 = locale45.getDisplayCountry(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology44, locale45, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology55 = dateTimeParserBucket54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.years();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        long long60 = chronology55.add(readablePeriod57, (long) 28, 10);
        org.joda.time.DateTimeZone dateTimeZone61 = chronology55.getZone();
        org.joda.time.DateTimeField dateTimeField62 = chronology55.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone63 = chronology55.getZone();
        int int65 = dateTimeZone63.getStandardOffset(9223309849910400000L);
        long long67 = dateTimeZone20.getMillisKeepLocal(dateTimeZone63, 492488380800000L);
        java.util.TimeZone timeZone68 = dateTimeZone63.toTimeZone();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 915148800000L + "'", long23 == 915148800000L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gio" + "'", str35, "gio");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 28L + "'", long60 == 28L);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 492488380800000L + "'", long67 == 492488380800000L);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Tempo universale coordinato");
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property5.getFieldType();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.lang.String str16 = locale10.getDisplayCountry(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology9, locale10, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology20 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType7.getField(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.years();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology20.getZone();
        int int27 = dateTimeZone25.getOffset(213502542863L);
        boolean boolean29 = dateTimeZone25.isStandardOffset(19L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.dayOfMonth();
        boolean boolean24 = dateTimeField23.isLenient();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        java.lang.String str56 = nameProvider46.getShortName(locale47, "", "hi!");
        java.lang.String str57 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDateTime42, (int) (byte) 10, locale47);
        java.lang.String str58 = locale47.getVariant();
        java.lang.String str59 = dateTimeField23.getAsShortText(0L, locale47);
        java.lang.String str60 = dateTimeField23.getName();
        long long62 = dateTimeField23.remainder(2240611200000L);
        long long64 = dateTimeField23.remainder((long) (short) 10);
        int int65 = dateTimeField23.getMaximumValue();
        long long67 = dateTimeField23.roundCeiling(350520000L);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = dateTimeField23.set(1091870582400000L, "3991-02-25T05:27:43.881");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"3991-02-25T05:27:43.881\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10" + "'", str57, "10");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "dayOfMonth" + "'", str60, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 31 + "'", int65 == 31);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 432000000L + "'", long67 == 432000000L);
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readablePeriod26);
        int int28 = localDateTime27.getYearOfCentury();
        java.util.Date date29 = localDateTime27.toDate();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology34 = chronology12.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField35 = chronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology12.weekyearOfCentury();
        org.joda.time.DurationField durationField37 = chronology12.minutes();
        org.joda.time.DurationField durationField38 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField39 = chronology12.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology12.getZone();
        org.joda.time.DateTimeField dateTimeField41 = chronology12.centuryOfEra();
        org.joda.time.DurationField durationField42 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField43 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology12.clockhourOfDay();
        int int46 = dateTimeField44.get((-3578107L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 70 + "'", int28 == 70);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 23 + "'", int46 == 23);
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = null;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = new java.util.Locale("Italien");
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale0.getDisplayScript(locale4);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.lang.String str15 = locale9.getDisplayCountry(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology8, locale9, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.years();
        org.joda.time.Chronology chronology21 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.millisOfDay();
        java.lang.String str25 = dateTimeField23.getAsShortText(12620102400000L);
        long long27 = dateTimeField23.roundCeiling((-599990L));
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.year();
        org.joda.time.ReadablePartial readablePartial43 = null;
        int int44 = dateTimeField42.getMaximumValue(readablePartial43);
        long long47 = dateTimeField42.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField48 = dateTimeField42.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minus(readablePeriod52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.yearOfEra();
        int int55 = property54.getMaximumValueOverall();
        int int56 = property54.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime57 = property54.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minus(readablePeriod61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.yearOfEra();
        int int64 = property63.getMaximumValueOverall();
        int int65 = property63.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime66 = property63.roundHalfFloorCopy();
        int int67 = property54.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withMinuteOfHour((int) ' ');
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.lang.String str72 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime69, (-1), locale71);
        java.util.Locale.Category category74 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale75 = java.util.Locale.getDefault(category74);
        java.lang.String str76 = dateTimeField42.getAsShortText((-31449599990L), locale75);
        java.lang.String str77 = dateTimeField23.getAsText(284012568000L, locale75);
        java.util.Locale locale78 = java.util.Locale.ITALY;
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.util.Locale locale80 = null;
        java.lang.String str81 = locale79.getDisplayVariant(locale80);
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.util.Locale locale83 = null;
        java.lang.String str84 = locale82.getDisplayVariant(locale83);
        java.lang.String str85 = locale79.getDisplayCountry(locale82);
        java.lang.String str86 = locale78.getDisplayScript(locale82);
        java.lang.String str87 = locale82.getVariant();
        int int88 = dateTimeField23.getMaximumShortTextLength(locale82);
        java.lang.String str89 = locale82.getDisplayVariant();
        java.lang.String str90 = locale82.toLanguageTag();
        java.lang.String str91 = locale4.getDisplayScript(locale82);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "italien");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "italien" + "'", str5, "italien");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-599990L) + "'", long27 == (-599990L));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNull(durationField48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 292278993 + "'", int55 == 292278993);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 292278993 + "'", int64 == 292278993);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1" + "'", str72, "-1");
        org.junit.Assert.assertTrue("'" + category74 + "' != '" + java.util.Locale.Category.FORMAT + "'", category74.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1969" + "'", str76, "1969");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "15768000" + "'", str77, "15768000");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "de" + "'", str90, "de");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology12.add(readablePeriod14, (long) 28, 10);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology12.getZone();
        int int20 = dateTimeZone18.getOffsetFromLocal((-2726520305608080000L));
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        java.util.Locale locale36 = dateTimeParserBucket34.getLocale();
        boolean boolean38 = dateTimeParserBucket34.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology39 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.year();
        java.util.Locale locale45 = new java.util.Locale("italiano", "1970-01-01T00:00:00.000", "1");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((-31449599990L), chronology39, locale45);
        java.lang.String str47 = dateTimeZone18.getName(252000001L, locale45);
        long long50 = dateTimeZone18.adjustOffset((long) 68640000, false);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minus(readablePeriod54);
        int int56 = localDateTime55.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType57 = null;
        boolean boolean58 = localDateTime55.isSupported(durationFieldType57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.dayOfMonth();
        java.lang.String str60 = property59.toString();
        org.joda.time.LocalDateTime localDateTime61 = property59.withMinimumValue();
        int int62 = localDateTime61.getMonthOfYear();
        boolean boolean63 = dateTimeZone18.isLocalDateTimeGap(localDateTime61);
        int int64 = localDateTime61.getMonthOfYear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28L + "'", long17 == 28L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals(locale45.toString(), "italiano_1970-01-01T00:00:00.000_1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 68640000L + "'", long50 == 68640000L);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[dayOfMonth]" + "'", str60, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readableDuration18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusSeconds(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = localDateTime21.toString(dateTimeFormatter22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withWeekyear((-707840));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-10-31T23:59:25.035" + "'", str23, "1970-10-31T23:59:25.035");
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        int int9 = property5.getMinimumValue();
        boolean boolean10 = property5.isLeap();
        int int11 = property5.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime12 = property5.roundFloorCopy();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale14);
        java.util.Locale locale16 = locale14.stripExtensions();
        java.util.Locale.Builder builder17 = builder13.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder17.addUnicodeLocaleAttribute("120");
        java.util.Locale locale22 = new java.util.Locale("", "hi!");
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.util.Locale.Builder builder25 = builder19.setLocale(locale23);
        java.util.Locale.Builder builder26 = builder25.clear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = null;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale30.getDisplayCountry(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology29, locale30, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.year();
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        boolean boolean49 = dateTimeZone43.isLocalDateTimeGap(localDateTime48);
        org.joda.time.Chronology chronology50 = chronology40.withZone(dateTimeZone43);
        boolean boolean51 = dateTimeFieldType27.isSupported(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.minuteOfHour();
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = locale58.getDisplayCountry(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology57, locale58, (java.lang.Integer) 0, 0);
        java.lang.String str68 = locale55.getDisplayName(locale58);
        java.lang.String str69 = locale58.getDisplayScript();
        int int70 = dateTimeField54.getMaximumTextLength(locale58);
        java.lang.String str71 = locale58.getDisplayScript();
        java.util.Locale.Builder builder72 = builder25.setLocale(locale58);
        java.lang.String str74 = locale58.getUnicodeLocaleType("40");
        int int75 = property5.getMaximumShortTextLength(locale58);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "HI!" + "'", str24, "HI!");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Englisch" + "'", str68, "Englisch");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField18 = chronology12.months();
        org.joda.time.DurationField durationField19 = chronology12.minutes();
        long long23 = chronology12.add((-1485385730640000L), 1412875398L, (-480479999));
        org.joda.time.DateTimeField dateTimeField24 = chronology12.year();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-680343755548804602L) + "'", long23 == (-680343755548804602L));
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.dayOfWeek();
        int int24 = localDateTime20.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        int int43 = property30.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfCentury((int) ' ');
        int int47 = localDateTime46.size();
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.hours();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) '#', chronology62);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayVariant(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.lang.String str74 = locale68.getDisplayCountry(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology67, locale68, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology78 = dateTimeParserBucket77.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.hours();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) '#', chronology78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusMonths((int) (short) 10);
        boolean boolean83 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.DateTime dateTime84 = localDateTime80.toDateTime();
        int int85 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime84.getZone();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime20.withWeekyear(1970);
        org.joda.time.Chronology chronology90 = localDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField91 = chronology90.weekOfWeekyear();
        long long93 = dateTimeField91.roundFloor((-457087000L));
        boolean boolean94 = dateTimeField91.isLenient();
        long long96 = dateTimeField91.remainder((-85406400000L));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-864000000L) + "'", long93 == (-864000000L));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 129600000L + "'", long96 == 129600000L);
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.year();
        org.joda.time.Chronology chronology20 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfYear();
        org.joda.time.DurationField durationField22 = chronology20.seconds();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale25, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.years();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.hourOfHalfday();
        long long40 = dateTimeField37.add((long) 28, (long) 'u');
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.lang.String str48 = locale42.getDisplayCountry(locale45);
        java.lang.String str49 = dateTimeField37.getAsShortText(100, locale45);
        java.util.Set<java.lang.String> strSet50 = locale45.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(283996800032L, chronology20, locale45, (java.lang.Integer) 366, 1972);
        java.lang.Object obj54 = null;
        boolean boolean55 = dateTimeParserBucket53.restoreState(obj54);
        dateTimeParserBucket53.setOffset((java.lang.Integer) (-480479999));
        long long59 = dateTimeParserBucket53.computeMillis(false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 421200028L + "'", long40 == 421200028L);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100" + "'", str49, "100");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 284477280031L + "'", long59 == 284477280031L);
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfCentury((int) ' ');
        int int22 = localDateTime19.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withMillisOfDay(31);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.minusDays(1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plusMinutes((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readablePeriod34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        int int37 = property36.getMaximumValueOverall();
        int int38 = property36.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime39 = property36.roundHalfFloorCopy();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale43.getDisplayCountry(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology42, locale43, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology53 = dateTimeParserBucket52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) '#', chronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays(0);
        int int60 = localDateTime39.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.plusDays(35999947);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minus(readablePeriod68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.yearOfEra();
        int int71 = property70.getMaximumValueOverall();
        int int72 = property70.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime73 = property70.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusMonths((int) (byte) -1);
        int int76 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime57.minusWeeks(0);
        boolean boolean79 = localDateTime30.isAfter((org.joda.time.ReadablePartial) localDateTime78);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = localDateTime30.getValue(8070070);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 8070070");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 292278993 + "'", int71 == 292278993);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale16, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DurationField durationField28 = chronology26.years();
        int int29 = durationField13.compareTo(durationField28);
        int int31 = durationField28.getValue((-1L));
        long long33 = durationField28.getMillis((long) 9);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.years();
        long long50 = durationField47.add((long) 'x', 70);
        boolean boolean51 = durationField47.isSupported();
        int int52 = durationField28.compareTo(durationField47);
        java.lang.String str53 = durationField47.toString();
        long long56 = durationField47.add((long) 2001, (long) 'x');
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 284012568000L + "'", long33 == 284012568000L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2208988800120L + "'", long50 == 2208988800120L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DurationField[years]" + "'", str53, "DurationField[years]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3786912002001L + "'", long56 == 3786912002001L);
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Chinese");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayVariant(locale11);
        java.lang.String str13 = locale7.getDisplayCountry(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology6, locale7, (java.lang.Integer) 0, 0);
        java.util.Locale locale17 = dateTimeParserBucket16.getLocale();
        java.util.Locale locale18 = locale17.stripExtensions();
        boolean boolean19 = languageRange1.equals((java.lang.Object) locale17);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "chinese" + "'", str2, "chinese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chinese" + "'", str3, "chinese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "chinese" + "'", str4, "chinese");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket11.getZone();
        java.lang.String str18 = dateTimeZone16.getName((long) 'a');
        int int20 = dateTimeZone16.getOffsetFromLocal((long) 1969);
        java.util.Locale locale24 = new java.util.Locale("zho", "1969-12-31T22:25:00.001Z", "DurationField[weekyears]");
        java.lang.String str25 = locale24.getVariant();
        boolean boolean26 = dateTimeZone16.equals((java.lang.Object) locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(88);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusWeeks(1948);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals(locale24.toString(), "zho_1969-12-31T22:25:00.001Z_DurationField[weekyears]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DurationField[weekyears]" + "'", str25, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime16.minusMillis(31);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.lang.String str46 = locale40.getDisplayCountry(locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale40, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket49.getChronology();
        java.util.Locale locale51 = dateTimeParserBucket49.getLocale();
        boolean boolean53 = dateTimeParserBucket49.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology54 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.year();
        org.joda.time.Chronology chronology57 = chronology54.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(3786912000035L, chronology57);
        long long63 = chronology57.add((-81L), (long) 5700035, 68640000);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now(chronology57);
        boolean boolean65 = property36.equals((java.lang.Object) chronology57);
        // The following exception was thrown during execution in test generation
        try {
            long long71 = chronology57.getDateTimeMillis(0L, 43200000, (-2720), 21, 86398);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 391250402399919L + "'", long63 == 391250402399919L);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minus(readablePeriod5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusSeconds(1970);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale15, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DurationField durationField27 = chronology25.years();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        boolean boolean34 = dateTimeZone28.isLocalDateTimeGap(localDateTime33);
        org.joda.time.Chronology chronology35 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(119916460800000L, chronology35);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readablePeriod45);
        int int47 = localDateTime46.getYearOfCentury();
        java.util.Date date48 = localDateTime46.toDate();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.plusHours(70);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(dateTimeZone51);
        long long56 = dateTimeZone51.convertLocalToUTC(315569520000L, false, (long) (short) 100);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("yearOfEra");
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = dateTimeZone51.getShortName((long) 0, locale59);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(26265600000L, chronology35, locale59, (java.lang.Integer) (-31373), (int) 'x');
        java.util.Locale.Category category65 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale66 = java.util.Locale.getDefault(category65);
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.lang.String str68 = locale59.getDisplayScript(locale66);
        java.util.Set<java.lang.String> strSet69 = locale59.getUnicodeLocaleKeys();
        java.lang.String str70 = locale59.getVariant();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 70 + "'", int47 == 70);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 315569520000L + "'", long56 == 315569520000L);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + category65 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category65.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "italiano" + "'", str67, "italiano");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) '#');
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale16, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket25.getChronology();
        dateTimeParserBucket25.setOffset((java.lang.Integer) 2);
        java.util.Locale locale29 = dateTimeParserBucket25.getLocale();
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale30);
        java.util.Locale locale32 = locale30.stripExtensions();
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale30.getExtension('u');
        java.lang.String str36 = locale29.getDisplayScript(locale30);
        java.lang.String str37 = dateTimeField12.getAsText((-62040990715906L), locale29);
        boolean boolean38 = locale29.hasExtensions();
        java.lang.String str40 = locale29.getUnicodeLocaleType("48");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "3" + "'", str37, "3");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        java.util.Locale locale14 = dateTimeParserBucket12.getLocale();
        boolean boolean16 = dateTimeParserBucket12.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology17 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        int int25 = property24.getMaximumValueOverall();
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfFloorCopy();
        int int28 = property24.getMinimumValue();
        boolean boolean29 = property24.isLeap();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology31, locale32, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        int int59 = dateTimeField44.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property24.getAsText(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology17, locale58);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology17.withZone(dateTimeZone62);
        org.joda.time.DurationField durationField64 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField65 = chronology17.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField66 = chronology17.dayOfYear();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970" + "'", str60, "1970");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusSeconds(1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        int int24 = property23.getMaximumValueOverall();
        int int25 = property23.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minus(readablePeriod34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property36.getFieldType();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType38.getField(chronology51);
        int int55 = localDateTime30.get(dateTimeFieldType38);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime30.withWeekyear(70);
        int int58 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        boolean boolean59 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime9.minus(readablePeriod60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime9.plusHours(366);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime9.minusSeconds(12);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = property66.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime69 = property66.addToCopy((long) 80700);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        boolean boolean6 = dateTimeZone0.isLocalDateTimeGap(localDateTime5);
        int int7 = localDateTime5.getYearOfEra();
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.hours();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) '#', chronology22);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale28, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.hours();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) '#', chronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMonths((int) (short) 10);
        boolean boolean43 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.DateTime dateTime44 = localDateTime40.toDateTime();
        long long45 = dateTime44.getMillis();
        org.joda.time.Instant instant46 = dateTime44.toInstant();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str49 = dateTimeZone47.getNameKey((long) 10);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.lang.String str58 = locale52.getDisplayCountry(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology51, locale52, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology62 = dateTimeParserBucket61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.year();
        org.joda.time.DurationField durationField64 = chronology62.years();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minus(readablePeriod69);
        boolean boolean71 = dateTimeZone65.isLocalDateTimeGap(localDateTime70);
        org.joda.time.Chronology chronology72 = chronology62.withZone(dateTimeZone65);
        long long74 = dateTimeZone47.getMillisKeepLocal(dateTimeZone65, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) instant46, dateTimeZone47);
        org.joda.time.Chronology chronology76 = chronology8.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField77 = chronology8.weekyear();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology8.getZone();
        java.lang.String str79 = dateTimeZone78.toString();
        java.util.Locale.Builder builder81 = new java.util.Locale.Builder();
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale82);
        java.util.Locale locale84 = locale82.stripExtensions();
        java.util.Locale.Builder builder85 = builder81.setLocale(locale84);
        java.util.Locale.Builder builder87 = builder85.addUnicodeLocaleAttribute("Englisch");
        java.util.Locale.Builder builder88 = builder87.clear();
        java.util.Locale locale89 = builder87.build();
        java.util.Locale.Builder builder90 = builder87.clear();
        java.util.Locale locale91 = builder87.build();
        java.lang.String str92 = dateTimeZone78.getName((-62135596800L), locale91);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+00:00" + "'", str92, "+00:00");
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray13 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList14, filteringMode16);
        java.lang.String[] strArray29 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean33 = strSet30.add("Italien");
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        java.lang.String str43 = locale35.getDisplayScript(locale39);
        java.util.Set<java.lang.String> strSet44 = locale39.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor45 = strSet44.iterator();
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet44, filteringMode46);
        org.joda.time.tz.Provider provider48 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider48);
        org.joda.time.DateTimeZone dateTimeZone51 = provider48.getZone("0");
        java.util.Set<java.lang.String> strSet52 = provider48.getAvailableIDs();
        java.util.Set<java.lang.String> strSet53 = provider48.getAvailableIDs();
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = locale58.getDisplayCountry(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology57, locale58, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology68 = dateTimeParserBucket67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.years();
        org.joda.time.DurationField durationField70 = chronology68.minutes();
        boolean boolean71 = durationFieldType55.isSupported(chronology68);
        org.joda.time.DateTimeField dateTimeField72 = chronology68.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology68);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.secondOfMinute();
        java.util.Locale locale76 = new java.util.Locale("100");
        int int77 = property74.getMaximumShortTextLength(locale76);
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleAttributes();
        boolean boolean79 = strSet78.isEmpty();
        java.lang.String str80 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet78);
        boolean boolean81 = strSet78.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode46.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(provider48);
        org.junit.Assert.assertNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertEquals(locale76.toString(), "100");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfEra();
        int int24 = property23.getMaximumValueOverall();
        int int25 = property23.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property23.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.yearOfEra();
        int int33 = property32.getMaximumValueOverall();
        int int34 = property32.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime35 = property32.roundHalfFloorCopy();
        int int36 = property23.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withMinuteOfHour((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plus(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getRangeDurationType();
        int int45 = localDateTime40.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = localDateTime40.toDateTime();
        int int47 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.Chronology chronology48 = localDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.hourOfHalfday();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology54, locale55, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.years();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.hourOfHalfday();
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = null;
        java.lang.String str75 = locale73.getDisplayVariant(locale74);
        java.lang.String str76 = locale70.getDisplayCountry(locale73);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology69, locale70, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology80 = dateTimeParserBucket79.getChronology();
        java.util.Locale locale81 = dateTimeParserBucket79.getLocale();
        int int82 = dateTimeField67.getMaximumShortTextLength(locale81);
        java.lang.String str83 = locale81.getLanguage();
        java.lang.String str84 = locale81.getDisplayLanguage();
        java.lang.String str85 = locale81.getDisplayCountry();
        java.lang.String str86 = dateTimeField51.getAsShortText(80700, locale81);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 292278993 + "'", int33 == 292278993);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 365 + "'", int47 == 365);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "de" + "'", str83, "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tedesco" + "'", str84, "tedesco");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "80700" + "'", str86, "80700");
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        boolean boolean33 = dateTimeField13.isLeap((-1104537600000L));
        boolean boolean34 = dateTimeField13.isSupported();
        long long36 = dateTimeField13.roundHalfCeiling((long) 86399999);
        org.joda.time.ReadablePartial readablePartial37 = null;
        java.util.Locale locale40 = new java.util.Locale("centuries");
        java.lang.String str41 = locale40.getVariant();
        java.lang.String str42 = dateTimeField13.getAsText(readablePartial37, 192000170, locale40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86399999L + "'", long36 == 86399999L);
        org.junit.Assert.assertEquals(locale40.toString(), "centuries");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "192000170" + "'", str42, "192000170");
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime15.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withMonthOfYear(4);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property24 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime.Property property25 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime15.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime15.withPeriodAdded(readablePeriod27, 100);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        long long16 = durationField13.add((long) 'x', 70);
        boolean boolean17 = durationField13.isSupported();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.millis();
        long long33 = durationField31.getMillis(10L);
        boolean boolean34 = durationField31.isPrecise();
        int int35 = durationField13.compareTo(durationField31);
        java.lang.String str36 = durationField31.getName();
        long long38 = durationField31.getMillis(79200009L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2208988800120L + "'", long16 == 2208988800120L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millis" + "'", str36, "millis");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 79200009L + "'", long38 == 79200009L);
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean22 = localDateTime18.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.era();
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.withDayOfMonth(2);
        int int28 = localDateTime27.size();
        int int29 = localDateTime27.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusDays(19);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.minusMinutes(19);
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime27);
        int int36 = localDateTime15.getMonthOfYear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.lang.String str25 = locale19.getDisplayCountry(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale19, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) '#', chronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths((int) (short) 10);
        boolean boolean34 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTime dateTime35 = localDateTime31.toDateTime();
        long long36 = dateTime35.getMillis();
        org.joda.time.Instant instant37 = dateTime35.toInstant();
        long long38 = instant37.getMillis();
        java.lang.String str39 = instant37.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = instant37.getZone();
        org.joda.time.Instant instant41 = instant37.toInstant();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundFloorCopy();
        org.joda.time.DateTime dateTime47 = localDateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minus(readablePeriod51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = property53.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime55 = property53.roundFloorCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray56 = localDateTime55.getFields();
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minus(readablePeriod61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.yearOfEra();
        int int64 = property63.getMaximumValueOverall();
        int int65 = property63.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime66 = property63.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minus(readablePeriod70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.yearOfEra();
        int int73 = property72.getMaximumValueOverall();
        int int74 = property72.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime75 = property72.roundHalfFloorCopy();
        int int76 = property63.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray79 = localDateTime78.getFields();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withMillisOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean83 = localDateTime78.isSupported(dateTimeFieldType82);
        boolean boolean84 = dateTime57.isSupported(dateTimeFieldType82);
        org.joda.time.Instant instant85 = dateTime57.toInstant();
        int int86 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean87 = instant41.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone88 = instant41.getZone();
        long long90 = dateTimeZone88.convertUTCToLocal((long) (-604808766));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 35L + "'", long36 == 35L);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 35L + "'", long38 == 35L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.035Z" + "'", str39, "1970-01-01T00:00:00.035Z");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldArray56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 292278993 + "'", int64 == 292278993);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 292278993 + "'", int73 == 292278993);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldArray79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-604808766L) + "'", long90 == (-604808766L));
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        int int3 = dateTimeZone1.getOffset((long) (short) 0);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 1, locale5);
        long long9 = dateTimeZone1.convertLocalToUTC(2208988800120L, true);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone1);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone1.getShortName((long) 12, locale15);
        java.util.TimeZone timeZone17 = dateTimeZone1.toTimeZone();
        timeZone17.setID("Property[hourOfDay]");
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale22.getDisplayCountry(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology21, locale22, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.years();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.year();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.minuteOfDay();
        org.joda.time.DurationField durationField38 = dateTimeField37.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readablePeriod42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.yearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundFloorCopy();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getDisplayScript();
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale50);
        java.util.Locale locale52 = locale50.stripExtensions();
        java.util.Locale.Builder builder53 = builder49.setLocale(locale52);
        org.joda.time.tz.NameProvider nameProvider54 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.lang.String str58 = nameProvider54.getName(locale55, "1", "Ora media di Greenwich");
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = null;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        java.lang.String str65 = locale59.getDisplayCountry(locale62);
        java.lang.String str68 = nameProvider54.getName(locale62, "0", "\u30c9\u30a4\u30c4\u8a9e");
        java.lang.String str69 = locale62.getScript();
        java.util.Locale.Builder builder70 = builder49.setLocale(locale62);
        java.util.Set<java.lang.String> strSet71 = locale62.getUnicodeLocaleKeys();
        java.lang.String str72 = locale47.getDisplayVariant(locale62);
        java.lang.String str73 = dateTimeField37.getAsShortText((org.joda.time.ReadablePartial) localDateTime45, 9, locale47);
        java.lang.String str74 = locale47.getDisplayVariant();
        java.lang.String str75 = locale47.getDisplayVariant();
        java.lang.String str76 = locale47.getDisplayName();
        java.lang.String str77 = timeZone17.getDisplayName(locale47);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2208988800120L + "'", long9 == 2208988800120L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(nameProvider54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "9" + "'", str73, "9");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "coreano" + "'", str76, "coreano");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "GMT+00:00" + "'", str77, "GMT+00:00");
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property18.addToCopy(2022);
        org.joda.time.LocalDateTime localDateTime22 = property18.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readableDuration23);
        int int25 = localDateTime24.getDayOfYear();
        org.joda.time.Chronology chronology26 = localDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.centuryOfEra();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        dateTimeParserBucket11.setOffset((java.lang.Integer) 2);
        java.util.Locale locale15 = dateTimeParserBucket11.getLocale();
        long long18 = dateTimeParserBucket11.computeMillis(true, "2087-01-01T00:00:00.000");
        dateTimeParserBucket11.setOffset((-2004));
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        int int27 = property26.getMaximumValueOverall();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        int int30 = property26.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime31 = property26.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYear((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean37 = localDateTime33.isSupported(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType36.getDurationType();
        dateTimeParserBucket11.saveField(dateTimeFieldType36, (-20998030));
        java.lang.Object obj41 = dateTimeParserBucket11.saveState();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 95L + "'", long18 == 95L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(obj41);
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfHalfday();
        java.lang.String str17 = chronology13.toString();
        org.joda.time.DurationField durationField18 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.lang.String str28 = locale22.getDisplayCountry(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology21, locale22, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        java.lang.String str50 = nameProvider40.getShortName(locale41, "", "hi!");
        java.lang.String str51 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, (int) (byte) 10, locale41);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime36.withMillisOfSecond(10);
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = null;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = null;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.lang.String str62 = locale56.getDisplayCountry(locale59);
        java.lang.String str63 = locale55.getDisplayScript(locale59);
        java.lang.String str64 = locale55.getDisplayCountry();
        java.lang.String str65 = localDateTime36.toString("-1", locale55);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = localDateTime36.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime36.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime36.minusSeconds((-3600000));
        int[] intArray73 = chronology13.get((org.joda.time.ReadablePartial) localDateTime36, (long) 86390);
        org.joda.time.Chronology chronology74 = chronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone75 = chronology74.getZone();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(nameProvider40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "10" + "'", str51, "10");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Italia" + "'", str64, "Italia");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "-1" + "'", str65, "-1");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1970, 1, 1, 86390]");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray16 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList17, filteringMode19);
        java.lang.String[] strArray32 = new java.lang.String[] { "UTC", "UTC", "+00:00", "DurationField[years]", "+00:00", "Italia", "UTC", "Italien", "Italia", "+00:00", "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean36 = strSet33.add("Italien");
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet33);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.lang.String str47 = locale41.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology40, locale41, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        dateTimeParserBucket50.saveField(dateTimeFieldType52, "", locale54);
        boolean boolean62 = strSet33.remove((java.lang.Object) dateTimeFieldType52);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType52.getDurationType();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType52.getDurationType();
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType52.getRangeDurationType();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(durationFieldType65);
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withPeriodAdded(readablePeriod23, 2);
        org.joda.time.Chronology chronology26 = localDateTime20.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime20.getFieldTypes();
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minus(readablePeriod32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfEra();
        int int35 = property34.getMaximumValueOverall();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property34.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfEra();
        int int44 = property43.getMaximumValueOverall();
        int int45 = property43.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime46 = property43.roundHalfFloorCopy();
        int int47 = property34.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusSeconds((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = locale58.getDisplayCountry(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology57, locale58, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology68 = dateTimeParserBucket67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.hours();
        boolean boolean70 = durationFieldType55.isSupported(chronology68);
        org.joda.time.DurationField durationField71 = durationFieldType53.getField(chronology68);
        java.util.Locale locale72 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology68, locale72, (java.lang.Integer) 1970);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.UTC;
        dateTimeParserBucket74.setZone(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = localDateTime48.toDateTime(dateTimeZone75);
        java.lang.String str78 = dateTime77.toString();
        boolean boolean79 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 292278993 + "'", int35 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 292278993 + "'", int44 == 292278993);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str78, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        java.lang.String str9 = property5.getAsShortText();
        org.joda.time.LocalDateTime localDateTime10 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths((-35));
        java.lang.String str14 = localDateTime12.toString("\u7fa9\u5927\u5229");
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.lang.String str23 = locale17.getDisplayCountry(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology16, locale17, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology27 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.joda.time.ReadablePartial readablePartial29 = null;
        int int30 = dateTimeField28.getMaximumValue(readablePartial29);
        long long33 = dateTimeField28.getDifferenceAsLong((-62167219199948L), (-62167219199948L));
        org.joda.time.DurationField durationField34 = dateTimeField28.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minus(readablePeriod38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfEra();
        int int41 = property40.getMaximumValueOverall();
        int int42 = property40.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime43 = property40.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minus(readablePeriod47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.yearOfEra();
        int int50 = property49.getMaximumValueOverall();
        int int51 = property49.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime52 = property49.roundHalfFloorCopy();
        int int53 = property40.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMinuteOfHour((int) ' ');
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, (-1), locale57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.minusSeconds(4);
        org.joda.time.DateTime dateTime61 = localDateTime55.toDateTime();
        org.joda.time.DateTime dateTime62 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = localDateTime12.getValue((-19));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -19");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970" + "'", str9, "1970");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u7fa9\u5927\u5229" + "'", str14, "\u7fa9\u5927\u5229");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 292278993 + "'", int30 == 292278993);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 292278993 + "'", int50 == 292278993);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1" + "'", str58, "-1");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#', chronology30);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#', chronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusMonths((int) (short) 10);
        boolean boolean51 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.DateTime dateTime52 = localDateTime48.toDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.minusHours(292278993);
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        java.lang.String str58 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime48, 0, locale57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime48.plusMonths(0);
        int int61 = localDateTime60.getWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.plusYears(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = null;
        java.lang.String str65 = localDateTime60.toString(dateTimeFormatter64);
        int int66 = localDateTime60.getMillisOfDay();
        int int67 = localDateTime60.getDayOfMonth();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01T00:00:00.035" + "'", str65, "1970-01-01T00:00:00.035");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.millisOfDay();
        java.lang.String str18 = chronology14.toString();
        org.joda.time.DurationField durationField19 = chronology14.halfdays();
        org.joda.time.DurationField durationField20 = chronology14.millis();
        org.joda.time.DurationField durationField21 = durationFieldType1.getField(chronology14);
        java.lang.String str22 = durationFieldType1.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millis" + "'", str22, "millis");
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        dateTimeParserBucket11.setOffset((java.lang.Integer) 10);
        java.lang.Object obj14 = dateTimeParserBucket11.saveState();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket11.getChronology();
        java.lang.Object obj16 = dateTimeParserBucket11.saveState();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.DurationField durationField15 = chronology13.years();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        boolean boolean22 = dateTimeZone16.isLocalDateTimeGap(localDateTime21);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        boolean boolean31 = localDateTime27.equals((java.lang.Object) 'x');
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.era();
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.monthOfYear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.withDayOfMonth(2);
        int[] intArray38 = chronology23.get((org.joda.time.ReadablePartial) localDateTime27, (long) 9);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 68640000, chronology23);
        org.joda.time.DateTime dateTime40 = localDateTime39.toDateTime();
        java.util.Date date41 = localDateTime39.toDate();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.fromDateFields(date41);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 9]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 19:04:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfCentury((int) ' ');
        int int22 = localDateTime21.size();
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime();
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.yearOfEra();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfFloorCopy();
        int int43 = property30.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray46 = localDateTime45.getFields();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean50 = localDateTime45.isSupported(dateTimeFieldType49);
        int int51 = dateTime23.get(dateTimeFieldType49);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.lang.String str60 = locale54.getDisplayCountry(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology53, locale54, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology64 = dateTimeParserBucket63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.year();
        org.joda.time.DurationField durationField66 = chronology64.years();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minus(readablePeriod71);
        boolean boolean73 = dateTimeZone67.isLocalDateTimeGap(localDateTime72);
        org.joda.time.Chronology chronology74 = chronology64.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField75 = chronology74.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.halfdayOfDay();
        org.joda.time.DurationField durationField77 = chronology74.seconds();
        org.joda.time.DateTimeField dateTimeField78 = chronology74.weekyear();
        org.joda.time.DateTimeField dateTimeField79 = chronology74.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType49.getField(chronology74);
        org.joda.time.DurationField durationField81 = chronology74.months();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1932-01-01T00:00:00.000Z" + "'", str24, "1932-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278993 + "'", int40 == 292278993);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldArray46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 19 + "'", int51 == 19);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minus(readablePeriod19);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readablePeriod27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.yearOfEra();
        int int30 = property29.getMaximumValueOverall();
        int int31 = property29.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minus(readablePeriod36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfEra();
        int int39 = property38.getMaximumValueOverall();
        int int40 = property38.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime41 = property38.roundHalfFloorCopy();
        int int42 = property29.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = property29.addToCopy((int) (byte) 0);
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale45);
        java.util.Locale locale47 = locale45.stripExtensions();
        java.util.Set<java.lang.String> strSet48 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale45.getExtension('u');
        java.lang.String str51 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localDateTime44, locale45);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime44.withPeriodAdded(readablePeriod52, 10);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusMillis(1969);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 292278993 + "'", int30 == 292278993);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.lang.String str27 = locale21.getDisplayCountry(locale24);
        java.lang.String str30 = nameProvider20.getShortName(locale21, "", "hi!");
        java.lang.String str31 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, (int) (byte) 10, locale21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withMillisOfSecond(10);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        java.lang.String str43 = locale35.getDisplayScript(locale39);
        java.lang.String str44 = locale35.getDisplayCountry();
        java.lang.String str45 = localDateTime16.toString("-1", locale35);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.lang.String str54 = locale48.getDisplayCountry(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology47, locale48, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.year();
        org.joda.time.DurationField durationField60 = chronology58.years();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minus(readablePeriod65);
        boolean boolean67 = dateTimeZone61.isLocalDateTimeGap(localDateTime66);
        org.joda.time.Chronology chronology68 = chronology58.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime69 = localDateTime16.toDateTime(dateTimeZone61);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int72 = dateTime69.get(dateTimeFieldType71);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(360000001L);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withCenturyOfEra(5217);
        org.joda.time.Chronology chronology77 = localDateTime74.getChronology();
        boolean boolean78 = dateTimeFieldType71.isSupported(chronology77);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Italia" + "'", str44, "Italia");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1" + "'", str45, "-1");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(1);
        org.joda.time.DurationField durationField9 = property6.getLeapDurationField();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.years();
        org.joda.time.DurationField durationField24 = chronology22.minutes();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfWeek();
        boolean boolean30 = localDateTime25.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.minusHours(69);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfCentury((int) ' ');
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime.Property property36 = localDateTime34.dayOfWeek();
        int int37 = localDateTime34.getYear();
        int int38 = property6.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withYear((-19045));
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.lang.String str50 = locale44.getDisplayCountry(locale47);
        java.lang.String str53 = nameProvider43.getShortName(locale47, "hi!", "");
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = null;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str63 = locale57.getDisplayCountry(locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology56, locale57, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology67 = dateTimeParserBucket66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.millis();
        org.joda.time.tz.NameProvider nameProvider69 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.lang.String str73 = nameProvider69.getName(locale70, "1", "Ora media di Greenwich");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((-62167219199948L), chronology67, locale70, (java.lang.Integer) 28, (int) (short) 10);
        java.lang.String str79 = nameProvider43.getName(locale70, "ISOChronology[UTC]", "DurationField[years]");
        java.util.Locale.setDefault(category42, locale70);
        java.util.Locale locale81 = java.util.Locale.getDefault(category42);
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Locale.setDefault(category42, locale82);
        java.lang.String str84 = localDateTime34.toString("18 (28)", locale82);
        java.lang.String str85 = locale82.getScript();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2032 + "'", int37 == 2032);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(nameProvider69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "18 (28)" + "'", str84, "18 (28)");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology5, locale6, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        boolean boolean18 = durationFieldType3.isSupported(chronology16);
        org.joda.time.DurationField durationField19 = durationFieldType1.getField(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str24 = dateTimeZone22.getNameKey((long) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        long long27 = dateTimeZone22.nextTransition(283996800000L);
        long long29 = dateTimeZone22.convertUTCToLocal(0L);
        org.joda.time.Chronology chronology30 = chronology16.withZone(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology30.add(readablePeriod31, (-1052190172800000L), 3);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.era();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology30.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 283996800000L + "'", long27 == 283996800000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1052190172800000L) + "'", long34 == (-1052190172800000L));
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology12.hourOfDay();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        int int5 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusSeconds(1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfEra();
        int int14 = property13.getMaximumValueOverall();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property26.getFieldType();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getDisplayCountry(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology30, locale31, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology41 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology41);
        int int45 = localDateTime20.get(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime20.withWeekyear(70);
        int int48 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.millisOfDay();
        int int50 = property49.getMinimumValue();
        int int51 = property49.get();
        java.lang.String str52 = property49.toString();
        int int53 = property49.getMaximumValue();
        long long54 = property49.remainder();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime56 = property49.setCopy("2022-02-22T07:32:37.277");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:32:37.277\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 32 + "'", int45 == 32);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Property[millisOfDay]" + "'", str52, "Property[millisOfDay]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 86399999 + "'", int53 == 86399999);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray13 = new java.lang.String[] { "UTC", "1970", "Deutsch", "UTC", "UTC", "10", "10", "+00:00", "10", "UTC" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList14, filteringMode16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap22);
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(locale24);
        java.util.Locale locale26 = locale24.stripExtensions();
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream28 = strSet27.parallelStream();
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale31 = new java.util.Locale("120");
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.lang.Object[] objArray33 = strSet32.toArray();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = null;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.lang.String str42 = locale36.getDisplayCountry(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale36, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology46 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.years();
        org.joda.time.DurationField durationField48 = chronology46.years();
        org.joda.time.DurationField durationField49 = chronology46.months();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(chronology46);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMinutes(1970);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.plusHours(59);
        org.joda.time.Chronology chronology57 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfYear();
        java.lang.String str59 = chronology57.toString();
        org.joda.time.DurationField durationField60 = chronology57.days();
        int int63 = durationField60.getValue((long) (-19045), (long) 70);
        boolean boolean64 = strSet32.remove((java.lang.Object) durationField60);
        java.lang.String str65 = java.util.Locale.lookupTag(languageRangeList19, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = null;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale70.getDisplayVariant(locale71);
        java.lang.String str73 = locale67.getDisplayCountry(locale70);
        java.lang.String str74 = locale66.getDisplayScript(locale70);
        java.util.Set<java.lang.String> strSet75 = locale70.getUnicodeLocaleKeys();
        boolean boolean76 = strSet75.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream77 = strSet75.parallelStream();
        int int78 = strSet75.size();
        java.util.stream.Stream<java.lang.String> strStream79 = strSet75.parallelStream();
        int int80 = strSet75.size();
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strSet75);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertEquals(locale31.toString(), "120");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[UTC]" + "'", str59, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(strList81);
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.yearOfEra();
        int int9 = property8.getLeapAmount();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.addToCopy((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withDurationAdded(readableDuration13, 53);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        int int23 = property22.getMaximumValueOverall();
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        int int32 = property31.getMaximumValueOverall();
        int int33 = property31.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfFloorCopy();
        int int35 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury((int) ' ');
        int int39 = localDateTime38.size();
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale44.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.lang.String str50 = locale44.getDisplayCountry(locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology43, locale44, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology54 = dateTimeParserBucket53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.hours();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) '#', chronology54);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = null;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = null;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.lang.String str66 = locale60.getDisplayCountry(locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology59, locale60, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology70 = dateTimeParserBucket69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.hours();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) '#', chronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusMonths((int) (short) 10);
        boolean boolean75 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.DateTime dateTime76 = localDateTime72.toDateTime();
        int int77 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Chronology chronology78 = dateTime76.getChronology();
        long long79 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime76);
        java.lang.String str80 = property16.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property16.getFieldType();
        org.joda.time.LocalDateTime localDateTime82 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 9L + "'", long79 == 9L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1980" + "'", str80, "1980");
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        int int17 = dateTimeField15.get(1640995200032L);
        long long20 = dateTimeField15.set((long) (short) 10, (int) (short) 10);
        java.lang.String str22 = dateTimeField15.getAsShortText(170208000010L);
        int int24 = dateTimeField15.getMaximumValue((long) 44);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readablePeriod28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.yearOfEra();
        int int31 = property30.getMaximumValueOverall();
        int int32 = property30.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusMonths((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYear((int) ' ');
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plus(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.lang.String str52 = locale46.getDisplayCountry(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology45, locale46, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology56 = dateTimeParserBucket55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.hours();
        boolean boolean58 = durationFieldType43.isSupported(chronology56);
        org.joda.time.DurationField durationField59 = durationFieldType41.getField(chronology56);
        boolean boolean60 = localDateTime37.isSupported(durationFieldType41);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime37.withMillisOfSecond(25);
        int int63 = localDateTime37.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minus(readablePeriod67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.yearOfEra();
        int int70 = property69.getMaximumValueOverall();
        int int71 = property69.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime72 = property69.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minus(readablePeriod76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.yearOfEra();
        int int79 = property78.getMaximumValueOverall();
        int int80 = property78.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime81 = property78.roundHalfFloorCopy();
        int int82 = property69.compareTo((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean84 = localDateTime81.isSupported(dateTimeFieldType83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime81.withPeriodAdded(readablePeriod85, (int) 'a');
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.plusMonths((int) 'u');
        int int90 = localDateTime87.getDayOfYear();
        int int91 = localDateTime87.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property92 = localDateTime87.millisOfDay();
        int[] intArray93 = localDateTime87.getValues();
        int int94 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localDateTime37, intArray93);
        long long97 = dateTimeField15.add((-756982799854L), (-5999));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-61851599999990L) + "'", long20 == (-61851599999990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1975" + "'", str22, "1975");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 49 + "'", int63 == 49);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 292278993 + "'", int70 == 292278993);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 292278993 + "'", int79 == 292278993);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 19 + "'", int91 == 19);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1970, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 292278993 + "'", int94 == 292278993);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-190067158799854L) + "'", long97 == (-190067158799854L));
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        java.util.Locale locale13 = dateTimeParserBucket11.getLocale();
        boolean boolean15 = dateTimeParserBucket11.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology16 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.minuteOfHour();
        org.joda.time.DurationField durationField20 = chronology18.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfEra();
        long long23 = dateTimeField21.roundHalfEven(117L);
        java.util.Locale locale28 = new java.util.Locale("und", "1969-12-31T23:59:07.000", "+00:00");
        java.lang.String str29 = dateTimeField21.getAsText(309, locale28);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals(locale28.toString(), "und_1969-12-31T23:59:07.000_+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "309" + "'", str29, "309");
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.hours();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plus(readableDuration16);
        org.joda.time.DateTimeField dateTimeField19 = localDateTime15.getField((int) (short) 1);
        int int21 = dateTimeField19.getLeapAmount(2L);
        org.joda.time.DurationField durationField22 = dateTimeField19.getLeapDurationField();
        long long25 = durationField22.add((-1920001L), (-607L));
        java.lang.String str26 = durationField22.getName();
        long long29 = durationField22.subtract(1431744L, (long) (-508154));
        org.joda.time.DurationFieldType durationFieldType30 = durationField22.getType();
        java.lang.String str31 = durationFieldType30.getName();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-52446720001L) + "'", long25 == (-52446720001L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "days" + "'", str26, "days");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 43904507031744L + "'", long29 == 43904507031744L);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "days" + "'", str31, "days");
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        int int3 = dateTimeZone1.getOffset((long) (short) 0);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        int int8 = dateTimeZone1.getStandardOffset((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(365L, dateTimeZone1);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = null;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        java.lang.String str31 = locale25.getDisplayCountry(locale28);
        dateTimeParserBucket21.saveField(dateTimeFieldType23, "", locale25);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.lang.String str41 = locale35.getDisplayCountry(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale35, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology45 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.lang.String str54 = locale48.getDisplayCountry(locale51);
        dateTimeParserBucket44.saveField(dateTimeFieldType46, "", locale48);
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        dateTimeParserBucket21.saveField(dateTimeFieldType46, "yearOfEra", locale57);
        dateTimeParserBucket21.setOffset(59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str62 = dateTimeFieldType61.toString();
        dateTimeParserBucket21.saveField(dateTimeFieldType61, 14);
        java.lang.String str65 = dateTimeFieldType61.getName();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime9.withField(dateTimeFieldType61, 1959);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType61.getRangeDurationType();
        java.lang.String str69 = dateTimeFieldType61.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "weekyear" + "'", str62, "weekyear");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "weekyear" + "'", str65, "weekyear");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNull(durationFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "weekyear" + "'", str69, "weekyear");
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.lang.String str16 = chronology12.toString();
        org.joda.time.DurationField durationField17 = chronology12.halfdays();
        org.joda.time.DurationField durationField18 = chronology12.millis();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minus(readablePeriod22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property24.getFieldType();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale29.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        java.lang.String str35 = locale29.getDisplayCountry(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology28, locale29, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology39 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType26.getField(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.years();
        long long45 = durationField43.getMillis((long) 100);
        int int46 = durationField18.compareTo(durationField43);
        long long49 = durationField43.getMillis((-1920001L), (-292274689L));
        long long50 = durationField43.getUnitMillis();
        java.lang.String str51 = durationField43.getName();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3155695200000L + "'", long45 == 3155695200000L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-60589379376000000L) + "'", long49 == (-60589379376000000L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 31556952000L + "'", long50 == 31556952000L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "years" + "'", str51, "years");
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology11, locale12, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType8.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfWeek();
        org.joda.time.Chronology chronology28 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.weekyearOfCentury();
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(283996800032L, chronology22, locale30, (java.lang.Integer) 86399999, (-8));
        dateTimeParserBucket33.setPivotYear((java.lang.Integer) 1);
        long long37 = dateTimeParserBucket33.computeMillis(false);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfSecond();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.lang.String str49 = locale43.getDisplayCountry(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology42, locale43, (java.lang.Integer) 0, 0);
        dateTimeParserBucket52.setOffset((java.lang.Integer) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = null;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.lang.String str64 = locale58.getDisplayCountry(locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology57, locale58, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology68 = dateTimeParserBucket67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.year();
        org.joda.time.DurationField durationField70 = chronology68.years();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minus(readablePeriod75);
        boolean boolean77 = dateTimeZone71.isLocalDateTimeGap(localDateTime76);
        org.joda.time.Chronology chronology78 = chronology68.withZone(dateTimeZone71);
        boolean boolean79 = dateTimeFieldType55.isSupported(chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.dayOfYear();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField82 = chronology78.year();
        org.joda.time.DateTimeField dateTimeField83 = chronology78.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone84 = chronology78.getZone();
        org.joda.time.DateTimeZone dateTimeZone85 = chronology78.getZone();
        dateTimeParserBucket52.setZone(dateTimeZone85);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        boolean boolean89 = dateTimeParserBucket52.restoreState((java.lang.Object) dateTimeZone88);
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 10);
        long long94 = dateTimeZone88.getMillisKeepLocal(dateTimeZone92, 69L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone92);
        org.joda.time.Chronology chronology96 = chronology38.withZone(dateTimeZone92);
        org.joda.time.DurationField durationField97 = chronology96.months();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 283996800032L + "'", long37 == 283996800032L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-599923L) + "'", long94 == (-599923L));
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(durationField97);
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = property5.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        int int18 = property17.getMaximumValueOverall();
        int int19 = property17.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minus(readablePeriod24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfEra();
        int int27 = property26.getMaximumValueOverall();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfFloorCopy();
        int int30 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfCentury((int) ' ');
        int int34 = localDateTime33.size();
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale39, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology49 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) '#', chronology49);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale55.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology54, locale55, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology65 = dateTimeParserBucket64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.hours();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) '#', chronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMonths((int) (short) 10);
        boolean boolean70 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.DateTime dateTime71 = localDateTime67.toDateTime();
        int int72 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime71.getZone();
        long long74 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology76 = null;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = null;
        java.lang.String str79 = locale77.getDisplayVariant(locale78);
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.util.Locale locale81 = null;
        java.lang.String str82 = locale80.getDisplayVariant(locale81);
        java.lang.String str83 = locale77.getDisplayCountry(locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology76, locale77, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology87 = dateTimeParserBucket86.getChronology();
        java.util.Locale locale88 = dateTimeParserBucket86.getLocale();
        boolean boolean90 = dateTimeParserBucket86.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology91 = dateTimeParserBucket86.getChronology();
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(chronology91);
        boolean boolean93 = dateTime71.equals((java.lang.Object) chronology91);
        org.joda.time.DurationField durationField94 = chronology91.halfdays();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(durationField94);
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = null;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        java.lang.String str8 = locale2.getDisplayCountry(locale5);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale2, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.years();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) '4', dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        boolean boolean20 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property21.roundHalfCeilingCopy();
        int int24 = property21.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayVariant(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = null;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale4.getDisplayCountry(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology3, locale4, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '#', chronology14);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = null;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale20.getDisplayCountry(locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale20, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) '#', chronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMonths((int) (short) 10);
        boolean boolean35 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.yearOfEra();
        int int42 = property41.getMaximumValueOverall();
        int int43 = property41.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime44 = property41.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readablePeriod48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.yearOfEra();
        int int51 = property50.getMaximumValueOverall();
        int int52 = property50.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime53 = property50.roundHalfFloorCopy();
        int int54 = property41.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray57 = localDateTime56.getFields();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withWeekyear((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusWeeks(0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime16.withHourOfDay(9);
        org.joda.time.Chronology chronology68 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.secondOfDay();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((-292274689L), chronology68);
        org.joda.time.DateTimeField dateTimeField71 = chronology68.hourOfHalfday();
        boolean boolean72 = dateTimeField71.isLenient();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 292278993 + "'", int42 == 292278993);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 292278993 + "'", int51 == 292278993);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldArray57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = property5.getMaximumValueOverall();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfEra();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfFloorCopy();
        int int18 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-52));
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusDays(100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (short) 1, dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.yearOfEra();
        int int32 = property31.getMaximumValueOverall();
        int int33 = property31.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfFloorCopy();
        int int35 = property31.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime36 = property31.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusDays(14);
        int int40 = localDateTime36.getYear();
        boolean boolean41 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        java.lang.String str44 = durationFieldType43.toString();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = null;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.lang.String str53 = locale47.getDisplayCountry(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale47, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        java.util.Locale locale58 = dateTimeParserBucket56.getLocale();
        boolean boolean60 = dateTimeParserBucket56.restoreState((java.lang.Object) (-1.0f));
        org.joda.time.Chronology chronology61 = dateTimeParserBucket56.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.year();
        org.joda.time.Chronology chronology64 = chronology61.withUTC();
        org.joda.time.DurationField durationField65 = durationFieldType43.getField(chronology64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime36.withFieldAdded(durationFieldType43, 575);
        org.joda.time.DateTimeField[] dateTimeFieldArray68 = localDateTime36.getFields();
        java.util.Date date69 = localDateTime36.toDate();
        boolean boolean70 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1971 + "'", int40 == 1971);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyears" + "'", str44, "weekyears");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldArray68);
        org.junit.Assert.assertNotNull(date69);
// flaky:         org.junit.Assert.assertEquals(date69.toString(), "Fri Jan 01 00:00:00 GMT 1971");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayVariant(locale7);
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale3, (java.lang.Integer) 0, 0);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = null;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.lang.String str22 = locale16.getDisplayCountry(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) 0, chronology13, locale16, (java.lang.Integer) 2, 70);
        org.joda.time.DateTimeField dateTimeField26 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology13.dayOfYear();
        org.joda.time.DurationField durationField30 = chronology13.months();
        org.joda.time.DurationField durationField31 = chronology13.millis();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
    }
}

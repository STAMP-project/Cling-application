import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test06001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06001");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        double[][] doubleArray22 = realMatrix21.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.inverse();
        boolean boolean24 = realMatrix23.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 11);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix26.scalarAdd((double) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix26.scalarAdd(1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix23.subtract(realMatrix30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
    }

    @Test
    public void test06002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06002");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) 1);
        java.math.BigInteger bigInteger2 = bigDecimal1.toBigInteger();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
    }

    @Test
    public void test06003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06003");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        boolean boolean32 = bigMatrixImpl31.isSquare();
        int int33 = bigMatrixImpl31.getRowDimension();
        bigMatrixImpl31.setRoundingMode((int) '#');
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl31.getRowMatrix(0);
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl31.getNorm();
        int int39 = bigMatrixImpl31.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = bigMatrixImpl31.getRowAsDoubleArray((int) (byte) -100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
    }

    @Test
    public void test06004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06004");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal((int) (byte) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl14.scalarMultiply(bigDecimal23);
        boolean boolean25 = bigMatrix24.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal26 = bigMatrix24.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06005");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        java.lang.String str64 = bigDecimal63.toString();
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal67 = bigDecimal66.stripTrailingZeros();
        int int68 = bigDecimal66.signum();
        java.math.BigDecimal[] bigDecimalArray69 = bigDecimal63.divideAndRemainder(bigDecimal66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        int int71 = bigMatrixImpl70.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl70.transpose();
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl70.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl37.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl74);
        int int76 = bigMatrixImpl74.getColumnDimension();
        double[][] doubleArray77 = bigMatrixImpl74.getDataAsDoubleArray();
        boolean boolean78 = bigMatrixImpl74.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl74.getRowMatrix((-2));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test06006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06006");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal19 = bigMatrixImpl14.getNorm();
        float float20 = bigDecimal19.floatValue();
        double double21 = bigDecimal19.doubleValue();
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray34 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        bigMatrixImpl36.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl36.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray39);
        double[][] doubleArray41 = bigMatrixImpl40.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        float float45 = bigDecimal43.floatValue();
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[] doubleArray51 = new double[] { 1.0d, 100.0f };
        double[] doubleArray54 = new double[] { 1.0d, 100.0f };
        double[] doubleArray57 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray58 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57 };
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl60.transpose();
        int int62 = bigMatrixImpl60.getColumnDimension();
        java.math.BigDecimal bigDecimal64 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal65 = bigDecimal64.stripTrailingZeros();
        int int66 = bigDecimal64.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl60.scalarMultiply(bigDecimal64);
        java.math.BigDecimal bigDecimal68 = bigMatrixImpl60.getNorm();
        java.math.BigDecimal bigDecimal69 = bigDecimal43.remainder(bigDecimal68);
        short short70 = bigDecimal68.shortValueExact();
        boolean boolean71 = bigMatrixImpl40.equals((java.lang.Object) bigDecimal68);
        java.math.BigDecimal bigDecimal72 = bigDecimal68.abs();
        java.math.BigDecimal bigDecimal73 = bigDecimal68.stripTrailingZeros();
        java.math.RoundingMode roundingMode75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal76 = bigDecimal19.divide(bigDecimal68, 1, roundingMode75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 400.0f + "'", float20 == 400.0f);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 400.0d + "'", double21 == 400.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 97.0f + "'", float45 == 97.0f);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) 400 + "'", short70 == (short) 400);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimal73);
    }

    @Test
    public void test06007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06007");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        boolean boolean27 = bigDecimal4.equals((java.lang.Object) realMatrix16);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix16.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix28.scalarMultiply((double) (byte) 97);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.copy();
        int int32 = realMatrix28.getRowDimension();
        boolean boolean33 = realMatrix28.isSquare();
        int[] intArray40 = new int[] { 2, (byte) 4, 400, (byte) 0, (-35), 'a' };
        int[] intArray41 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix28.getSubMatrix(intArray40, intArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2, 4, 400, 0, -35, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
    }

    @Test
    public void test06008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06008");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) 'a');
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        java.lang.String str5 = bigDecimal4.toString();
        java.math.BigDecimal bigDecimal7 = bigDecimal4.setScale(0);
        byte byte8 = bigDecimal7.byteValueExact();
        java.math.BigDecimal bigDecimal9 = bigDecimal7.plus();
        java.math.BigDecimal bigDecimal10 = bigDecimal7.negate();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal[][] bigDecimalArray35 = new java.math.BigDecimal[][] { bigDecimalArray18, bigDecimalArray26, bigDecimalArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray35);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigInteger bigInteger45 = bigDecimal39.toBigInteger();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(bigInteger45);
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        float float50 = bigDecimal48.floatValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.multiply(bigDecimal48);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrix37.scalarAdd(bigDecimal51);
        short short53 = bigDecimal51.shortValueExact();
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int56 = bigDecimal55.signum();
        java.math.BigDecimal[] bigDecimalArray57 = bigDecimal51.divideAndRemainder(bigDecimal55);
        java.math.BigInteger bigInteger58 = bigDecimal51.toBigInteger();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal65 = bigDecimal60.min(bigDecimal63);
        java.math.BigInteger bigInteger66 = bigDecimal60.toBigInteger();
        int int67 = bigDecimal60.precision();
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal70 = bigDecimal60.subtract(bigDecimal69);
        java.math.BigDecimal bigDecimal71 = bigDecimal69.ulp();
        java.math.BigDecimal bigDecimal72 = bigDecimal51.remainder(bigDecimal69);
        java.math.BigDecimal bigDecimal73 = bigDecimal7.divideToIntegralValue(bigDecimal69);
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((-1L));
        java.math.BigDecimal[] bigDecimalArray76 = bigDecimal73.divideAndRemainder(bigDecimal75);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray77 = bigMatrixImpl2.operate(bigDecimalArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 97.0f + "'", float50 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 0 + "'", short53 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
    }

    @Test
    public void test06009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06009");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        int int12 = realMatrix6.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix6.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test06010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06010");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        float float5 = bigDecimal2.floatValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal15 = bigDecimal7.pow((int) 'a');
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal21 = bigDecimal20.stripTrailingZeros();
        int int22 = bigDecimal20.signum();
        java.math.BigDecimal[] bigDecimalArray23 = bigDecimal17.divideAndRemainder(bigDecimal20);
        java.math.BigDecimal bigDecimal25 = bigDecimal17.pow((int) 'a');
        java.math.BigInteger bigInteger26 = bigDecimal17.toBigIntegerExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal15.add(bigDecimal17);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigInteger bigInteger35 = bigDecimal29.toBigInteger();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        float float40 = bigDecimal38.floatValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.multiply(bigDecimal38);
        java.math.BigDecimal bigDecimal42 = bigDecimal36.negate();
        java.math.BigDecimal bigDecimal43 = bigDecimal27.add(bigDecimal42);
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.stripTrailingZeros();
        float float47 = bigDecimal45.floatValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal45.ulp();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        java.lang.String str61 = bigDecimal60.toString();
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal64 = bigDecimal63.stripTrailingZeros();
        int int65 = bigDecimal63.signum();
        java.math.BigDecimal[] bigDecimalArray66 = bigDecimal60.divideAndRemainder(bigDecimal63);
        java.math.BigDecimal bigDecimal68 = bigDecimal60.pow((int) 'a');
        java.math.BigInteger bigInteger69 = bigDecimal60.toBigIntegerExact();
        java.math.BigDecimal bigDecimal70 = bigDecimal58.add(bigDecimal60);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger74 = bigDecimal73.unscaledValue();
        java.math.BigDecimal bigDecimal75 = bigDecimal71.add(bigDecimal73);
        java.math.BigDecimal bigDecimal76 = bigDecimal60.multiply(bigDecimal71);
        java.math.BigDecimal bigDecimal77 = bigDecimal48.divide(bigDecimal71);
        java.math.BigDecimal bigDecimal78 = bigDecimal42.remainder(bigDecimal48);
        java.math.BigDecimal bigDecimal79 = bigDecimal2.subtract(bigDecimal42);
        int int80 = bigDecimal79.intValue();
        byte byte81 = bigDecimal79.byteValue();
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 100.0f + "'", float5 == 100.0f);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 97.0f + "'", float40 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 97.0f + "'", float47 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0" + "'", str61, "0");
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray66);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertTrue("'" + byte81 + "' != '" + (byte) 100 + "'", byte81 == (byte) 100);
    }

    @Test
    public void test06011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06011");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        java.lang.String str20 = bigMatrixImpl14.toString();
        java.math.BigDecimal bigDecimal21 = bigMatrixImpl14.getNorm();
        int[] intArray24 = new int[] { (byte) -1, (byte) -54 };
        int[] intArray25 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl14.getSubMatrix(intArray24, intArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str20, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -54]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
    }

    @Test
    public void test06012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06012");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl5.getDeterminant();
        double double7 = bigDecimal6.doubleValue();
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray20 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19 };
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.transpose();
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl22.getNorm();
        double[] doubleArray31 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray38 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray45 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray52 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray53 = new double[][] { doubleArray31, doubleArray38, doubleArray45, doubleArray52 };
        org.apache.commons.math.linear.RealMatrix realMatrix54 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray53);
        double[][] doubleArray55 = realMatrix54.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray55);
        boolean boolean57 = bigDecimal24.equals((java.lang.Object) realMatrix56);
        java.math.BigDecimal bigDecimal59 = bigDecimal24.scaleByPowerOfTen((int) (short) -1);
        java.math.MathContext mathContext60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal61 = bigDecimal6.subtract(bigDecimal59, mathContext60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigDecimal59);
    }

    @Test
    public void test06013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06013");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        int int20 = bigMatrixImpl14.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.transpose();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        byte byte27 = bigDecimal26.byteValueExact();
        java.math.BigDecimal bigDecimal28 = bigDecimal26.plus();
        java.math.BigDecimal bigDecimal29 = bigDecimal26.negate();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal[][] bigDecimalArray54 = new java.math.BigDecimal[][] { bigDecimalArray37, bigDecimalArray45, bigDecimalArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray54);
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.min(bigDecimal61);
        java.math.BigInteger bigInteger64 = bigDecimal58.toBigInteger();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(bigInteger64);
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal68 = bigDecimal67.stripTrailingZeros();
        float float69 = bigDecimal67.floatValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal65.multiply(bigDecimal67);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrix56.scalarAdd(bigDecimal70);
        short short72 = bigDecimal70.shortValueExact();
        java.math.BigDecimal bigDecimal74 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int75 = bigDecimal74.signum();
        java.math.BigDecimal[] bigDecimalArray76 = bigDecimal70.divideAndRemainder(bigDecimal74);
        java.math.BigInteger bigInteger77 = bigDecimal70.toBigInteger();
        java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal(0.0d);
        int int80 = bigDecimal79.intValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(0.0d);
        int int83 = bigDecimal82.intValue();
        java.math.BigDecimal bigDecimal84 = bigDecimal79.min(bigDecimal82);
        java.math.BigInteger bigInteger85 = bigDecimal79.toBigInteger();
        int int86 = bigDecimal79.precision();
        java.math.BigDecimal bigDecimal88 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal89 = bigDecimal79.subtract(bigDecimal88);
        java.math.BigDecimal bigDecimal90 = bigDecimal88.ulp();
        java.math.BigDecimal bigDecimal91 = bigDecimal70.remainder(bigDecimal88);
        java.math.BigDecimal bigDecimal92 = bigDecimal26.divideToIntegralValue(bigDecimal88);
        java.math.BigDecimal bigDecimal94 = java.math.BigDecimal.valueOf((-1L));
        java.math.BigDecimal[] bigDecimalArray95 = bigDecimal92.divideAndRemainder(bigDecimal94);
        org.apache.commons.math.linear.BigMatrix bigMatrix96 = bigMatrixImpl14.scalarMultiply(bigDecimal92);
        java.math.BigDecimal bigDecimal97 = bigMatrixImpl14.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 97.0f + "'", float69 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertTrue("'" + short72 + "' != '" + (short) 0 + "'", short72 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigDecimalArray95);
        org.junit.Assert.assertNotNull(bigMatrix96);
        org.junit.Assert.assertNotNull(bigDecimal97);
    }

    @Test
    public void test06014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06014");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        boolean boolean10 = bigMatrixImpl8.isSquare();
        bigMatrixImpl8.setRoundingMode((int) (byte) 10);
        int int13 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl8.copy();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal21 = bigDecimal16.min(bigDecimal19);
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal[][] bigDecimalArray39 = new java.math.BigDecimal[][] { bigDecimalArray22, bigDecimalArray30, bigDecimalArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray39);
        java.math.BigDecimal[][] bigDecimalArray43 = bigMatrixImpl42.getDataRef();
        java.math.BigDecimal bigDecimal44 = bigMatrixImpl42.getNorm();
        boolean boolean45 = bigMatrixImpl42.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl42.copy();
        double[] doubleArray48 = bigMatrixImpl42.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl42.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl42.transpose();
        java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl42.getColumn((int) (short) 0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray54 = bigMatrix14.preMultiply(bigDecimalArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
    }

    @Test
    public void test06015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06015");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        short short42 = bigDecimal40.shortValueExact();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        long long46 = bigDecimal44.longValue();
        long long47 = bigDecimal44.longValueExact();
        int int48 = bigDecimal44.precision();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        long long52 = bigDecimal50.longValue();
        long long53 = bigDecimal50.longValueExact();
        java.math.BigDecimal bigDecimal54 = bigDecimal44.add(bigDecimal50);
        byte byte55 = bigDecimal44.byteValueExact();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        java.lang.String str58 = bigDecimal57.toString();
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal61 = bigDecimal60.stripTrailingZeros();
        int int62 = bigDecimal60.signum();
        java.math.BigDecimal[] bigDecimalArray63 = bigDecimal57.divideAndRemainder(bigDecimal60);
        java.math.BigDecimal bigDecimal65 = bigDecimal57.pow((int) 'a');
        java.math.BigInteger bigInteger66 = bigDecimal57.toBigIntegerExact();
        float float67 = bigDecimal57.floatValue();
        double[] doubleArray72 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix73 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray72);
        double[] doubleArray78 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix79 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray78);
        double[] doubleArray80 = realMatrix73.operate(doubleArray78);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray80);
        java.math.BigDecimal bigDecimal82 = bigMatrix81.getNorm();
        java.math.BigDecimal bigDecimal83 = bigDecimal57.subtract(bigDecimal82);
        int int84 = bigDecimal83.signum();
        java.math.BigInteger bigInteger85 = bigDecimal83.toBigInteger();
        java.math.BigDecimal bigDecimal87 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal89 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray90 = bigDecimal87.divideAndRemainder(bigDecimal89);
        java.math.BigDecimal bigDecimal92 = bigDecimal89.movePointLeft((-1));
        java.math.BigDecimal bigDecimal93 = bigDecimal83.max(bigDecimal89);
        java.math.BigDecimal bigDecimal94 = bigDecimal89.stripTrailingZeros();
        java.math.BigDecimal bigDecimal95 = bigDecimal44.remainder(bigDecimal89);
        java.math.MathContext mathContext96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal97 = bigDecimal40.add(bigDecimal89, mathContext96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 97.0f + "'", float39 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) 0 + "'", short42 == (short) 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + byte55 + "' != '" + (byte) 0 + "'", byte55 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 0.0f + "'", float67 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix81);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigDecimalArray90);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigDecimal95);
    }

    @Test
    public void test06016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06016");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) (byte) -11);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        long long6 = bigDecimal4.longValue();
        long long7 = bigDecimal4.longValueExact();
        int int8 = bigDecimal4.precision();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        long long12 = bigDecimal10.longValue();
        long long13 = bigDecimal10.longValueExact();
        java.math.BigDecimal bigDecimal14 = bigDecimal4.add(bigDecimal10);
        java.math.BigDecimal bigDecimal16 = bigDecimal10.pow(3);
        java.math.MathContext mathContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray18 = bigDecimal1.divideAndRemainder(bigDecimal16, mathContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-11" + "'", str2, "-11");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal16);
    }

    @Test
    public void test06017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06017");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) 4);
        java.math.MathContext mathContext3 = null;
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal((double) 0.0f, mathContext3);
        java.lang.String str5 = bigDecimal4.toPlainString();
        java.math.BigInteger bigInteger6 = bigDecimal4.unscaledValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal1.subtract(bigDecimal4);
        int int8 = bigDecimal1.intValueExact();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test06018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06018");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl14.getDataRef();
        int int21 = bigMatrixImpl14.getRoundingMode();
        bigMatrixImpl14.setRoundingMode((int) (short) -100);
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl38.transpose();
        boolean boolean40 = bigMatrixImpl38.isSingular();
        int int41 = bigMatrixImpl38.getRoundingMode();
        double[][] doubleArray42 = bigMatrixImpl38.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl38);
        boolean boolean44 = bigMatrixImpl14.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06019");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl18.getColumn(0);
        int int21 = bigMatrixImpl18.getRoundingMode();
        java.math.BigDecimal[] bigDecimalArray23 = bigMatrixImpl18.getColumn(0);
        int int24 = bigMatrixImpl18.getColumnDimension();
        double[][] doubleArray25 = bigMatrixImpl18.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal26 = bigMatrixImpl18.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test06020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06020");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix18.scalarAdd((double) 6);
        int int21 = realMatrix18.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix18.scalarAdd(10.0d);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        double double30 = realMatrix29.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix29.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrix23.preMultiply(realMatrix32);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 1.0f);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrix42.scalarAdd((double) 6);
        int int45 = realMatrix42.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix42.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix35.preMultiply(realMatrix42);
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrix35.copy();
        double[] doubleArray54 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix55 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix56.scalarAdd((double) 6);
        double double59 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix35.preMultiply(realMatrix56);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix6.subtract(realMatrix60);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix61.copy();
        boolean boolean63 = realMatrix61.isSquare();
        java.lang.Class<?> wildcardClass64 = realMatrix61.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 63.0d + "'", double59 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test06021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06021");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.scalarMultiply(bigDecimal18);
        double[][] doubleArray22 = bigMatrixImpl14.getDataAsDoubleArray();
        int int23 = bigMatrixImpl14.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl14.getRow((int) (short) -2805);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test06022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06022");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (byte) -100);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.abs();
        float float3 = bigDecimal2.floatValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal2.negate();
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        java.math.MathContext mathContext6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal7 = bigDecimal4.round(mathContext6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
    }

    @Test
    public void test06023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06023");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal35 = bigDecimal9.ulp();
        java.math.BigDecimal bigDecimal36 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal39 = bigDecimal38.negate();
        java.math.BigDecimal bigDecimal41 = bigDecimal38.pow((int) (byte) 100);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal((long) (byte) -11);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = bigDecimal38.divide(bigDecimal43, 3);
        java.math.BigDecimal bigDecimal47 = bigDecimal36.remainder(bigDecimal46);
        float float48 = bigDecimal36.floatValue();
        java.math.BigInteger bigInteger49 = bigDecimal36.unscaledValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-11" + "'", str44, "-11");
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertNotNull(bigInteger49);
    }

    @Test
    public void test06024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06024");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        byte byte5 = bigDecimal4.byteValueExact();
        java.math.BigDecimal bigDecimal6 = bigDecimal4.plus();
        java.math.BigDecimal bigDecimal7 = bigDecimal4.negate();
        java.math.BigDecimal bigDecimal8 = null;
        java.math.MathContext mathContext9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray10 = bigDecimal4.divideAndRemainder(bigDecimal8, mathContext9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 0 + "'", byte5 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
    }

    @Test
    public void test06025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06025");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarAdd(bigDecimal38);
        java.math.BigDecimal bigDecimal41 = bigDecimal38.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal38.min(bigDecimal43);
        java.math.BigDecimal bigDecimal47 = bigDecimal38.plus();
        java.math.MathContext mathContext49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal50 = bigDecimal47.pow(1, mathContext49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
    }

    @Test
    public void test06026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06026");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        int int21 = bigMatrixImpl14.getRoundingMode();
        int int22 = bigMatrixImpl14.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
    }

    @Test
    public void test06027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06027");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        bigMatrixImpl27.setScale((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl27.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        int[] intArray33 = new int[] { (-1) };
        int[] intArray39 = new int[] { (short) 4, (-100), (short) 35, 2881, (-32) };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl27.getSubMatrix(intArray33, intArray39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[4, -100, 35, 2881, -32]");
    }

    @Test
    public void test06028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06028");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        boolean boolean10 = bigMatrixImpl8.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal11 = bigMatrixImpl8.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test06029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06029");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.min(bigDecimal7);
        java.math.BigInteger bigInteger10 = bigDecimal9.toBigIntegerExact();
        boolean boolean11 = bigDecimal1.equals((java.lang.Object) bigInteger10);
        java.math.BigDecimal bigDecimal12 = bigDecimal1.abs();
        long long13 = bigDecimal12.longValue();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 97L + "'", long13 == 97L);
    }

    @Test
    public void test06030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06030");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        int int20 = bigMatrixImpl14.getRoundingMode();
        int[] intArray26 = new int[] { 1, (byte) -1, (byte) -11, 5, 4 };
        int[] intArray29 = new int[] { 10, 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl14.getSubMatrix(intArray26, intArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, -1, -11, 5, 4]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[10, 1]");
    }

    @Test
    public void test06031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06031");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(97L);
    }

    @Test
    public void test06032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06032");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.copy();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.lang.String str25 = bigDecimal24.toString();
        java.math.BigDecimal bigDecimal27 = bigDecimal24.pow((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl14.scalarAdd(bigDecimal24);
        int int29 = bigDecimal24.scale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1E-100" + "'", str25, "1E-100");
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
    }

    @Test
    public void test06033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06033");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal("100");
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.min(bigDecimal28);
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal[][] bigDecimalArray48 = new java.math.BigDecimal[][] { bigDecimalArray31, bigDecimalArray39, bigDecimalArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray48);
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigInteger bigInteger58 = bigDecimal52.toBigInteger();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(bigInteger58);
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        float float63 = bigDecimal61.floatValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal59.multiply(bigDecimal61);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrix50.scalarAdd(bigDecimal64);
        short short66 = bigDecimal64.shortValueExact();
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int69 = bigDecimal68.signum();
        java.math.BigDecimal[] bigDecimalArray70 = bigDecimal64.divideAndRemainder(bigDecimal68);
        java.math.BigDecimal bigDecimal71 = bigDecimal23.add(bigDecimal64);
        java.math.BigDecimal[] bigDecimalArray72 = bigDecimal21.divideAndRemainder(bigDecimal71);
        java.lang.String str73 = bigDecimal71.toEngineeringString();
        int int74 = bigDecimal71.precision();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 97.0f + "'", float63 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) 0 + "'", short66 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100" + "'", str73, "100");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
    }

    @Test
    public void test06034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06034");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(charArray2, 32, (int) (byte) 110);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test06035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06035");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException1 = new org.apache.commons.math.linear.MatrixIndexException("0");
        java.lang.String str2 = matrixIndexException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.linear.MatrixIndexException: 0" + "'", str2, "org.apache.commons.math.linear.MatrixIndexException: 0");
    }

    @Test
    public void test06036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06036");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        int int39 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl27.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl27.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
    }

    @Test
    public void test06037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06037");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix20.scalarAdd((double) 5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix20.getColumnMatrix(4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test06038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06038");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl14.getDataRef();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal("100");
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.min(bigDecimal28);
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal[][] bigDecimalArray48 = new java.math.BigDecimal[][] { bigDecimalArray31, bigDecimalArray39, bigDecimalArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray48);
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigInteger bigInteger58 = bigDecimal52.toBigInteger();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(bigInteger58);
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        float float63 = bigDecimal61.floatValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal59.multiply(bigDecimal61);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrix50.scalarAdd(bigDecimal64);
        short short66 = bigDecimal64.shortValueExact();
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int69 = bigDecimal68.signum();
        java.math.BigDecimal[] bigDecimalArray70 = bigDecimal64.divideAndRemainder(bigDecimal68);
        java.math.BigDecimal bigDecimal71 = bigDecimal23.add(bigDecimal64);
        int int72 = bigDecimal23.intValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl14.scalarMultiply(bigDecimal23);
        int int74 = bigDecimal23.signum();
        byte byte75 = bigDecimal23.byteValue();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 97.0f + "'", float63 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) 0 + "'", short66 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + byte75 + "' != '" + (byte) 100 + "'", byte75 == (byte) 100);
    }

    @Test
    public void test06039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06039");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal[][] bigDecimalArray33 = bigMatrixImpl27.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray35 = bigMatrixImpl27.getRowAsDoubleArray((-32));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
    }

    @Test
    public void test06040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06040");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigInteger bigInteger14 = bigDecimal13.toBigIntegerExact();
        java.math.BigDecimal bigDecimal15 = bigDecimal13.stripTrailingZeros();
        long long16 = bigDecimal13.longValueExact();
        double double17 = bigDecimal13.doubleValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test06041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06041");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[] bigDecimalArray18 = bigMatrix16.getColumn(0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        int int21 = bigDecimal20.scale();
        java.math.BigDecimal bigDecimal23 = bigDecimal20.movePointRight((int) (byte) 100);
        short short24 = bigDecimal20.shortValue();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix16);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 4 + "'", short24 == (short) 4);
    }

    @Test
    public void test06042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06042");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 6, 3);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        java.lang.String str5 = bigDecimal4.toString();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal8 = bigDecimal7.stripTrailingZeros();
        int int9 = bigDecimal7.signum();
        java.math.BigDecimal[] bigDecimalArray10 = bigDecimal4.divideAndRemainder(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal4.pow((int) 'a');
        java.math.BigInteger bigInteger13 = bigDecimal4.toBigIntegerExact();
        int int14 = bigDecimal4.precision();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl23.getNorm();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        float float38 = bigDecimal36.floatValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.divideToIntegralValue(bigDecimal36);
        boolean boolean40 = bigMatrixImpl23.equals((java.lang.Object) bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal4.divideAndRemainder(bigDecimal36);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        java.lang.String str44 = bigMatrixImpl43.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl2.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 97.0f + "'", float38 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "BigMatrixImpl{{0},{0}}" + "'", str44, "BigMatrixImpl{{0},{0}}");
    }

    @Test
    public void test06043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06043");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal2 = bigMatrix1.getDeterminant();
        java.math.BigDecimal bigDecimal3 = bigMatrix1.getTrace();
        java.lang.Class<?> wildcardClass4 = bigDecimal3.getClass();
        org.junit.Assert.assertNotNull(bigMatrix1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test06044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06044");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException0 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException1 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException0.addSuppressed((java.lang.Throwable) invalidMatrixException1);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException4 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException0.addSuppressed((java.lang.Throwable) matrixIndexException4);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException6 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException7 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException6.addSuppressed((java.lang.Throwable) invalidMatrixException7);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException10 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException6.addSuppressed((java.lang.Throwable) matrixIndexException10);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException13 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException10.addSuppressed((java.lang.Throwable) matrixIndexException13);
        matrixIndexException4.addSuppressed((java.lang.Throwable) matrixIndexException10);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException16 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException17 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException16.addSuppressed((java.lang.Throwable) invalidMatrixException17);
        java.lang.Throwable[] throwableArray19 = invalidMatrixException16.getSuppressed();
        matrixIndexException4.addSuppressed((java.lang.Throwable) invalidMatrixException16);
        java.lang.Throwable[] throwableArray21 = matrixIndexException4.getSuppressed();
        java.lang.Throwable[] throwableArray22 = matrixIndexException4.getSuppressed();
        java.lang.String str23 = matrixIndexException4.toString();
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.linear.MatrixIndexException: " + "'", str23, "org.apache.commons.math.linear.MatrixIndexException: ");
    }

    @Test
    public void test06045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06045");
        java.lang.String[] strArray2 = new java.lang.String[] { "100", "100" };
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray2);
        java.math.BigDecimal[][] bigDecimalArray5 = bigMatrix4.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrix4.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix3);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
    }

    @Test
    public void test06046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06046");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigMatrixImpl27.getColumnDimension();
        bigMatrixImpl27.setRoundingMode((int) (byte) -100);
        bigMatrixImpl27.setScale(10);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf(100L);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((double) 0L);
        java.math.BigDecimal bigDecimal39 = bigDecimal36.max(bigDecimal38);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl27.scalarAdd(bigDecimal38);
        java.lang.String[] strArray42 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl27.solve(bigMatrix49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigMatrix49);
    }

    @Test
    public void test06047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06047");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        int int3 = bigDecimal2.scale();
        java.math.BigDecimal bigDecimal5 = bigDecimal2.scaleByPowerOfTen(4);
        java.math.BigDecimal bigDecimal7 = bigDecimal5.setScale((int) (short) 4);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigDecimal7);
    }

    @Test
    public void test06048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06048");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix23.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix23.inverse();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.min(bigDecimal38);
        java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal40 };
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal48 };
        java.math.BigDecimal[][] bigDecimalArray50 = new java.math.BigDecimal[][] { bigDecimalArray33, bigDecimalArray41, bigDecimalArray49 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        int int54 = bigMatrixImpl53.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl53.copy();
        double[] doubleArray57 = bigMatrixImpl53.getRowAsDoubleArray((int) (byte) 1);
        double[] doubleArray58 = realMatrix25.operate(doubleArray57);
        double[][] doubleArray59 = realMatrix25.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix60 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(bigMatrix61);
    }

    @Test
    public void test06049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06049");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix5.multiply(realMatrix19);
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray27);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix29.scalarAdd((double) 6);
        int int32 = realMatrix29.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix29.scalarAdd(10.0d);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        double double41 = realMatrix40.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix40.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrix34.preMultiply(realMatrix43);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix44.scalarAdd((double) 1.0f);
        double[] doubleArray51 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix52 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray51);
        org.apache.commons.math.linear.RealMatrix realMatrix53 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray51);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrix53.scalarAdd((double) 6);
        int int56 = realMatrix53.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix53.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix46.preMultiply(realMatrix53);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix46.copy();
        double[] doubleArray65 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrix67.scalarAdd((double) 6);
        double double70 = realMatrix67.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix46.preMultiply(realMatrix67);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix22.add(realMatrix46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrix46.getSubMatrix((-3), 97, (-3), (-32));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 63.0d + "'", double70 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix72);
    }

    @Test
    public void test06050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06050");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        int int39 = bigMatrixImpl37.getColumnDimension();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (byte) -100);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl37.scalarMultiply(bigDecimal41);
        bigMatrixImpl37.setScale((-32));
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl37.getNorm();
        boolean boolean46 = bigMatrixImpl37.isSquare();
        java.lang.String str47 = bigMatrixImpl37.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl37.getSubMatrix(2881, (int) (short) 400, (-35), (int) (byte) 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{0.0}}" + "'", str47, "BigMatrixImpl{{0.0}}");
    }

    @Test
    public void test06051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06051");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        bigMatrixImpl25.setScale((int) 'a');
        int int30 = bigMatrixImpl25.getRowDimension();
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        int int47 = bigMatrixImpl45.getColumnDimension();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        int int51 = bigDecimal49.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl45.scalarMultiply(bigDecimal49);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl25.scalarAdd(bigDecimal49);
        int int54 = bigMatrixImpl25.getColumnDimension();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.lang.String str58 = bigDecimal57.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl25.scalarAdd(bigDecimal57);
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal((long) (short) -100);
        byte byte62 = bigDecimal61.byteValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl25.scalarAdd(bigDecimal61);
        java.math.BigDecimal[][] bigDecimalArray64 = bigMatrixImpl25.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        boolean boolean67 = bigMatrix66.isSquare();
        java.math.BigDecimal[] bigDecimalArray69 = bigMatrix66.getRow(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        int int72 = bigMatrixImpl71.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl71.copy();
        java.math.BigDecimal[][] bigDecimalArray74 = bigMatrixImpl71.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl25.setSubMatrix(bigDecimalArray74, 52, 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1E-100" + "'", str58, "1E-100");
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) -100 + "'", byte62 == (byte) -100);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigDecimalArray64);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
    }

    @Test
    public void test06052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06052");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(charArray2);
        java.math.MathContext mathContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(charArray2, (int) (byte) 4, (int) (short) 2805, mathContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test06053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06053");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(8667.0d);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(bigInteger2, 3);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal((int) (byte) -100);
        java.math.BigDecimal bigDecimal8 = bigDecimal6.movePointLeft((int) 'a');
        java.math.BigDecimal bigDecimal9 = bigDecimal4.divide(bigDecimal8);
        int int10 = bigDecimal8.intValue();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test06054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06054");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((int) (short) 100, mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06055");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double double9 = realMatrix6.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix6.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrix6.scalarAdd((double) 0.0f);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix6.add(realMatrix21);
        double[] doubleArray24 = realMatrix22.getRow((int) (byte) 1);
        double[] doubleArray29 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray29);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray29);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrix31.scalarAdd((double) 6);
        int int34 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix33.scalarMultiply(1.0d);
        double[][] doubleArray37 = realMatrix36.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix36.scalarAdd((double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrix39.scalarMultiply((double) (byte) -100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix22.solve(realMatrix39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 63.0d + "'", double9 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[110.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test06056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06056");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        java.lang.String str20 = bigDecimal19.toString();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        java.math.BigDecimal[] bigDecimalArray25 = bigDecimal19.divideAndRemainder(bigDecimal22);
        java.math.BigDecimal bigDecimal27 = bigDecimal19.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal17, bigDecimal19 };
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray28);
        boolean boolean32 = bigMatrixImpl15.equals((java.lang.Object) bigMatrix31);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray37 = bigDecimal34.divideAndRemainder(bigDecimal36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray37);
        java.lang.String str40 = bigMatrixImpl39.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl39.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl15.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "BigMatrixImpl{{1},{0}}" + "'", str40, "BigMatrixImpl{{1},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix41);
    }

    @Test
    public void test06057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06057");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        int int7 = realMatrix6.getRowDimension();
        double[] doubleArray9 = realMatrix6.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrix10.getColumnMatrix(4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[52.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test06058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06058");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        bigMatrixImpl37.setScale(32);
        java.lang.String str64 = bigMatrixImpl37.toString();
        java.lang.String[] strArray66 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray67 = new java.lang.String[][] { strArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(strArray67);
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl68.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        java.math.BigDecimal bigDecimal71 = bigMatrixImpl70.getTrace();
        java.math.BigDecimal[] bigDecimalArray73 = bigMatrixImpl70.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray74 = bigMatrixImpl37.solve(bigDecimalArray73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: Matrix is singular.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "BigMatrixImpl{{0.0}}" + "'", str64, "BigMatrixImpl{{0.0}}");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
    }

    @Test
    public void test06059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06059");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(bigInteger29);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.multiply(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.negate();
        java.math.BigDecimal bigDecimal37 = bigDecimal21.add(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        float float41 = bigDecimal39.floatValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigInteger bigInteger63 = bigDecimal54.toBigIntegerExact();
        java.math.BigDecimal bigDecimal64 = bigDecimal52.add(bigDecimal54);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger68 = bigDecimal67.unscaledValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal65.add(bigDecimal67);
        java.math.BigDecimal bigDecimal70 = bigDecimal54.multiply(bigDecimal65);
        java.math.BigDecimal bigDecimal71 = bigDecimal42.divide(bigDecimal65);
        java.math.BigDecimal bigDecimal72 = bigDecimal36.remainder(bigDecimal42);
        java.lang.String str73 = bigDecimal42.toString();
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal76 = bigDecimal75.abs();
        java.lang.String str77 = bigDecimal76.toString();
        long long78 = bigDecimal76.longValueExact();
        java.math.RoundingMode roundingMode79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal80 = bigDecimal42.divide(bigDecimal76, roundingMode79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 97.0f + "'", float41 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "97" + "'", str77, "97");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 97L + "'", long78 == 97L);
    }

    @Test
    public void test06060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06060");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        int int20 = bigMatrixImpl14.getRoundingMode();
        java.lang.String str21 = bigMatrixImpl14.toString();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getData();
        int int23 = bigMatrixImpl14.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = bigMatrixImpl14.getColumnAsDoubleArray((int) (byte) -100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test06061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06061");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl27.getNorm();
        double[] doubleArray37 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix38 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray37);
        boolean boolean40 = bigMatrixImpl27.equals((java.lang.Object) doubleArray37);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrix42.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal44 = bigMatrix43.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigMatrix43);
    }

    @Test
    public void test06062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06062");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: Matrix is singular.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test06063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06063");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.lang.String str10 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal[][] bigDecimalArray35 = new java.math.BigDecimal[][] { bigDecimalArray18, bigDecimalArray26, bigDecimalArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl38.getDataRef();
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl38.getNorm();
        boolean boolean41 = bigMatrixImpl38.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl38.copy();
        double[] doubleArray44 = bigMatrixImpl38.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(strArray47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl38.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl38.copy();
        boolean boolean51 = bigMatrixImpl38.isSquare();
        boolean boolean52 = bigDecimal1.equals((java.lang.Object) boolean51);
        java.math.BigDecimal bigDecimal54 = bigDecimal1.movePointRight((int) (byte) 0);
        java.math.BigDecimal bigDecimal55 = bigDecimal1.stripTrailingZeros();
        int int56 = bigDecimal1.scale();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test06064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06064");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        double[][] doubleArray22 = realMatrix21.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix21.scalarAdd((double) (-1.0f));
        boolean boolean26 = realMatrix21.isSingular();
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        double[][] doubleArray49 = realMatrix48.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.inverse();
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix57.scalarAdd((double) 6);
        int int60 = realMatrix57.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix57.scalarAdd(10.0d);
        double[] doubleArray67 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix68 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray67);
        double double69 = realMatrix68.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix68.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix62.preMultiply(realMatrix71);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrix72.scalarAdd((double) 1.0f);
        double[] doubleArray79 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix80 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray79);
        org.apache.commons.math.linear.RealMatrix realMatrix81 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray79);
        org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrix81.scalarAdd((double) 6);
        int int84 = realMatrix81.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrix81.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrix74.preMultiply(realMatrix81);
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrix74.copy();
        boolean boolean89 = realMatrix88.isSquare();
        int int90 = realMatrix88.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrix48.add(realMatrix88);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrix21.preMultiply(realMatrix88);
        int[] intArray93 = new int[] {};
        int[] intArray96 = new int[] { (-3), (byte) -100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix97 = realMatrix88.getSubMatrix(intArray93, intArray96);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 52.0d + "'", double69 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(realMatrix83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(realMatrix86);
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-3, -100]");
    }

    @Test
    public void test06065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06065");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarAdd((double) 5);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrix5.scalarMultiply(85.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix7.inverse();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = realMatrix7.getRow((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test06066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06066");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
    }

    @Test
    public void test06067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06067");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        int int26 = bigMatrixImpl20.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl20.getColumnMatrix((int) (short) 2805);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test06068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06068");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigInteger bigInteger26 = bigDecimal25.toBigIntegerExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl18.scalarAdd(bigDecimal25);
        int int28 = bigMatrix27.getRoundingMode();
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray41 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        bigMatrixImpl43.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl43.getDataRef();
        int int47 = bigMatrixImpl43.getScale();
        int int48 = bigMatrixImpl43.getColumnDimension();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        java.lang.String str61 = bigDecimal60.toString();
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal64 = bigDecimal63.stripTrailingZeros();
        int int65 = bigDecimal63.signum();
        java.math.BigDecimal[] bigDecimalArray66 = bigDecimal60.divideAndRemainder(bigDecimal63);
        java.math.BigDecimal bigDecimal68 = bigDecimal60.pow((int) 'a');
        java.math.BigInteger bigInteger69 = bigDecimal60.toBigIntegerExact();
        java.math.BigDecimal bigDecimal70 = bigDecimal58.add(bigDecimal60);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger74 = bigDecimal73.unscaledValue();
        java.math.BigDecimal bigDecimal75 = bigDecimal71.add(bigDecimal73);
        java.math.BigDecimal bigDecimal76 = bigDecimal60.multiply(bigDecimal71);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl43.scalarAdd(bigDecimal60);
        java.math.BigDecimal[][] bigDecimalArray78 = bigMatrixImpl43.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrix27.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 64 + "'", int47 == 64);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0" + "'", str61, "0");
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray66);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
    }

    @Test
    public void test06069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06069");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix23.inverse();
        int int25 = realMatrix24.getColumnDimension();
        boolean boolean26 = realMatrix24.isSingular();
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.scalarAdd((double) 1.0f);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix57.scalarAdd((double) 6);
        int int60 = realMatrix57.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix57.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrix50.preMultiply(realMatrix57);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrix50.copy();
        boolean boolean65 = realMatrix64.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrix64.scalarAdd((double) 970L);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrix67.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrix68.scalarMultiply((double) 970L);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix24.preMultiply(realMatrix70);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix70.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrix70.getRowMatrix(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix72);
    }

    @Test
    public void test06070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06070");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(4);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 10);
        int int4 = bigDecimal3.scale();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.divideToIntegralValue(bigDecimal3);
        java.math.RoundingMode roundingMode7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal8 = bigDecimal1.setScale((int) (byte) 97, roundingMode7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(bigDecimal5);
    }

    @Test
    public void test06071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06071");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal11 = bigMatrixImpl10.getNorm();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger15 = bigDecimal14.unscaledValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal12.add(bigDecimal14);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        java.lang.String str19 = bigDecimal18.toString();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        int int23 = bigDecimal21.signum();
        java.math.BigDecimal[] bigDecimalArray24 = bigDecimal18.divideAndRemainder(bigDecimal21);
        java.math.BigDecimal bigDecimal26 = bigDecimal18.pow((int) 'a');
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        java.lang.String str29 = bigDecimal28.toString();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal32 = bigDecimal31.stripTrailingZeros();
        int int33 = bigDecimal31.signum();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal31);
        java.math.BigDecimal bigDecimal36 = bigDecimal28.pow((int) 'a');
        java.math.BigInteger bigInteger37 = bigDecimal28.toBigIntegerExact();
        java.math.BigDecimal bigDecimal38 = bigDecimal26.add(bigDecimal28);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger42 = bigDecimal41.unscaledValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal39.add(bigDecimal41);
        java.math.BigDecimal bigDecimal44 = bigDecimal28.multiply(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = bigDecimal12.subtract(bigDecimal28);
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int50 = bigDecimal49.intValue();
        long long51 = bigDecimal49.longValue();
        java.math.BigInteger bigInteger52 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal55.min(bigDecimal58);
        java.math.BigInteger bigInteger61 = bigDecimal55.toBigInteger();
        int int62 = bigDecimal55.precision();
        java.math.BigDecimal bigDecimal64 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray67 = bigDecimal64.divideAndRemainder(bigDecimal66);
        java.math.BigDecimal bigDecimal68 = bigDecimal55.multiply(bigDecimal66);
        java.math.BigInteger bigInteger69 = bigDecimal66.unscaledValue();
        int int70 = bigDecimal49.compareTo(bigDecimal66);
        java.math.BigDecimal[] bigDecimalArray71 = bigDecimal45.divideAndRemainder(bigDecimal66);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray72 = bigMatrixImpl10.solve(bigDecimalArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(bigDecimalArray71);
    }

    @Test
    public void test06072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06072");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getData();
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray45 = new double[][] { doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl47.transpose();
        int int49 = bigMatrixImpl47.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl47.transpose();
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrix50.getData();
        boolean boolean52 = bigMatrixImpl31.equals((java.lang.Object) bigDecimalArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl31.getSubMatrix((-32), (int) (byte) 10, (int) (byte) 0, 400);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06073");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(bigInteger29);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.multiply(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.negate();
        java.math.BigDecimal bigDecimal37 = bigDecimal21.add(bigDecimal36);
        java.math.BigDecimal bigDecimal38 = bigDecimal37.abs();
        int int39 = bigDecimal37.scale();
        java.math.BigDecimal bigDecimal40 = bigDecimal37.stripTrailingZeros();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        long long44 = bigDecimal42.longValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal42.ulp();
        double double46 = bigDecimal42.doubleValue();
        short short47 = bigDecimal42.shortValueExact();
        java.math.BigInteger bigInteger48 = bigDecimal42.toBigInteger();
        int int49 = bigDecimal42.scale();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal56 = bigDecimal51.min(bigDecimal54);
        java.math.BigDecimal[] bigDecimalArray57 = new java.math.BigDecimal[] { bigDecimal56 };
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        int int60 = bigDecimal59.intValue();
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal59.min(bigDecimal62);
        java.math.BigDecimal[] bigDecimalArray65 = new java.math.BigDecimal[] { bigDecimal64 };
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.min(bigDecimal70);
        java.math.BigDecimal[] bigDecimalArray73 = new java.math.BigDecimal[] { bigDecimal72 };
        java.math.BigDecimal[][] bigDecimalArray74 = new java.math.BigDecimal[][] { bigDecimalArray57, bigDecimalArray65, bigDecimalArray73 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray74);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74);
        java.math.BigDecimal[][] bigDecimalArray78 = bigMatrixImpl77.getDataRef();
        java.math.BigDecimal bigDecimal79 = bigMatrixImpl77.getNorm();
        int int80 = bigDecimal79.intValue();
        java.math.BigDecimal bigDecimal81 = bigDecimal79.ulp();
        int int82 = bigDecimal81.intValueExact();
        java.math.BigDecimal bigDecimal83 = bigDecimal42.divide(bigDecimal81);
        java.math.MathContext mathContext84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal85 = bigDecimal40.divide(bigDecimal42, mathContext84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 0 + "'", short47 == (short) 0);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(bigDecimal83);
    }

    @Test
    public void test06074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06074");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.scalarMultiply(bigDecimal18);
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl14.getNorm();
        int int23 = bigMatrixImpl14.getRowDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test06075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06075");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100, 0);
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal4.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal9 = bigDecimal4.scaleByPowerOfTen((int) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal4.ulp();
        java.math.BigDecimal[] bigDecimalArray11 = bigDecimal2.divideAndRemainder(bigDecimal10);
        java.math.MathContext mathContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal13 = bigDecimal2.round(mathContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
    }

    @Test
    public void test06076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06076");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int4 = bigDecimal3.intValue();
        long long5 = bigDecimal3.longValue();
        java.math.BigInteger bigInteger6 = bigDecimal3.unscaledValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal0.min(bigDecimal3);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigInteger bigInteger15 = bigDecimal9.toBigInteger();
        int int16 = bigDecimal9.precision();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal18.divideAndRemainder(bigDecimal20);
        java.math.BigDecimal bigDecimal22 = bigDecimal9.multiply(bigDecimal20);
        java.math.BigInteger bigInteger23 = bigDecimal20.unscaledValue();
        int int24 = bigDecimal3.compareTo(bigDecimal20);
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger28 = bigDecimal27.unscaledValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal25.add(bigDecimal27);
        java.math.BigInteger bigInteger30 = bigDecimal27.toBigInteger();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(bigInteger30, 32);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(bigInteger30);
        java.math.BigDecimal bigDecimal34 = bigDecimal20.max(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal37 = bigDecimal36.negate();
        java.math.BigInteger bigInteger38 = bigDecimal37.toBigIntegerExact();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal("100");
        java.math.BigDecimal bigDecimal41 = bigDecimal40.abs();
        java.math.BigDecimal bigDecimal43 = bigDecimal37.divide(bigDecimal41, (int) (byte) 0);
        java.math.MathContext mathContext44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray45 = bigDecimal20.divideAndRemainder(bigDecimal43, mathContext44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal43);
    }

    @Test
    public void test06077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06077");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.min(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal19.movePointRight((int) (short) 10);
        long long22 = bigDecimal21.longValueExact();
        int int23 = bigDecimal21.intValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test06078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06078");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        java.lang.String str5 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal7.min(bigDecimal10);
        java.math.BigDecimal[] bigDecimalArray13 = new java.math.BigDecimal[] { bigDecimal12 };
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.min(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal[][] bigDecimalArray30 = new java.math.BigDecimal[][] { bigDecimalArray13, bigDecimalArray21, bigDecimalArray29 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl33.getDataRef();
        java.math.BigDecimal bigDecimal35 = bigMatrixImpl33.getNorm();
        boolean boolean36 = bigMatrixImpl33.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl33.copy();
        double[] doubleArray39 = bigMatrixImpl33.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl33.scalarMultiply(bigDecimal40);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl33.transpose();
        bigMatrixImpl33.setRoundingMode(2);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl33.getNorm();
        java.math.BigDecimal bigDecimal46 = bigDecimal45.stripTrailingZeros();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal47 = bigDecimal1.remainder(bigDecimal45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Division undefined");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
    }

    @Test
    public void test06079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06079");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl14.getDataRef();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal("100");
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.min(bigDecimal28);
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal[][] bigDecimalArray48 = new java.math.BigDecimal[][] { bigDecimalArray31, bigDecimalArray39, bigDecimalArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray48);
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigInteger bigInteger58 = bigDecimal52.toBigInteger();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(bigInteger58);
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        float float63 = bigDecimal61.floatValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal59.multiply(bigDecimal61);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrix50.scalarAdd(bigDecimal64);
        short short66 = bigDecimal64.shortValueExact();
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int69 = bigDecimal68.signum();
        java.math.BigDecimal[] bigDecimalArray70 = bigDecimal64.divideAndRemainder(bigDecimal68);
        java.math.BigDecimal bigDecimal71 = bigDecimal23.add(bigDecimal64);
        int int72 = bigDecimal23.intValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl14.scalarMultiply(bigDecimal23);
        boolean boolean74 = bigMatrixImpl14.isSingular();
        boolean boolean75 = bigMatrixImpl14.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl14.getRowMatrix((int) (short) -2805);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 97.0f + "'", float63 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) 0 + "'", short66 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 100 + "'", int72 == 100);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test06080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06080");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray23 = bigMatrixImpl14.getColumn((int) (byte) 11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test06081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06081");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        boolean boolean27 = bigDecimal4.equals((java.lang.Object) realMatrix16);
        int int28 = bigDecimal4.signum();
        java.math.BigDecimal bigDecimal29 = bigDecimal4.negate();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        long long33 = bigDecimal31.longValue();
        long long34 = bigDecimal31.longValueExact();
        int int35 = bigDecimal31.precision();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        long long39 = bigDecimal37.longValue();
        long long40 = bigDecimal37.longValueExact();
        java.math.BigDecimal bigDecimal41 = bigDecimal31.add(bigDecimal37);
        java.math.BigDecimal bigDecimal43 = bigDecimal37.pow(3);
        byte byte44 = bigDecimal37.byteValueExact();
        java.math.BigInteger bigInteger45 = bigDecimal37.toBigInteger();
        java.math.BigDecimal bigDecimal46 = bigDecimal29.max(bigDecimal37);
        java.math.MathContext mathContext47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal48 = bigDecimal29.negate(mathContext47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + byte44 + "' != '" + (byte) 0 + "'", byte44 == (byte) 0);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigDecimal46);
    }

    @Test
    public void test06082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06082");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) 10);
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test06083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06083");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        bigMatrixImpl25.setRoundingMode(0);
        double[] doubleArray46 = bigMatrixImpl25.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str47 = bigMatrixImpl25.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl25.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl25.copy();
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl25.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl51.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl51.transpose();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str47, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix53);
    }

    @Test
    public void test06084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06084");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal56 = bigDecimal17.stripTrailingZeros();
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) (short) -2805, (int) (short) 1);
        java.math.BigDecimal bigDecimal60 = bigDecimal56.divide(bigDecimal59);
        java.math.MathContext mathContext61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal62 = bigDecimal59.plus(mathContext61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 97.0f + "'", float23 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimal60);
    }

    @Test
    public void test06085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06085");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) 0);
        java.math.MathContext mathContext2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal3 = bigDecimal1.negate(mathContext2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test06086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06086");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray9 = new java.lang.String[][] { strArray8 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray9);
        org.apache.commons.math.linear.BigMatrix bigMatrix11 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray9);
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray9);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray9);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix6.add(bigMatrix14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(bigMatrix11);
        org.junit.Assert.assertNotNull(bigMatrix12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
    }

    @Test
    public void test06087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06087");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        double[][] doubleArray29 = bigMatrixImpl27.getDataAsDoubleArray();
        double[][] doubleArray30 = bigMatrixImpl27.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix31.copy();
        double[] doubleArray34 = realMatrix31.getRow((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix31.getColumnMatrix((int) (byte) -32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test06088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06088");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        java.lang.String str9 = bigDecimal8.toString();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        int int13 = bigDecimal11.signum();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal8.divideAndRemainder(bigDecimal11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray14);
        int int16 = bigMatrixImpl15.getRoundingMode();
        boolean boolean17 = bigMatrixImpl15.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrix6.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl15);
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl15.getData();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray24 = bigDecimal21.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl15.preMultiply(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal30 = bigMatrix27.getEntry((int) (byte) 0, 400);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix27);
    }

    @Test
    public void test06089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06089");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        double[][] doubleArray29 = bigMatrixImpl27.getDataAsDoubleArray();
        boolean boolean30 = bigMatrixImpl27.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = bigMatrixImpl27.getEntryAsDouble((int) (byte) -1, (int) (short) -2805);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test06090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06090");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigInteger bigInteger22 = bigDecimal21.unscaledValue();
        java.math.BigInteger bigInteger23 = bigDecimal21.toBigIntegerExact();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger23, (int) (short) 0);
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(bigInteger23);
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger29 = bigDecimal28.unscaledValue();
        java.lang.String str30 = bigDecimal28.toPlainString();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal32.ulp();
        java.math.BigDecimal bigDecimal36 = bigDecimal35.ulp();
        java.math.BigDecimal bigDecimal37 = bigDecimal28.remainder(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = bigDecimal28.pow((int) '#');
        java.math.BigDecimal bigDecimal40 = bigDecimal26.add(bigDecimal28);
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        java.lang.String str43 = bigDecimal42.toString();
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.stripTrailingZeros();
        int int47 = bigDecimal45.signum();
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal42.divideAndRemainder(bigDecimal45);
        java.math.BigDecimal bigDecimal50 = bigDecimal42.pow((int) 'a');
        java.math.BigInteger bigInteger51 = bigDecimal42.toBigInteger();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(bigInteger51);
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal55 = bigDecimal54.negate();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal52.divideAndRemainder(bigDecimal54);
        java.math.BigDecimal bigDecimal58 = bigDecimal52.movePointLeft(52);
        java.math.MathContext mathContext59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal60 = bigDecimal40.multiply(bigDecimal58, mathContext59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
    }

    @Test
    public void test06091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06091");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        long long38 = bigDecimal36.longValue();
        long long39 = bigDecimal36.longValueExact();
        int int40 = bigDecimal36.precision();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        java.lang.String str43 = bigDecimal42.toString();
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.stripTrailingZeros();
        int int47 = bigDecimal45.signum();
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal42.divideAndRemainder(bigDecimal45);
        java.math.BigDecimal bigDecimal49 = bigDecimal36.min(bigDecimal42);
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal("97");
        java.math.BigDecimal bigDecimal54 = bigDecimal36.divide(bigDecimal51, (int) (byte) -54, 0);
        java.math.MathContext mathContext55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal56 = bigDecimal23.divideToIntegralValue(bigDecimal54, mathContext55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal54);
    }

    @Test
    public void test06092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06092");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray44 = new double[][] { doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl46.transpose();
        double[] doubleArray49 = bigMatrixImpl46.getRowAsDoubleArray((int) (short) 0);
        boolean boolean50 = bigMatrixImpl46.isSingular();
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl46.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51);
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal55 = bigDecimal54.negate();
        int int56 = bigDecimal55.scale();
        boolean boolean57 = bigMatrixImpl52.equals((java.lang.Object) bigDecimal55);
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger60 = bigDecimal59.unscaledValue();
        java.lang.String str61 = bigDecimal59.toPlainString();
        java.math.BigDecimal bigDecimal62 = bigDecimal55.divideToIntegralValue(bigDecimal59);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl27.scalarAdd(bigDecimal62);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl27.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(10);
        java.math.BigDecimal[] bigDecimalArray68 = bigMatrix66.getRow((int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrix69.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrix64.preMultiply(bigMatrix70);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal72 = bigMatrix70.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigMatrix71);
    }

    @Test
    public void test06093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06093");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        bigMatrixImpl25.setRoundingMode(0);
        double[][] doubleArray45 = bigMatrixImpl25.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray45);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray45);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
    }

    @Test
    public void test06094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06094");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        short short36 = bigDecimal34.shortValueExact();
        int int37 = bigDecimal34.intValueExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 10 + "'", short36 == (short) 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test06095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06095");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(5);
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger5 = bigDecimal4.toBigInteger();
        java.math.BigDecimal bigDecimal6 = bigDecimal4.ulp();
        java.math.BigDecimal bigDecimal7 = bigDecimal1.min(bigDecimal6);
        float float8 = bigDecimal7.floatValue();
        java.lang.String str9 = bigDecimal7.toPlainString();
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.0f + "'", float8 == 0.0f);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001" + "'", str9, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001");
    }

    @Test
    public void test06096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06096");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 100);
        double[] doubleArray4 = new double[] { 1.0d, 100.0f };
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray14 = new double[][] { doubleArray4, doubleArray7, doubleArray10, doubleArray13 };
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray14);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray14);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl16.transpose();
        double[] doubleArray19 = bigMatrixImpl16.getRowAsDoubleArray((int) (short) 0);
        boolean boolean20 = bigMatrixImpl16.isSingular();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal("100");
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl16.scalarMultiply(bigDecimal22);
        boolean boolean24 = bigDecimal1.equals((java.lang.Object) bigDecimal22);
        double[] doubleArray29 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray29);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray29);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrix31.scalarAdd((double) 6);
        int int34 = realMatrix31.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix31.scalarAdd(10.0d);
        double[] doubleArray41 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray41);
        double double43 = realMatrix42.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix42.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix36.preMultiply(realMatrix45);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix36.transpose();
        double[][] doubleArray48 = realMatrix36.getData();
        boolean boolean49 = bigDecimal22.equals((java.lang.Object) doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray63 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl65.transpose();
        int int67 = bigMatrixImpl65.getColumnDimension();
        java.math.BigDecimal bigDecimal68 = bigMatrixImpl65.getNorm();
        int int69 = bigMatrixImpl65.getScale();
        boolean boolean70 = bigMatrixImpl65.isSingular();
        int int71 = bigMatrixImpl65.getRoundingMode();
        java.lang.String str72 = bigMatrixImpl65.toString();
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl65.getData();
        int int74 = bigMatrixImpl65.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl65.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl50.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 52.0d + "'", double43 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str72, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(bigMatrix75);
    }

    @Test
    public void test06097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06097");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.transpose();
        int int34 = bigMatrixImpl27.getRoundingMode();
        java.lang.String str35 = bigMatrixImpl27.toString();
        bigMatrixImpl27.setRoundingMode(6);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str35, "BigMatrixImpl{{0},{0},{0}}");
    }

    @Test
    public void test06098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06098");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.plus();
        double double4 = bigDecimal3.doubleValue();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal((int) (byte) 10);
        int int7 = bigDecimal6.scale();
        float float8 = bigDecimal6.floatValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal3.subtract(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigInteger bigInteger17 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal16.stripTrailingZeros();
        int int19 = bigDecimal18.signum();
        int int20 = bigDecimal18.intValueExact();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal26 = bigDecimal18.max(bigDecimal23);
        java.math.BigDecimal bigDecimal29 = bigDecimal18.setScale(4, (int) (byte) 0);
        java.math.MathContext mathContext30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal31 = bigDecimal6.subtract(bigDecimal29, mathContext30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 10.0f + "'", float8 == 10.0f);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal29);
    }

    @Test
    public void test06099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06099");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigInteger bigInteger14 = bigDecimal13.toBigIntegerExact();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(bigInteger14, (-100));
        java.math.MathContext mathContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(bigInteger14, (int) (byte) -100, mathContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigInteger14);
    }

    @Test
    public void test06100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06100");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl17.getRow((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal41 = bigMatrixImpl17.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
    }

    @Test
    public void test06101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06101");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray20);
        bigMatrixImpl21.setScale((int) (short) -2805);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test06102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06102");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException1 = new org.apache.commons.math.linear.InvalidMatrixException("0");
        java.lang.String str2 = invalidMatrixException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.linear.InvalidMatrixException: 0" + "'", str2, "org.apache.commons.math.linear.InvalidMatrixException: 0");
    }

    @Test
    public void test06103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06103");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl5.getTrace();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        java.lang.String str9 = bigDecimal8.toString();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        int int13 = bigDecimal11.signum();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal8.divideAndRemainder(bigDecimal11);
        java.math.BigDecimal bigDecimal16 = bigDecimal8.pow((int) 'a');
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        float float20 = bigDecimal18.floatValue();
        java.math.BigDecimal bigDecimal21 = bigDecimal16.divideToIntegralValue(bigDecimal18);
        java.math.BigDecimal bigDecimal22 = bigDecimal18.ulp();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger25 = bigDecimal24.unscaledValue();
        short short26 = bigDecimal24.shortValueExact();
        java.lang.String str27 = bigDecimal24.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal22.divideAndRemainder(bigDecimal24);
        java.lang.String str29 = bigDecimal22.toEngineeringString();
        java.math.BigDecimal bigDecimal30 = bigDecimal22.abs();
        java.math.MathContext mathContext31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal32 = bigDecimal6.multiply(bigDecimal22, mathContext31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 97.0f + "'", float20 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 100 + "'", short26 == (short) 100);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100" + "'", str27, "100");
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(bigDecimal30);
    }

    @Test
    public void test06104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06104");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal9.divideAndRemainder(bigDecimal11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl13.copy();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        int int24 = bigMatrixImpl23.getRoundingMode();
        boolean boolean25 = bigMatrixImpl23.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl23);
        boolean boolean27 = bigMatrixImpl5.equals((java.lang.Object) bigMatrix26);
        int int28 = bigMatrixImpl5.getRowDimension();
        bigMatrixImpl5.setRoundingMode((int) (short) 400);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal31 = bigMatrixImpl5.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test06105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06105");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        double double42 = realMatrix41.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrix41.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix35.preMultiply(realMatrix44);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix21.subtract(realMatrix47);
        boolean boolean49 = realMatrix48.isSingular();
        boolean boolean50 = realMatrix48.isSingular();
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray63 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl65.transpose();
        boolean boolean67 = bigMatrixImpl65.isSingular();
        double[] doubleArray69 = bigMatrixImpl65.getColumnAsDoubleArray(0);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray69);
        double double71 = realMatrix70.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix48.preMultiply(realMatrix70);
        double double73 = realMatrix48.getTrace();
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrix48.inverse();
        double[] doubleArray79 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix80 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray79);
        org.apache.commons.math.linear.RealMatrix realMatrix81 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray79);
        org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrix81.scalarAdd((double) 6);
        int int84 = realMatrix83.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrix83.scalarMultiply(1.0d);
        double[][] doubleArray87 = realMatrix86.getData();
        double[][] doubleArray88 = realMatrix86.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrix74.solve(realMatrix86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 4.0d + "'", double71 == 4.0d);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d));
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(realMatrix83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(realMatrix86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray88);
    }

    @Test
    public void test06106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06106");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal16.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl14.preMultiply(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl38.transpose();
        int int40 = bigMatrixImpl38.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl38.getDataRef();
        bigMatrixImpl38.setScale((int) (short) 100);
        boolean boolean44 = bigMatrixImpl38.isSingular();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        java.lang.String str47 = bigDecimal46.toString();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        int int51 = bigDecimal49.signum();
        java.math.BigDecimal[] bigDecimalArray52 = bigDecimal46.divideAndRemainder(bigDecimal49);
        java.math.BigDecimal bigDecimal54 = bigDecimal46.pow((int) 'a');
        java.math.BigDecimal bigDecimal56 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal57 = bigDecimal56.stripTrailingZeros();
        float float58 = bigDecimal56.floatValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.divideToIntegralValue(bigDecimal56);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl38.scalarMultiply(bigDecimal56);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl38.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray61);
        boolean boolean63 = bigMatrix62.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl23.preMultiply(bigMatrix62);
        java.lang.String str65 = bigMatrixImpl23.toString();
        int[] intArray66 = new int[] {};
        int[] intArray72 = new int[] { (-2), (-32), (-2), (-100), (byte) 97 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl23.getSubMatrix(intArray66, intArray72);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 97.0f + "'", float58 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "BigMatrixImpl{{1},{0}}" + "'", str65, "BigMatrixImpl{{1},{0}}");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-2, -32, -2, -100, 97]");
    }

    @Test
    public void test06107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06107");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal34 = bigMatrixImpl27.getEntry(1, 6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
    }

    @Test
    public void test06108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06108");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        boolean boolean27 = bigDecimal4.equals((java.lang.Object) realMatrix16);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix16.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix28.scalarMultiply((double) (byte) 97);
        double[] doubleArray35 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray35);
        double double37 = realMatrix36.getNorm();
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        double[] doubleArray50 = realMatrix43.operate(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray48);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrix52.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrix36.subtract(realMatrix52);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrix28.add(realMatrix36);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrix36.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix56.getRowMatrix(0);
        double[] doubleArray63 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix64 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray63);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray63);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrix65.scalarAdd((double) 6);
        int int68 = realMatrix65.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrix65.scalarAdd(10.0d);
        double[] doubleArray75 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray75);
        double double77 = realMatrix76.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrix76.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrix70.preMultiply(realMatrix79);
        org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrix80.scalarAdd((double) 1.0f);
        double[] doubleArray87 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix88 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray87);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrix89.scalarAdd((double) 6);
        int int92 = realMatrix89.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrix89.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix95 = realMatrix82.preMultiply(realMatrix89);
        int int96 = realMatrix82.getColumnDimension();
        boolean boolean97 = realMatrix82.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix98 = realMatrix58.subtract(realMatrix82);
        org.apache.commons.math.linear.RealMatrix realMatrix99 = realMatrix98.copy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 52.0d + "'", double77 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertNotNull(realMatrix95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(realMatrix98);
        org.junit.Assert.assertNotNull(realMatrix99);
    }

    @Test
    public void test06109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06109");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigDecimal17.signum();
        java.math.BigDecimal bigDecimal20 = bigDecimal17.movePointLeft((int) (short) 400);
        java.lang.String[] strArray22 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray23 = new java.lang.String[][] { strArray22 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(strArray23);
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl24.getData();
        int int26 = bigMatrixImpl24.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl24.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal30 = bigMatrix29.getDeterminant();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl24.scalarMultiply(bigDecimal30);
        java.math.MathContext mathContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal33 = bigDecimal17.multiply(bigDecimal30, mathContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigMatrix31);
    }

    @Test
    public void test06110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06110");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal21.pow((int) (byte) 100);
        double double24 = bigDecimal21.doubleValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl19.scalarAdd(bigDecimal21);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = bigMatrixImpl19.getEntryAsDouble((int) '#', (int) (byte) -11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(bigMatrix25);
    }

    @Test
    public void test06111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06111");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal31 = bigMatrixImpl27.getNorm();
        java.lang.String str32 = bigDecimal31.toEngineeringString();
        java.math.MathContext mathContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal34 = bigDecimal31.abs(mathContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
    }

    @Test
    public void test06112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06112");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray20 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19 };
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.transpose();
        double[] doubleArray25 = bigMatrixImpl22.getRowAsDoubleArray((int) (short) 0);
        boolean boolean26 = bigMatrixImpl22.isSingular();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl22.getData();
        bigMatrixImpl22.setScale((int) ' ');
        double[][] doubleArray30 = bigMatrixImpl22.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl7.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
    }

    @Test
    public void test06113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06113");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 100, 0);
        java.math.BigDecimal bigDecimal4 = bigDecimal2.setScale((int) (byte) -1);
        java.math.MathContext mathContext5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal6 = bigDecimal4.round(mathContext5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal4);
    }

    @Test
    public void test06114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06114");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        java.math.BigDecimal bigDecimal65 = bigMatrixImpl27.getNorm();
        double[][] doubleArray66 = bigMatrixImpl27.getDataAsDoubleArray();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test06115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06115");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal14.min(bigDecimal17);
        java.math.BigDecimal[] bigDecimalArray20 = new java.math.BigDecimal[] { bigDecimal19 };
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal27 = bigDecimal22.min(bigDecimal25);
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal[][] bigDecimalArray37 = new java.math.BigDecimal[][] { bigDecimalArray20, bigDecimalArray28, bigDecimalArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray37);
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl40.getDataRef();
        java.math.BigDecimal bigDecimal42 = bigMatrixImpl40.getNorm();
        boolean boolean43 = bigMatrixImpl40.isSquare();
        java.math.BigDecimal[][] bigDecimalArray44 = bigMatrixImpl40.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl40.transpose();
        bigMatrixImpl40.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl40.transpose();
        int int49 = bigMatrixImpl40.getColumnDimension();
        boolean boolean50 = bigMatrixImpl40.isSquare();
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl40.getNorm();
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl40.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl12.setSubMatrix(bigDecimalArray52, 2881, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
    }

    @Test
    public void test06116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06116");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix17.copy();
        double[] doubleArray23 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray23);
        double[] doubleArray29 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray29);
        double[] doubleArray31 = realMatrix24.operate(doubleArray29);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray31);
        double[] doubleArray35 = realMatrix18.operate(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        double double38 = realMatrix37.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            double double39 = realMatrix37.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2805.0d + "'", double38 == 2805.0d);
    }

    @Test
    public void test06117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06117");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(2.028240960365167E135d);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        int int4 = bigDecimal3.intValue();
        long long5 = bigDecimal3.longValue();
        long long6 = bigDecimal3.longValueExact();
        int int7 = bigDecimal3.precision();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        java.lang.String str10 = bigDecimal9.toString();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal13 = bigDecimal12.stripTrailingZeros();
        int int14 = bigDecimal12.signum();
        java.math.BigDecimal[] bigDecimalArray15 = bigDecimal9.divideAndRemainder(bigDecimal12);
        java.math.BigDecimal bigDecimal16 = bigDecimal3.min(bigDecimal9);
        short short17 = bigDecimal3.shortValueExact();
        float float18 = bigDecimal3.floatValue();
        int int19 = bigDecimal3.intValue();
        java.math.BigDecimal bigDecimal21 = bigDecimal3.pow((int) (byte) 1);
        java.math.BigDecimal bigDecimal22 = bigDecimal1.min(bigDecimal21);
        java.lang.String str23 = bigDecimal22.toString();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
    }

    @Test
    public void test06118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06118");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl17.getRow((int) (byte) 0);
        int int41 = bigMatrixImpl17.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            double double44 = bigMatrixImpl17.getEntryAsDouble((int) (byte) -32, (int) (byte) -112);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
    }

    @Test
    public void test06119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06119");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("BigMatrixImpl{{0},{0}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06120");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigInteger bigInteger47 = bigDecimal41.toBigInteger();
        java.math.BigDecimal bigDecimal48 = bigDecimal39.max(bigDecimal41);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        long long52 = bigDecimal50.longValue();
        long long53 = bigDecimal50.longValueExact();
        int int54 = bigDecimal50.precision();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        long long58 = bigDecimal56.longValue();
        long long59 = bigDecimal56.longValueExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal50.add(bigDecimal56);
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.min(bigDecimal65);
        java.math.BigDecimal bigDecimal68 = bigDecimal60.min(bigDecimal65);
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        java.lang.String str71 = bigDecimal70.toString();
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal74 = bigDecimal73.stripTrailingZeros();
        int int75 = bigDecimal73.signum();
        java.math.BigDecimal[] bigDecimalArray76 = bigDecimal70.divideAndRemainder(bigDecimal73);
        java.math.BigDecimal bigDecimal78 = bigDecimal70.pow((int) 'a');
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal(0.0d);
        java.lang.String str81 = bigDecimal80.toString();
        java.math.BigDecimal bigDecimal83 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal84 = bigDecimal83.stripTrailingZeros();
        int int85 = bigDecimal83.signum();
        java.math.BigDecimal[] bigDecimalArray86 = bigDecimal80.divideAndRemainder(bigDecimal83);
        java.math.BigDecimal bigDecimal88 = bigDecimal80.pow((int) 'a');
        java.math.BigInteger bigInteger89 = bigDecimal80.toBigIntegerExact();
        java.math.BigDecimal bigDecimal90 = bigDecimal78.add(bigDecimal80);
        java.math.BigDecimal bigDecimal92 = bigDecimal90.pow((int) (byte) 97);
        int int93 = bigDecimal90.scale();
        int int94 = bigDecimal90.intValue();
        java.math.BigDecimal bigDecimal95 = bigDecimal68.max(bigDecimal90);
        java.math.BigDecimal bigDecimal96 = bigDecimal41.min(bigDecimal90);
        java.math.BigDecimal bigDecimal97 = bigDecimal96.stripTrailingZeros();
        int int98 = bigDecimal96.precision();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray86);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigInteger89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(bigDecimal95);
        org.junit.Assert.assertNotNull(bigDecimal96);
        org.junit.Assert.assertNotNull(bigDecimal97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test06121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06121");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) -1, (int) (byte) -32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06122");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        int int20 = bigMatrixImpl14.getRoundingMode();
        java.lang.String str21 = bigMatrixImpl14.toString();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getData();
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray35 = realMatrix28.operate(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix37.transpose();
        double[][] doubleArray39 = realMatrix37.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl40);
        int int42 = bigMatrixImpl40.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl40.getSubMatrix((int) (short) 400, 1, (-32), 64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
    }

    @Test
    public void test06123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06123");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        bigMatrixImpl25.setScale((int) 'a');
        int int30 = bigMatrixImpl25.getRowDimension();
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        int int47 = bigMatrixImpl45.getColumnDimension();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        int int51 = bigDecimal49.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl45.scalarMultiply(bigDecimal49);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl25.scalarAdd(bigDecimal49);
        int int54 = bigMatrixImpl25.getColumnDimension();
        int int55 = bigMatrixImpl25.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl25.transpose();
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[] doubleArray65 = new double[] { 1.0d, 100.0f };
        double[] doubleArray68 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray69 = new double[][] { doubleArray59, doubleArray62, doubleArray65, doubleArray68 };
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl71.transpose();
        double[] doubleArray74 = bigMatrixImpl71.getRowAsDoubleArray((int) (short) 0);
        boolean boolean75 = bigMatrixImpl71.isSingular();
        boolean boolean76 = bigMatrixImpl71.isSquare();
        int int77 = bigMatrixImpl71.getScale();
        bigMatrixImpl71.setRoundingMode((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl25.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 64 + "'", int77 == 64);
    }

    @Test
    public void test06124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06124");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        double[] doubleArray13 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray19);
        double[] doubleArray21 = realMatrix14.operate(doubleArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl8.operate(doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigMatrix24);
    }

    @Test
    public void test06125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06125");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl27.transpose();
        java.lang.String str37 = bigMatrixImpl27.toString();
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray42);
        int int45 = realMatrix44.getRowDimension();
        double[] doubleArray47 = realMatrix44.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray49 = bigMatrixImpl27.solve(doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str37, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[52.0]");
        org.junit.Assert.assertNotNull(realMatrix48);
    }

    @Test
    public void test06126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06126");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarAdd(bigDecimal38);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl27.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl27.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
    }

    @Test
    public void test06127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06127");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix20.scalarAdd((double) 5);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix20.copy();
        double[] doubleArray26 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray26);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrix28.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix20.subtract(realMatrix29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
    }

    @Test
    public void test06128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06128");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        boolean boolean18 = bigMatrixImpl17.isSingular();
        int int19 = bigMatrixImpl17.getRoundingMode();
        boolean boolean20 = bigMatrixImpl17.isSquare();
        boolean boolean21 = bigMatrixImpl17.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal22 = bigMatrixImpl17.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06129");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigInteger bigInteger26 = bigDecimal25.toBigIntegerExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl18.scalarAdd(bigDecimal25);
        int int28 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl18.getDataRef();
        double[] doubleArray34 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray34);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        double[] doubleArray42 = realMatrix35.operate(doubleArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix44.transpose();
        double[][] doubleArray46 = realMatrix44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray60 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59 };
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl62.transpose();
        double[] doubleArray65 = bigMatrixImpl62.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str66 = bigMatrixImpl62.toString();
        int int67 = bigMatrixImpl62.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl47.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl62);
        java.math.BigDecimal[] bigDecimalArray70 = bigMatrixImpl47.getRow((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray70);
        java.math.BigDecimal[] bigDecimalArray73 = bigMatrixImpl18.preMultiply(bigDecimalArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl74.getRowMatrix((int) (byte) -54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str66, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 64 + "'", int67 == 64);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
    }

    @Test
    public void test06130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06130");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix16 = bigMatrixImpl11.getSubMatrix(5, (int) (byte) -1, (int) (byte) -1, (int) (short) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(bigMatrix10);
    }

    @Test
    public void test06131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06131");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.transpose();
        int int36 = bigMatrixImpl27.getColumnDimension();
        boolean boolean37 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray39);
        int[] intArray46 = new int[] { (byte) -100, ' ', '4', 6, (short) 10 };
        int[] intArray47 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl40.getSubMatrix(intArray46, intArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-100, 32, 52, 6, 10]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
    }

    @Test
    public void test06132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06132");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix8.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix8.scalarMultiply(1.0d);
        double[] doubleArray13 = realMatrix8.getRow(3);
        double[][] doubleArray14 = realMatrix8.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = realMatrix8.getEntry((int) (byte) 6, (int) (byte) 32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[6.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test06133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06133");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        boolean boolean17 = bigMatrix16.isSquare();
        double[][] doubleArray18 = bigMatrix16.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix14.solve(realMatrix19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(bigMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test06134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06134");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.stripTrailingZeros();
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigIntegerExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
    }

    @Test
    public void test06135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06135");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.transpose();
        int int36 = bigMatrixImpl27.getColumnDimension();
        boolean boolean37 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray39);
        double[][] doubleArray41 = bigMatrixImpl40.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray41);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrix42);
    }

    @Test
    public void test06136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06136");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal14 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal16 = bigDecimal14.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal18 = bigDecimal14.pow((int) (short) 10);
        java.math.BigDecimal bigDecimal19 = bigDecimal18.ulp();
        java.math.BigDecimal bigDecimal21 = bigDecimal19.movePointRight((int) (short) 35);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal[][] bigDecimalArray46 = new java.math.BigDecimal[][] { bigDecimalArray29, bigDecimalArray37, bigDecimalArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray46);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray46);
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl49.getDataRef();
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl49.getNorm();
        boolean boolean52 = bigMatrixImpl49.isSquare();
        java.math.BigDecimal[][] bigDecimalArray53 = bigMatrixImpl49.getDataRef();
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[] doubleArray65 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray66 = new double[][] { doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray66);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray66);
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(0.0d);
        int int76 = bigDecimal75.intValue();
        java.math.BigDecimal bigDecimal77 = bigDecimal72.min(bigDecimal75);
        java.math.BigInteger bigInteger78 = bigDecimal72.toBigInteger();
        java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal(bigInteger78);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrix70.scalarAdd(bigDecimal79);
        java.math.BigDecimal bigDecimal81 = bigDecimal79.plus();
        boolean boolean82 = bigMatrixImpl49.equals((java.lang.Object) bigDecimal81);
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray87 = bigDecimal84.divideAndRemainder(bigDecimal86);
        java.math.BigDecimal bigDecimal88 = bigDecimal81.max(bigDecimal84);
        java.math.MathContext mathContext89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal90 = bigDecimal21.add(bigDecimal88, mathContext89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimalArray87);
        org.junit.Assert.assertNotNull(bigDecimal88);
    }

    @Test
    public void test06137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06137");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigMatrix30);
    }

    @Test
    public void test06138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06138");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (byte) 0);
        float float2 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        long long6 = bigDecimal4.longValue();
        long long7 = bigDecimal4.longValueExact();
        int int8 = bigDecimal4.precision();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        long long12 = bigDecimal10.longValue();
        long long13 = bigDecimal10.longValueExact();
        java.math.BigDecimal bigDecimal14 = bigDecimal4.add(bigDecimal10);
        java.math.BigDecimal bigDecimal16 = bigDecimal10.pow(3);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        java.lang.String str19 = bigDecimal18.toString();
        java.math.BigDecimal bigDecimal21 = bigDecimal18.setScale(0);
        byte byte22 = bigDecimal21.byteValueExact();
        java.math.BigDecimal bigDecimal23 = bigDecimal21.plus();
        java.math.BigDecimal bigDecimal24 = bigDecimal16.max(bigDecimal23);
        java.math.BigDecimal bigDecimal25 = bigDecimal23.abs();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal26 = bigDecimal1.divide(bigDecimal25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Division undefined");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
    }

    @Test
    public void test06139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06139");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.copy();
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray34 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl36.transpose();
        int int38 = bigMatrixImpl36.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl36.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl36.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.subtract(bigMatrix40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl14.getRowMatrix((int) (short) -100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertNotNull(bigMatrix41);
    }

    @Test
    public void test06140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06140");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray44 = new double[][] { doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl46.transpose();
        double[] doubleArray49 = bigMatrixImpl46.getRowAsDoubleArray((int) (short) 0);
        boolean boolean50 = bigMatrixImpl46.isSingular();
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl46.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51);
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal55 = bigDecimal54.negate();
        int int56 = bigDecimal55.scale();
        boolean boolean57 = bigMatrixImpl52.equals((java.lang.Object) bigDecimal55);
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger60 = bigDecimal59.unscaledValue();
        java.lang.String str61 = bigDecimal59.toPlainString();
        java.math.BigDecimal bigDecimal62 = bigDecimal55.divideToIntegralValue(bigDecimal59);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl27.scalarAdd(bigDecimal62);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl27.transpose();
        boolean boolean65 = bigMatrixImpl27.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double68 = bigMatrixImpl27.getEntryAsDouble((int) (byte) 10, (int) (short) 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test06141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06141");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal10.divideAndRemainder(bigDecimal12);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.multiply(bigDecimal12);
        java.math.BigDecimal bigDecimal15 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) (byte) 97);
        java.math.BigDecimal bigDecimal18 = bigDecimal15.subtract(bigDecimal17);
        int int19 = bigDecimal17.scale();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray24 = bigDecimal21.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal bigDecimal26 = bigDecimal23.movePointLeft((-1));
        long long27 = bigDecimal26.longValueExact();
        int int28 = bigDecimal26.scale();
        float float29 = bigDecimal26.floatValue();
        float float30 = bigDecimal26.floatValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal26.scaleByPowerOfTen((int) (short) -2805);
        java.math.BigDecimal bigDecimal33 = bigDecimal17.remainder(bigDecimal32);
        java.math.MathContext mathContext35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal36 = bigDecimal17.pow((-1), mathContext35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 970L + "'", long27 == 970L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + 970.0f + "'", float29 == 970.0f);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 970.0f + "'", float30 == 970.0f);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
    }

    @Test
    public void test06142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06142");
        char[] charArray1 = new char[] { '4' };
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(charArray1);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray1, (int) (byte) 62, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[4]");
    }

    @Test
    public void test06143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06143");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        bigMatrixImpl14.setRoundingMode((int) (byte) 100);
        int int22 = bigMatrixImpl14.getColumnDimension();
        java.lang.String str23 = bigMatrixImpl14.toString();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = bigDecimal25.setScale(0);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        long long32 = bigDecimal30.longValue();
        long long33 = bigDecimal30.longValueExact();
        short short34 = bigDecimal30.shortValueExact();
        java.math.BigDecimal bigDecimal35 = bigDecimal25.add(bigDecimal30);
        java.math.BigDecimal bigDecimal36 = bigDecimal25.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl14.scalarMultiply(bigDecimal25);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray39 = bigMatrix37.getColumn((int) (byte) 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str23, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 0 + "'", short34 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigMatrix37);
    }

    @Test
    public void test06144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06144");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double2 = realMatrix1.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrix1.transpose();
        double[] doubleArray5 = realMatrix1.getColumn((int) (short) 10);
        double double6 = realMatrix1.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = realMatrix1.getRow((int) (short) 31464);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test06145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06145");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray20);
        bigMatrixImpl21.setScale((int) (short) -2805);
        bigMatrixImpl21.setRoundingMode(100);
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray38 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37 };
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray38);
        int int40 = bigMatrix39.getColumnDimension();
        double[][] doubleArray41 = bigMatrix39.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl21.multiply(bigMatrix39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test06146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06146");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        int int12 = realMatrix6.getColumnDimension();
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        int int22 = realMatrix19.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix19.scalarAdd(10.0d);
        double[] doubleArray29 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray29);
        double double31 = realMatrix30.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrix30.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix24.preMultiply(realMatrix33);
        double[][] doubleArray35 = realMatrix34.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix34.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix34.scalarAdd((double) (-1.0f));
        double double39 = realMatrix34.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix6.preMultiply(realMatrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 8667.0d + "'", double39 == 8667.0d);
    }

    @Test
    public void test06147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06147");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray44 = new double[][] { doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigInteger bigInteger56 = bigDecimal50.toBigInteger();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(bigInteger56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrix48.scalarAdd(bigDecimal57);
        java.math.BigDecimal bigDecimal59 = bigDecimal57.plus();
        boolean boolean60 = bigMatrixImpl27.equals((java.lang.Object) bigDecimal59);
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.min(bigDecimal65);
        java.math.BigInteger bigInteger68 = bigDecimal62.toBigInteger();
        java.math.BigInteger bigInteger69 = bigDecimal62.unscaledValue();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(bigInteger69);
        int int71 = bigDecimal59.compareTo(bigDecimal70);
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        java.lang.String str74 = bigDecimal73.toString();
        java.math.BigDecimal bigDecimal76 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal77 = bigDecimal76.stripTrailingZeros();
        int int78 = bigDecimal76.signum();
        java.math.BigDecimal[] bigDecimalArray79 = bigDecimal73.divideAndRemainder(bigDecimal76);
        java.math.BigDecimal bigDecimal81 = bigDecimal73.pow((int) 'a');
        java.math.BigDecimal bigDecimal83 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal84 = bigDecimal83.stripTrailingZeros();
        float float85 = bigDecimal83.floatValue();
        java.math.BigDecimal bigDecimal86 = bigDecimal81.divideToIntegralValue(bigDecimal83);
        java.math.BigDecimal bigDecimal87 = bigDecimal83.ulp();
        int int88 = bigDecimal70.compareTo(bigDecimal87);
        java.math.BigDecimal bigDecimal89 = bigDecimal70.ulp();
        long long90 = bigDecimal89.longValueExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0" + "'", str74, "0");
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertTrue("'" + float85 + "' != '" + 97.0f + "'", float85 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
    }

    @Test
    public void test06148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06148");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((double) (short) -100, mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06149");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl17.getRow((int) (byte) 0);
        int int41 = bigMatrixImpl17.getRoundingMode();
        java.lang.Class<?> wildcardClass42 = bigMatrixImpl17.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test06150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06150");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = bigMatrix1.inverse();
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray15 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14 };
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray15);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray15);
        bigMatrixImpl17.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray20);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl21.scalarAdd(bigDecimal28);
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        double[] doubleArray48 = bigMatrixImpl45.getRowAsDoubleArray((int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl45.copy();
        int int51 = bigMatrixImpl45.getScale();
        int int52 = bigMatrixImpl45.getColumnDimension();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigInteger bigInteger63 = bigDecimal54.toBigIntegerExact();
        float float64 = bigDecimal54.floatValue();
        double[] doubleArray69 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix70 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray69);
        double[] doubleArray75 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray75);
        double[] doubleArray77 = realMatrix70.operate(doubleArray75);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray77);
        java.math.BigDecimal bigDecimal79 = bigMatrix78.getNorm();
        java.math.BigDecimal bigDecimal80 = bigDecimal54.subtract(bigDecimal79);
        int int81 = bigDecimal80.signum();
        java.math.BigInteger bigInteger82 = bigDecimal80.toBigInteger();
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray87 = bigDecimal84.divideAndRemainder(bigDecimal86);
        java.math.BigDecimal bigDecimal89 = bigDecimal86.movePointLeft((-1));
        java.math.BigDecimal bigDecimal90 = bigDecimal80.max(bigDecimal86);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl45.scalarMultiply(bigDecimal80);
        org.apache.commons.math.linear.BigMatrix bigMatrix92 = bigMatrixImpl21.add(bigMatrix91);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix93 = bigMatrix2.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix1);
        org.junit.Assert.assertNotNull(bigMatrix2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(bigMatrix16);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 64 + "'", int51 == 64);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 0.0f + "'", float64 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimalArray87);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigMatrix91);
        org.junit.Assert.assertNotNull(bigMatrix92);
    }

    @Test
    public void test06151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06151");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        int int18 = bigMatrixImpl17.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal19 = bigMatrixImpl17.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
    }

    @Test
    public void test06152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06152");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal27 = bigDecimal23.setScale(100);
        boolean boolean28 = bigMatrixImpl14.equals((java.lang.Object) bigDecimal23);
        java.math.BigDecimal bigDecimal30 = bigDecimal23.setScale((int) (byte) 100);
        java.math.MathContext mathContext32 = null;
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal((double) 0.0f, mathContext32);
        java.lang.String str34 = bigDecimal33.toPlainString();
        java.math.BigInteger bigInteger35 = bigDecimal33.unscaledValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        java.math.MathContext mathContext37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal38 = bigDecimal30.divideToIntegralValue(bigDecimal36, mathContext37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(bigInteger35);
    }

    @Test
    public void test06153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06153");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        int int4 = bigDecimal3.intValue();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal3.min(bigDecimal6);
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal[][] bigDecimalArray26 = new java.math.BigDecimal[][] { bigDecimalArray9, bigDecimalArray17, bigDecimalArray25 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setScale((int) 'a');
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl27.getRowMatrix(2);
        java.math.BigDecimal bigDecimal35 = bigMatrix34.getDeterminant();
        java.math.BigInteger bigInteger36 = bigDecimal35.toBigIntegerExact();
        java.math.MathContext mathContext37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal38 = bigDecimal1.remainder(bigDecimal35, mathContext37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigInteger36);
    }

    @Test
    public void test06154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06154");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        boolean boolean27 = bigDecimal4.equals((java.lang.Object) realMatrix16);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix16.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix28.scalarMultiply((double) (byte) 97);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.copy();
        int int32 = realMatrix28.getRowDimension();
        boolean boolean33 = realMatrix28.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = realMatrix28.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test06155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06155");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl27.getData();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal[][] bigDecimalArray59 = new java.math.BigDecimal[][] { bigDecimalArray42, bigDecimalArray50, bigDecimalArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        java.math.BigDecimal[][] bigDecimalArray63 = bigMatrixImpl62.getDataRef();
        bigMatrixImpl62.setRoundingMode((int) '4');
        double[][] doubleArray66 = bigMatrixImpl62.getDataAsDoubleArray();
        boolean boolean67 = bigMatrixImpl27.equals((java.lang.Object) doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal68 = bigMatrixImpl27.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test06156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06156");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl27.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double39 = bigMatrixImpl27.getEntryAsDouble((int) (short) -100, (int) (byte) 110);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix36);
    }

    @Test
    public void test06157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06157");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        bigMatrixImpl25.setRoundingMode(0);
        double[] doubleArray46 = bigMatrixImpl25.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str47 = bigMatrixImpl25.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger51 = bigDecimal50.unscaledValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger53 = bigDecimal50.toBigInteger();
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl25.scalarMultiply(bigDecimal50);
        boolean boolean55 = bigMatrixImpl25.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl25.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl25.getSubMatrix((int) (short) 10, (int) '4', (int) (short) 388, (-35));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str47, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(bigMatrix56);
    }

    @Test
    public void test06158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06158");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        float float3 = bigDecimal1.floatValue();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        int int20 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl18.scalarMultiply(bigDecimal22);
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl18.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal1.remainder(bigDecimal26);
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal29.divideAndRemainder(bigDecimal31);
        java.math.MathContext mathContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal34 = bigDecimal26.multiply(bigDecimal29, mathContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
    }

    @Test
    public void test06159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06159");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrix15.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
        int int18 = bigMatrixImpl17.getRoundingMode();
        java.math.BigDecimal bigDecimal19 = bigMatrixImpl17.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = bigMatrixImpl17.getRow(2);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = bigMatrixImpl17.getRowAsDoubleArray((-2));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
    }

    @Test
    public void test06160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06160");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        int int17 = bigMatrixImpl14.getScale();
        int int18 = bigMatrixImpl14.getScale();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal[][] bigDecimalArray44 = new java.math.BigDecimal[][] { bigDecimalArray27, bigDecimalArray35, bigDecimalArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray44);
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl45.getDataRef();
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[] doubleArray52 = new double[] { 1.0d, 100.0f };
        double[] doubleArray55 = new double[] { 1.0d, 100.0f };
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray59 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58 };
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray59);
        boolean boolean61 = bigMatrixImpl45.equals((java.lang.Object) bigMatrix60);
        int int62 = bigMatrixImpl45.getRowDimension();
        bigMatrixImpl45.setRoundingMode(0);
        double[] doubleArray66 = bigMatrixImpl45.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str67 = bigMatrixImpl45.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl45.copy();
        bigMatrixImpl45.setScale(64);
        boolean boolean71 = bigMatrixImpl14.equals((java.lang.Object) 64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl14.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 64 + "'", int17 == 64);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str67, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test06161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06161");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray44 = new double[][] { doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl46.transpose();
        double[] doubleArray49 = bigMatrixImpl46.getRowAsDoubleArray((int) (short) 0);
        boolean boolean50 = bigMatrixImpl46.isSingular();
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl46.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51);
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal55 = bigDecimal54.negate();
        int int56 = bigDecimal55.scale();
        boolean boolean57 = bigMatrixImpl52.equals((java.lang.Object) bigDecimal55);
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger60 = bigDecimal59.unscaledValue();
        java.lang.String str61 = bigDecimal59.toPlainString();
        java.math.BigDecimal bigDecimal62 = bigDecimal55.divideToIntegralValue(bigDecimal59);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl27.scalarAdd(bigDecimal62);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl27.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(10);
        java.math.BigDecimal[] bigDecimalArray68 = bigMatrix66.getRow((int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrix69.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrix64.preMultiply(bigMatrix70);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal74 = bigMatrix64.getEntry((int) (byte) 11, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100" + "'", str61, "100");
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigMatrix71);
    }

    @Test
    public void test06162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06162");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        int int17 = bigMatrixImpl14.getRoundingMode();
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl32.getNorm();
        int int35 = bigDecimal34.signum();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 4);
        int int38 = bigDecimal37.signum();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.subtract(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl14.scalarAdd(bigDecimal39);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal43 = bigMatrixImpl14.getEntry(5, 32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigMatrix40);
    }

    @Test
    public void test06163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06163");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double2 = realMatrix1.getDeterminant();
        boolean boolean3 = realMatrix1.isSquare();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        int int20 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray21 = bigMatrixImpl18.getDataRef();
        bigMatrixImpl18.setScale((int) (short) 100);
        boolean boolean24 = bigMatrixImpl18.isSingular();
        int int25 = bigMatrixImpl18.getScale();
        int int26 = bigMatrixImpl18.getScale();
        double[] doubleArray28 = bigMatrixImpl18.getColumnAsDoubleArray((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = realMatrix1.preMultiply(doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test06164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06164");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        int int17 = bigMatrixImpl14.getRoundingMode();
        double[][] doubleArray18 = bigMatrixImpl14.getDataAsDoubleArray();
        int int19 = bigMatrixImpl14.getColumnDimension();
        double[] doubleArray21 = bigMatrixImpl14.getRowAsDoubleArray(2);
        int int22 = bigMatrixImpl14.getRowDimension();
        int int23 = bigMatrixImpl14.getScale();
        double[] doubleArray25 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix26 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray25);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray25);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray30 = bigMatrixImpl14.operate(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
    }

    @Test
    public void test06165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06165");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        float float22 = bigDecimal21.floatValue();
        java.math.BigInteger bigInteger23 = bigDecimal21.unscaledValue();
        int int24 = bigDecimal21.intValue();
        short short25 = bigDecimal21.shortValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 0 + "'", short25 == (short) 0);
    }

    @Test
    public void test06166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06166");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) -100);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.movePointRight((int) (short) -100);
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        double[] doubleArray21 = bigMatrixImpl18.getRowAsDoubleArray((int) (short) 0);
        boolean boolean22 = bigMatrixImpl18.isSingular();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl18.getData();
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl18.getNorm();
        java.math.BigDecimal bigDecimal25 = bigDecimal1.add(bigDecimal24);
        java.math.BigDecimal bigDecimal28 = bigDecimal24.setScale(100, 0);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal28);
    }

    @Test
    public void test06167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06167");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.negate();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.pow((int) (byte) 100);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal((long) (byte) -11);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = bigDecimal1.divide(bigDecimal6, 3);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger13 = bigDecimal12.unscaledValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal10.add(bigDecimal12);
        float float15 = bigDecimal12.floatValue();
        java.lang.String str16 = bigDecimal12.toEngineeringString();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        long long20 = bigDecimal18.longValue();
        long long21 = bigDecimal18.longValueExact();
        int int22 = bigDecimal18.precision();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        long long26 = bigDecimal24.longValue();
        long long27 = bigDecimal24.longValueExact();
        java.math.BigDecimal bigDecimal28 = bigDecimal18.add(bigDecimal24);
        java.math.BigDecimal bigDecimal30 = bigDecimal24.pow(3);
        java.math.BigInteger bigInteger31 = bigDecimal30.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = bigDecimal30.stripTrailingZeros();
        java.math.BigDecimal bigDecimal33 = bigDecimal12.add(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.min(bigDecimal38);
        java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal40 };
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal48 };
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal56 = bigDecimal51.min(bigDecimal54);
        java.math.BigDecimal[] bigDecimalArray57 = new java.math.BigDecimal[] { bigDecimal56 };
        java.math.BigDecimal[][] bigDecimalArray58 = new java.math.BigDecimal[][] { bigDecimalArray41, bigDecimalArray49, bigDecimalArray57 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray58);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray58);
        java.math.BigDecimal[][] bigDecimalArray62 = bigMatrixImpl61.getDataRef();
        java.math.BigDecimal bigDecimal63 = bigMatrixImpl61.getNorm();
        boolean boolean64 = bigMatrixImpl61.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl61.copy();
        double[] doubleArray67 = bigMatrixImpl61.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl61.scalarMultiply(bigDecimal68);
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl61.scalarAdd(bigDecimal72);
        java.math.BigDecimal bigDecimal75 = bigDecimal72.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        int int78 = bigDecimal77.intValue();
        long long79 = bigDecimal77.longValue();
        java.math.BigDecimal bigDecimal80 = bigDecimal72.min(bigDecimal77);
        java.math.BigDecimal bigDecimal81 = bigDecimal30.multiply(bigDecimal77);
        java.math.BigDecimal bigDecimal82 = bigDecimal1.multiply(bigDecimal30);
        byte byte83 = bigDecimal30.byteValue();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-11" + "'", str7, "-11");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 100.0f + "'", float15 == 100.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100" + "'", str16, "100");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertTrue("'" + byte83 + "' != '" + (byte) 0 + "'", byte83 == (byte) 0);
    }

    @Test
    public void test06168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06168");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix8.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix8.scalarMultiply(1.0d);
        double double12 = realMatrix11.getNorm();
        double double13 = realMatrix11.getNorm();
        double[][] doubleArray14 = realMatrix11.getData();
        double[] doubleArray16 = realMatrix11.getColumn(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray16);
        boolean boolean18 = realMatrix17.isSingular();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 85.0d + "'", double12 == 85.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 85.0d + "'", double13 == 85.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[5.0, 58.0, 16.0, 6.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06169");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl27.getData();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigInteger bigInteger38 = bigDecimal32.toBigInteger();
        java.math.BigDecimal bigDecimal40 = bigDecimal32.movePointRight((int) '#');
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger44 = bigDecimal43.unscaledValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal41.add(bigDecimal43);
        java.math.BigDecimal bigDecimal47 = bigDecimal43.setScale(100);
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal40.divideAndRemainder(bigDecimal43);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray49 = bigMatrixImpl27.operate(bigDecimalArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
    }

    @Test
    public void test06170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06170");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray20);
        int int24 = realMatrix23.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix23.subtract(realMatrix25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test06171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06171");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 97, 4);
        boolean boolean3 = bigMatrixImpl2.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix5 = bigMatrixImpl2.getRowMatrix((int) (byte) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test06172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06172");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        double double45 = bigMatrixImpl25.getEntryAsDouble(1, 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl25.copy();
        boolean boolean47 = bigMatrixImpl25.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl25.copy();
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl25.getDataRef();
        boolean boolean50 = bigMatrixImpl25.isSingular();
        boolean boolean51 = bigMatrixImpl25.isSingular();
        java.math.BigDecimal bigDecimal52 = bigMatrixImpl25.getNorm();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(bigDecimal52);
    }

    @Test
    public void test06173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06173");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigInteger bigInteger8 = bigDecimal1.unscaledValue();
        java.lang.String str9 = bigDecimal1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
    }

    @Test
    public void test06174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06174");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2);
        java.math.MathContext mathContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(charArray2, (int) (byte) 97, 5, mathContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test06175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06175");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 100, 0);
        java.math.BigDecimal bigDecimal4 = bigDecimal2.setScale((int) (byte) -1);
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray17 = new double[][] { doubleArray7, doubleArray10, doubleArray13, doubleArray16 };
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray17);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray17);
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl19.transpose();
        int int21 = bigMatrixImpl19.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl19.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl19.copy();
        double[][] doubleArray24 = bigMatrixImpl19.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal25 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray30 = bigDecimal27.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal32 = bigDecimal29.movePointLeft((-1));
        java.math.BigDecimal bigDecimal33 = bigDecimal25.divideToIntegralValue(bigDecimal29);
        java.math.MathContext mathContext34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal35 = bigDecimal2.subtract(bigDecimal33, mathContext34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertNotNull(bigMatrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
    }

    @Test
    public void test06176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06176");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix5 = bigMatrixImpl3.getRowMatrix((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test06177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06177");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        int int21 = bigMatrixImpl14.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl14.transpose();
        boolean boolean23 = bigMatrixImpl14.isSingular();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test06178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06178");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal37 = bigDecimal23.divideToIntegralValue(bigDecimal36);
        float float38 = bigDecimal37.floatValue();
        int int39 = bigDecimal37.intValueExact();
        short short40 = bigDecimal37.shortValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
    }

    @Test
    public void test06179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06179");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrix6.transpose();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
    }

    @Test
    public void test06180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06180");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 52, (int) (short) 35);
        java.math.BigDecimal bigDecimal3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = bigDecimal2.compareTo(bigDecimal3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
    }

    @Test
    public void test06181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06181");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException1 = new org.apache.commons.math.linear.MatrixIndexException("35");
        java.lang.String str2 = matrixIndexException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.linear.MatrixIndexException: 35" + "'", str2, "org.apache.commons.math.linear.MatrixIndexException: 35");
    }

    @Test
    public void test06182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06182");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getColumnDimension();
        int int22 = bigMatrixImpl14.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test06183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06183");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal36 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.min(bigDecimal57);
        java.math.BigDecimal[] bigDecimalArray60 = new java.math.BigDecimal[] { bigDecimal59 };
        java.math.BigDecimal[][] bigDecimalArray61 = new java.math.BigDecimal[][] { bigDecimalArray44, bigDecimalArray52, bigDecimalArray60 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray61);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray61);
        java.math.BigDecimal[][] bigDecimalArray65 = bigMatrixImpl64.getDataRef();
        java.math.BigDecimal bigDecimal66 = bigMatrixImpl64.getNorm();
        boolean boolean67 = bigMatrixImpl64.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl64.copy();
        double[] doubleArray70 = bigMatrixImpl64.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray72 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray73 = new java.lang.String[][] { strArray72 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(strArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl64.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl74);
        java.math.BigDecimal bigDecimal76 = bigMatrixImpl64.getNorm();
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        int int79 = bigDecimal78.intValue();
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(0.0d);
        int int82 = bigDecimal81.intValue();
        java.math.BigDecimal bigDecimal83 = bigDecimal78.min(bigDecimal81);
        java.math.BigInteger bigInteger84 = bigDecimal78.toBigInteger();
        java.math.BigDecimal bigDecimal85 = bigDecimal76.max(bigDecimal78);
        long long86 = bigDecimal85.longValueExact();
        java.math.BigDecimal bigDecimal88 = new java.math.BigDecimal((double) 10.0f);
        java.math.BigDecimal bigDecimal89 = bigDecimal85.min(bigDecimal88);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal91 = bigDecimal36.divide(bigDecimal89, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal89);
    }

    @Test
    public void test06184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06184");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int4 = bigDecimal3.intValue();
        long long5 = bigDecimal3.longValue();
        java.math.BigInteger bigInteger6 = bigDecimal3.unscaledValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal0.min(bigDecimal3);
        // The following exception was thrown during execution in test generation
        try {
            short short8 = bigDecimal3.shortValueExact();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Rounding necessary");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigDecimal7);
    }

    @Test
    public void test06185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06185");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.math.BigDecimal bigDecimal26 = bigDecimal23.plus();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        java.math.BigDecimal bigDecimal41 = bigDecimal35.negate();
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal41.stripTrailingZeros();
        int int44 = bigDecimal26.compareTo(bigDecimal43);
        java.math.BigDecimal bigDecimal45 = bigDecimal43.abs();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 97.0f + "'", float39 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(bigDecimal45);
    }

    @Test
    public void test06186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06186");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        java.math.BigDecimal bigDecimal16 = bigMatrixImpl14.getNorm();
        int int17 = bigDecimal16.signum();
        java.math.BigDecimal bigDecimal19 = bigDecimal16.movePointLeft((int) (byte) 97);
        int int20 = bigDecimal19.precision();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test06187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06187");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarAdd((double) 5);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrix5.scalarMultiply(85.0d);
        int int8 = realMatrix5.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix5.scalarAdd((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix10.inverse();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = bigDecimal13.setScale(0);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray21);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix23.scalarAdd((double) 6);
        int int26 = realMatrix23.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix23.scalarAdd(10.0d);
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double double35 = realMatrix34.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix34.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix28.preMultiply(realMatrix37);
        boolean boolean39 = bigDecimal16.equals((java.lang.Object) realMatrix28);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix28.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix40.scalarMultiply((double) (byte) 97);
        double[] doubleArray47 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray47);
        double double49 = realMatrix48.getNorm();
        double[] doubleArray54 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix55 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray54);
        double[] doubleArray60 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray60);
        double[] doubleArray62 = realMatrix55.operate(doubleArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray60);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray60);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrix64.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrix48.subtract(realMatrix64);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrix40.add(realMatrix48);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrix48.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrix68.copy();
        int int70 = realMatrix68.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix11.preMultiply(realMatrix68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test06188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06188");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        int int17 = bigMatrixImpl14.getScale();
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal((double) 100.0f);
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        long long24 = bigDecimal22.longValue();
        long long25 = bigDecimal22.longValueExact();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigInteger bigInteger46 = bigDecimal37.toBigIntegerExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal35.add(bigDecimal37);
        java.math.BigDecimal bigDecimal48 = bigDecimal22.min(bigDecimal37);
        java.math.BigDecimal bigDecimal49 = bigDecimal20.min(bigDecimal48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal48);
        int int51 = bigMatrixImpl14.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray53 = bigMatrixImpl14.solve(bigDecimalArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 64 + "'", int17 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
    }

    @Test
    public void test06189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06189");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigInteger bigInteger8 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger8);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(bigInteger8, 3);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.MathContext mathContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal14 = bigDecimal11.abs(mathContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0.000" + "'", str12, "0.000");
    }

    @Test
    public void test06190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06190");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        bigMatrixImpl25.setScale((int) 'a');
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl25.copy();
        int int31 = bigMatrix30.getColumnDimension();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test06191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06191");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix5.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix5.scalarMultiply((double) 10L);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix5.scalarMultiply((double) (byte) 110);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix5.inverse();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test06192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06192");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int4 = bigMatrixImpl3.getColumnDimension();
        java.math.BigDecimal bigDecimal5 = bigMatrixImpl3.getTrace();
        java.lang.String str6 = bigDecimal5.toEngineeringString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0.0" + "'", str6, "0.0");
    }

    @Test
    public void test06193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06193");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        boolean boolean11 = bigMatrix10.isSquare();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test06194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06194");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal10 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal9);
        java.math.MathContext mathContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal14 = bigDecimal11.pow((int) (short) 388, mathContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
    }

    @Test
    public void test06195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06195");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        int int10 = bigDecimal1.intValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal12 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal14 = bigDecimal1.movePointRight((int) (short) -2805);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal16 = bigDecimal14.pow((-100));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Invalid operation");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimal14);
    }

    @Test
    public void test06196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06196");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 4);
        int int29 = bigDecimal28.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl25.scalarMultiply(bigDecimal28);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = bigMatrixImpl25.getRowAsDoubleArray(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(bigMatrix30);
    }

    @Test
    public void test06197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06197");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        java.lang.String str21 = bigMatrixImpl14.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal22 = bigMatrixImpl14.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
    }

    @Test
    public void test06198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06198");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger25 = bigDecimal24.unscaledValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal22.add(bigDecimal24);
        java.math.BigDecimal bigDecimal27 = bigDecimal11.multiply(bigDecimal22);
        java.math.BigDecimal bigDecimal29 = bigDecimal11.pow(100);
        int int30 = bigDecimal29.intValueExact();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal((long) (short) -2805);
        java.math.MathContext mathContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal34 = bigDecimal29.remainder(bigDecimal32, mathContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test06199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06199");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = realMatrix23.getRow(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test06200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06200");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(2881);
        double[] doubleArray4 = new double[] { 1.0d, 100.0f };
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray14 = new double[][] { doubleArray4, doubleArray7, doubleArray10, doubleArray13 };
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray14);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray14);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl16.transpose();
        double[] doubleArray19 = bigMatrixImpl16.getRowAsDoubleArray((int) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = realMatrix1.preMultiply(doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test06201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06201");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix23.copy();
        boolean boolean38 = realMatrix37.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix37.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrix39.scalarMultiply((double) 1.0f);
        double double42 = realMatrix41.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrix41.scalarMultiply((double) (short) -100);
        double[] doubleArray49 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix50 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray49);
        double double51 = realMatrix50.getNorm();
        double[] doubleArray56 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix57 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray56);
        double[] doubleArray62 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix63 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray62);
        double[] doubleArray64 = realMatrix57.operate(doubleArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray62);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray62);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrix66.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrix50.subtract(realMatrix66);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrix44.multiply(realMatrix50);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix69.scalarMultiply((double) (byte) 1);
        int[] intArray72 = new int[] {};
        int[] intArray79 = new int[] { 32, (short) -2805, (byte) 1, (-100), 4, (byte) 4 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrix71.getSubMatrix(intArray72, intArray79);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 8668.0d + "'", double42 == 8668.0d);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[32, -2805, 1, -100, 4, 4]");
    }

    @Test
    public void test06202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06202");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray4);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = bigMatrix6.getColumnAsDoubleArray((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix6);
    }

    @Test
    public void test06203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06203");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl8.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray12 = bigMatrixImpl8.getDataRef();
        int[] intArray18 = new int[] { 100, '#', (byte) 32, (byte) -32, (byte) 110 };
        int[] intArray22 = new int[] { (byte) -54, (byte) 32, (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl8.getSubMatrix(intArray18, intArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 35, 32, -32, 110]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-54, 32, 100]");
    }

    @Test
    public void test06204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06204");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl27.getRowMatrix((int) (byte) 1);
        double[][] doubleArray43 = bigMatrixImpl27.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray57 = new double[][] { doubleArray47, doubleArray50, doubleArray53, doubleArray56 };
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray57);
        boolean boolean59 = bigMatrix58.isSingular();
        double[] doubleArray61 = bigMatrix58.getColumnAsDoubleArray((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrix58.transpose();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        java.lang.String str65 = bigDecimal64.toString();
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal68 = bigDecimal67.stripTrailingZeros();
        int int69 = bigDecimal67.signum();
        java.math.BigDecimal[] bigDecimalArray70 = bigDecimal64.divideAndRemainder(bigDecimal67);
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal[] bigDecimalArray78 = new java.math.BigDecimal[] { bigDecimal64, bigDecimal73, bigDecimal75, bigDecimal77 };
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray78);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray78);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray78);
        java.math.BigDecimal[] bigDecimalArray82 = bigMatrix58.preMultiply(bigDecimalArray78);
        int int83 = bigMatrix58.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrix44.multiply(bigMatrix58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertNotNull(bigMatrix81);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test06205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06205");
        double[] doubleArray3 = new double[] { 62.0d, 52.0d, (-35) };
        double[] doubleArray7 = new double[] { 62.0d, 52.0d, (-35) };
        double[] doubleArray11 = new double[] { 62.0d, 52.0d, (-35) };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray7, doubleArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        int int14 = bigMatrixImpl13.getScale();
        double[][] doubleArray15 = bigMatrixImpl13.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[62.0, 52.0, -35.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[62.0, 52.0, -35.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[62.0, 52.0, -35.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 64 + "'", int14 == 64);
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test06206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06206");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException1 = new org.apache.commons.math.linear.InvalidMatrixException("0.0E-96");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException3 = new org.apache.commons.math.linear.MatrixIndexException("org.apache.commons.math.linear.MatrixIndexException: ");
        invalidMatrixException1.addSuppressed((java.lang.Throwable) matrixIndexException3);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException5 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException6 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException5.addSuppressed((java.lang.Throwable) invalidMatrixException6);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException9 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException5.addSuppressed((java.lang.Throwable) matrixIndexException9);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException12 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException9.addSuppressed((java.lang.Throwable) matrixIndexException12);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException14 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException15 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException14.addSuppressed((java.lang.Throwable) invalidMatrixException15);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException17 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException18 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException17.addSuppressed((java.lang.Throwable) invalidMatrixException18);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException21 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException17.addSuppressed((java.lang.Throwable) matrixIndexException21);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException23 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException24 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException23.addSuppressed((java.lang.Throwable) invalidMatrixException24);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException27 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException23.addSuppressed((java.lang.Throwable) matrixIndexException27);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException30 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException27.addSuppressed((java.lang.Throwable) matrixIndexException30);
        matrixIndexException21.addSuppressed((java.lang.Throwable) matrixIndexException27);
        invalidMatrixException14.addSuppressed((java.lang.Throwable) matrixIndexException21);
        matrixIndexException12.addSuppressed((java.lang.Throwable) invalidMatrixException14);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException35 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException14.addSuppressed((java.lang.Throwable) invalidMatrixException35);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException37 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException38 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException37.addSuppressed((java.lang.Throwable) invalidMatrixException38);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException41 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException37.addSuppressed((java.lang.Throwable) matrixIndexException41);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException44 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException41.addSuppressed((java.lang.Throwable) matrixIndexException44);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException46 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException47 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException46.addSuppressed((java.lang.Throwable) invalidMatrixException47);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException50 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException46.addSuppressed((java.lang.Throwable) matrixIndexException50);
        matrixIndexException41.addSuppressed((java.lang.Throwable) invalidMatrixException46);
        invalidMatrixException35.addSuppressed((java.lang.Throwable) matrixIndexException41);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException54 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException55 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException54.addSuppressed((java.lang.Throwable) invalidMatrixException55);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException58 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException54.addSuppressed((java.lang.Throwable) matrixIndexException58);
        java.lang.Throwable[] throwableArray60 = matrixIndexException58.getSuppressed();
        invalidMatrixException35.addSuppressed((java.lang.Throwable) matrixIndexException58);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException63 = new org.apache.commons.math.linear.InvalidMatrixException("-280.5");
        matrixIndexException58.addSuppressed((java.lang.Throwable) invalidMatrixException63);
        invalidMatrixException1.addSuppressed((java.lang.Throwable) invalidMatrixException63);
        java.lang.Throwable[] throwableArray66 = invalidMatrixException1.getSuppressed();
        java.lang.String str67 = invalidMatrixException1.toString();
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.apache.commons.math.linear.InvalidMatrixException: 0.0E-96" + "'", str67, "org.apache.commons.math.linear.InvalidMatrixException: 0.0E-96");
    }

    @Test
    public void test06207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06207");
        java.lang.String[] strArray1 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal15 = bigDecimal7.pow((int) 'a');
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal21 = bigDecimal20.stripTrailingZeros();
        int int22 = bigDecimal20.signum();
        java.math.BigDecimal[] bigDecimalArray23 = bigDecimal17.divideAndRemainder(bigDecimal20);
        java.math.BigDecimal bigDecimal25 = bigDecimal17.pow((int) 'a');
        java.math.BigInteger bigInteger26 = bigDecimal17.toBigIntegerExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal15.add(bigDecimal17);
        double[] doubleArray32 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray38);
        double[] doubleArray40 = realMatrix33.operate(doubleArray38);
        boolean boolean41 = bigDecimal17.equals((java.lang.Object) doubleArray38);
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        float float45 = bigDecimal43.floatValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal17.divideToIntegralValue(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal43.pow(1);
        java.math.BigDecimal bigDecimal49 = bigDecimal43.abs();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrix5.scalarAdd(bigDecimal43);
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        long long54 = bigDecimal52.longValue();
        long long55 = bigDecimal52.longValueExact();
        int int56 = bigDecimal52.precision();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        long long60 = bigDecimal58.longValue();
        long long61 = bigDecimal58.longValueExact();
        java.math.BigDecimal bigDecimal62 = bigDecimal52.add(bigDecimal58);
        java.math.BigDecimal bigDecimal64 = bigDecimal58.pow(3);
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal67 = bigDecimal66.stripTrailingZeros();
        float float68 = bigDecimal66.floatValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal66.ulp();
        java.math.BigDecimal bigDecimal70 = bigDecimal58.subtract(bigDecimal69);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal72 = bigDecimal43.divide(bigDecimal58, (int) (byte) -112);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(bigMatrix2);
        org.junit.Assert.assertNotNull(bigMatrix3);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 97.0f + "'", float45 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 97.0f + "'", float68 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
    }

    @Test
    public void test06208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06208");
        java.lang.String[] strArray1 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        double[] doubleArray4 = bigMatrix2.getColumnAsDoubleArray(0);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix5.transpose();
        double[] doubleArray11 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix12 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray11);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray11);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix13.scalarAdd((double) 6);
        double double16 = realMatrix13.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix13.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix13.scalarAdd((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarMultiply((double) 1L);
        double[] doubleArray26 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray26);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix28.scalarAdd((double) 6);
        double double31 = realMatrix28.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix28.copy();
        boolean boolean33 = realMatrix32.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix21.subtract(realMatrix32);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix34.scalarAdd(8668.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix6.multiply(realMatrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(bigMatrix2);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 63.0d + "'", double16 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 63.0d + "'", double31 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrix36);
    }

    @Test
    public void test06209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06209");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal22 = bigDecimal9.abs();
        double double23 = bigDecimal22.doubleValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal22.movePointRight(97);
        java.math.BigDecimal bigDecimal27 = bigDecimal22.setScale(3);
        int int28 = bigDecimal27.intValueExact();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test06210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06210");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal[][] bigDecimalArray47 = new java.math.BigDecimal[][] { bigDecimalArray30, bigDecimalArray38, bigDecimalArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl48.getDataRef();
        double[] doubleArray52 = new double[] { 1.0d, 100.0f };
        double[] doubleArray55 = new double[] { 1.0d, 100.0f };
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray62 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        boolean boolean64 = bigMatrixImpl48.equals((java.lang.Object) bigMatrix63);
        int int65 = bigMatrixImpl48.getRowDimension();
        bigMatrixImpl48.setRoundingMode(0);
        double[] doubleArray69 = bigMatrixImpl48.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str70 = bigMatrixImpl48.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl48.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl48.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl14.subtract(bigMatrix72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str70, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix72);
    }

    @Test
    public void test06211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06211");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        float float13 = bigDecimal11.floatValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.divideToIntegralValue(bigDecimal11);
        java.math.BigDecimal bigDecimal15 = bigDecimal11.ulp();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger18 = bigDecimal17.unscaledValue();
        short short19 = bigDecimal17.shortValueExact();
        java.lang.String str20 = bigDecimal17.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal17);
        java.lang.String str22 = bigDecimal15.toEngineeringString();
        java.math.BigDecimal bigDecimal23 = bigDecimal15.abs();
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl38.transpose();
        double[] doubleArray41 = bigMatrixImpl38.getRowAsDoubleArray((int) (short) 0);
        boolean boolean42 = bigMatrixImpl38.isSingular();
        java.math.BigDecimal[][] bigDecimalArray43 = bigMatrixImpl38.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray43);
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal47 = bigDecimal46.negate();
        int int48 = bigDecimal47.scale();
        boolean boolean49 = bigMatrixImpl44.equals((java.lang.Object) bigDecimal47);
        java.math.BigDecimal bigDecimal50 = bigDecimal47.plus();
        java.math.MathContext mathContext51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal52 = bigDecimal15.divide(bigDecimal50, mathContext51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 97.0f + "'", float13 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 100 + "'", short19 == (short) 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(bigDecimal50);
    }

    @Test
    public void test06212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06212");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl27.copy();
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray42 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        bigMatrixImpl44.setRoundingMode((int) (short) 0);
        java.lang.String str47 = bigMatrixImpl44.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl27.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str47, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
    }

    @Test
    public void test06213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06213");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix8.scalarAdd(4.733456112E9d);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(2881);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix10.solve(realMatrix12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test06214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06214");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        java.math.BigDecimal bigDecimal9 = bigMatrixImpl8.getNorm();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.divideToIntegralValue(bigDecimal21);
        boolean boolean25 = bigMatrixImpl8.equals((java.lang.Object) bigDecimal21);
        int int26 = bigDecimal21.intValue();
        java.lang.String str27 = bigDecimal21.toEngineeringString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 97.0f + "'", float23 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "97" + "'", str27, "97");
    }

    @Test
    public void test06215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06215");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        double[][] doubleArray29 = bigMatrixImpl27.getDataAsDoubleArray();
        double[][] doubleArray30 = bigMatrixImpl27.getDataAsDoubleArray();
        bigMatrixImpl27.setRoundingMode((-100));
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal34 = bigMatrixImpl27.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix33);
    }

    @Test
    public void test06216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06216");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = bigDecimal41.setScale(0);
        byte byte45 = bigDecimal44.byteValueExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal44.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.scalarMultiply(bigDecimal46);
        byte byte48 = bigDecimal46.byteValueExact();
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((-2805L), (int) (byte) 1);
        java.lang.String str52 = bigDecimal51.toEngineeringString();
        java.math.RoundingMode roundingMode54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal55 = bigDecimal46.divide(bigDecimal51, (-100), roundingMode54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 0 + "'", byte45 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + byte48 + "' != '" + (byte) 0 + "'", byte48 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-280.5" + "'", str52, "-280.5");
    }

    @Test
    public void test06217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06217");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl5.copy();
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray21 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl23.transpose();
        int int25 = bigMatrixImpl23.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl23.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl5.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl23);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl5.getDataRef();
        int int29 = bigMatrixImpl5.getColumnDimension();
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray42 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl44.transpose();
        int int46 = bigMatrixImpl44.getColumnDimension();
        java.math.BigDecimal bigDecimal47 = bigMatrixImpl44.getNorm();
        int int48 = bigMatrixImpl44.getScale();
        boolean boolean49 = bigMatrixImpl44.isSingular();
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl44.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl5.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 64 + "'", int48 == 64);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(bigDecimal50);
    }

    @Test
    public void test06218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06218");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        java.lang.String[] strArray11 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl5.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl16);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl5.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        double[] doubleArray25 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix26 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray25);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray25);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray25);
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        double[] doubleArray41 = realMatrix34.operate(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray41);
        double[] doubleArray43 = realMatrix28.preMultiply(doubleArray41);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix44.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix44.inverse();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.min(bigDecimal51);
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        int int60 = bigDecimal59.intValue();
        java.math.BigDecimal bigDecimal61 = bigDecimal56.min(bigDecimal59);
        java.math.BigDecimal[] bigDecimalArray62 = new java.math.BigDecimal[] { bigDecimal61 };
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        int int65 = bigDecimal64.intValue();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal64.min(bigDecimal67);
        java.math.BigDecimal[] bigDecimalArray70 = new java.math.BigDecimal[] { bigDecimal69 };
        java.math.BigDecimal[][] bigDecimalArray71 = new java.math.BigDecimal[][] { bigDecimalArray54, bigDecimalArray62, bigDecimalArray70 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray71);
        int int75 = bigMatrixImpl74.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl74.copy();
        double[] doubleArray78 = bigMatrixImpl74.getRowAsDoubleArray((int) (byte) 1);
        double[] doubleArray79 = realMatrix46.operate(doubleArray78);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray79);
        double[] doubleArray81 = realMatrix20.solve(doubleArray79);
        org.apache.commons.math.linear.RealMatrix realMatrix82 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray79);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray79);
        org.apache.commons.math.linear.BigMatrix bigMatrix84 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrixImpl5.solve(bigMatrix84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertNotNull(bigMatrix84);
    }

    @Test
    public void test06219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06219");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl7.copy();
        bigMatrixImpl7.setRoundingMode(0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = bigMatrixImpl7.getColumnAsDoubleArray((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix8);
    }

    @Test
    public void test06220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06220");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl60.getDataRef();
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl60.getNorm();
        boolean boolean63 = bigMatrixImpl60.isSquare();
        java.math.BigDecimal[][] bigDecimalArray64 = bigMatrixImpl60.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl60.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl60.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl27.preMultiply(bigMatrix66);
        java.math.BigDecimal[][] bigDecimalArray68 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl27.getDataRef();
        java.lang.String[] strArray71 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl27.multiply(bigMatrix78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl27.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigMatrix79);
    }

    @Test
    public void test06221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06221");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(5, 110);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        float float18 = bigDecimal16.floatValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal14.divideToIntegralValue(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal4.max(bigDecimal14);
        int int21 = bigDecimal14.intValueExact();
        java.math.BigDecimal bigDecimal22 = bigDecimal14.abs();
        boolean boolean23 = bigMatrixImpl2.equals((java.lang.Object) bigDecimal22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl2.getSubMatrix((int) (byte) 97, (int) (short) 100, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 97.0f + "'", float18 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06222");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigInteger bigInteger47 = bigDecimal41.toBigInteger();
        java.math.BigDecimal bigDecimal48 = bigDecimal39.max(bigDecimal41);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        long long52 = bigDecimal50.longValue();
        long long53 = bigDecimal50.longValueExact();
        int int54 = bigDecimal50.precision();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        long long58 = bigDecimal56.longValue();
        long long59 = bigDecimal56.longValueExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal50.add(bigDecimal56);
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.min(bigDecimal65);
        java.math.BigDecimal bigDecimal68 = bigDecimal60.min(bigDecimal65);
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        java.lang.String str71 = bigDecimal70.toString();
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal74 = bigDecimal73.stripTrailingZeros();
        int int75 = bigDecimal73.signum();
        java.math.BigDecimal[] bigDecimalArray76 = bigDecimal70.divideAndRemainder(bigDecimal73);
        java.math.BigDecimal bigDecimal78 = bigDecimal70.pow((int) 'a');
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal(0.0d);
        java.lang.String str81 = bigDecimal80.toString();
        java.math.BigDecimal bigDecimal83 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal84 = bigDecimal83.stripTrailingZeros();
        int int85 = bigDecimal83.signum();
        java.math.BigDecimal[] bigDecimalArray86 = bigDecimal80.divideAndRemainder(bigDecimal83);
        java.math.BigDecimal bigDecimal88 = bigDecimal80.pow((int) 'a');
        java.math.BigInteger bigInteger89 = bigDecimal80.toBigIntegerExact();
        java.math.BigDecimal bigDecimal90 = bigDecimal78.add(bigDecimal80);
        java.math.BigDecimal bigDecimal92 = bigDecimal90.pow((int) (byte) 97);
        int int93 = bigDecimal90.scale();
        int int94 = bigDecimal90.intValue();
        java.math.BigDecimal bigDecimal95 = bigDecimal68.max(bigDecimal90);
        java.math.BigDecimal bigDecimal96 = bigDecimal41.min(bigDecimal90);
        java.math.BigDecimal bigDecimal97 = bigDecimal96.stripTrailingZeros();
        int int98 = bigDecimal97.signum();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray86);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigInteger89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(bigDecimal95);
        org.junit.Assert.assertNotNull(bigDecimal96);
        org.junit.Assert.assertNotNull(bigDecimal97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test06223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06223");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getColumnDimension();
        int int22 = bigMatrixImpl14.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal25 = bigMatrixImpl14.getEntry((int) (short) -2805, (int) (byte) 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test06224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06224");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2, (int) (short) 400, (int) (byte) 62);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test06225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06225");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str18 = bigMatrixImpl14.toString();
        int int19 = bigMatrixImpl14.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.getRowMatrix(5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str18, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 64 + "'", int19 == 64);
    }

    @Test
    public void test06226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06226");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06227");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.negate();
        int int3 = bigDecimal2.scale();
        int int4 = bigDecimal2.intValueExact();
        java.lang.String[] strArray6 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray7 = new java.lang.String[][] { strArray6 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray7);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray7);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray7);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray7);
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray7);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray7);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray7);
        java.math.BigDecimal bigDecimal15 = bigMatrix14.getNorm();
        java.math.RoundingMode roundingMode17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal18 = bigDecimal2.divide(bigDecimal15, (int) (byte) -32, roundingMode17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-100) + "'", int4 == (-100));
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(bigMatrix12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(bigDecimal15);
    }

    @Test
    public void test06228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06228");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 32);
    }

    @Test
    public void test06229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06229");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl18.getColumn(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl18.transpose();
        int int22 = bigMatrix21.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrix21.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(bigMatrix23);
    }

    @Test
    public void test06230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06230");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        double double45 = bigMatrixImpl25.getEntryAsDouble(1, 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl25.copy();
        boolean boolean47 = bigMatrixImpl25.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl25.copy();
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl25.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl25.getSubMatrix((int) (short) 10, (int) 'a', (int) (short) -100, (-3));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
    }

    @Test
    public void test06231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06231");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (byte) 0);
        float float2 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        long long6 = bigDecimal4.longValue();
        long long7 = bigDecimal4.longValueExact();
        int int8 = bigDecimal4.precision();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        java.lang.String str11 = bigDecimal10.toString();
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        int int15 = bigDecimal13.signum();
        java.math.BigDecimal[] bigDecimalArray16 = bigDecimal10.divideAndRemainder(bigDecimal13);
        java.math.BigDecimal bigDecimal17 = bigDecimal4.min(bigDecimal10);
        float float18 = bigDecimal4.floatValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal4.pow((int) (short) 31464);
        java.math.BigDecimal bigDecimal21 = bigDecimal4.ulp();
        java.math.MathContext mathContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal23 = bigDecimal1.subtract(bigDecimal21, mathContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
    }

    @Test
    public void test06232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06232");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix16.scalarAdd(1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix16.scalarMultiply((double) 100.0f);
        int int21 = realMatrix16.getRowDimension();
        int int22 = realMatrix16.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = realMatrix16.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test06233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06233");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl6.getTrace();
        long long8 = bigDecimal7.longValue();
        java.math.MathContext mathContext9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal10 = bigDecimal7.plus(mathContext9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test06234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06234");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 0);
        java.math.BigInteger bigInteger2 = bigDecimal1.toBigIntegerExact();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
    }

    @Test
    public void test06235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06235");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal21 = bigMatrixImpl14.getNorm();
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray34 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl36.transpose();
        boolean boolean38 = bigMatrixImpl36.isSingular();
        double[] doubleArray40 = bigMatrixImpl36.getColumnAsDoubleArray(0);
        int int41 = bigMatrixImpl36.getRoundingMode();
        boolean boolean42 = bigMatrixImpl36.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl36);
        java.lang.String str44 = bigMatrixImpl36.toString();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray46 = bigMatrixImpl36.getRowAsDoubleArray((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str44, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
    }

    @Test
    public void test06236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06236");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix23.copy();
        boolean boolean38 = realMatrix37.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix37.scalarAdd((double) 970L);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrix40.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix41.scalarMultiply((double) 970L);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray45 = realMatrix43.getColumn((int) (short) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix43);
    }

    @Test
    public void test06237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06237");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        bigMatrixImpl14.setRoundingMode((int) '4');
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal[][] bigDecimalArray46 = new java.math.BigDecimal[][] { bigDecimalArray29, bigDecimalArray37, bigDecimalArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray46);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray46);
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl49.getDataRef();
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl49.getNorm();
        int int52 = bigMatrixImpl49.getColumnDimension();
        java.math.BigDecimal[] bigDecimalArray54 = bigMatrixImpl49.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray55 = bigMatrixImpl14.solve(bigDecimalArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
    }

    @Test
    public void test06238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06238");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[] bigDecimalArray18 = bigMatrix16.getColumn(0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        boolean boolean20 = bigMatrixImpl19.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl19.getSubMatrix((int) (byte) 0, (int) '4', (int) (byte) 110, (int) (byte) 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix16);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06239");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = bigDecimal21.pow((int) (byte) 97);
        int int24 = bigDecimal21.scale();
        int int25 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigInteger bigInteger33 = bigDecimal27.toBigInteger();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(bigInteger33);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        float float38 = bigDecimal36.floatValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.multiply(bigDecimal36);
        java.math.BigDecimal bigDecimal40 = bigDecimal34.negate();
        java.math.BigDecimal bigDecimal42 = bigDecimal40.movePointLeft((-100));
        java.math.BigDecimal bigDecimal44 = bigDecimal42.movePointLeft(0);
        java.math.BigInteger bigInteger45 = bigDecimal42.toBigInteger();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        double[] doubleArray57 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray57);
        double[] doubleArray63 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix64 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray63);
        double[] doubleArray65 = realMatrix58.operate(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray63);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrix68.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrix69.getRowMatrix((int) (short) 0);
        java.math.BigDecimal bigDecimal72 = bigMatrix71.getTrace();
        java.math.BigDecimal bigDecimal73 = bigDecimal52.add(bigDecimal72);
        java.math.BigDecimal bigDecimal74 = bigDecimal42.multiply(bigDecimal52);
        java.math.MathContext mathContext75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal76 = bigDecimal21.divideToIntegralValue(bigDecimal52, mathContext75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 97.0f + "'", float38 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal74);
    }

    @Test
    public void test06240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06240");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.lang.String str3 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal6 = bigDecimal5.stripTrailingZeros();
        float float7 = bigDecimal5.floatValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal5.ulp();
        java.math.BigDecimal bigDecimal9 = bigDecimal8.ulp();
        java.math.BigDecimal bigDecimal10 = bigDecimal1.remainder(bigDecimal9);
        java.math.BigDecimal bigDecimal12 = bigDecimal10.movePointLeft((int) (byte) 1);
        int int13 = bigDecimal10.scale();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100" + "'", str3, "100");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 97.0f + "'", float7 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test06241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06241");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.negate();
        java.math.BigInteger bigInteger3 = bigDecimal2.toBigIntegerExact();
        int int4 = bigDecimal2.scale();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test06242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06242");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.MathContext mathContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(charArray2, (int) (short) 35, (int) (byte) -1, mathContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test06243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06243");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl37.getNorm();
        boolean boolean63 = bigMatrixImpl37.isSingular();
        java.lang.String str64 = bigMatrixImpl37.toString();
        int int65 = bigMatrixImpl37.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl37.getColumnMatrix(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "BigMatrixImpl{{0.0}}" + "'", str64, "BigMatrixImpl{{0.0}}");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test06244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06244");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal31 = bigMatrixImpl27.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(100);
        java.math.BigDecimal[][] bigDecimalArray35 = bigMatrixImpl27.getData();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
    }

    @Test
    public void test06245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06245");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger28 = bigDecimal27.unscaledValue();
        java.lang.String str29 = bigDecimal27.toPlainString();
        java.math.BigDecimal bigDecimal30 = bigDecimal23.divideToIntegralValue(bigDecimal27);
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.min(bigDecimal51);
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal[][] bigDecimalArray55 = new java.math.BigDecimal[][] { bigDecimalArray38, bigDecimalArray46, bigDecimalArray54 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl58.getDataRef();
        java.math.BigDecimal bigDecimal60 = bigMatrixImpl58.getNorm();
        boolean boolean61 = bigMatrixImpl58.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl58.copy();
        double[] doubleArray64 = bigMatrixImpl58.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl58.scalarMultiply(bigDecimal65);
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        long long70 = bigDecimal68.longValue();
        long long71 = bigDecimal68.longValueExact();
        int int72 = bigDecimal68.precision();
        java.math.BigDecimal bigDecimal74 = new java.math.BigDecimal(0.0d);
        int int75 = bigDecimal74.intValue();
        long long76 = bigDecimal74.longValue();
        long long77 = bigDecimal74.longValueExact();
        java.math.BigDecimal bigDecimal78 = bigDecimal68.add(bigDecimal74);
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal(0.0d);
        int int81 = bigDecimal80.intValue();
        java.math.BigDecimal bigDecimal83 = new java.math.BigDecimal(0.0d);
        int int84 = bigDecimal83.intValue();
        java.math.BigDecimal bigDecimal85 = bigDecimal80.min(bigDecimal83);
        java.math.BigDecimal bigDecimal86 = bigDecimal78.min(bigDecimal83);
        java.math.BigDecimal bigDecimal88 = bigDecimal86.movePointRight((int) (short) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl58.scalarAdd(bigDecimal86);
        java.math.BigDecimal bigDecimal90 = bigDecimal27.subtract(bigDecimal86);
        java.lang.String str91 = bigDecimal86.toPlainString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigMatrix89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0" + "'", str91, "0");
    }

    @Test
    public void test06246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06246");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 10);
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int5 = bigDecimal4.intValue();
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray18 = new double[][] { doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl20.transpose();
        double[] doubleArray23 = bigMatrixImpl20.getRowAsDoubleArray((int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal29 = bigDecimal28.negate();
        int int30 = bigDecimal29.scale();
        boolean boolean31 = bigMatrixImpl26.equals((java.lang.Object) bigDecimal29);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger34 = bigDecimal33.unscaledValue();
        java.lang.String str35 = bigDecimal33.toPlainString();
        java.math.BigDecimal bigDecimal36 = bigDecimal29.divideToIntegralValue(bigDecimal33);
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.min(bigDecimal57);
        java.math.BigDecimal[] bigDecimalArray60 = new java.math.BigDecimal[] { bigDecimal59 };
        java.math.BigDecimal[][] bigDecimalArray61 = new java.math.BigDecimal[][] { bigDecimalArray44, bigDecimalArray52, bigDecimalArray60 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray61);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray61);
        java.math.BigDecimal[][] bigDecimalArray65 = bigMatrixImpl64.getDataRef();
        java.math.BigDecimal bigDecimal66 = bigMatrixImpl64.getNorm();
        boolean boolean67 = bigMatrixImpl64.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl64.copy();
        double[] doubleArray70 = bigMatrixImpl64.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl64.scalarMultiply(bigDecimal71);
        java.math.BigDecimal bigDecimal74 = new java.math.BigDecimal(0.0d);
        int int75 = bigDecimal74.intValue();
        long long76 = bigDecimal74.longValue();
        long long77 = bigDecimal74.longValueExact();
        int int78 = bigDecimal74.precision();
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal(0.0d);
        int int81 = bigDecimal80.intValue();
        long long82 = bigDecimal80.longValue();
        long long83 = bigDecimal80.longValueExact();
        java.math.BigDecimal bigDecimal84 = bigDecimal74.add(bigDecimal80);
        java.math.BigDecimal bigDecimal86 = new java.math.BigDecimal(0.0d);
        int int87 = bigDecimal86.intValue();
        java.math.BigDecimal bigDecimal89 = new java.math.BigDecimal(0.0d);
        int int90 = bigDecimal89.intValue();
        java.math.BigDecimal bigDecimal91 = bigDecimal86.min(bigDecimal89);
        java.math.BigDecimal bigDecimal92 = bigDecimal84.min(bigDecimal89);
        java.math.BigDecimal bigDecimal94 = bigDecimal92.movePointRight((int) (short) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl64.scalarAdd(bigDecimal92);
        java.math.BigDecimal bigDecimal96 = bigDecimal33.subtract(bigDecimal92);
        java.math.BigDecimal bigDecimal97 = bigDecimal4.add(bigDecimal96);
        java.math.MathContext mathContext98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal99 = bigDecimal1.multiply(bigDecimal97, mathContext98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100" + "'", str35, "100");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigMatrix95);
        org.junit.Assert.assertNotNull(bigDecimal96);
        org.junit.Assert.assertNotNull(bigDecimal97);
    }

    @Test
    public void test06247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06247");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        int int22 = bigDecimal9.scale();
        long long23 = bigDecimal9.longValue();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal("-11");
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal9.divideAndRemainder(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigDecimal bigDecimal34 = bigDecimal28.plus();
        short short35 = bigDecimal28.shortValueExact();
        java.math.MathContext mathContext36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal37 = bigDecimal9.divideToIntegralValue(bigDecimal28, mathContext36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) 0 + "'", short35 == (short) 0);
    }

    @Test
    public void test06248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06248");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigInteger bigInteger35 = bigDecimal23.toBigIntegerExact();
        byte byte36 = bigDecimal23.byteValueExact();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((double) 5);
        java.math.BigDecimal bigDecimal39 = bigDecimal23.remainder(bigDecimal38);
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.9999999999999999d);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal44 = bigDecimal23.divide(bigDecimal41, (int) (byte) -100, (int) (byte) -112);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 0 + "'", byte36 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
    }

    @Test
    public void test06249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06249");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.min(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal[][] bigDecimalArray44 = new java.math.BigDecimal[][] { bigDecimalArray27, bigDecimalArray35, bigDecimalArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray44);
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl47.getDataRef();
        java.math.BigDecimal bigDecimal49 = bigMatrixImpl47.getNorm();
        boolean boolean50 = bigMatrixImpl47.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl47.copy();
        double[] doubleArray53 = bigMatrixImpl47.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl47.scalarMultiply(bigDecimal54);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl47.scalarAdd(bigDecimal58);
        int int60 = bigDecimal16.compareTo(bigDecimal58);
        long long61 = bigDecimal16.longValue();
        byte byte62 = bigDecimal16.byteValueExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 0 + "'", byte62 == (byte) 0);
    }

    @Test
    public void test06250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06250");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        bigMatrixImpl25.setScale((int) 'a');
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        java.lang.String str32 = bigDecimal31.toString();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = bigDecimal34.stripTrailingZeros();
        int int36 = bigDecimal34.signum();
        java.math.BigDecimal[] bigDecimalArray37 = bigDecimal31.divideAndRemainder(bigDecimal34);
        java.math.BigDecimal bigDecimal39 = bigDecimal31.pow((int) 'a');
        java.math.BigInteger bigInteger40 = bigDecimal31.toBigIntegerExact();
        int int41 = bigDecimal31.precision();
        java.math.BigInteger bigInteger42 = bigDecimal31.toBigInteger();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl25.scalarAdd(bigDecimal31);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl25.preMultiply(bigMatrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigMatrix43);
    }

    @Test
    public void test06251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06251");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        java.math.BigDecimal bigDecimal6 = bigDecimal3.movePointLeft((-1));
        long long7 = bigDecimal6.longValueExact();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger10 = bigDecimal9.unscaledValue();
        java.lang.String str11 = bigDecimal9.toPlainString();
        java.math.BigDecimal bigDecimal13 = bigDecimal9.movePointRight(64);
        boolean boolean14 = bigDecimal6.equals((java.lang.Object) 64);
        java.math.BigDecimal bigDecimal16 = bigDecimal6.movePointRight(0);
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        java.math.MathContext mathContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal19 = bigDecimal16.round(mathContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 970L + "'", long7 == 970L);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
    }

    @Test
    public void test06252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06252");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        java.lang.String str1 = bigMatrixImpl0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "BigMatrixImpl{}" + "'", str1, "BigMatrixImpl{}");
    }

    @Test
    public void test06253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06253");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigInteger bigInteger14 = bigDecimal13.toBigIntegerExact();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(bigInteger14, (int) 'a');
        byte byte17 = bigDecimal16.byteValueExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
    }

    @Test
    public void test06254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06254");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
        double double5 = bigDecimal1.doubleValue();
        short short6 = bigDecimal1.shortValueExact();
        java.math.BigDecimal bigDecimal7 = bigDecimal1.negate();
        short short8 = bigDecimal1.shortValueExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
    }

    @Test
    public void test06255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06255");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        int int26 = bigMatrixImpl20.getRoundingMode();
        java.math.BigDecimal bigDecimal27 = bigMatrixImpl20.getNorm();
        int int28 = bigMatrixImpl20.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
    }

    @Test
    public void test06256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06256");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (byte) 100);
        java.math.BigDecimal bigDecimal42 = bigMatrix41.getTrace();
        double[][] doubleArray43 = bigMatrix41.getDataAsDoubleArray();
        boolean boolean44 = bigMatrixImpl27.equals((java.lang.Object) bigMatrix41);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray46 = bigMatrix41.getColumn((int) (byte) 110);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06257");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        java.math.BigInteger bigInteger30 = bigDecimal29.toBigIntegerExact();
        java.lang.String str31 = bigDecimal29.toPlainString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
    }

    @Test
    public void test06258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06258");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger25 = bigDecimal24.unscaledValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal22.add(bigDecimal24);
        java.math.BigDecimal bigDecimal27 = bigDecimal11.multiply(bigDecimal22);
        java.math.BigDecimal bigDecimal29 = bigDecimal11.pow(100);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        java.lang.String str32 = bigDecimal31.toString();
        java.math.BigDecimal bigDecimal34 = bigDecimal31.setScale(0);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        long long38 = bigDecimal36.longValue();
        long long39 = bigDecimal36.longValueExact();
        short short40 = bigDecimal36.shortValueExact();
        java.math.BigDecimal bigDecimal41 = bigDecimal31.add(bigDecimal36);
        java.math.BigDecimal bigDecimal42 = bigDecimal41.ulp();
        java.math.BigDecimal bigDecimal43 = bigDecimal11.add(bigDecimal41);
        java.lang.Class<?> wildcardClass44 = bigDecimal41.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) 0 + "'", short40 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test06259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06259");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix5.multiply(realMatrix19);
        boolean boolean23 = realMatrix22.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarMultiply((double) 'a');
        int[] intArray27 = new int[] { (byte) 100 };
        int[] intArray30 = new int[] { 32, 5 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix22.getSubMatrix(intArray27, intArray30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 5]");
    }

    @Test
    public void test06260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06260");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigInteger bigInteger40 = bigDecimal34.toBigInteger();
        int int41 = bigDecimal34.precision();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal44 = bigDecimal34.subtract(bigDecimal43);
        java.math.BigDecimal bigDecimal45 = bigDecimal43.ulp();
        java.math.BigDecimal bigDecimal46 = bigDecimal32.max(bigDecimal45);
        java.math.BigDecimal bigDecimal47 = bigDecimal46.ulp();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
    }

    @Test
    public void test06261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06261");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        double[][] doubleArray21 = bigMatrixImpl14.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
    }

    @Test
    public void test06262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06262");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal("org.apache.commons.math.linear.MatrixIndexException: 100", mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06263");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        bigMatrixImpl37.setScale(32);
        java.lang.String str64 = bigMatrixImpl37.toString();
        int int65 = bigMatrixImpl37.getRowDimension();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "BigMatrixImpl{{0.0}}" + "'", str64, "BigMatrixImpl{{0.0}}");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test06264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06264");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = bigDecimal41.setScale(0);
        byte byte45 = bigDecimal44.byteValueExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal44.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.scalarMultiply(bigDecimal46);
        boolean boolean48 = bigMatrix47.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrix47.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrix49.getColumnMatrix(3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 0 + "'", byte45 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(bigMatrix49);
    }

    @Test
    public void test06265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06265");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal33 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal34 = bigDecimal7.multiply(bigDecimal21);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) (byte) 97);
        int int37 = bigDecimal21.compareTo(bigDecimal36);
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray50 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49 };
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl52.transpose();
        double[] doubleArray55 = bigMatrixImpl52.getRowAsDoubleArray((int) (short) 0);
        boolean boolean56 = bigMatrixImpl52.isSingular();
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrixImpl52.getData();
        int int58 = bigMatrixImpl52.getRoundingMode();
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        java.lang.String str63 = bigDecimal62.toString();
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal66 = bigDecimal65.stripTrailingZeros();
        int int67 = bigDecimal65.signum();
        java.math.BigDecimal[] bigDecimalArray68 = bigDecimal62.divideAndRemainder(bigDecimal65);
        java.math.BigDecimal bigDecimal70 = bigDecimal62.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray71 = new java.math.BigDecimal[] { bigDecimal60, bigDecimal62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrix72.getColumnMatrix(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl52.multiply(bigMatrix72);
        java.math.BigDecimal bigDecimal76 = bigMatrixImpl52.getNorm();
        java.math.BigDecimal bigDecimal78 = bigDecimal76.movePointLeft((int) (byte) -1);
        java.math.MathContext mathContext79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal80 = bigDecimal21.remainder(bigDecimal78, mathContext79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigDecimal78);
    }

    @Test
    public void test06266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06266");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray20);
        double[][] doubleArray25 = realMatrix24.getData();
        boolean boolean26 = realMatrix24.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix15.preMultiply(realMatrix24);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = realMatrix24.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrix27);
    }

    @Test
    public void test06267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06267");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getDataRef();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl37.transpose();
        double[] doubleArray40 = bigMatrixImpl37.getRowAsDoubleArray((int) (short) 0);
        boolean boolean41 = bigMatrixImpl37.isSingular();
        boolean boolean42 = bigMatrixImpl37.isSquare();
        double[][] doubleArray43 = bigMatrixImpl37.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl37.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        int[] intArray49 = new int[] { (byte) 100, (short) 97, (short) 400 };
        int[] intArray52 = new int[] { (-35), 97 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl14.getSubMatrix(intArray49, intArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[100, 97, 400]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-35, 97]");
    }

    @Test
    public void test06268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06268");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        float float3 = bigDecimal1.floatValue();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        int int20 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl18.scalarMultiply(bigDecimal22);
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl18.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal1.remainder(bigDecimal26);
        java.lang.String str28 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal30 = bigDecimal1.pow((int) 'a');
        int int31 = bigDecimal1.intValue();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "97" + "'", str28, "97");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
    }

    @Test
    public void test06269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06269");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix23.copy();
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray42);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix44.scalarAdd((double) 6);
        double double47 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix23.preMultiply(realMatrix44);
        double double49 = realMatrix44.getNorm();
        double[] doubleArray54 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix55 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray54);
        double double56 = realMatrix55.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix55.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix55.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix55.scalarAdd(1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix44.preMultiply(realMatrix55);
        double double63 = realMatrix62.getTrace();
        org.apache.commons.math.linear.RealMatrix realMatrix65 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrix62.solve(realMatrix65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 63.0d + "'", double47 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 63.0d + "'", double49 == 63.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2805.0d + "'", double63 == 2805.0d);
        org.junit.Assert.assertNotNull(realMatrix65);
    }

    @Test
    public void test06270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06270");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("org.apache.commons.math.linear.MatrixIndexException: 97");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06271");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.stripTrailingZeros();
        int int9 = bigDecimal8.signum();
        int int10 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger14 = bigDecimal13.unscaledValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal11.add(bigDecimal13);
        java.math.BigDecimal bigDecimal16 = bigDecimal8.max(bigDecimal13);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal((double) (short) -100);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        java.lang.String str21 = bigDecimal20.toString();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        int int25 = bigDecimal23.signum();
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal20.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal bigDecimal28 = bigDecimal20.pow((int) 'a');
        java.math.BigInteger bigInteger29 = bigDecimal20.toBigIntegerExact();
        int int30 = bigDecimal20.precision();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        java.lang.String str33 = bigDecimal32.toString();
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = bigDecimal35.stripTrailingZeros();
        int int37 = bigDecimal35.signum();
        java.math.BigDecimal[] bigDecimalArray38 = bigDecimal32.divideAndRemainder(bigDecimal35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray38);
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl39.getNorm();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        java.lang.String str43 = bigDecimal42.toString();
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.stripTrailingZeros();
        int int47 = bigDecimal45.signum();
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal42.divideAndRemainder(bigDecimal45);
        java.math.BigDecimal bigDecimal50 = bigDecimal42.pow((int) 'a');
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal53 = bigDecimal52.stripTrailingZeros();
        float float54 = bigDecimal52.floatValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.divideToIntegralValue(bigDecimal52);
        boolean boolean56 = bigMatrixImpl39.equals((java.lang.Object) bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray57 = bigDecimal20.divideAndRemainder(bigDecimal52);
        java.math.BigDecimal bigDecimal58 = bigDecimal18.remainder(bigDecimal52);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal16.multiply(bigDecimal58);
        java.math.MathContext mathContext61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal62 = bigDecimal58.negate(mathContext61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + float54 + "' != '" + 97.0f + "'", float54 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertNotNull(bigDecimal60);
    }

    @Test
    public void test06272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06272");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        double[][] doubleArray22 = realMatrix21.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.inverse();
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        double double42 = realMatrix41.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrix41.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix35.preMultiply(realMatrix44);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 1.0f);
        double[] doubleArray52 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix53 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray52);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrix54.scalarAdd((double) 6);
        int int57 = realMatrix54.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix54.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix47.preMultiply(realMatrix54);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix47.copy();
        boolean boolean62 = realMatrix61.isSquare();
        int int63 = realMatrix61.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrix21.add(realMatrix61);
        double double65 = realMatrix61.getNorm();
        int int66 = realMatrix61.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double69 = realMatrix61.getEntry(0, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 8668.0d + "'", double65 == 8668.0d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test06273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06273");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl14.transpose();
        boolean boolean18 = bigMatrixImpl14.isSquare();
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal26 = bigDecimal25.stripTrailingZeros();
        int int27 = bigDecimal25.signum();
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal22.divideAndRemainder(bigDecimal25);
        java.math.BigDecimal bigDecimal30 = bigDecimal22.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal20, bigDecimal22 };
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray36 = bigMatrixImpl14.solve(bigDecimalArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix35);
    }

    @Test
    public void test06274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06274");
        char[] charArray1 = new char[] { '4' };
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(charArray1);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray1, (int) (short) -100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[4]");
    }

    @Test
    public void test06275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06275");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray33);
        java.math.BigDecimal[] bigDecimalArray38 = bigMatrix36.getRow((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray38);
        int int40 = bigMatrix39.getRoundingMode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
    }

    @Test
    public void test06276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06276");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        bigMatrixImpl25.setRoundingMode(0);
        double[] doubleArray46 = bigMatrixImpl25.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str47 = bigMatrixImpl25.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl25.copy();
        bigMatrixImpl25.setScale(64);
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal((double) (short) -100);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal52.scaleByPowerOfTen((int) (byte) -100);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl25.scalarAdd(bigDecimal55);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str47, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-100) + "'", int53 == (-100));
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigMatrix56);
    }

    @Test
    public void test06277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06277");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException1 = new org.apache.commons.math.linear.MatrixIndexException("197");
        java.lang.String str2 = matrixIndexException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.linear.MatrixIndexException: 197" + "'", str2, "org.apache.commons.math.linear.MatrixIndexException: 197");
    }

    @Test
    public void test06278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06278");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix5.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrix6.inverse();
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix14.scalarAdd((double) 6);
        int int17 = realMatrix16.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix16.scalarMultiply(1.0d);
        double double20 = realMatrix19.getNorm();
        double double21 = realMatrix19.getNorm();
        double[][] doubleArray22 = realMatrix19.getData();
        double[] doubleArray24 = realMatrix19.getColumn(0);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray24);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = realMatrix7.preMultiply(doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 85.0d + "'", double20 == 85.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 85.0d + "'", double21 == 85.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[5.0, 58.0, 16.0, 6.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
    }

    @Test
    public void test06279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06279");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray30);
        boolean boolean32 = realMatrix31.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrix31.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarMultiply((double) 2881);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix35.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix36.getColumnMatrix((-3));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
    }

    @Test
    public void test06280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06280");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray3 = realMatrix1.getColumn(4);
        double[][] doubleArray4 = realMatrix1.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix1.inverse();
        int int7 = realMatrix1.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrix1.getRowMatrix(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test06281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06281");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        bigMatrixImpl25.setRoundingMode(0);
        double[] doubleArray46 = bigMatrixImpl25.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str47 = bigMatrixImpl25.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl25.copy();
        java.lang.String str49 = bigMatrixImpl25.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray51 = bigMatrixImpl25.getRow(7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str47, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str49, "BigMatrixImpl{{0},{0},{0}}");
    }

    @Test
    public void test06282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06282");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        boolean boolean37 = bigDecimal20.equals((java.lang.Object) doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.min(bigDecimal61);
        java.math.BigDecimal[] bigDecimalArray64 = new java.math.BigDecimal[] { bigDecimal63 };
        java.math.BigDecimal[][] bigDecimalArray65 = new java.math.BigDecimal[][] { bigDecimalArray48, bigDecimalArray56, bigDecimalArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray65);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray65);
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl68.getDataRef();
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl68.getNorm();
        java.lang.String str71 = bigMatrixImpl68.toString();
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((long) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl68.scalarAdd(bigDecimal73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl40.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimalArray64);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str71, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigMatrix74);
    }

    @Test
    public void test06283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06283");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getDataRef();
        double[][] doubleArray19 = bigMatrixImpl14.getDataAsDoubleArray();
        boolean boolean20 = bigMatrixImpl14.isSquare();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        float float24 = bigDecimal22.floatValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal22.ulp();
        double double26 = bigDecimal22.doubleValue();
        float float27 = bigDecimal22.floatValue();
        float float28 = bigDecimal22.floatValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl14.scalarAdd(bigDecimal22);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal31.toBigInteger();
        int int38 = bigDecimal31.precision();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal40.divideAndRemainder(bigDecimal42);
        java.math.BigDecimal bigDecimal44 = bigDecimal31.multiply(bigDecimal42);
        java.math.BigDecimal bigDecimal45 = bigDecimal31.abs();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) (byte) 97);
        java.math.BigDecimal bigDecimal48 = bigDecimal45.subtract(bigDecimal47);
        java.math.BigDecimal bigDecimal49 = bigDecimal47.stripTrailingZeros();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrix29.scalarAdd(bigDecimal47);
        double double53 = bigMatrix29.getEntryAsDouble(3, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 97.0f + "'", float24 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 97.0d + "'", double26 == 97.0d);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 97.0f + "'", float27 == 97.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 97.0f + "'", float28 == 97.0f);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 98.0d + "'", double53 == 98.0d);
    }

    @Test
    public void test06284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06284");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix18.transpose();
        int[] intArray25 = new int[] { (byte) -100, (short) 400, (short) 10, (short) -100, 5 };
        int[] intArray29 = new int[] { 7, (-100), (-3) };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix19.getSubMatrix(intArray25, intArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-100, 400, 10, -100, 5]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[7, -100, -3]");
    }

    @Test
    public void test06285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06285");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        double[] doubleArray6 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray6);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray6);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray6);
        double[] doubleArray14 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix15.operate(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray22);
        double[] doubleArray24 = realMatrix9.preMultiply(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix25.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix25.inverse();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal[][] bigDecimalArray52 = new java.math.BigDecimal[][] { bigDecimalArray35, bigDecimalArray43, bigDecimalArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        int int56 = bigMatrixImpl55.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl55.copy();
        double[] doubleArray59 = bigMatrixImpl55.getRowAsDoubleArray((int) (byte) 1);
        double[] doubleArray60 = realMatrix27.operate(doubleArray59);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray60);
        double[] doubleArray62 = realMatrix1.solve(doubleArray60);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray62);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double66 = realMatrix65.getTrace();
        boolean boolean67 = realMatrix65.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrix65.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix69.scalarAdd((double) (short) -2805);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix71.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrix63.multiply(realMatrix72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix72);
    }

    @Test
    public void test06286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06286");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        int int27 = bigMatrixImpl25.getRowDimension();
        boolean boolean28 = bigMatrixImpl25.isSquare();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrixImpl56.getDataRef();
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl56.getNorm();
        boolean boolean59 = bigMatrixImpl56.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl56.copy();
        double[] doubleArray62 = bigMatrixImpl56.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray64 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray65 = new java.lang.String[][] { strArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(strArray65);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl56.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl66);
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl56.copy();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        java.lang.String str71 = bigDecimal70.toString();
        java.math.BigDecimal bigDecimal73 = bigDecimal70.setScale(0);
        byte byte74 = bigDecimal73.byteValueExact();
        java.math.BigDecimal bigDecimal75 = bigDecimal73.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl56.scalarMultiply(bigDecimal75);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl25.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl56);
        java.lang.String str78 = bigMatrixImpl25.toString();
        java.math.BigDecimal[][] bigDecimalArray79 = bigMatrixImpl25.getDataRef();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertTrue("'" + byte74 + "' != '" + (byte) 0 + "'", byte74 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str78, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigDecimalArray79);
    }

    @Test
    public void test06287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06287");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix16.scalarMultiply((-1.0d));
        int[] intArray24 = new int[] { (short) -1, 3, 110, 52, (short) 400 };
        int[] intArray30 = new int[] { (byte) -32, (byte) 4, 10, (short) 97, 2 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix16.getSubMatrix(intArray24, intArray30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 3, 110, 52, 400]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-32, 4, 10, 97, 2]");
    }

    @Test
    public void test06288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06288");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(101L, 97);
        org.junit.Assert.assertNotNull(bigDecimal2);
    }

    @Test
    public void test06289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06289");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (byte) -112);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06290");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        boolean boolean27 = bigMatrixImpl11.equals((java.lang.Object) bigMatrixImpl26);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = bigMatrixImpl11.getColumnAsDoubleArray((int) (byte) -11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06291");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray12 = bigMatrixImpl11.getData();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        java.lang.String str15 = bigDecimal14.toString();
        java.math.BigDecimal bigDecimal17 = bigDecimal14.setScale(0);
        byte byte18 = bigDecimal17.byteValueExact();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal20 = bigDecimal17.negate();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal27 = bigDecimal22.min(bigDecimal25);
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal[][] bigDecimalArray45 = new java.math.BigDecimal[][] { bigDecimalArray28, bigDecimalArray36, bigDecimalArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray45);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigInteger bigInteger55 = bigDecimal49.toBigInteger();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(bigInteger55);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        float float60 = bigDecimal58.floatValue();
        java.math.BigDecimal bigDecimal61 = bigDecimal56.multiply(bigDecimal58);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrix47.scalarAdd(bigDecimal61);
        short short63 = bigDecimal61.shortValueExact();
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int66 = bigDecimal65.signum();
        java.math.BigDecimal[] bigDecimalArray67 = bigDecimal61.divideAndRemainder(bigDecimal65);
        java.math.BigInteger bigInteger68 = bigDecimal61.toBigInteger();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        java.math.BigDecimal bigDecimal75 = bigDecimal70.min(bigDecimal73);
        java.math.BigInteger bigInteger76 = bigDecimal70.toBigInteger();
        int int77 = bigDecimal70.precision();
        java.math.BigDecimal bigDecimal79 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal80 = bigDecimal70.subtract(bigDecimal79);
        java.math.BigDecimal bigDecimal81 = bigDecimal79.ulp();
        java.math.BigDecimal bigDecimal82 = bigDecimal61.remainder(bigDecimal79);
        java.math.BigDecimal bigDecimal83 = bigDecimal17.divideToIntegralValue(bigDecimal79);
        java.math.BigDecimal bigDecimal85 = java.math.BigDecimal.valueOf((-1L));
        java.math.BigDecimal[] bigDecimalArray86 = bigDecimal83.divideAndRemainder(bigDecimal85);
        org.apache.commons.math.linear.BigMatrix bigMatrix87 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray88 = bigMatrixImpl11.preMultiply(bigDecimalArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 97.0f + "'", float60 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) 0 + "'", short63 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimalArray86);
        org.junit.Assert.assertNotNull(bigMatrix87);
    }

    @Test
    public void test06292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06292");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        java.math.BigDecimal bigDecimal6 = bigDecimal3.movePointLeft((-1));
        long long7 = bigDecimal6.longValueExact();
        int int8 = bigDecimal6.scale();
        float float9 = bigDecimal6.floatValue();
        float float10 = bigDecimal6.floatValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal6.scaleByPowerOfTen((int) (short) -2805);
        int int13 = bigDecimal6.scale();
        java.math.BigDecimal bigDecimal14 = bigDecimal6.abs();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 970L + "'", long7 == 970L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 970.0f + "'", float9 == 970.0f);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 970.0f + "'", float10 == 970.0f);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
    }

    @Test
    public void test06293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06293");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        bigMatrixImpl25.setScale((int) 'a');
        int int30 = bigMatrixImpl25.getRowDimension();
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        int int47 = bigMatrixImpl45.getColumnDimension();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        int int51 = bigDecimal49.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl45.scalarMultiply(bigDecimal49);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl25.scalarAdd(bigDecimal49);
        double[] doubleArray55 = bigMatrixImpl25.getColumnAsDoubleArray(0);
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigDecimal[] bigDecimalArray63 = new java.math.BigDecimal[] { bigDecimal62 };
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal65.min(bigDecimal68);
        java.math.BigDecimal[] bigDecimalArray71 = new java.math.BigDecimal[] { bigDecimal70 };
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        java.math.BigDecimal bigDecimal78 = bigDecimal73.min(bigDecimal76);
        java.math.BigDecimal[] bigDecimalArray79 = new java.math.BigDecimal[] { bigDecimal78 };
        java.math.BigDecimal[][] bigDecimalArray80 = new java.math.BigDecimal[][] { bigDecimalArray63, bigDecimalArray71, bigDecimalArray79 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray80);
        java.math.BigDecimal[][] bigDecimalArray82 = bigMatrixImpl81.getDataRef();
        double[] doubleArray85 = new double[] { 1.0d, 100.0f };
        double[] doubleArray88 = new double[] { 1.0d, 100.0f };
        double[] doubleArray91 = new double[] { 1.0d, 100.0f };
        double[] doubleArray94 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray95 = new double[][] { doubleArray85, doubleArray88, doubleArray91, doubleArray94 };
        org.apache.commons.math.linear.BigMatrix bigMatrix96 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray95);
        boolean boolean97 = bigMatrixImpl81.equals((java.lang.Object) bigMatrix96);
        int int98 = bigMatrix96.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix99 = bigMatrixImpl25.preMultiply(bigMatrix96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(bigMatrix96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
    }

    @Test
    public void test06294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06294");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) (byte) -112);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray5 = realMatrix3.getColumn(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray5);
        boolean boolean7 = bigMatrix6.isSingular();
        boolean boolean8 = bigDecimal1.equals((java.lang.Object) bigMatrix6);
        java.lang.String str9 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.lang.String str13 = bigDecimal12.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal12.divideToIntegralValue(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal1.add(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal1.plus();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal23 = bigDecimal1.setScale(100, (int) (short) 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-112" + "'", str9, "-112");
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1E-100" + "'", str13, "1E-100");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
    }

    @Test
    public void test06295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06295");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getColumnDimension();
        double[][] doubleArray22 = bigMatrixImpl14.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal[][] bigDecimalArray47 = new java.math.BigDecimal[][] { bigDecimalArray30, bigDecimalArray38, bigDecimalArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl50.getDataRef();
        java.math.BigDecimal bigDecimal52 = bigMatrixImpl50.getNorm();
        int int53 = bigMatrixImpl50.getColumnDimension();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal((long) (short) -100);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl50.scalarMultiply(bigDecimal55);
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrix56.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl14.solve(bigMatrix56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
    }

    @Test
    public void test06296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06296");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("org.apache.commons.math.linear.MatrixIndexException: 35");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06297");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        int int20 = bigMatrixImpl14.getRoundingMode();
        java.lang.String str21 = bigMatrixImpl14.toString();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getData();
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray35 = realMatrix28.operate(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix37.transpose();
        double[][] doubleArray39 = realMatrix37.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl40);
        int int42 = bigMatrixImpl40.getColumnDimension();
        boolean boolean43 = bigMatrixImpl40.isSquare();
        int int44 = bigMatrixImpl40.getRowDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test06298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06298");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[] doubleArray22 = new double[] { 1.0d, 100.0f };
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray29 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray29);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray29);
        bigMatrixImpl31.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl31.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray35 = bigMatrixImpl31.getDataRef();
        boolean boolean36 = bigMatrixImpl14.equals((java.lang.Object) bigMatrixImpl31);
        java.lang.Class<?> wildcardClass37 = bigMatrixImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test06299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06299");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        bigMatrixImpl25.setScale((int) 'a');
        int int30 = bigMatrixImpl25.getRowDimension();
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        int int47 = bigMatrixImpl45.getColumnDimension();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        int int51 = bigDecimal49.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl45.scalarMultiply(bigDecimal49);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl25.scalarAdd(bigDecimal49);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray55 = bigMatrixImpl25.getColumnAsDoubleArray(2881);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix53);
    }

    @Test
    public void test06300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06300");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        boolean boolean10 = bigMatrixImpl8.isSquare();
        bigMatrixImpl8.setRoundingMode((int) (byte) 10);
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal((double) 100.0f);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl8.scalarAdd(bigDecimal14);
        boolean boolean16 = bigMatrixImpl8.isSingular();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal26.min(bigDecimal29);
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal[][] bigDecimalArray41 = new java.math.BigDecimal[][] { bigDecimalArray24, bigDecimalArray32, bigDecimalArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        int int45 = bigMatrixImpl44.getColumnDimension();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal55.min(bigDecimal58);
        java.math.BigDecimal[] bigDecimalArray61 = new java.math.BigDecimal[] { bigDecimal60 };
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        java.math.BigDecimal bigDecimal68 = bigDecimal63.min(bigDecimal66);
        java.math.BigDecimal[] bigDecimalArray69 = new java.math.BigDecimal[] { bigDecimal68 };
        java.math.BigDecimal[][] bigDecimalArray70 = new java.math.BigDecimal[][] { bigDecimalArray53, bigDecimalArray61, bigDecimalArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray70);
        boolean boolean73 = bigMatrix72.isSingular();
        boolean boolean74 = bigMatrixImpl44.equals((java.lang.Object) boolean73);
        java.math.BigDecimal[][] bigDecimalArray75 = bigMatrixImpl44.getData();
        int int76 = bigMatrixImpl44.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl8.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
    }

    @Test
    public void test06301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06301");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.negate();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.pow((int) (byte) 100);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal((long) (byte) -11);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = bigDecimal1.divide(bigDecimal6, 3);
        java.math.BigDecimal bigDecimal10 = bigDecimal1.plus();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        long long14 = bigDecimal12.longValue();
        long long15 = bigDecimal12.longValueExact();
        int int16 = bigDecimal12.precision();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        long long20 = bigDecimal18.longValue();
        long long21 = bigDecimal18.longValueExact();
        java.math.BigDecimal bigDecimal22 = bigDecimal12.add(bigDecimal18);
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        java.lang.String str25 = bigDecimal24.toString();
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal28 = bigDecimal27.stripTrailingZeros();
        int int29 = bigDecimal27.signum();
        java.math.BigDecimal[] bigDecimalArray30 = bigDecimal24.divideAndRemainder(bigDecimal27);
        java.math.BigDecimal bigDecimal32 = bigDecimal24.pow((int) 'a');
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        java.lang.String str35 = bigDecimal34.toString();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        int int39 = bigDecimal37.signum();
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal34.divideAndRemainder(bigDecimal37);
        java.math.BigDecimal bigDecimal42 = bigDecimal34.pow((int) 'a');
        java.math.BigInteger bigInteger43 = bigDecimal34.toBigIntegerExact();
        java.math.BigDecimal bigDecimal44 = bigDecimal32.add(bigDecimal34);
        java.math.BigDecimal bigDecimal45 = bigDecimal18.multiply(bigDecimal32);
        java.math.BigDecimal bigDecimal46 = bigDecimal18.ulp();
        java.math.BigDecimal bigDecimal48 = bigDecimal46.scaleByPowerOfTen((int) '#');
        int int49 = bigDecimal48.scale();
        java.math.MathContext mathContext50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal51 = bigDecimal10.remainder(bigDecimal48, mathContext50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-11" + "'", str7, "-11");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-35) + "'", int49 == (-35));
    }

    @Test
    public void test06302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06302");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, (int) (short) -2805);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06303");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
    }

    @Test
    public void test06304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06304");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl25.getRowMatrix(0);
        int int45 = bigMatrixImpl25.getRowDimension();
        boolean boolean46 = bigMatrixImpl25.isSingular();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        java.lang.String str49 = bigDecimal48.toString();
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal52 = bigDecimal51.stripTrailingZeros();
        int int53 = bigDecimal51.signum();
        java.math.BigDecimal[] bigDecimalArray54 = bigDecimal48.divideAndRemainder(bigDecimal51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        double[][] doubleArray56 = bigMatrixImpl55.getDataAsDoubleArray();
        java.lang.String str57 = bigMatrixImpl55.toString();
        int int58 = bigMatrixImpl55.getRoundingMode();
        java.math.BigDecimal[] bigDecimalArray60 = bigMatrixImpl55.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl25.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "BigMatrixImpl{{0},{0}}" + "'", str57, "BigMatrixImpl{{0},{0}}");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
    }

    @Test
    public void test06305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06305");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double double9 = realMatrix6.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix6.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrix6.scalarAdd((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrix6.scalarMultiply((double) (byte) 0);
        boolean boolean15 = realMatrix14.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix14.getSubMatrix((int) (byte) -112, (int) (short) 4, 6, (-3));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 63.0d + "'", double9 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06306");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        boolean boolean56 = bigMatrix55.isSingular();
        boolean boolean57 = bigMatrixImpl27.equals((java.lang.Object) boolean56);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray59 = bigMatrixImpl27.getRowAsDoubleArray((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test06307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06307");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix23.copy();
        boolean boolean38 = realMatrix37.isSquare();
        double double39 = realMatrix37.getDeterminant();
        double[][] doubleArray40 = realMatrix37.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 8668.0d + "'", double39 == 8668.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix42);
    }

    @Test
    public void test06308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06308");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        boolean boolean7 = bigMatrixImpl5.isSingular();
        int int8 = bigMatrixImpl5.getRowDimension();
        double[][] doubleArray9 = bigMatrixImpl5.getDataAsDoubleArray();
        java.lang.String str10 = bigMatrixImpl5.toString();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal13 = bigDecimal12.abs();
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl5.scalarMultiply(bigDecimal12);
        java.math.BigDecimal bigDecimal15 = bigMatrixImpl5.getNorm();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "BigMatrixImpl{{1},{0}}" + "'", str10, "BigMatrixImpl{{1},{0}}");
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(bigDecimal15);
    }

    @Test
    public void test06309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06309");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        java.lang.String[] strArray11 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl5.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl16);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl5.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        int int20 = bigMatrixImpl19.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal21 = bigMatrixImpl19.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test06310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06310");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        float float3 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
        java.math.BigDecimal bigDecimal5 = bigDecimal4.ulp();
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray18 = new double[][] { doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl20.transpose();
        int int22 = bigMatrixImpl20.getColumnDimension();
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getNorm();
        java.math.BigDecimal bigDecimal24 = bigDecimal5.subtract(bigDecimal23);
        java.math.MathContext mathContext25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal26 = bigDecimal5.negate(mathContext25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal24);
    }

    @Test
    public void test06311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06311");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale(5);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((double) (-1L));
        java.math.BigDecimal bigDecimal6 = bigDecimal3.subtract(bigDecimal5);
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.min(bigDecimal11);
        java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal13 };
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal21 = bigDecimal16.min(bigDecimal19);
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal[][] bigDecimalArray31 = new java.math.BigDecimal[][] { bigDecimalArray14, bigDecimalArray22, bigDecimalArray30 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        java.math.BigDecimal[][] bigDecimalArray35 = bigMatrixImpl34.getDataRef();
        java.math.BigDecimal bigDecimal36 = bigMatrixImpl34.getNorm();
        boolean boolean37 = bigMatrixImpl34.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl34.copy();
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl34.getNorm();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigDecimal[] bigDecimalArray63 = new java.math.BigDecimal[] { bigDecimal62 };
        java.math.BigDecimal[][] bigDecimalArray64 = new java.math.BigDecimal[][] { bigDecimalArray47, bigDecimalArray55, bigDecimalArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray64);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray64);
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal(0.0d);
        int int72 = bigDecimal71.intValue();
        java.math.BigDecimal bigDecimal73 = bigDecimal68.min(bigDecimal71);
        java.math.BigInteger bigInteger74 = bigDecimal68.toBigInteger();
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(bigInteger74);
        java.math.BigDecimal bigDecimal77 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal78 = bigDecimal77.stripTrailingZeros();
        float float79 = bigDecimal77.floatValue();
        java.math.BigDecimal bigDecimal80 = bigDecimal75.multiply(bigDecimal77);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrix66.scalarAdd(bigDecimal80);
        short short82 = bigDecimal80.shortValueExact();
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int85 = bigDecimal84.signum();
        java.math.BigDecimal[] bigDecimalArray86 = bigDecimal80.divideAndRemainder(bigDecimal84);
        java.math.BigInteger bigInteger87 = bigDecimal80.toBigInteger();
        java.math.BigDecimal bigDecimal88 = bigDecimal39.min(bigDecimal80);
        java.math.RoundingMode roundingMode89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal90 = bigDecimal5.divide(bigDecimal88, roundingMode89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertNotNull(bigDecimalArray64);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertTrue("'" + float79 + "' != '" + 97.0f + "'", float79 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(bigMatrix81);
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) 0 + "'", short82 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray86);
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertNotNull(bigDecimal88);
    }

    @Test
    public void test06312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06312");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal[][] bigDecimalArray54 = new java.math.BigDecimal[][] { bigDecimalArray37, bigDecimalArray45, bigDecimalArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl57.getDataRef();
        java.math.BigDecimal bigDecimal59 = bigMatrixImpl57.getNorm();
        boolean boolean60 = bigMatrixImpl57.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl57.copy();
        double[] doubleArray63 = bigMatrixImpl57.getColumnAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray63);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray66 = realMatrix29.preMultiply(doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(realMatrix65);
    }

    @Test
    public void test06313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06313");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigInteger bigInteger63 = bigDecimal57.toBigInteger();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(bigInteger63);
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal67 = bigDecimal66.stripTrailingZeros();
        float float68 = bigDecimal66.floatValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal64.multiply(bigDecimal66);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrix55.scalarAdd(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl27.add(bigMatrix55);
        double[][] doubleArray72 = bigMatrixImpl27.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl27.getRowMatrix((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 97.0f + "'", float68 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(doubleArray72);
    }

    @Test
    public void test06314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06314");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(bigMatrix21);
    }

    @Test
    public void test06315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06315");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getData();
        boolean boolean39 = bigMatrixImpl37.isSquare();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int42 = bigDecimal41.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl37.scalarMultiply(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal1.divide(bigDecimal41, (int) (short) 100, 6);
        int int47 = bigDecimal46.intValueExact();
        float float48 = bigDecimal46.floatValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        long long52 = bigDecimal50.longValue();
        long long53 = bigDecimal50.longValueExact();
        int int54 = bigDecimal50.precision();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        java.lang.String str57 = bigDecimal56.toString();
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal60 = bigDecimal59.stripTrailingZeros();
        int int61 = bigDecimal59.signum();
        java.math.BigDecimal[] bigDecimalArray62 = bigDecimal56.divideAndRemainder(bigDecimal59);
        java.math.BigDecimal bigDecimal63 = bigDecimal50.min(bigDecimal56);
        float float64 = bigDecimal50.floatValue();
        java.math.BigDecimal bigDecimal66 = bigDecimal50.pow((int) (short) 31464);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal67 = bigDecimal46.divide(bigDecimal66);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Division undefined");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 0.0f + "'", float64 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal66);
    }

    @Test
    public void test06316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06316");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 6);
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger5 = bigDecimal4.unscaledValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal2.add(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal4.toBigInteger();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger7, (int) (short) -1);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str12 = bigDecimal11.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal9.divideAndRemainder(bigDecimal11);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.remainder(bigDecimal9);
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray27 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26 };
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        java.lang.String str34 = bigDecimal33.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl30.scalarMultiply(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = bigDecimal1.max(bigDecimal33);
        java.math.BigDecimal bigDecimal37 = bigDecimal33.plus();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        int int43 = bigDecimal39.precision();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        long long47 = bigDecimal45.longValue();
        long long48 = bigDecimal45.longValueExact();
        java.math.BigDecimal bigDecimal49 = bigDecimal39.add(bigDecimal45);
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal53 = bigDecimal37.divide(bigDecimal49, (-32), (int) (short) -2805);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100" + "'", str12, "100");
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0.00000000000000000000000000000000" + "'", str34, "0.00000000000000000000000000000000");
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
    }

    @Test
    public void test06317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06317");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        boolean boolean18 = bigMatrixImpl14.isSquare();
        int int19 = bigMatrixImpl14.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal22 = bigMatrixImpl14.getEntry(10, 110);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test06318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06318");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl17.getRow((int) (byte) 0);
        int int41 = bigMatrixImpl17.getRowDimension();
        double[][] doubleArray42 = bigMatrixImpl17.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl17.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(doubleArray42);
    }

    @Test
    public void test06319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06319");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.stripTrailingZeros();
        int int9 = bigDecimal8.signum();
        int int10 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger14 = bigDecimal13.unscaledValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal11.add(bigDecimal13);
        java.math.BigDecimal bigDecimal16 = bigDecimal8.max(bigDecimal13);
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[] doubleArray22 = new double[] { 1.0d, 100.0f };
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray29 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray29);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray29);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl31.transpose();
        double[] doubleArray34 = bigMatrixImpl31.getRowAsDoubleArray((int) (short) 0);
        boolean boolean35 = bigMatrixImpl31.isSingular();
        java.math.BigDecimal[][] bigDecimalArray36 = bigMatrixImpl31.getData();
        java.math.BigDecimal bigDecimal37 = bigMatrixImpl31.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl31.transpose();
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl31.getNorm();
        int int40 = bigDecimal39.precision();
        java.math.BigDecimal bigDecimal41 = bigDecimal8.divideToIntegralValue(bigDecimal39);
        java.math.BigDecimal bigDecimal42 = bigDecimal41.ulp();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
    }

    @Test
    public void test06320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06320");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        float float15 = bigDecimal13.floatValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.divideToIntegralValue(bigDecimal13);
        java.math.BigDecimal bigDecimal17 = bigDecimal1.max(bigDecimal11);
        java.math.BigInteger bigInteger18 = bigDecimal11.unscaledValue();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(bigInteger18);
        java.math.BigDecimal bigDecimal20 = bigDecimal19.ulp();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 97.0f + "'", float15 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(bigDecimal20);
    }

    @Test
    public void test06321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06321");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigInteger bigInteger45 = bigDecimal39.toBigInteger();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(bigInteger45);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrix37.scalarAdd(bigDecimal46);
        java.math.BigDecimal bigDecimal48 = bigDecimal46.stripTrailingZeros();
        java.lang.String str49 = bigDecimal46.toPlainString();
        int int50 = bigDecimal46.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl14.scalarMultiply(bigDecimal46);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigMatrix51);
    }

    @Test
    public void test06322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06322");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal33 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal34 = bigDecimal7.multiply(bigDecimal21);
        java.math.BigDecimal bigDecimal35 = bigDecimal7.ulp();
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray48 = new double[][] { doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray48);
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.min(bigDecimal57);
        java.math.BigInteger bigInteger60 = bigDecimal54.toBigInteger();
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(bigInteger60);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrix52.scalarAdd(bigDecimal61);
        java.math.BigDecimal bigDecimal63 = bigDecimal7.min(bigDecimal61);
        long long64 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal66 = bigDecimal7.movePointRight(0);
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[] doubleArray72 = new double[] { 1.0d, 100.0f };
        double[] doubleArray75 = new double[] { 1.0d, 100.0f };
        double[] doubleArray78 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray79 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray79);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray79);
        java.lang.String str82 = bigMatrixImpl81.toString();
        int int83 = bigMatrixImpl81.getRowDimension();
        bigMatrixImpl81.setScale((int) (byte) 1);
        java.math.BigDecimal bigDecimal88 = java.math.BigDecimal.valueOf((long) 4, 7);
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl81.scalarAdd(bigDecimal88);
        java.math.BigDecimal bigDecimal92 = bigDecimal66.divide(bigDecimal88, 52, 3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str82, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigMatrix89);
        org.junit.Assert.assertNotNull(bigDecimal92);
    }

    @Test
    public void test06323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06323");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        bigMatrixImpl25.setScale((int) 'a');
        int int30 = bigMatrixImpl25.getRowDimension();
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        int int47 = bigMatrixImpl45.getColumnDimension();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        int int51 = bigDecimal49.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl45.scalarMultiply(bigDecimal49);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl25.scalarAdd(bigDecimal49);
        int int54 = bigMatrixImpl25.getColumnDimension();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.lang.String str58 = bigDecimal57.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl25.scalarAdd(bigDecimal57);
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal((long) (short) -100);
        byte byte62 = bigDecimal61.byteValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl25.scalarAdd(bigDecimal61);
        java.math.BigDecimal[][] bigDecimalArray64 = bigMatrixImpl25.getDataRef();
        java.lang.String[] strArray66 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray66);
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray66);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray66);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray66);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl25.preMultiply(bigMatrix71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1E-100" + "'", str58, "1E-100");
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) -100 + "'", byte62 == (byte) -100);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigDecimalArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigMatrix71);
    }

    @Test
    public void test06324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06324");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix5.multiply(realMatrix19);
        boolean boolean23 = realMatrix22.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarMultiply((double) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix22.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix26.inverse();
        double[] doubleArray32 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray32);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray32);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix34.scalarAdd((double) 6);
        double double37 = realMatrix34.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix34.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix34.scalarAdd((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix34.scalarMultiply((double) (byte) 0);
        boolean boolean43 = realMatrix42.isSingular();
        int int44 = realMatrix42.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix27.multiply(realMatrix42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 63.0d + "'", double37 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test06325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06325");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        double[][] doubleArray9 = bigMatrixImpl8.getDataAsDoubleArray();
        java.lang.String str10 = bigMatrixImpl8.toString();
        int int11 = bigMatrixImpl8.getRoundingMode();
        java.math.BigDecimal[] bigDecimalArray13 = bigMatrixImpl8.getRow(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl8.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal17 = bigMatrixImpl8.getEntry((int) (byte) 32, (int) (byte) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "BigMatrixImpl{{0},{0}}" + "'", str10, "BigMatrixImpl{{0},{0}}");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigMatrix14);
    }

    @Test
    public void test06326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06326");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        int int27 = bigMatrixImpl25.getColumnDimension();
        boolean boolean28 = bigMatrixImpl25.isSingular();
        bigMatrixImpl25.setScale((int) '#');
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        int int47 = bigMatrixImpl45.getColumnDimension();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        int int51 = bigDecimal49.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl45.scalarMultiply(bigDecimal49);
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        java.lang.String str65 = bigDecimal64.toString();
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal68 = bigDecimal67.stripTrailingZeros();
        int int69 = bigDecimal67.signum();
        java.math.BigDecimal[] bigDecimalArray70 = bigDecimal64.divideAndRemainder(bigDecimal67);
        java.math.BigDecimal bigDecimal72 = bigDecimal64.pow((int) 'a');
        java.math.BigInteger bigInteger73 = bigDecimal64.toBigIntegerExact();
        java.math.BigDecimal bigDecimal74 = bigDecimal62.add(bigDecimal64);
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal(0.0d);
        int int80 = bigDecimal79.intValue();
        java.math.BigDecimal bigDecimal81 = bigDecimal76.min(bigDecimal79);
        java.math.BigInteger bigInteger82 = bigDecimal76.toBigInteger();
        java.math.BigDecimal bigDecimal83 = new java.math.BigDecimal(bigInteger82);
        java.math.BigDecimal bigDecimal85 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal86 = bigDecimal85.stripTrailingZeros();
        float float87 = bigDecimal85.floatValue();
        java.math.BigDecimal bigDecimal88 = bigDecimal83.multiply(bigDecimal85);
        java.math.BigDecimal bigDecimal89 = bigDecimal83.negate();
        java.math.BigDecimal bigDecimal90 = bigDecimal74.add(bigDecimal89);
        java.math.BigDecimal bigDecimal91 = bigDecimal90.abs();
        org.apache.commons.math.linear.BigMatrix bigMatrix92 = bigMatrixImpl45.scalarAdd(bigDecimal91);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix93 = bigMatrixImpl25.multiply(bigMatrix92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertTrue("'" + float87 + "' != '" + 97.0f + "'", float87 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigMatrix92);
    }

    @Test
    public void test06327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06327");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.lang.String str35 = bigDecimal9.toString();
        java.math.BigDecimal bigDecimal36 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal38.divideAndRemainder(bigDecimal40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        double[] doubleArray44 = bigMatrixImpl42.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl42.copy();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger48 = bigDecimal47.unscaledValue();
        java.lang.String str49 = bigDecimal47.toPlainString();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.movePointRight(64);
        java.math.BigDecimal bigDecimal53 = bigDecimal51.movePointLeft((int) (short) 0);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = bigDecimal55.setScale(0);
        byte byte59 = bigDecimal58.byteValueExact();
        int int60 = bigDecimal58.precision();
        short short61 = bigDecimal58.shortValueExact();
        java.math.BigDecimal bigDecimal62 = bigDecimal51.multiply(bigDecimal58);
        long long63 = bigDecimal62.longValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl42.scalarMultiply(bigDecimal62);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal67 = bigDecimal9.divide(bigDecimal62, (int) (short) -2805, (int) (short) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: BigInteger divide by zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "100" + "'", str49, "100");
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + byte59 + "' != '" + (byte) 0 + "'", byte59 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) 0 + "'", short61 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(bigMatrix64);
    }

    @Test
    public void test06328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06328");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal21 = bigMatrixImpl14.getNorm();
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray34 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl36.transpose();
        boolean boolean38 = bigMatrixImpl36.isSingular();
        double[] doubleArray40 = bigMatrixImpl36.getColumnAsDoubleArray(0);
        int int41 = bigMatrixImpl36.getRoundingMode();
        boolean boolean42 = bigMatrixImpl36.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl36);
        int int44 = bigMatrixImpl14.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double47 = bigMatrixImpl14.getEntryAsDouble(32, (-100));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
    }

    @Test
    public void test06329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06329");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        double[][] doubleArray22 = realMatrix21.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.inverse();
        boolean boolean24 = realMatrix23.isSingular();
        double[][] doubleArray25 = realMatrix23.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix23.getColumnMatrix((-35));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test06330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06330");
        java.math.MathContext mathContext1 = null;
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(0.0d, mathContext1);
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger5 = bigDecimal4.unscaledValue();
        java.lang.String str6 = bigDecimal4.toPlainString();
        java.math.BigDecimal bigDecimal8 = bigDecimal4.movePointRight(64);
        java.math.BigDecimal bigDecimal9 = bigDecimal8.stripTrailingZeros();
        java.math.BigDecimal bigDecimal10 = bigDecimal2.divide(bigDecimal8);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        java.lang.String str15 = bigDecimal14.toString();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = bigDecimal17.stripTrailingZeros();
        int int19 = bigDecimal17.signum();
        java.math.BigDecimal[] bigDecimalArray20 = bigDecimal14.divideAndRemainder(bigDecimal17);
        java.math.BigDecimal bigDecimal22 = bigDecimal14.pow((int) 'a');
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        java.lang.String str25 = bigDecimal24.toString();
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal28 = bigDecimal27.stripTrailingZeros();
        int int29 = bigDecimal27.signum();
        java.math.BigDecimal[] bigDecimalArray30 = bigDecimal24.divideAndRemainder(bigDecimal27);
        java.math.BigDecimal bigDecimal32 = bigDecimal24.pow((int) 'a');
        java.math.BigInteger bigInteger33 = bigDecimal24.toBigIntegerExact();
        java.math.BigDecimal bigDecimal34 = bigDecimal22.add(bigDecimal24);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        float float46 = bigDecimal36.floatValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal22.add(bigDecimal36);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal50 = bigDecimal36.divideToIntegralValue(bigDecimal49);
        java.math.BigDecimal bigDecimal51 = bigDecimal12.divideToIntegralValue(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal8.multiply(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
    }

    @Test
    public void test06331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06331");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        double[][] doubleArray19 = bigMatrixImpl18.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl38.transpose();
        int int40 = bigMatrixImpl38.getColumnDimension();
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal43 = bigDecimal42.stripTrailingZeros();
        int int44 = bigDecimal42.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl38.scalarMultiply(bigDecimal42);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl38.getNorm();
        java.math.BigDecimal bigDecimal47 = bigDecimal21.remainder(bigDecimal46);
        short short48 = bigDecimal46.shortValueExact();
        boolean boolean49 = bigMatrixImpl18.equals((java.lang.Object) bigDecimal46);
        int[] intArray55 = new int[] { 10, (byte) 11, 400, (-32), (short) 388 };
        int[] intArray62 = new int[] { (byte) 6, (-35), 1, '#', (byte) 100, (byte) -32 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl18.getSubMatrix(intArray55, intArray62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 97.0f + "'", float23 == 97.0f);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) 400 + "'", short48 == (short) 400);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[10, 11, 400, -32, 388]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[6, -35, 1, 35, 100, -32]");
    }

    @Test
    public void test06332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06332");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        int int6 = realMatrix5.getColumnDimension();
        boolean boolean7 = realMatrix5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrix5.scalarMultiply((double) (byte) -100);
        double[] doubleArray14 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix15.operate(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix24.transpose();
        double[][] doubleArray26 = realMatrix24.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray26);
        double[] doubleArray29 = bigMatrixImpl27.getRowAsDoubleArray(0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = realMatrix5.solve(doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, 10.0, 0.0]");
    }

    @Test
    public void test06333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06333");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        byte byte12 = bigDecimal1.byteValueExact();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        java.lang.String str15 = bigDecimal14.toString();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = bigDecimal17.stripTrailingZeros();
        int int19 = bigDecimal17.signum();
        java.math.BigDecimal[] bigDecimalArray20 = bigDecimal14.divideAndRemainder(bigDecimal17);
        java.math.BigDecimal bigDecimal22 = bigDecimal14.pow((int) 'a');
        java.math.BigInteger bigInteger23 = bigDecimal14.toBigIntegerExact();
        float float24 = bigDecimal14.floatValue();
        double[] doubleArray29 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray29);
        double[] doubleArray35 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray35);
        double[] doubleArray37 = realMatrix30.operate(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray37);
        java.math.BigDecimal bigDecimal39 = bigMatrix38.getNorm();
        java.math.BigDecimal bigDecimal40 = bigDecimal14.subtract(bigDecimal39);
        int int41 = bigDecimal40.signum();
        java.math.BigInteger bigInteger42 = bigDecimal40.toBigInteger();
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray47 = bigDecimal44.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal49 = bigDecimal46.movePointLeft((-1));
        java.math.BigDecimal bigDecimal50 = bigDecimal40.max(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal46.stripTrailingZeros();
        java.math.BigDecimal bigDecimal52 = bigDecimal1.remainder(bigDecimal46);
        double double53 = bigDecimal1.doubleValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal55.min(bigDecimal58);
        java.math.BigDecimal[] bigDecimalArray61 = new java.math.BigDecimal[] { bigDecimal60 };
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        java.math.BigDecimal bigDecimal68 = bigDecimal63.min(bigDecimal66);
        java.math.BigDecimal[] bigDecimalArray69 = new java.math.BigDecimal[] { bigDecimal68 };
        java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal(0.0d);
        int int72 = bigDecimal71.intValue();
        java.math.BigDecimal bigDecimal74 = new java.math.BigDecimal(0.0d);
        int int75 = bigDecimal74.intValue();
        java.math.BigDecimal bigDecimal76 = bigDecimal71.min(bigDecimal74);
        java.math.BigDecimal[] bigDecimalArray77 = new java.math.BigDecimal[] { bigDecimal76 };
        java.math.BigDecimal[][] bigDecimalArray78 = new java.math.BigDecimal[][] { bigDecimalArray61, bigDecimalArray69, bigDecimalArray77 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray78);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray78);
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(0.0d);
        int int83 = bigDecimal82.intValue();
        java.math.BigDecimal bigDecimal85 = new java.math.BigDecimal(0.0d);
        int int86 = bigDecimal85.intValue();
        java.math.BigDecimal bigDecimal87 = bigDecimal82.min(bigDecimal85);
        java.math.BigInteger bigInteger88 = bigDecimal82.toBigInteger();
        java.math.BigDecimal bigDecimal89 = new java.math.BigDecimal(bigInteger88);
        java.math.BigDecimal bigDecimal91 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal92 = bigDecimal91.stripTrailingZeros();
        float float93 = bigDecimal91.floatValue();
        java.math.BigDecimal bigDecimal94 = bigDecimal89.multiply(bigDecimal91);
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrix80.scalarAdd(bigDecimal94);
        int int96 = bigDecimal94.intValue();
        java.math.BigDecimal bigDecimal97 = bigDecimal94.stripTrailingZeros();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal98 = bigDecimal1.divide(bigDecimal94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Division undefined");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.0f + "'", float24 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigDecimalArray77);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigInteger88);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 97.0f + "'", float93 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigMatrix95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(bigDecimal97);
    }

    @Test
    public void test06334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06334");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.min(bigDecimal7);
        java.math.BigDecimal[] bigDecimalArray10 = new java.math.BigDecimal[] { bigDecimal9 };
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal[][] bigDecimalArray27 = new java.math.BigDecimal[][] { bigDecimalArray10, bigDecimalArray18, bigDecimalArray26 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl2.setSubMatrix(bigDecimalArray27, (int) (byte) 10, (int) (byte) -11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigMatrix29);
    }

    @Test
    public void test06335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06335");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.min(bigDecimal7);
        float float15 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal1.pow((int) (short) 31464);
        java.lang.String str18 = bigDecimal1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
    }

    @Test
    public void test06336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06336");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl27.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrix64.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrix64.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrix66.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigMatrix66);
    }

    @Test
    public void test06337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06337");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal38.divideAndRemainder(bigDecimal40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        double[] doubleArray44 = bigMatrixImpl42.getRowAsDoubleArray(0);
        bigMatrixImpl42.setScale(1);
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.min(bigDecimal51);
        java.math.BigInteger bigInteger54 = bigDecimal48.toBigInteger();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(bigInteger54);
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        float float59 = bigDecimal57.floatValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal55.multiply(bigDecimal57);
        java.math.BigDecimal bigDecimal61 = bigDecimal55.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl42.scalarAdd(bigDecimal55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl27.preMultiply(bigMatrix62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 97.0f + "'", float59 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigMatrix62);
    }

    @Test
    public void test06338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06338");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl8.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = bigMatrixImpl8.getRowMatrix(0);
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[] doubleArray22 = new double[] { 1.0d, 100.0f };
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray26 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25 };
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray26);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray26);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl28.transpose();
        double[] doubleArray31 = bigMatrixImpl28.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str32 = bigMatrixImpl28.toString();
        int int33 = bigMatrixImpl28.getScale();
        boolean boolean34 = bigMatrixImpl28.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl28.getRowMatrix((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrix36.transpose();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(2805.0d);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrix37.scalarAdd(bigDecimal39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl8.solve(bigMatrix40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str32, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 64 + "'", int33 == 64);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix40);
    }

    @Test
    public void test06339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06339");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrix5.scalarAdd((double) (short) -2805);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrix5.getRowMatrix(5);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = realMatrix9.getRow((int) (byte) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test06340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06340");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl14.transpose();
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrix17.getData();
        java.math.BigDecimal bigDecimal19 = bigMatrix17.getNorm();
        java.math.BigDecimal bigDecimal21 = bigDecimal19.scaleByPowerOfTen((int) '#');
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(5);
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger27 = bigDecimal26.toBigInteger();
        java.math.BigDecimal bigDecimal28 = bigDecimal26.ulp();
        java.math.BigDecimal bigDecimal29 = bigDecimal23.min(bigDecimal28);
        java.math.BigDecimal bigDecimal30 = bigDecimal19.remainder(bigDecimal23);
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        java.lang.String str33 = bigDecimal32.toString();
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = bigDecimal35.stripTrailingZeros();
        int int37 = bigDecimal35.signum();
        java.math.BigDecimal[] bigDecimalArray38 = bigDecimal32.divideAndRemainder(bigDecimal35);
        java.math.BigDecimal bigDecimal40 = bigDecimal32.pow((int) 'a');
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        java.lang.String str43 = bigDecimal42.toString();
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.stripTrailingZeros();
        int int47 = bigDecimal45.signum();
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal42.divideAndRemainder(bigDecimal45);
        java.math.BigDecimal bigDecimal50 = bigDecimal42.pow((int) 'a');
        java.math.BigInteger bigInteger51 = bigDecimal42.toBigIntegerExact();
        java.math.BigDecimal bigDecimal52 = bigDecimal40.add(bigDecimal42);
        short short53 = bigDecimal42.shortValueExact();
        java.lang.String str54 = bigDecimal42.toString();
        java.math.BigDecimal bigDecimal55 = bigDecimal30.max(bigDecimal42);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 0 + "'", short53 == (short) 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertNotNull(bigDecimal55);
    }

    @Test
    public void test06341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06341");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.min(bigDecimal16);
        byte byte20 = bigDecimal19.byteValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 0 + "'", byte20 == (byte) 0);
    }

    @Test
    public void test06342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06342");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        boolean boolean10 = bigMatrixImpl8.isSquare();
        bigMatrixImpl8.setRoundingMode((int) (byte) 10);
        int int13 = bigMatrixImpl8.getRoundingMode();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.min(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal[][] bigDecimalArray38 = new java.math.BigDecimal[][] { bigDecimalArray21, bigDecimalArray29, bigDecimalArray37 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray38);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray38);
        int int42 = bigMatrixImpl41.getScale();
        java.math.BigDecimal bigDecimal43 = bigMatrixImpl41.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl8.scalarAdd(bigDecimal43);
        int int45 = bigMatrixImpl8.getRoundingMode();
        bigMatrixImpl8.setScale((int) (short) 35);
        double[][] doubleArray48 = bigMatrixImpl8.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal51 = bigMatrixImpl8.getEntry((-32), 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 64 + "'", int42 == 64);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test06343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06343");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        boolean boolean37 = bigDecimal20.equals((java.lang.Object) doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray33);
        double[] doubleArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = realMatrix41.operate(doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test06344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06344");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int6 = bigMatrixImpl5.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray7 = bigMatrixImpl5.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl5.copy();
        java.math.BigDecimal[][] bigDecimalArray9 = bigMatrixImpl5.getData();
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray22 = new double[][] { doubleArray12, doubleArray15, doubleArray18, doubleArray21 };
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl24.transpose();
        double[] doubleArray27 = bigMatrixImpl24.getRowAsDoubleArray((int) (short) 0);
        boolean boolean28 = bigMatrixImpl24.isSingular();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl24.getData();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl24.getNorm();
        java.math.BigDecimal bigDecimal31 = bigMatrixImpl24.getNorm();
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl24.getNorm();
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray45 = new double[][] { doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray45);
        boolean boolean47 = bigMatrix46.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrix46.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl24.subtract(bigMatrix46);
        java.math.BigDecimal[] bigDecimalArray51 = bigMatrix49.getRow((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl5.preMultiply(bigDecimalArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
    }

    @Test
    public void test06345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06345");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigInteger bigInteger26 = bigDecimal25.toBigIntegerExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl18.scalarAdd(bigDecimal25);
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray40 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39 };
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl42.transpose();
        double[] doubleArray45 = bigMatrixImpl42.getRowAsDoubleArray((int) (short) 0);
        boolean boolean46 = bigMatrixImpl42.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl42.copy();
        int int48 = bigMatrixImpl42.getScale();
        int int49 = bigMatrixImpl42.getColumnDimension();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        java.lang.String str52 = bigDecimal51.toString();
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal55 = bigDecimal54.stripTrailingZeros();
        int int56 = bigDecimal54.signum();
        java.math.BigDecimal[] bigDecimalArray57 = bigDecimal51.divideAndRemainder(bigDecimal54);
        java.math.BigDecimal bigDecimal59 = bigDecimal51.pow((int) 'a');
        java.math.BigInteger bigInteger60 = bigDecimal51.toBigIntegerExact();
        float float61 = bigDecimal51.floatValue();
        double[] doubleArray66 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix67 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray66);
        double[] doubleArray72 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix73 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray72);
        double[] doubleArray74 = realMatrix67.operate(doubleArray72);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray74);
        java.math.BigDecimal bigDecimal76 = bigMatrix75.getNorm();
        java.math.BigDecimal bigDecimal77 = bigDecimal51.subtract(bigDecimal76);
        int int78 = bigDecimal77.signum();
        java.math.BigInteger bigInteger79 = bigDecimal77.toBigInteger();
        java.math.BigDecimal bigDecimal81 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal83 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray84 = bigDecimal81.divideAndRemainder(bigDecimal83);
        java.math.BigDecimal bigDecimal86 = bigDecimal83.movePointLeft((-1));
        java.math.BigDecimal bigDecimal87 = bigDecimal77.max(bigDecimal83);
        org.apache.commons.math.linear.BigMatrix bigMatrix88 = bigMatrixImpl42.scalarMultiply(bigDecimal77);
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl18.add(bigMatrix88);
        java.math.BigDecimal bigDecimal90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl18.scalarAdd(bigDecimal90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 64 + "'", int48 == 64);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigMatrix88);
        org.junit.Assert.assertNotNull(bigMatrix89);
    }

    @Test
    public void test06346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06346");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 100);
        double[] doubleArray4 = new double[] { 1.0d, 100.0f };
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray14 = new double[][] { doubleArray4, doubleArray7, doubleArray10, doubleArray13 };
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray14);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray14);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl16.transpose();
        double[] doubleArray19 = bigMatrixImpl16.getRowAsDoubleArray((int) (short) 0);
        boolean boolean20 = bigMatrixImpl16.isSingular();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal("100");
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl16.scalarMultiply(bigDecimal22);
        boolean boolean24 = bigDecimal1.equals((java.lang.Object) bigDecimal22);
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray37 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl39.transpose();
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl39.getNorm();
        double[] doubleArray48 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray55 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray62 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray69 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray70 = new double[][] { doubleArray48, doubleArray55, doubleArray62, doubleArray69 };
        org.apache.commons.math.linear.RealMatrix realMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray70);
        double[][] doubleArray72 = realMatrix71.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix73 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray72);
        boolean boolean74 = bigDecimal41.equals((java.lang.Object) realMatrix73);
        java.math.BigDecimal bigDecimal76 = bigDecimal41.scaleByPowerOfTen((int) (short) -1);
        java.math.BigDecimal bigDecimal78 = bigDecimal41.setScale(0);
        java.math.MathContext mathContext79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal80 = bigDecimal1.divideToIntegralValue(bigDecimal78, mathContext79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigDecimal78);
    }

    @Test
    public void test06347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06347");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal31 = bigDecimal30.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.scalarMultiply(bigDecimal30);
        java.lang.String str33 = bigDecimal30.toPlainString();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.min(bigDecimal38);
        java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal40 };
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal48 };
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal56 = bigDecimal51.min(bigDecimal54);
        java.math.BigDecimal[] bigDecimalArray57 = new java.math.BigDecimal[] { bigDecimal56 };
        java.math.BigDecimal[][] bigDecimalArray58 = new java.math.BigDecimal[][] { bigDecimalArray41, bigDecimalArray49, bigDecimalArray57 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray58);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray58);
        java.math.BigDecimal[][] bigDecimalArray62 = bigMatrixImpl61.getDataRef();
        java.math.BigDecimal bigDecimal63 = bigMatrixImpl61.getNorm();
        int int64 = bigMatrixImpl61.getColumnDimension();
        java.lang.String str65 = bigMatrixImpl61.toString();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        java.lang.String str68 = bigDecimal67.toString();
        java.math.BigDecimal bigDecimal70 = bigDecimal67.setScale(0);
        byte byte71 = bigDecimal70.byteValueExact();
        int int72 = bigDecimal70.precision();
        int int73 = bigDecimal70.intValueExact();
        short short74 = bigDecimal70.shortValueExact();
        java.math.BigInteger bigInteger75 = bigDecimal70.unscaledValue();
        java.math.BigDecimal bigDecimal77 = java.math.BigDecimal.valueOf((long) 4);
        java.math.BigDecimal bigDecimal78 = bigDecimal70.min(bigDecimal77);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl61.scalarMultiply(bigDecimal70);
        int int80 = bigDecimal30.compareTo(bigDecimal70);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100" + "'", str33, "100");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str65, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertTrue("'" + byte71 + "' != '" + (byte) 0 + "'", byte71 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) 0 + "'", short74 == (short) 0);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test06348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06348");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.getSubMatrix((-35), (int) (byte) 110, (int) (short) 388, (int) (short) -100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test06349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06349");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        java.math.BigDecimal bigDecimal6 = bigDecimal3.movePointLeft((-1));
        long long7 = bigDecimal6.longValueExact();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger10 = bigDecimal9.unscaledValue();
        java.lang.String str11 = bigDecimal9.toPlainString();
        java.math.BigDecimal bigDecimal13 = bigDecimal9.movePointRight(64);
        boolean boolean14 = bigDecimal6.equals((java.lang.Object) 64);
        java.math.BigDecimal bigDecimal16 = bigDecimal6.movePointRight(0);
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        java.math.MathContext mathContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal19 = bigDecimal17.plus(mathContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 970L + "'", long7 == 970L);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100" + "'", str11, "100");
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
    }

    @Test
    public void test06350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06350");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal36 = bigDecimal23.pow((int) ' ');
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        java.lang.String str39 = bigDecimal38.toString();
        java.math.BigDecimal bigDecimal41 = bigDecimal38.setScale(0);
        double[] doubleArray46 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix47 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray46);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray46);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.scalarAdd((double) 6);
        int int51 = realMatrix48.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrix48.scalarAdd(10.0d);
        double[] doubleArray58 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix59 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray58);
        double double60 = realMatrix59.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix59.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrix53.preMultiply(realMatrix62);
        boolean boolean64 = bigDecimal41.equals((java.lang.Object) realMatrix53);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrix53.transpose();
        double[] doubleArray67 = realMatrix53.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrix53.scalarMultiply((double) 100);
        boolean boolean70 = bigDecimal23.equals((java.lang.Object) realMatrix69);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix69.scalarAdd((double) 1L);
        boolean boolean73 = realMatrix69.isSingular();
        double[] doubleArray75 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray75);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray75);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray75);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrix69.multiply(realMatrix78);
        double[] doubleArray84 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix85 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray84);
        double[] doubleArray90 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix91 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray90);
        double[] doubleArray92 = realMatrix85.operate(doubleArray90);
        org.apache.commons.math.linear.BigMatrix bigMatrix93 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray92);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray95 = realMatrix69.solve(doubleArray92);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 52.0d + "'", double60 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[62.0]");
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix93);
        org.junit.Assert.assertNotNull(bigMatrix94);
    }

    @Test
    public void test06351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06351");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        double[][] doubleArray22 = realMatrix21.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.inverse();
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        double double42 = realMatrix41.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrix41.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix35.preMultiply(realMatrix44);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 1.0f);
        double[] doubleArray52 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix53 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray52);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrix54.scalarAdd((double) 6);
        int int57 = realMatrix54.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix54.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix47.preMultiply(realMatrix54);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix47.copy();
        boolean boolean62 = realMatrix61.isSquare();
        int int63 = realMatrix61.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrix21.add(realMatrix61);
        double[] doubleArray66 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray66);
        double[] doubleArray68 = realMatrix21.operate(doubleArray66);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[7.5116889E7]");
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigMatrix71);
    }

    @Test
    public void test06352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06352");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        boolean boolean23 = realMatrix7.isSingular();
        int int24 = realMatrix7.getRowDimension();
        double[][] doubleArray25 = realMatrix7.getData();
        double[] doubleArray30 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 6);
        int int35 = realMatrix32.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix32.scalarAdd(10.0d);
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double double44 = realMatrix43.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix43.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix37.preMultiply(realMatrix46);
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrix47.scalarAdd((double) 1.0f);
        double[] doubleArray54 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix55 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix56.scalarAdd((double) 6);
        int int59 = realMatrix56.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix56.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix49.preMultiply(realMatrix56);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrix49.copy();
        boolean boolean64 = realMatrix63.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrix63.transpose();
        double[] doubleArray70 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray70);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray70);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrix72.scalarAdd((double) 6);
        double double75 = realMatrix72.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrix72.copy();
        boolean boolean77 = realMatrix76.isSquare();
        int int78 = realMatrix76.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrix63.preMultiply(realMatrix76);
        int int80 = realMatrix63.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrix7.multiply(realMatrix63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrix81.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 63.0d + "'", double75 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(realMatrix81);
    }

    @Test
    public void test06353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06353");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal31 = bigMatrixImpl27.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setScale((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl27.getColumnMatrix(0);
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        double[] doubleArray54 = bigMatrixImpl51.getRowAsDoubleArray((int) (short) 0);
        boolean boolean55 = bigMatrixImpl51.isSingular();
        java.math.BigDecimal[][] bigDecimalArray56 = bigMatrixImpl51.getDataRef();
        int int57 = bigMatrixImpl51.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl27.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
    }

    @Test
    public void test06354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06354");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        boolean boolean43 = bigMatrixImpl25.isSquare();
        int int44 = bigMatrixImpl25.getColumnDimension();
        double[] doubleArray46 = bigMatrixImpl25.getColumnAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray46);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray46);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray46);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigMatrix49);
    }

    @Test
    public void test06355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06355");
        java.math.BigInteger bigInteger0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(bigInteger0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06356");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[] bigDecimalArray18 = bigMatrix16.getColumn(0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        int[] intArray21 = new int[] {};
        int[] intArray23 = new int[] { 110 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl19.getSubMatrix(intArray21, intArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix16);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[110]");
    }

    @Test
    public void test06357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06357");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        bigMatrixImpl25.setRoundingMode(0);
        double[] doubleArray46 = bigMatrixImpl25.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str47 = bigMatrixImpl25.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger51 = bigDecimal50.unscaledValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger53 = bigDecimal50.toBigInteger();
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl25.scalarMultiply(bigDecimal50);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray58 = realMatrix56.getColumn(4);
        double[][] doubleArray59 = realMatrix56.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix56.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray64 = realMatrix62.getColumn(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray64);
        double[] doubleArray66 = realMatrix60.preMultiply(doubleArray64);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl25.solve(bigMatrix67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str47, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix67);
    }

    @Test
    public void test06358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06358");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(bigInteger29);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.multiply(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.negate();
        java.math.BigDecimal bigDecimal37 = bigDecimal21.add(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        float float41 = bigDecimal39.floatValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigInteger bigInteger63 = bigDecimal54.toBigIntegerExact();
        java.math.BigDecimal bigDecimal64 = bigDecimal52.add(bigDecimal54);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger68 = bigDecimal67.unscaledValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal65.add(bigDecimal67);
        java.math.BigDecimal bigDecimal70 = bigDecimal54.multiply(bigDecimal65);
        java.math.BigDecimal bigDecimal71 = bigDecimal42.divide(bigDecimal65);
        java.math.BigDecimal bigDecimal72 = bigDecimal36.remainder(bigDecimal42);
        double double73 = bigDecimal72.doubleValue();
        java.lang.String str74 = bigDecimal72.toString();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal("970");
        java.math.BigDecimal bigDecimal77 = bigDecimal72.divide(bigDecimal76);
        java.math.BigDecimal bigDecimal78 = bigDecimal77.plus();
        long long79 = bigDecimal77.longValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 97.0f + "'", float41 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0" + "'", str74, "0");
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
    }

    @Test
    public void test06359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06359");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        java.math.BigDecimal[] bigDecimalArray16 = bigMatrix14.getRow(1);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal26.min(bigDecimal29);
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal[][] bigDecimalArray41 = new java.math.BigDecimal[][] { bigDecimalArray24, bigDecimalArray32, bigDecimalArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        int int45 = bigMatrixImpl44.getColumnDimension();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal55.min(bigDecimal58);
        java.math.BigDecimal[] bigDecimalArray61 = new java.math.BigDecimal[] { bigDecimal60 };
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        java.math.BigDecimal bigDecimal68 = bigDecimal63.min(bigDecimal66);
        java.math.BigDecimal[] bigDecimalArray69 = new java.math.BigDecimal[] { bigDecimal68 };
        java.math.BigDecimal[][] bigDecimalArray70 = new java.math.BigDecimal[][] { bigDecimalArray53, bigDecimalArray61, bigDecimalArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray70);
        boolean boolean73 = bigMatrix72.isSingular();
        boolean boolean74 = bigMatrixImpl44.equals((java.lang.Object) boolean73);
        java.math.BigDecimal[][] bigDecimalArray75 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray75);
        java.math.BigDecimal[] bigDecimalArray78 = bigMatrixImpl76.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray79 = bigMatrix14.preMultiply(bigDecimalArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
    }

    @Test
    public void test06360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06360");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        java.lang.String str64 = bigDecimal63.toString();
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal67 = bigDecimal66.stripTrailingZeros();
        int int68 = bigDecimal66.signum();
        java.math.BigDecimal[] bigDecimalArray69 = bigDecimal63.divideAndRemainder(bigDecimal66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        int int71 = bigMatrixImpl70.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl70.transpose();
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl70.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl37.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl74);
        int int76 = bigMatrixImpl74.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl74.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
    }

    @Test
    public void test06361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06361");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl27.getEntry((int) (short) 0, 0);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl58.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray60 = bigMatrixImpl58.getDataRef();
        bigMatrixImpl58.setScale((int) 'a');
        java.math.BigDecimal[][] bigDecimalArray63 = bigMatrixImpl58.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl27.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl58);
        int int65 = bigMatrixImpl27.getRoundingMode();
        int int66 = bigMatrixImpl27.getRoundingMode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
    }

    @Test
    public void test06362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06362");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix5.multiply(realMatrix19);
        double double23 = realMatrix19.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix19.getRowMatrix((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix25.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix26.getRowMatrix((int) (byte) 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 63.0d + "'", double23 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
    }

    @Test
    public void test06363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06363");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl14.getDataRef();
        boolean boolean21 = bigMatrixImpl14.isSquare();
        double[] doubleArray26 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray26);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix28.scalarAdd((double) 6);
        int int31 = realMatrix28.getRowDimension();
        double[] doubleArray33 = realMatrix28.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray35 = bigMatrixImpl14.solve(doubleArray33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test06364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06364");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl18.getColumn(0);
        int int21 = bigMatrixImpl18.getRoundingMode();
        int int22 = bigMatrixImpl18.getScale();
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl18.getNorm();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.min(bigDecimal28);
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal[][] bigDecimalArray48 = new java.math.BigDecimal[][] { bigDecimalArray31, bigDecimalArray39, bigDecimalArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl51.getDataRef();
        java.math.BigDecimal bigDecimal53 = bigMatrixImpl51.getNorm();
        int int54 = bigMatrixImpl51.getColumnDimension();
        java.math.BigDecimal[] bigDecimalArray56 = bigMatrixImpl51.getColumn(0);
        boolean boolean57 = bigMatrixImpl18.equals((java.lang.Object) bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray56);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigMatrix58);
    }

    @Test
    public void test06365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06365");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl25.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl25.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl25.transpose();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        java.lang.String str33 = bigDecimal32.toString();
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = bigDecimal35.stripTrailingZeros();
        int int37 = bigDecimal35.signum();
        java.math.BigDecimal[] bigDecimalArray38 = bigDecimal32.divideAndRemainder(bigDecimal35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl25.preMultiply(bigDecimalArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
    }

    @Test
    public void test06366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06366");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray9 = realMatrix7.getColumn(0);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getDataRef();
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl37.getNorm();
        boolean boolean40 = bigMatrixImpl37.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl37.copy();
        double[] doubleArray43 = bigMatrixImpl37.getColumnAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray47 = realMatrix7.operate(doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(realMatrix46);
    }

    @Test
    public void test06367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06367");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        float float13 = bigDecimal11.floatValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.divideToIntegralValue(bigDecimal11);
        java.math.BigDecimal bigDecimal15 = bigDecimal11.ulp();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger18 = bigDecimal17.unscaledValue();
        short short19 = bigDecimal17.shortValueExact();
        java.lang.String str20 = bigDecimal17.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal17);
        java.lang.String str22 = bigDecimal15.toEngineeringString();
        java.math.BigDecimal bigDecimal23 = bigDecimal15.abs();
        short short24 = bigDecimal15.shortValueExact();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 97.0f + "'", float13 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 100 + "'", short19 == (short) 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + short24 + "' != '" + (short) 1 + "'", short24 == (short) 1);
    }

    @Test
    public void test06368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06368");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException1 = new org.apache.commons.math.linear.InvalidMatrixException("-112");
        java.lang.Throwable[] throwableArray2 = invalidMatrixException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test06369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06369");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        double[] doubleArray30 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 6);
        int int35 = realMatrix32.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix32.scalarAdd(10.0d);
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double double44 = realMatrix43.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix43.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix37.preMultiply(realMatrix46);
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrix46.scalarAdd((double) 5);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrix49.scalarMultiply((double) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrix25.solve(realMatrix51);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
    }

    @Test
    public void test06370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06370");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal8 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal9 = bigDecimal8.negate();
        java.math.BigDecimal bigDecimal10 = bigDecimal9.ulp();
        java.math.BigDecimal bigDecimal12 = bigDecimal10.pow(10);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal12);
    }

    @Test
    public void test06371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06371");
        char[] charArray1 = new char[] { '4' };
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(charArray1);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray1);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray1, (int) (byte) 6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[4]");
    }

    @Test
    public void test06372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06372");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl27.copy();
        int int65 = bigMatrixImpl27.getRoundingMode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
    }

    @Test
    public void test06373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06373");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl17.getRow((int) (byte) 0);
        bigMatrixImpl17.setRoundingMode((-100));
        int int43 = bigMatrixImpl17.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl17.getColumnMatrix((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-100) + "'", int43 == (-100));
    }

    @Test
    public void test06374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06374");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix9.getColumnMatrix((int) (byte) 0);
        double double12 = realMatrix11.getTrace();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
    }

    @Test
    public void test06375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06375");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal[][] bigDecimalArray36 = bigMatrixImpl27.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = bigMatrixImpl27.getRowAsDoubleArray((int) (byte) -32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
    }

    @Test
    public void test06376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06376");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(5);
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger5 = bigDecimal4.toBigInteger();
        java.math.BigDecimal bigDecimal6 = bigDecimal4.ulp();
        java.math.BigDecimal bigDecimal7 = bigDecimal1.min(bigDecimal6);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(4);
        int int10 = bigDecimal9.intValueExact();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        java.lang.String str13 = bigDecimal12.toString();
        java.math.BigDecimal bigDecimal15 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal16 = bigDecimal15.stripTrailingZeros();
        int int17 = bigDecimal15.signum();
        java.math.BigDecimal[] bigDecimalArray18 = bigDecimal12.divideAndRemainder(bigDecimal15);
        java.math.BigDecimal bigDecimal20 = bigDecimal12.pow((int) 'a');
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal26 = bigDecimal25.stripTrailingZeros();
        int int27 = bigDecimal25.signum();
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal22.divideAndRemainder(bigDecimal25);
        java.math.BigDecimal bigDecimal30 = bigDecimal22.pow((int) 'a');
        java.math.BigInteger bigInteger31 = bigDecimal22.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = bigDecimal20.add(bigDecimal22);
        java.math.BigDecimal bigDecimal33 = bigDecimal20.abs();
        double double34 = bigDecimal33.doubleValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal33.movePointRight(97);
        java.math.BigDecimal bigDecimal37 = bigDecimal9.max(bigDecimal36);
        java.math.BigDecimal bigDecimal38 = bigDecimal6.min(bigDecimal36);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.lang.String str49 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal51 = bigDecimal40.scaleByPowerOfTen((int) ' ');
        java.math.MathContext mathContext52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray53 = bigDecimal36.divideAndRemainder(bigDecimal51, mathContext52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(bigDecimal51);
    }

    @Test
    public void test06377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06377");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix23.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix23.inverse();
        int int26 = realMatrix23.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = realMatrix23.getColumn((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test06378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06378");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(charArray2, 0, (int) (short) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test06379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06379");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode(10);
        int int31 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        java.lang.String str34 = bigDecimal33.toString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        int int38 = bigDecimal36.signum();
        java.math.BigDecimal[] bigDecimalArray39 = bigDecimal33.divideAndRemainder(bigDecimal36);
        java.math.BigDecimal bigDecimal41 = bigDecimal33.pow((int) 'a');
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal43.pow((int) 'a');
        java.math.BigInteger bigInteger52 = bigDecimal43.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal41.add(bigDecimal43);
        java.math.BigDecimal bigDecimal55 = bigDecimal53.pow((int) (byte) 97);
        int int56 = bigDecimal53.scale();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int59 = bigDecimal58.signum();
        java.math.BigDecimal bigDecimal60 = bigDecimal53.add(bigDecimal58);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl27.scalarAdd(bigDecimal58);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal62 = bigMatrixImpl27.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigMatrix61);
    }

    @Test
    public void test06380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06380");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl17.getRow((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl17.getSubMatrix((int) (byte) -11, (int) ' ', (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
    }

    @Test
    public void test06381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06381");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix23.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix23.inverse();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix23.getColumnMatrix(3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test06382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06382");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        double[] doubleArray6 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray6);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray6);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray6);
        double[] doubleArray14 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix15.operate(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray22);
        double[] doubleArray24 = realMatrix9.preMultiply(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix25.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix25.inverse();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal[][] bigDecimalArray52 = new java.math.BigDecimal[][] { bigDecimalArray35, bigDecimalArray43, bigDecimalArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        int int56 = bigMatrixImpl55.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl55.copy();
        double[] doubleArray59 = bigMatrixImpl55.getRowAsDoubleArray((int) (byte) 1);
        double[] doubleArray60 = realMatrix27.operate(doubleArray59);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray60);
        double[] doubleArray62 = realMatrix1.solve(doubleArray60);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray62);
        double[][] doubleArray65 = bigMatrix64.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray65);
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(bigMatrix66);
    }

    @Test
    public void test06383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06383");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double9 = realMatrix8.getTrace();
        boolean boolean10 = realMatrix8.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrix8.scalarMultiply((double) 100);
        int int13 = realMatrix12.getColumnDimension();
        boolean boolean14 = realMatrix12.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix12.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix5.multiply(realMatrix15);
        boolean boolean17 = realMatrix15.isSingular();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06384");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode(10);
        int int31 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray39, bigDecimalArray47, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl57.getDataRef();
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[] doubleArray64 = new double[] { 1.0d, 100.0f };
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[] doubleArray70 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray71 = new double[][] { doubleArray61, doubleArray64, doubleArray67, doubleArray70 };
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray71);
        boolean boolean73 = bigMatrixImpl57.equals((java.lang.Object) bigMatrix72);
        int int74 = bigMatrixImpl57.getRowDimension();
        double double77 = bigMatrixImpl57.getEntryAsDouble(1, 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl57.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl27.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl57);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrix79.copy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 64 + "'", int31 == 64);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(bigMatrix80);
    }

    @Test
    public void test06385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06385");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigInteger bigInteger5 = bigDecimal2.toBigInteger();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(bigInteger5, 32);
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger10 = bigDecimal9.unscaledValue();
        java.math.BigDecimal bigDecimal11 = bigDecimal9.stripTrailingZeros();
        boolean boolean12 = bigDecimal7.equals((java.lang.Object) bigDecimal11);
        java.math.MathContext mathContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal14 = bigDecimal11.abs(mathContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06386");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException1 = new org.apache.commons.math.linear.MatrixIndexException("100");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException3 = new org.apache.commons.math.linear.MatrixIndexException("org.apache.commons.math.linear.MatrixIndexException: ");
        java.lang.Throwable[] throwableArray4 = matrixIndexException3.getSuppressed();
        matrixIndexException1.addSuppressed((java.lang.Throwable) matrixIndexException3);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException7 = new org.apache.commons.math.linear.MatrixIndexException("100");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException8 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException9 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException8.addSuppressed((java.lang.Throwable) invalidMatrixException9);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException12 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException8.addSuppressed((java.lang.Throwable) matrixIndexException12);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException15 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException12.addSuppressed((java.lang.Throwable) matrixIndexException15);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException17 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException18 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException17.addSuppressed((java.lang.Throwable) invalidMatrixException18);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException21 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException17.addSuppressed((java.lang.Throwable) matrixIndexException21);
        matrixIndexException12.addSuppressed((java.lang.Throwable) invalidMatrixException17);
        matrixIndexException7.addSuppressed((java.lang.Throwable) invalidMatrixException17);
        java.lang.Throwable[] throwableArray25 = invalidMatrixException17.getSuppressed();
        matrixIndexException1.addSuppressed((java.lang.Throwable) invalidMatrixException17);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test06387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06387");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = bigMatrix1.inverse();
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrix2.copy();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getDataRef();
        java.math.BigDecimal bigDecimal33 = bigMatrixImpl31.getNorm();
        boolean boolean34 = bigMatrixImpl31.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl31.copy();
        double[] doubleArray37 = bigMatrixImpl31.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray39 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray40 = new java.lang.String[][] { strArray39 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(strArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl31.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl41);
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigInteger bigInteger63 = bigDecimal54.toBigIntegerExact();
        java.math.BigDecimal bigDecimal64 = bigDecimal52.add(bigDecimal54);
        java.math.BigInteger bigInteger65 = bigDecimal64.unscaledValue();
        java.math.BigInteger bigInteger66 = bigDecimal64.toBigIntegerExact();
        boolean boolean67 = bigMatrixImpl31.equals((java.lang.Object) bigInteger66);
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl31.copy();
        java.math.BigDecimal[] bigDecimalArray70 = bigMatrixImpl31.getRow((int) (byte) 1);
        java.math.BigDecimal[] bigDecimalArray71 = bigMatrix2.operate(bigDecimalArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray70);
        boolean boolean73 = bigMatrix72.isSquare();
        org.junit.Assert.assertNotNull(bigMatrix1);
        org.junit.Assert.assertNotNull(bigMatrix2);
        org.junit.Assert.assertNotNull(bigMatrix3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigInteger65);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test06388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06388");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl14.getRowMatrix((int) (short) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal20);
    }

    @Test
    public void test06389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06389");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 97, 4);
        boolean boolean3 = bigMatrixImpl2.isSingular();
        boolean boolean5 = bigMatrixImpl2.equals((java.lang.Object) "org.apache.commons.math.linear.InvalidMatrixException");
        // The following exception was thrown during execution in test generation
        try {
            double double8 = bigMatrixImpl2.getEntryAsDouble((int) (byte) -1, (-3));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06390");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal21 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        java.lang.String str25 = bigDecimal24.toString();
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal28 = bigDecimal27.stripTrailingZeros();
        int int29 = bigDecimal27.signum();
        java.math.BigDecimal[] bigDecimalArray30 = bigDecimal24.divideAndRemainder(bigDecimal27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl31.getNorm();
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.ZERO;
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.min(bigDecimal38);
        java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal40 };
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal48 };
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal56 = bigDecimal51.min(bigDecimal54);
        java.math.BigDecimal[] bigDecimalArray57 = new java.math.BigDecimal[] { bigDecimal56 };
        java.math.BigDecimal[][] bigDecimalArray58 = new java.math.BigDecimal[][] { bigDecimalArray41, bigDecimalArray49, bigDecimalArray57 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray58);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray58);
        java.math.BigDecimal[][] bigDecimalArray62 = bigMatrixImpl61.getDataRef();
        java.math.BigDecimal bigDecimal63 = bigMatrixImpl61.getNorm();
        boolean boolean64 = bigMatrixImpl61.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl61.copy();
        double[] doubleArray67 = bigMatrixImpl61.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray69 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray70 = new java.lang.String[][] { strArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(strArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl61.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl71);
        java.math.BigDecimal bigDecimal73 = bigMatrixImpl61.getNorm();
        java.math.BigDecimal[][] bigDecimalArray74 = bigMatrixImpl61.getData();
        int int75 = bigMatrixImpl61.getScale();
        boolean boolean76 = bigDecimal33.equals((java.lang.Object) bigMatrixImpl61);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl31.scalarMultiply(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray79 = bigMatrixImpl31.getRow(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray79);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray79);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray79);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray83 = bigMatrixImpl14.operate(bigDecimalArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 64 + "'", int75 == 64);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
        org.junit.Assert.assertNotNull(bigMatrix80);
    }

    @Test
    public void test06391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06391");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl27.copy();
        boolean boolean37 = bigMatrixImpl27.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal40 = bigMatrixImpl27.getEntry((int) (byte) -54, 2881);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test06392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06392");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal26 = bigDecimal25.stripTrailingZeros();
        int int27 = bigDecimal25.signum();
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal22.divideAndRemainder(bigDecimal25);
        java.math.BigDecimal bigDecimal30 = bigDecimal22.pow((int) 'a');
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.divideToIntegralValue(bigDecimal32);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl14.scalarMultiply(bigDecimal32);
        int int37 = bigMatrixImpl14.getRoundingMode();
        double double40 = bigMatrixImpl14.getEntryAsDouble((int) (short) 0, (int) (short) 1);
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl14.getData();
        int int42 = bigMatrixImpl14.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl14.getSubMatrix((int) (short) 4, (int) '#', (int) (short) 2805, (int) (short) 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
    }

    @Test
    public void test06393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06393");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrix15.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl17.getColumnMatrix((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl17.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray20);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigMatrix22);
    }

    @Test
    public void test06394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06394");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) -11, (int) (byte) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06395");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        boolean boolean27 = bigDecimal4.equals((java.lang.Object) realMatrix16);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix16.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix28.scalarMultiply((double) (byte) 97);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.copy();
        int int32 = realMatrix28.getRowDimension();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        java.lang.String str35 = bigDecimal34.toString();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        int int39 = bigDecimal37.signum();
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal34.divideAndRemainder(bigDecimal37);
        java.math.BigDecimal bigDecimal42 = bigDecimal34.pow((int) 'a');
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigInteger bigInteger53 = bigDecimal44.toBigIntegerExact();
        java.math.BigDecimal bigDecimal54 = bigDecimal42.add(bigDecimal44);
        double[] doubleArray59 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix60 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray59);
        double[] doubleArray65 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray65);
        double[] doubleArray67 = realMatrix60.operate(doubleArray65);
        boolean boolean68 = bigDecimal44.equals((java.lang.Object) doubleArray65);
        double[] doubleArray69 = realMatrix28.operate(doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray65);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[3415.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix70);
    }

    @Test
    public void test06396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06396");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(400);
    }

    @Test
    public void test06397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06397");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal2 = bigMatrix1.getDeterminant();
        java.math.BigDecimal bigDecimal3 = bigMatrix1.getTrace();
        java.lang.String[] strArray5 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray5 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray6);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray6);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray6);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray6);
        org.apache.commons.math.linear.BigMatrix bigMatrix11 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray6);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(strArray6);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray6);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray6);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray6);
        java.math.BigDecimal bigDecimal16 = bigMatrixImpl15.getTrace();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrix1.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(bigMatrix11);
        org.junit.Assert.assertNotNull(bigDecimal16);
    }

    @Test
    public void test06398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06398");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) (short) -1);
        java.lang.String str2 = bigDecimal1.toPlainString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1");
    }

    @Test
    public void test06399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06399");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        boolean boolean17 = bigMatrixImpl14.isSquare();
        int int18 = bigMatrixImpl14.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
    }

    @Test
    public void test06400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06400");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = bigDecimal21.pow((int) (byte) 97);
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger26 = bigDecimal25.unscaledValue();
        short short27 = bigDecimal25.shortValueExact();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.divide(bigDecimal25);
        byte byte29 = bigDecimal25.byteValueExact();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.plus();
        java.math.MathContext mathContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) (short) -100, mathContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 100 + "'", short27 == (short) 100);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 100 + "'", byte29 == (byte) 100);
        org.junit.Assert.assertNotNull(bigDecimal30);
    }

    @Test
    public void test06401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06401");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        boolean boolean2 = bigMatrix1.isSquare();
        double[][] doubleArray3 = bigMatrix1.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal4 = bigMatrix1.getDeterminant();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        java.lang.String str9 = bigDecimal8.toString();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        int int13 = bigDecimal11.signum();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal8.divideAndRemainder(bigDecimal11);
        java.math.BigDecimal bigDecimal16 = bigDecimal8.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal6, bigDecimal8 };
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray17);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray24 = bigDecimal21.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl19.preMultiply(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray29 = bigMatrix1.preMultiply(bigDecimalArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigMatrix27);
    }

    @Test
    public void test06402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06402");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal31 = bigDecimal30.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.scalarMultiply(bigDecimal30);
        java.math.BigInteger bigInteger33 = bigDecimal30.unscaledValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal((long) (byte) -100);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.subtract(bigDecimal35);
        float float37 = bigDecimal30.floatValue();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal39 = bigDecimal30.pow((-100));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Invalid operation");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 100.0f + "'", float37 == 100.0f);
    }

    @Test
    public void test06403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06403");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrix15.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
        int int18 = bigMatrixImpl17.getRoundingMode();
        java.math.BigDecimal bigDecimal19 = bigMatrixImpl17.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = bigMatrixImpl17.getRow(2);
        boolean boolean22 = bigMatrixImpl17.isSquare();
        boolean boolean23 = bigMatrixImpl17.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06404");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        double[][] doubleArray29 = bigMatrixImpl27.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray29);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray29);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(bigMatrix31);
    }

    @Test
    public void test06405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06405");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(bigInteger2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(bigInteger2);
        float float5 = bigDecimal4.floatValue();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 100.0f + "'", float5 == 100.0f);
    }

    @Test
    public void test06406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06406");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl11.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is singular");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix10);
    }

    @Test
    public void test06407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06407");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        double[][] doubleArray11 = bigMatrixImpl8.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = bigMatrix12.getColumnAsDoubleArray(6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(bigMatrix12);
    }

    @Test
    public void test06408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06408");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("-11");
        java.math.MathContext mathContext3 = null;
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal((double) (byte) 0, mathContext3);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal11 = bigDecimal6.min(bigDecimal9);
        java.math.BigInteger bigInteger12 = bigDecimal6.toBigInteger();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(bigInteger12);
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(bigInteger12);
        java.math.BigDecimal bigDecimal15 = bigDecimal4.add(bigDecimal14);
        java.math.BigDecimal bigDecimal17 = bigDecimal14.movePointLeft(0);
        java.math.MathContext mathContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal19 = bigDecimal1.remainder(bigDecimal17, mathContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
    }

    @Test
    public void test06409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06409");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.stripTrailingZeros();
        java.math.BigDecimal bigDecimal29 = bigDecimal27.movePointLeft(97);
        java.math.MathContext mathContext30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal31 = bigDecimal27.negate(mathContext30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal29);
    }

    @Test
    public void test06410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06410");
        double[] doubleArray1 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix2 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray1);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray1);
        org.apache.commons.math.linear.RealMatrix realMatrix4 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray1);
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        double[][] doubleArray27 = realMatrix26.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix26.inverse();
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix35.scalarAdd((double) 6);
        int int38 = realMatrix35.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix35.scalarAdd(10.0d);
        double[] doubleArray45 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix46 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray45);
        double double47 = realMatrix46.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrix46.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix40.preMultiply(realMatrix49);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrix50.scalarAdd((double) 1.0f);
        double[] doubleArray57 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray57);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray57);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix59.scalarAdd((double) 6);
        int int62 = realMatrix59.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrix59.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrix52.preMultiply(realMatrix59);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrix52.copy();
        boolean boolean67 = realMatrix66.isSquare();
        int int68 = realMatrix66.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrix26.add(realMatrix66);
        double[] doubleArray71 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix72 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray71);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray71);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray71);
        double[] doubleArray75 = realMatrix26.solve(doubleArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray71);
        double[] doubleArray77 = realMatrix4.operate(doubleArray71);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrix4.scalarAdd(86670.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrix79.getColumnMatrix(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix2);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[7.5116889E7]");
        org.junit.Assert.assertNotNull(realMatrix79);
    }

    @Test
    public void test06411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06411");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarAdd(bigDecimal38);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl27.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl27.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
    }

    @Test
    public void test06412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06412");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        long long8 = bigDecimal6.longValue();
        long long9 = bigDecimal6.longValueExact();
        short short10 = bigDecimal6.shortValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal6);
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigInteger bigInteger36 = bigDecimal30.toBigInteger();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(bigInteger36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrix28.scalarAdd(bigDecimal37);
        java.math.BigDecimal bigDecimal39 = bigDecimal37.plus();
        java.math.BigDecimal bigDecimal40 = bigDecimal11.min(bigDecimal39);
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        long long44 = bigDecimal42.longValue();
        long long45 = bigDecimal42.longValueExact();
        int int46 = bigDecimal42.precision();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        long long50 = bigDecimal48.longValue();
        long long51 = bigDecimal48.longValueExact();
        java.math.BigDecimal bigDecimal52 = bigDecimal42.add(bigDecimal48);
        byte byte53 = bigDecimal42.byteValueExact();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        float float65 = bigDecimal55.floatValue();
        double[] doubleArray70 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray70);
        double[] doubleArray76 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix77 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray76);
        double[] doubleArray78 = realMatrix71.operate(doubleArray76);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray78);
        java.math.BigDecimal bigDecimal80 = bigMatrix79.getNorm();
        java.math.BigDecimal bigDecimal81 = bigDecimal55.subtract(bigDecimal80);
        int int82 = bigDecimal81.signum();
        java.math.BigInteger bigInteger83 = bigDecimal81.toBigInteger();
        java.math.BigDecimal bigDecimal85 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal87 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray88 = bigDecimal85.divideAndRemainder(bigDecimal87);
        java.math.BigDecimal bigDecimal90 = bigDecimal87.movePointLeft((-1));
        java.math.BigDecimal bigDecimal91 = bigDecimal81.max(bigDecimal87);
        java.math.BigDecimal bigDecimal92 = bigDecimal87.stripTrailingZeros();
        java.math.BigDecimal bigDecimal93 = bigDecimal42.remainder(bigDecimal87);
        java.math.BigInteger bigInteger94 = bigDecimal87.unscaledValue();
        java.math.BigDecimal bigDecimal95 = bigDecimal87.negate();
        int int96 = bigDecimal87.intValue();
        int int97 = bigDecimal39.compareTo(bigDecimal87);
        short short98 = bigDecimal39.shortValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + byte53 + "' != '" + (byte) 0 + "'", byte53 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 0.0f + "'", float65 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigDecimalArray88);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigInteger94);
        org.junit.Assert.assertNotNull(bigDecimal95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 97 + "'", int96 == 97);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + short98 + "' != '" + (short) 0 + "'", short98 == (short) 0);
    }

    @Test
    public void test06413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06413");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) 2881);
        java.math.MathContext mathContext3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal4 = bigDecimal1.pow((int) (short) -100, mathContext3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06414");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        bigMatrixImpl17.setScale((int) (byte) -100);
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        java.lang.String str43 = bigDecimal42.toString();
        java.math.BigDecimal bigDecimal45 = bigDecimal42.setScale(0);
        byte byte46 = bigDecimal45.byteValueExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal45.plus();
        int int48 = bigDecimal47.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl17.scalarAdd(bigDecimal47);
        java.lang.String[] strArray51 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray52 = new java.lang.String[][] { strArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(strArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(strArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(strArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(strArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(strArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(strArray52);
        java.math.BigDecimal bigDecimal61 = bigMatrixImpl60.getNorm();
        java.lang.String str62 = bigMatrixImpl60.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + byte46 + "' != '" + (byte) 0 + "'", byte46 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "BigMatrixImpl{{0.0}}" + "'", str62, "BigMatrixImpl{{0.0}}");
    }

    @Test
    public void test06415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06415");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigInteger bigInteger35 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        double[] doubleArray54 = bigMatrixImpl51.getRowAsDoubleArray((int) (short) 0);
        boolean boolean55 = bigMatrixImpl51.isSingular();
        boolean boolean56 = bigMatrixImpl51.isSquare();
        int int57 = bigMatrixImpl51.getScale();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal58.add(bigDecimal60);
        java.math.BigDecimal bigDecimal64 = bigDecimal60.setScale(100);
        boolean boolean65 = bigMatrixImpl51.equals((java.lang.Object) bigDecimal60);
        java.math.BigDecimal bigDecimal66 = bigDecimal36.min(bigDecimal60);
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        java.lang.String str69 = bigDecimal68.toString();
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal72 = bigDecimal71.stripTrailingZeros();
        int int73 = bigDecimal71.signum();
        java.math.BigDecimal[] bigDecimalArray74 = bigDecimal68.divideAndRemainder(bigDecimal71);
        java.math.BigDecimal bigDecimal76 = bigDecimal68.pow((int) 'a');
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        java.lang.String str79 = bigDecimal78.toString();
        java.math.BigDecimal bigDecimal81 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal82 = bigDecimal81.stripTrailingZeros();
        int int83 = bigDecimal81.signum();
        java.math.BigDecimal[] bigDecimalArray84 = bigDecimal78.divideAndRemainder(bigDecimal81);
        java.math.BigDecimal bigDecimal86 = bigDecimal78.pow((int) 'a');
        java.math.BigInteger bigInteger87 = bigDecimal78.toBigIntegerExact();
        java.math.BigDecimal bigDecimal88 = bigDecimal76.add(bigDecimal78);
        java.math.BigDecimal bigDecimal90 = bigDecimal88.pow((int) (byte) 97);
        float float91 = bigDecimal88.floatValue();
        java.math.BigDecimal bigDecimal92 = bigDecimal60.add(bigDecimal88);
        java.math.MathContext mathContext93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal94 = bigDecimal60.abs(mathContext93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 64 + "'", int57 == 64);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0" + "'", str69, "0");
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 0.0f + "'", float91 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal92);
    }

    @Test
    public void test06416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06416");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode(10);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray35 = bigDecimal32.divideAndRemainder(bigDecimal34);
        java.math.BigDecimal bigDecimal37 = bigDecimal34.movePointLeft((-1));
        long long38 = bigDecimal37.longValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarMultiply(bigDecimal37);
        int int40 = bigDecimal37.precision();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 970L + "'", long38 == 970L);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
    }

    @Test
    public void test06417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06417");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(0.0d);
        long long2 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.lang.String str4 = bigDecimal3.toEngineeringString();
        int int5 = bigDecimal3.scale();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test06418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06418");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal((int) (byte) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl14.scalarMultiply(bigDecimal23);
        java.lang.String str25 = bigMatrixImpl14.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl14.getSubMatrix((int) (short) 400, (int) (short) 1, 97, (int) (byte) -54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str25, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
    }

    @Test
    public void test06419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06419");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        int int20 = bigMatrixImpl14.getRoundingMode();
        java.lang.String str21 = bigMatrixImpl14.toString();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getData();
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray35 = realMatrix28.operate(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix37.transpose();
        double[][] doubleArray39 = realMatrix37.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl40);
        int int42 = bigMatrix41.getColumnDimension();
        int[] intArray48 = new int[] { 'a', (byte) -11, 3, 'a', 1 };
        int[] intArray52 = new int[] { (byte) -11, 2, (-1) };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrix41.getSubMatrix(intArray48, intArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[97, -11, 3, 97, 1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-11, 2, -1]");
    }

    @Test
    public void test06420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06420");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl27.getNorm();
        double[] doubleArray37 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix38 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray37);
        boolean boolean40 = bigMatrixImpl27.equals((java.lang.Object) doubleArray37);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix41.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test06421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06421");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal[][] bigDecimalArray46 = new java.math.BigDecimal[][] { bigDecimalArray29, bigDecimalArray37, bigDecimalArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray46);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray46);
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl49.getDataRef();
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl49.getNorm();
        boolean boolean52 = bigMatrixImpl49.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl49.copy();
        double[] doubleArray55 = bigMatrixImpl49.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray57 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray58 = new java.lang.String[][] { strArray57 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(strArray58);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl49.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl59.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl59.transpose();
        int int63 = bigMatrix62.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrix62.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl14.multiply(bigMatrix62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(bigMatrix64);
    }

    @Test
    public void test06422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06422");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal bigDecimal7 = bigDecimal1.plus();
        java.math.BigInteger bigInteger8 = bigDecimal7.toBigIntegerExact();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger8);
        float float10 = bigDecimal9.floatValue();
        java.math.BigDecimal bigDecimal11 = bigDecimal9.ulp();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger15 = bigDecimal14.unscaledValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal12.add(bigDecimal14);
        java.math.BigInteger bigInteger17 = bigDecimal14.toBigInteger();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(bigInteger17, 0);
        java.math.MathContext mathContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray21 = bigDecimal11.divideAndRemainder(bigDecimal19, mathContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.0f + "'", float10 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigInteger17);
    }

    @Test
    public void test06423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06423");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = realMatrix31.getColumn((int) (byte) 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realMatrix31);
    }

    @Test
    public void test06424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06424");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix8.scalarAdd(4.733456112E9d);
        double[] doubleArray15 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        double[] doubleArray23 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray23);
        double[] doubleArray29 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray29);
        double[] doubleArray31 = realMatrix24.operate(doubleArray29);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray31);
        double[] doubleArray33 = realMatrix18.preMultiply(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix34.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix34.inverse();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix10.solve(realMatrix36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
    }

    @Test
    public void test06425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06425");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        boolean boolean37 = bigDecimal20.equals((java.lang.Object) doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl38.getData();
        int int40 = bigMatrixImpl38.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl38.copy();
        java.lang.String[] strArray43 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray44 = new java.lang.String[][] { strArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix41.subtract(bigMatrix54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 64 + "'", int40 == 64);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigMatrix54);
    }

    @Test
    public void test06426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06426");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        java.lang.String str64 = bigDecimal63.toString();
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal67 = bigDecimal66.stripTrailingZeros();
        int int68 = bigDecimal66.signum();
        java.math.BigDecimal[] bigDecimalArray69 = bigDecimal63.divideAndRemainder(bigDecimal66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        int int71 = bigMatrixImpl70.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl70.transpose();
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl70.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl37.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl74);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        boolean boolean78 = bigMatrix77.isSquare();
        java.math.BigDecimal[] bigDecimalArray80 = bigMatrix77.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray81 = bigMatrixImpl74.preMultiply(bigDecimalArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
    }

    @Test
    public void test06427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06427");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl29.getNorm();
        java.math.BigInteger bigInteger31 = bigDecimal30.unscaledValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal30.negate();
        int int33 = bigDecimal30.intValue();
        float float34 = bigDecimal30.floatValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
    }

    @Test
    public void test06428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06428");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        java.math.BigDecimal bigDecimal14 = bigMatrix13.getNorm();
        java.lang.String str15 = bigDecimal14.toEngineeringString();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "63" + "'", str15, "63");
    }

    @Test
    public void test06429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06429");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl31.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl31.copy();
        java.math.BigDecimal bigDecimal37 = bigMatrixImpl31.getEntry((int) (short) 0, 2);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = bigMatrixImpl31.getColumnAsDoubleArray((int) (short) 400);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigDecimal37);
    }

    @Test
    public void test06430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06430");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        java.lang.String[] strArray9 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray10 = new java.lang.String[][] { strArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray10);
        java.math.BigDecimal[][] bigDecimalArray12 = bigMatrixImpl11.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal14 = bigMatrixImpl13.getDeterminant();
        double[] doubleArray19 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray19);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 6);
        int int24 = realMatrix23.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix23.scalarMultiply(1.0d);
        double[] doubleArray28 = realMatrix23.getRow(3);
        java.math.BigDecimal[] bigDecimalArray29 = bigMatrixImpl13.operate(doubleArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray31 = bigMatrix7.solve(bigDecimalArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: Matrix is singular.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[6.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigMatrix30);
    }

    @Test
    public void test06431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06431");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) ' ', (int) (short) 400);
        boolean boolean3 = bigMatrixImpl2.isSingular();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrix19.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray20);
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray34 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl36.transpose();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal45 = bigDecimal44.stripTrailingZeros();
        int int46 = bigDecimal44.signum();
        java.math.BigDecimal[] bigDecimalArray47 = bigDecimal41.divideAndRemainder(bigDecimal44);
        java.math.BigDecimal bigDecimal49 = bigDecimal41.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal39, bigDecimal41 };
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray50);
        java.math.BigDecimal[] bigDecimalArray53 = bigMatrix37.preMultiply(bigDecimalArray50);
        java.math.BigDecimal[] bigDecimalArray54 = bigMatrixImpl21.preMultiply(bigDecimalArray53);
        java.math.BigDecimal[] bigDecimalArray56 = bigMatrixImpl21.getRow(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray59 = bigMatrixImpl2.preMultiply(bigDecimalArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigMatrix58);
    }

    @Test
    public void test06432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06432");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int3 = bigDecimal2.intValue();
        java.math.BigInteger bigInteger4 = bigDecimal2.toBigInteger();
        java.math.MathContext mathContext6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(bigInteger4, (int) 'a', mathContext6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(bigInteger4);
    }

    @Test
    public void test06433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06433");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = realMatrix24.getColumn(110);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test06434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06434");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal36 = bigDecimal23.pow((int) ' ');
        java.math.BigDecimal bigDecimal37 = bigDecimal23.stripTrailingZeros();
        byte byte38 = bigDecimal37.byteValueExact();
        java.math.MathContext mathContext39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal40 = bigDecimal37.negate(mathContext39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 0 + "'", byte38 == (byte) 0);
    }

    @Test
    public void test06435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06435");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        bigMatrixImpl14.setRoundingMode((-1));
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal25 = bigMatrixImpl14.getEntry((int) (byte) 6, (int) (short) 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
    }

    @Test
    public void test06436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06436");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        int int20 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        java.lang.String str25 = bigDecimal24.toString();
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal28 = bigDecimal27.stripTrailingZeros();
        int int29 = bigDecimal27.signum();
        java.math.BigDecimal[] bigDecimalArray30 = bigDecimal24.divideAndRemainder(bigDecimal27);
        java.math.BigDecimal bigDecimal32 = bigDecimal24.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal22, bigDecimal24 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrix34.getColumnMatrix(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl14.multiply(bigMatrix34);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal45 = bigDecimal44.stripTrailingZeros();
        int int46 = bigDecimal44.signum();
        java.math.BigDecimal[] bigDecimalArray47 = bigDecimal41.divideAndRemainder(bigDecimal44);
        java.math.BigDecimal bigDecimal49 = bigDecimal41.pow((int) 'a');
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal52 = bigDecimal51.stripTrailingZeros();
        float float53 = bigDecimal51.floatValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.divideToIntegralValue(bigDecimal51);
        java.math.BigDecimal bigDecimal55 = bigDecimal39.max(bigDecimal49);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl14.scalarAdd(bigDecimal55);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl14.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 97.0f + "'", float53 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigMatrix56);
    }

    @Test
    public void test06437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06437");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        double[][] doubleArray29 = bigMatrixImpl27.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf(0.010000000000000002d);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.scalarAdd(bigDecimal31);
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) (short) 10, (int) (byte) -54);
        java.math.RoundingMode roundingMode37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal38 = bigDecimal31.divide(bigDecimal35, (int) (short) -1, roundingMode37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimal35);
    }

    @Test
    public void test06438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06438");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        int int27 = bigMatrixImpl25.getColumnDimension();
        boolean boolean28 = bigMatrixImpl25.isSingular();
        bigMatrixImpl25.setScale((int) '#');
        boolean boolean31 = bigMatrixImpl25.isSquare();
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray44 = new double[][] { doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl46.transpose();
        double[] doubleArray49 = bigMatrixImpl46.getRowAsDoubleArray((int) (short) 0);
        boolean boolean50 = bigMatrixImpl46.isSingular();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal("100");
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl46.scalarMultiply(bigDecimal52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl25.scalarAdd(bigDecimal52);
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        int int60 = bigDecimal59.intValue();
        java.math.BigDecimal bigDecimal61 = bigDecimal56.min(bigDecimal59);
        java.math.BigDecimal[] bigDecimalArray62 = new java.math.BigDecimal[] { bigDecimal61 };
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        int int65 = bigDecimal64.intValue();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal64.min(bigDecimal67);
        java.math.BigDecimal[] bigDecimalArray70 = new java.math.BigDecimal[] { bigDecimal69 };
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(0.0d);
        int int76 = bigDecimal75.intValue();
        java.math.BigDecimal bigDecimal77 = bigDecimal72.min(bigDecimal75);
        java.math.BigDecimal[] bigDecimalArray78 = new java.math.BigDecimal[] { bigDecimal77 };
        java.math.BigDecimal[][] bigDecimalArray79 = new java.math.BigDecimal[][] { bigDecimalArray62, bigDecimalArray70, bigDecimalArray78 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray79);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray79);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray79);
        java.math.BigDecimal[][] bigDecimalArray83 = bigMatrixImpl82.getDataRef();
        java.math.BigDecimal bigDecimal84 = bigMatrixImpl82.getNorm();
        boolean boolean85 = bigMatrixImpl82.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl82.copy();
        double[] doubleArray88 = bigMatrixImpl82.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal89 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl82.scalarMultiply(bigDecimal89);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl82.transpose();
        boolean boolean92 = bigMatrixImpl82.isSquare();
        java.math.BigDecimal[] bigDecimalArray94 = bigMatrixImpl82.getRow((int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix96 = bigMatrixImpl25.solve(bigMatrix95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
        org.junit.Assert.assertNotNull(bigMatrix81);
        org.junit.Assert.assertNotNull(bigDecimalArray83);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigMatrix90);
        org.junit.Assert.assertNotNull(bigMatrix91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray94);
        org.junit.Assert.assertNotNull(bigMatrix95);
    }

    @Test
    public void test06439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06439");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((-2), (-35));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06440");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray44 = new double[][] { doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigInteger bigInteger56 = bigDecimal50.toBigInteger();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(bigInteger56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrix48.scalarAdd(bigDecimal57);
        java.math.BigDecimal bigDecimal59 = bigDecimal57.plus();
        boolean boolean60 = bigMatrixImpl27.equals((java.lang.Object) bigDecimal59);
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.min(bigDecimal65);
        java.math.BigInteger bigInteger68 = bigDecimal62.toBigInteger();
        java.math.BigInteger bigInteger69 = bigDecimal62.unscaledValue();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(bigInteger69);
        int int71 = bigDecimal59.compareTo(bigDecimal70);
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal((long) (-1));
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger76 = bigDecimal75.unscaledValue();
        short short77 = bigDecimal75.shortValueExact();
        java.lang.String str78 = bigDecimal75.toEngineeringString();
        java.math.BigDecimal bigDecimal79 = bigDecimal73.min(bigDecimal75);
        java.math.MathContext mathContext80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal81 = bigDecimal70.divide(bigDecimal75, mathContext80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertTrue("'" + short77 + "' != '" + (short) 100 + "'", short77 == (short) 100);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "100" + "'", str78, "100");
        org.junit.Assert.assertNotNull(bigDecimal79);
    }

    @Test
    public void test06441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06441");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix20.scalarAdd((double) (-100.0f));
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix22.transpose();
        int int24 = realMatrix23.getRowDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test06442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06442");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        byte byte12 = bigDecimal1.byteValueExact();
        java.math.BigDecimal bigDecimal14 = bigDecimal1.movePointLeft((int) (byte) -1);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((double) 10);
        java.math.BigDecimal bigDecimal17 = bigDecimal1.min(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal17.movePointLeft(64);
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal[][] bigDecimalArray44 = new java.math.BigDecimal[][] { bigDecimalArray27, bigDecimalArray35, bigDecimalArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray44);
        int int48 = bigMatrixImpl47.getScale();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal51 = bigDecimal50.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl47.scalarMultiply(bigDecimal50);
        java.lang.String str53 = bigDecimal50.toEngineeringString();
        java.math.BigDecimal bigDecimal54 = bigDecimal50.plus();
        float float55 = bigDecimal50.floatValue();
        java.math.MathContext mathContext56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray57 = bigDecimal17.divideAndRemainder(bigDecimal50, mathContext56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 64 + "'", int48 == 64);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 100.0f + "'", float55 == 100.0f);
    }

    @Test
    public void test06443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06443");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        double[][] doubleArray9 = bigMatrixImpl8.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray10 = bigMatrixImpl8.getData();
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl8.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix16 = bigMatrixImpl8.getSubMatrix(400, (int) (byte) -54, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
    }

    @Test
    public void test06444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06444");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger30 = bigDecimal29.unscaledValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal27.add(bigDecimal29);
        java.math.BigDecimal bigDecimal32 = bigDecimal16.multiply(bigDecimal27);
        java.math.BigDecimal bigDecimal33 = bigDecimal0.subtract(bigDecimal16);
        java.math.BigDecimal bigDecimal34 = bigDecimal33.abs();
        java.math.BigDecimal bigDecimal35 = bigDecimal33.ulp();
        java.math.BigDecimal bigDecimal37 = bigDecimal35.pow((int) (byte) 62);
        java.lang.String str38 = bigDecimal37.toPlainString();
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
    }

    @Test
    public void test06445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06445");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((double) (-100.0f), mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06446");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(bigInteger29);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.multiply(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.negate();
        java.math.BigDecimal bigDecimal37 = bigDecimal21.add(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        float float41 = bigDecimal39.floatValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigInteger bigInteger63 = bigDecimal54.toBigIntegerExact();
        java.math.BigDecimal bigDecimal64 = bigDecimal52.add(bigDecimal54);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger68 = bigDecimal67.unscaledValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal65.add(bigDecimal67);
        java.math.BigDecimal bigDecimal70 = bigDecimal54.multiply(bigDecimal65);
        java.math.BigDecimal bigDecimal71 = bigDecimal42.divide(bigDecimal65);
        java.math.BigDecimal bigDecimal72 = bigDecimal36.remainder(bigDecimal42);
        double double73 = bigDecimal72.doubleValue();
        java.math.BigDecimal bigDecimal74 = bigDecimal72.stripTrailingZeros();
        long long75 = bigDecimal74.longValueExact();
        java.lang.String str76 = bigDecimal74.toEngineeringString();
        float float77 = bigDecimal74.floatValue();
        java.math.BigDecimal bigDecimal78 = bigDecimal74.stripTrailingZeros();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 97.0f + "'", float41 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0" + "'", str76, "0");
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + 0.0f + "'", float77 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal78);
    }

    @Test
    public void test06447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06447");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal31 = bigMatrixImpl27.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((double) (short) -100);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarAdd(bigDecimal34);
        boolean boolean36 = bigMatrix35.isSquare();
        double[][] doubleArray37 = bigMatrix35.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(bigMatrix38);
    }

    @Test
    public void test06448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06448");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(1.0d);
    }

    @Test
    public void test06449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06449");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigMatrixImpl27.getRoundingMode();
        int int31 = bigMatrixImpl27.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.copy();
        double[] doubleArray37 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix38 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double[] doubleArray45 = realMatrix38.operate(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray45);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray45);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray49 = bigMatrixImpl27.solve(doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
    }

    @Test
    public void test06450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06450");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, 1);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getData();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getDataRef();
        java.math.BigDecimal bigDecimal33 = bigMatrixImpl31.getNorm();
        boolean boolean34 = bigMatrixImpl31.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl31.copy();
        double[] doubleArray37 = bigMatrixImpl31.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray39 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray40 = new java.lang.String[][] { strArray39 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(strArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl31.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl41);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl31.copy();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = bigDecimal45.setScale(0);
        byte byte49 = bigDecimal48.byteValueExact();
        java.math.BigDecimal bigDecimal50 = bigDecimal48.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl31.scalarMultiply(bigDecimal50);
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl31.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray52);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl2.setSubMatrix(bigDecimalArray52, (int) (byte) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 0 + "'", byte49 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix53);
    }

    @Test
    public void test06451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06451");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal56 = bigDecimal17.stripTrailingZeros();
        java.math.BigDecimal bigDecimal57 = bigDecimal56.negate();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        java.lang.String str70 = bigDecimal69.toString();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        int int74 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal69.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal77 = bigDecimal69.pow((int) 'a');
        java.math.BigInteger bigInteger78 = bigDecimal69.toBigIntegerExact();
        java.math.BigDecimal bigDecimal79 = bigDecimal67.add(bigDecimal69);
        java.math.BigInteger bigInteger80 = bigDecimal79.unscaledValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(bigInteger80, 100);
        java.math.BigDecimal bigDecimal83 = bigDecimal82.ulp();
        java.math.BigDecimal bigDecimal84 = bigDecimal57.min(bigDecimal82);
        java.lang.String str85 = bigDecimal82.toPlainString();
        double[] doubleArray90 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix91 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray90);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray90);
        org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrix92.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix95 = realMatrix92.transpose();
        boolean boolean96 = bigDecimal82.equals((java.lang.Object) realMatrix95);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 97.0f + "'", float23 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0" + "'", str70, "0");
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" + "'", str85, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertNotNull(realMatrix95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test06452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06452");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSingular();
        boolean boolean31 = bigMatrixImpl27.isSingular();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal36 = bigDecimal34.ulp();
        java.math.BigDecimal bigDecimal38 = bigDecimal36.scaleByPowerOfTen(100);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarMultiply(bigDecimal38);
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl27.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal43 = bigMatrixImpl27.getEntry((int) (byte) -32, 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimal40);
    }

    @Test
    public void test06453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06453");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException0 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException1 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException0.addSuppressed((java.lang.Throwable) invalidMatrixException1);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException4 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException0.addSuppressed((java.lang.Throwable) matrixIndexException4);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException7 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException4.addSuppressed((java.lang.Throwable) matrixIndexException7);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException9 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException10 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException9.addSuppressed((java.lang.Throwable) invalidMatrixException10);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException12 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException13 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException12.addSuppressed((java.lang.Throwable) invalidMatrixException13);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException16 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException12.addSuppressed((java.lang.Throwable) matrixIndexException16);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException18 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException19 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException18.addSuppressed((java.lang.Throwable) invalidMatrixException19);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException22 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException18.addSuppressed((java.lang.Throwable) matrixIndexException22);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException25 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException22.addSuppressed((java.lang.Throwable) matrixIndexException25);
        matrixIndexException16.addSuppressed((java.lang.Throwable) matrixIndexException22);
        invalidMatrixException9.addSuppressed((java.lang.Throwable) matrixIndexException16);
        matrixIndexException7.addSuppressed((java.lang.Throwable) invalidMatrixException9);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException30 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException9.addSuppressed((java.lang.Throwable) invalidMatrixException30);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException32 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException33 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException32.addSuppressed((java.lang.Throwable) invalidMatrixException33);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException36 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException32.addSuppressed((java.lang.Throwable) matrixIndexException36);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException39 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException36.addSuppressed((java.lang.Throwable) matrixIndexException39);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException41 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException42 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException41.addSuppressed((java.lang.Throwable) invalidMatrixException42);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException45 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException41.addSuppressed((java.lang.Throwable) matrixIndexException45);
        matrixIndexException36.addSuppressed((java.lang.Throwable) invalidMatrixException41);
        invalidMatrixException30.addSuppressed((java.lang.Throwable) matrixIndexException36);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException50 = new org.apache.commons.math.linear.MatrixIndexException("0");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException52 = new org.apache.commons.math.linear.MatrixIndexException("197");
        matrixIndexException50.addSuppressed((java.lang.Throwable) matrixIndexException52);
        invalidMatrixException30.addSuppressed((java.lang.Throwable) matrixIndexException52);
        java.lang.String str55 = invalidMatrixException30.toString();
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.math.linear.InvalidMatrixException" + "'", str55, "org.apache.commons.math.linear.InvalidMatrixException");
    }

    @Test
    public void test06454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06454");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        java.lang.String str22 = bigDecimal21.toString();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal25 = bigDecimal24.stripTrailingZeros();
        int int26 = bigDecimal24.signum();
        java.math.BigDecimal[] bigDecimalArray27 = bigDecimal21.divideAndRemainder(bigDecimal24);
        java.math.BigDecimal bigDecimal29 = bigDecimal21.pow((int) 'a');
        java.math.BigInteger bigInteger30 = bigDecimal21.toBigIntegerExact();
        float float31 = bigDecimal21.floatValue();
        double[] doubleArray36 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray36);
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double[] doubleArray44 = realMatrix37.operate(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray44);
        java.math.BigDecimal bigDecimal46 = bigMatrix45.getNorm();
        java.math.BigDecimal bigDecimal47 = bigDecimal21.subtract(bigDecimal46);
        int int48 = bigDecimal47.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl14.scalarMultiply(bigDecimal47);
        java.math.BigDecimal bigDecimal50 = bigDecimal47.ulp();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.negate();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
    }

    @Test
    public void test06455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06455");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        boolean boolean37 = bigDecimal20.equals((java.lang.Object) doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = bigMatrixImpl39.getRowAsDoubleArray((int) (short) 2805);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06456");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix5.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix5.scalarMultiply((double) 10L);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double11 = realMatrix10.getTrace();
        boolean boolean12 = realMatrix10.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrix10.scalarMultiply((double) 100);
        double double15 = realMatrix14.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix8.solve(realMatrix14);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix16.scalarAdd(2.028240960365167E135d);
        int int19 = realMatrix18.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E20d + "'", double15 == 1.0E20d);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test06457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06457");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSquare();
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[] doubleArray22 = new double[] { 1.0d, 100.0f };
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray29 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray29);
        boolean boolean31 = bigMatrix30.isSingular();
        int int32 = bigMatrix30.getColumnDimension();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        java.lang.String str35 = bigDecimal34.toString();
        java.math.BigDecimal bigDecimal36 = bigDecimal34.plus();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        float float40 = bigDecimal38.floatValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal38.ulp();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal43.pow((int) 'a');
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        java.lang.String str54 = bigDecimal53.toString();
        java.math.BigDecimal bigDecimal56 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal57 = bigDecimal56.stripTrailingZeros();
        int int58 = bigDecimal56.signum();
        java.math.BigDecimal[] bigDecimalArray59 = bigDecimal53.divideAndRemainder(bigDecimal56);
        java.math.BigDecimal bigDecimal61 = bigDecimal53.pow((int) 'a');
        java.math.BigInteger bigInteger62 = bigDecimal53.toBigIntegerExact();
        java.math.BigDecimal bigDecimal63 = bigDecimal51.add(bigDecimal53);
        java.math.BigDecimal bigDecimal64 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger67 = bigDecimal66.unscaledValue();
        java.math.BigDecimal bigDecimal68 = bigDecimal64.add(bigDecimal66);
        java.math.BigDecimal bigDecimal69 = bigDecimal53.multiply(bigDecimal64);
        java.math.BigDecimal bigDecimal70 = bigDecimal41.divide(bigDecimal64);
        int int71 = bigDecimal34.compareTo(bigDecimal41);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrix30.scalarMultiply(bigDecimal34);
        java.math.BigInteger bigInteger73 = bigDecimal34.toBigInteger();
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl14.scalarMultiply(bigDecimal34);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray76 = bigMatrixImpl14.getRowAsDoubleArray((int) (byte) 6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 97.0f + "'", float40 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(bigMatrix74);
    }

    @Test
    public void test06458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06458");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray13);
        double[][] doubleArray15 = bigMatrixImpl14.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrixImpl14.getData();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getData();
        boolean boolean18 = bigMatrixImpl5.equals((java.lang.Object) bigDecimalArray17);
        boolean boolean19 = bigMatrixImpl5.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl5.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: Matrix is singular.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test06459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06459");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        int int65 = bigMatrixImpl27.getRoundingMode();
        int int66 = bigMatrixImpl27.getRoundingMode();
        boolean boolean67 = bigMatrixImpl27.isSingular();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test06460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06460");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
        double double5 = bigDecimal1.doubleValue();
        short short6 = bigDecimal1.shortValueExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal1.movePointLeft((int) 'a');
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 4);
        int int11 = bigDecimal10.signum();
        java.math.MathContext mathContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal13 = bigDecimal1.subtract(bigDecimal10, mathContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test06461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06461");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.min(bigDecimal51);
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        int int60 = bigDecimal59.intValue();
        java.math.BigDecimal bigDecimal61 = bigDecimal56.min(bigDecimal59);
        java.math.BigDecimal[] bigDecimalArray62 = new java.math.BigDecimal[] { bigDecimal61 };
        java.math.BigDecimal[][] bigDecimalArray63 = new java.math.BigDecimal[][] { bigDecimalArray46, bigDecimalArray54, bigDecimalArray62 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray63);
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.min(bigDecimal70);
        java.math.BigInteger bigInteger73 = bigDecimal67.toBigInteger();
        java.math.BigDecimal bigDecimal74 = new java.math.BigDecimal(bigInteger73);
        java.math.BigDecimal bigDecimal76 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal77 = bigDecimal76.stripTrailingZeros();
        float float78 = bigDecimal76.floatValue();
        java.math.BigDecimal bigDecimal79 = bigDecimal74.multiply(bigDecimal76);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrix65.scalarAdd(bigDecimal79);
        float float81 = bigDecimal79.floatValue();
        long long82 = bigDecimal79.longValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl37.scalarAdd(bigDecimal79);
        byte byte84 = bigDecimal79.byteValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigInteger73);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 97.0f + "'", float78 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertTrue("'" + float81 + "' != '" + 0.0f + "'", float81 == 0.0f);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertTrue("'" + byte84 + "' != '" + (byte) 0 + "'", byte84 == (byte) 0);
    }

    @Test
    public void test06462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06462");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        double[][] doubleArray30 = bigMatrix29.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        boolean boolean33 = bigMatrix32.isSingular();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test06463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06463");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        int int20 = bigMatrixImpl14.getRoundingMode();
        java.lang.String str21 = bigMatrixImpl14.toString();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getData();
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray35 = realMatrix28.operate(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix37.transpose();
        double[][] doubleArray39 = realMatrix37.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl40);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray43 = bigMatrixImpl40.getRow(4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix41);
    }

    @Test
    public void test06464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06464");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        int int20 = bigMatrixImpl14.getRoundingMode();
        java.lang.String str21 = bigMatrixImpl14.toString();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getData();
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray35 = realMatrix28.operate(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix37.transpose();
        double[][] doubleArray39 = realMatrix37.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl40);
        double[][] doubleArray42 = bigMatrixImpl40.getDataAsDoubleArray();
        int int43 = bigMatrixImpl40.getRowDimension();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = bigDecimal45.setScale(0);
        byte byte49 = bigDecimal48.byteValueExact();
        java.math.BigDecimal bigDecimal50 = bigDecimal48.plus();
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger53 = bigDecimal52.unscaledValue();
        java.lang.String str54 = bigDecimal52.toPlainString();
        java.math.BigDecimal bigDecimal56 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal57 = bigDecimal56.stripTrailingZeros();
        float float58 = bigDecimal56.floatValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal56.ulp();
        java.math.BigDecimal bigDecimal60 = bigDecimal59.ulp();
        java.math.BigDecimal bigDecimal61 = bigDecimal52.remainder(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = bigDecimal52.pow((int) '#');
        int int64 = bigDecimal48.compareTo(bigDecimal63);
        java.lang.String str65 = bigDecimal48.toEngineeringString();
        java.lang.String str66 = bigDecimal48.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl40.scalarAdd(bigDecimal48);
        double[] doubleArray72 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix73 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray72);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray72);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray72);
        double[] doubleArray80 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix81 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray80);
        double[] doubleArray86 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix87 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray86);
        double[] doubleArray88 = realMatrix81.operate(doubleArray86);
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray88);
        double[] doubleArray90 = realMatrix75.preMultiply(doubleArray88);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray90);
        org.apache.commons.math.linear.BigMatrix bigMatrix92 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray90);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray90);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray90);
        org.apache.commons.math.linear.RealMatrix realMatrix95 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray96 = bigMatrixImpl40.solve(doubleArray90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 0 + "'", byte49 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "100" + "'", str54, "100");
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 97.0f + "'", float58 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(bigMatrix92);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(bigMatrix94);
        org.junit.Assert.assertNotNull(realMatrix95);
    }

    @Test
    public void test06465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06465");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        short short36 = bigDecimal34.shortValueExact();
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        double[] doubleArray54 = bigMatrixImpl51.getRowAsDoubleArray((int) (short) 0);
        boolean boolean55 = bigMatrixImpl51.isSingular();
        java.math.BigDecimal[][] bigDecimalArray56 = bigMatrixImpl51.getData();
        java.math.BigDecimal bigDecimal57 = bigMatrixImpl51.getNorm();
        double[] doubleArray60 = new double[] { 1.0d, 100.0f };
        double[] doubleArray63 = new double[] { 1.0d, 100.0f };
        double[] doubleArray66 = new double[] { 1.0d, 100.0f };
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray70 = new double[][] { doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray70);
        boolean boolean74 = bigDecimal57.equals((java.lang.Object) doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        boolean boolean76 = bigDecimal34.equals((java.lang.Object) doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray70);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 10 + "'", short36 == (short) 10);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(realMatrix78);
    }

    @Test
    public void test06466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06466");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl27.getRowMatrix((int) (byte) 1);
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal((double) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrix42.scalarAdd(bigDecimal44);
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[] doubleArray51 = new double[] { 1.0d, 100.0f };
        double[] doubleArray54 = new double[] { 1.0d, 100.0f };
        double[] doubleArray57 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray58 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57 };
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray58);
        boolean boolean60 = bigMatrix59.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrix59.copy();
        java.math.BigDecimal bigDecimal62 = bigMatrix59.getNorm();
        java.math.BigDecimal bigDecimal64 = bigDecimal62.pow(5);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrix45.scalarAdd(bigDecimal62);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray67 = bigMatrix45.getColumnAsDoubleArray((int) (byte) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigMatrix65);
    }

    @Test
    public void test06467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06467");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal27 = bigDecimal1.min(bigDecimal16);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal[][] bigDecimalArray52 = new java.math.BigDecimal[][] { bigDecimalArray35, bigDecimalArray43, bigDecimalArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        java.math.BigDecimal[][] bigDecimalArray56 = bigMatrixImpl55.getDataRef();
        java.math.BigDecimal bigDecimal57 = bigMatrixImpl55.getNorm();
        boolean boolean58 = bigDecimal16.equals((java.lang.Object) bigMatrixImpl55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl55.getRowMatrix(4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test06468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06468");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int32 = bigDecimal31.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.scalarMultiply(bigDecimal31);
        long long34 = bigDecimal31.longValueExact();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((double) '#');
        boolean boolean37 = bigDecimal31.equals((java.lang.Object) bigDecimal36);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        java.lang.String str40 = bigDecimal39.toString();
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal43 = bigDecimal42.stripTrailingZeros();
        int int44 = bigDecimal42.signum();
        java.math.BigDecimal[] bigDecimalArray45 = bigDecimal39.divideAndRemainder(bigDecimal42);
        java.math.BigDecimal bigDecimal47 = bigDecimal39.pow((int) 'a');
        java.math.MathContext mathContext48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal49 = bigDecimal36.divideToIntegralValue(bigDecimal39, mathContext48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigDecimal47);
    }

    @Test
    public void test06469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06469");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl37.getNorm();
        int int63 = bigDecimal62.signum();
        java.math.BigDecimal bigDecimal65 = bigDecimal62.movePointRight(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(bigDecimal65);
    }

    @Test
    public void test06470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06470");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        double[][] doubleArray30 = bigMatrix29.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray36 = bigMatrix34.getColumnAsDoubleArray((-35));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigMatrix34);
    }

    @Test
    public void test06471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06471");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        double[][] doubleArray22 = realMatrix21.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix21.scalarAdd((double) (-1.0f));
        boolean boolean26 = realMatrix21.isSingular();
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        double[][] doubleArray49 = realMatrix48.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.inverse();
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix57.scalarAdd((double) 6);
        int int60 = realMatrix57.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix57.scalarAdd(10.0d);
        double[] doubleArray67 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix68 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray67);
        double double69 = realMatrix68.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix68.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix62.preMultiply(realMatrix71);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrix72.scalarAdd((double) 1.0f);
        double[] doubleArray79 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix80 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray79);
        org.apache.commons.math.linear.RealMatrix realMatrix81 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray79);
        org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrix81.scalarAdd((double) 6);
        int int84 = realMatrix81.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrix81.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrix74.preMultiply(realMatrix81);
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrix74.copy();
        boolean boolean89 = realMatrix88.isSquare();
        int int90 = realMatrix88.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrix48.add(realMatrix88);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrix21.preMultiply(realMatrix88);
        double double93 = realMatrix21.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 52.0d + "'", double69 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(realMatrix83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(realMatrix86);
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 8667.0d + "'", double93 == 8667.0d);
    }

    @Test
    public void test06472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06472");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        int int37 = realMatrix23.getColumnDimension();
        boolean boolean38 = realMatrix23.isSquare();
        double[] doubleArray40 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray40);
        double[] doubleArray42 = realMatrix23.preMultiply(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix43.getRowMatrix(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[7.5125556E7]");
        org.junit.Assert.assertNotNull(realMatrix43);
    }

    @Test
    public void test06473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06473");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException0 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException1 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException0.addSuppressed((java.lang.Throwable) invalidMatrixException1);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException4 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException0.addSuppressed((java.lang.Throwable) matrixIndexException4);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException7 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException4.addSuppressed((java.lang.Throwable) matrixIndexException7);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException10 = new org.apache.commons.math.linear.InvalidMatrixException("org.apache.commons.math.linear.MatrixIndexException: ");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException11 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException12 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException11.addSuppressed((java.lang.Throwable) invalidMatrixException12);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException15 = new org.apache.commons.math.linear.MatrixIndexException("100");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException16 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException17 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException16.addSuppressed((java.lang.Throwable) invalidMatrixException17);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException20 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException16.addSuppressed((java.lang.Throwable) matrixIndexException20);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException23 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException20.addSuppressed((java.lang.Throwable) matrixIndexException23);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException25 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException26 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException25.addSuppressed((java.lang.Throwable) invalidMatrixException26);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException29 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException25.addSuppressed((java.lang.Throwable) matrixIndexException29);
        matrixIndexException20.addSuppressed((java.lang.Throwable) invalidMatrixException25);
        matrixIndexException15.addSuppressed((java.lang.Throwable) invalidMatrixException25);
        invalidMatrixException11.addSuppressed((java.lang.Throwable) matrixIndexException15);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException35 = new org.apache.commons.math.linear.InvalidMatrixException("100");
        matrixIndexException15.addSuppressed((java.lang.Throwable) invalidMatrixException35);
        invalidMatrixException10.addSuppressed((java.lang.Throwable) invalidMatrixException35);
        matrixIndexException4.addSuppressed((java.lang.Throwable) invalidMatrixException10);
    }

    @Test
    public void test06474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06474");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        long long39 = bigDecimal37.longValue();
        long long40 = bigDecimal37.longValueExact();
        int int41 = bigDecimal37.precision();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal37.add(bigDecimal43);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal bigDecimal55 = bigDecimal47.min(bigDecimal52);
        java.math.BigDecimal bigDecimal57 = bigDecimal55.movePointRight((int) (short) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl27.scalarAdd(bigDecimal55);
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) (short) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl27.scalarMultiply(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        java.math.BigDecimal bigDecimal68 = bigDecimal63.min(bigDecimal66);
        java.math.BigInteger bigInteger69 = bigDecimal63.toBigInteger();
        long long70 = bigDecimal63.longValueExact();
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(0.0d);
        int int76 = bigDecimal75.intValue();
        java.math.BigDecimal bigDecimal77 = bigDecimal72.min(bigDecimal75);
        java.math.BigInteger bigInteger78 = bigDecimal72.toBigInteger();
        java.math.BigDecimal bigDecimal80 = bigDecimal72.movePointRight((int) '#');
        java.lang.String str81 = bigDecimal80.toEngineeringString();
        java.math.BigDecimal bigDecimal82 = bigDecimal63.subtract(bigDecimal80);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl27.scalarMultiply(bigDecimal63);
        int[] intArray85 = new int[] { (byte) 62 };
        int[] intArray89 = new int[] { 6, (short) 388, (byte) 32 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl27.getSubMatrix(intArray85, intArray89);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[62]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[6, 388, 32]");
    }

    @Test
    public void test06475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06475");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl18.getColumn(0);
        int int21 = bigMatrixImpl18.getRoundingMode();
        int int22 = bigMatrixImpl18.getScale();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl37.transpose();
        int int39 = bigMatrixImpl37.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl37.getDataRef();
        bigMatrixImpl37.setScale((int) (short) 100);
        boolean boolean43 = bigMatrixImpl37.isSingular();
        int int44 = bigMatrixImpl37.getScale();
        int int45 = bigMatrixImpl37.getColumnDimension();
        double[] doubleArray47 = bigMatrixImpl37.getRowAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl18.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl18.getRowMatrix(3);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal51 = bigMatrixImpl18.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigMatrix50);
    }

    @Test
    public void test06476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06476");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        java.lang.String str20 = bigMatrixImpl14.toString();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = bigMatrixImpl14.getColumnAsDoubleArray(110);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str20, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
    }

    @Test
    public void test06477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06477");
        java.math.MathContext mathContext1 = null;
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(0.0d, mathContext1);
        java.math.BigDecimal bigDecimal4 = bigDecimal2.movePointRight((int) (byte) -11);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal11 = bigDecimal6.min(bigDecimal9);
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal11 };
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal14.min(bigDecimal17);
        java.math.BigDecimal[] bigDecimalArray20 = new java.math.BigDecimal[] { bigDecimal19 };
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal27 = bigDecimal22.min(bigDecimal25);
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal[][] bigDecimalArray29 = new java.math.BigDecimal[][] { bigDecimalArray12, bigDecimalArray20, bigDecimalArray28 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray29);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray29);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigInteger bigInteger39 = bigDecimal33.toBigInteger();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(bigInteger39);
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal43 = bigDecimal42.stripTrailingZeros();
        float float44 = bigDecimal42.floatValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.multiply(bigDecimal42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrix31.scalarAdd(bigDecimal45);
        short short47 = bigDecimal45.shortValueExact();
        java.math.BigDecimal bigDecimal48 = bigDecimal45.abs();
        java.math.BigDecimal bigDecimal50 = bigDecimal48.setScale((int) (byte) -1);
        java.math.MathContext mathContext51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal52 = bigDecimal4.divide(bigDecimal50, mathContext51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 97.0f + "'", float44 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 0 + "'", short47 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal50);
    }

    @Test
    public void test06478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06478");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger25 = bigDecimal24.unscaledValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal22.add(bigDecimal24);
        java.math.BigDecimal bigDecimal27 = bigDecimal11.multiply(bigDecimal22);
        java.math.BigDecimal bigDecimal29 = bigDecimal11.pow(100);
        int int30 = bigDecimal29.intValueExact();
        java.math.BigDecimal bigDecimal32 = bigDecimal29.movePointRight(100);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal((long) (short) 400);
        java.math.RoundingMode roundingMode35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal36 = bigDecimal32.divide(bigDecimal34, roundingMode35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
    }

    @Test
    public void test06479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06479");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        int int27 = bigMatrixImpl25.getRowDimension();
        boolean boolean28 = bigMatrixImpl25.isSquare();
        int int29 = bigMatrixImpl25.getRowDimension();
        java.lang.String str30 = bigMatrixImpl25.toString();
        bigMatrixImpl25.setScale(52);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal33 = bigMatrixImpl25.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str30, "BigMatrixImpl{{0},{0},{0}}");
    }

    @Test
    public void test06480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06480");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal10.divideAndRemainder(bigDecimal12);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.multiply(bigDecimal12);
        java.math.BigDecimal bigDecimal15 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray20 = bigDecimal17.divideAndRemainder(bigDecimal19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl21.copy();
        boolean boolean23 = bigMatrixImpl21.isSingular();
        int int24 = bigMatrixImpl21.getRowDimension();
        double[][] doubleArray25 = bigMatrixImpl21.getDataAsDoubleArray();
        java.lang.String str26 = bigMatrixImpl21.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.abs();
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl21.scalarMultiply(bigDecimal28);
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.TEN;
        java.lang.String str32 = bigDecimal31.toPlainString();
        int int33 = bigDecimal31.intValue();
        long long34 = bigDecimal31.longValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrix30.scalarMultiply(bigDecimal31);
        java.math.MathContext mathContext36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal37 = bigDecimal1.subtract(bigDecimal31, mathContext36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "BigMatrixImpl{{1},{0}}" + "'", str26, "BigMatrixImpl{{1},{0}}");
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10" + "'", str32, "10");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(bigMatrix35);
    }

    @Test
    public void test06481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06481");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double double9 = realMatrix6.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix6.copy();
        double[] doubleArray15 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix17.scalarAdd((double) 6);
        double double20 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix17.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix21.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix6.subtract(realMatrix22);
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        boolean boolean38 = bigMatrix37.isSingular();
        double[] doubleArray40 = bigMatrix37.getColumnAsDoubleArray((int) (short) 0);
        double[] doubleArray41 = realMatrix6.preMultiply(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 63.0d + "'", double9 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 63.0d + "'", double20 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[61.0]");
        org.junit.Assert.assertNotNull(realMatrix42);
    }

    @Test
    public void test06482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06482");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray22 = bigMatrixImpl20.getColumn(32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
    }

    @Test
    public void test06483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06483");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigInteger bigInteger22 = bigDecimal21.unscaledValue();
        java.math.BigInteger bigInteger23 = bigDecimal21.toBigIntegerExact();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger23, (int) (byte) 110);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigInteger23);
    }

    @Test
    public void test06484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06484");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        long long69 = bigDecimal67.longValue();
        long long70 = bigDecimal67.longValueExact();
        int int71 = bigDecimal67.precision();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        long long75 = bigDecimal73.longValue();
        long long76 = bigDecimal73.longValueExact();
        java.math.BigDecimal bigDecimal77 = bigDecimal67.add(bigDecimal73);
        java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal(0.0d);
        int int80 = bigDecimal79.intValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(0.0d);
        int int83 = bigDecimal82.intValue();
        java.math.BigDecimal bigDecimal84 = bigDecimal79.min(bigDecimal82);
        java.math.BigDecimal bigDecimal85 = bigDecimal77.min(bigDecimal82);
        java.math.BigDecimal bigDecimal87 = bigDecimal85.movePointRight((int) (short) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix88 = bigMatrixImpl27.scalarAdd(bigDecimal85);
        java.math.BigDecimal[][] bigDecimalArray89 = bigMatrix88.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrix88.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigMatrix88);
        org.junit.Assert.assertNotNull(bigDecimalArray89);
    }

    @Test
    public void test06485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06485");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        int int39 = bigMatrixImpl37.getColumnDimension();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (byte) -100);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl37.scalarMultiply(bigDecimal41);
        bigMatrixImpl37.setScale((-32));
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl37.getNorm();
        boolean boolean46 = bigMatrixImpl37.isSquare();
        java.lang.String str47 = bigMatrixImpl37.toString();
        java.lang.String[] strArray49 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray49);
        boolean boolean56 = bigMatrixImpl37.equals((java.lang.Object) bigMatrix55);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray58 = bigMatrixImpl37.getRowAsDoubleArray(5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{0.0}}" + "'", str47, "BigMatrixImpl{{0.0}}");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test06486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06486");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(bigInteger29);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.multiply(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.negate();
        java.math.BigDecimal bigDecimal37 = bigDecimal21.add(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        float float41 = bigDecimal39.floatValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigInteger bigInteger63 = bigDecimal54.toBigIntegerExact();
        java.math.BigDecimal bigDecimal64 = bigDecimal52.add(bigDecimal54);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger68 = bigDecimal67.unscaledValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal65.add(bigDecimal67);
        java.math.BigDecimal bigDecimal70 = bigDecimal54.multiply(bigDecimal65);
        java.math.BigDecimal bigDecimal71 = bigDecimal42.divide(bigDecimal65);
        java.math.BigDecimal bigDecimal72 = bigDecimal36.remainder(bigDecimal42);
        int int73 = bigDecimal42.intValueExact();
        java.math.MathContext mathContext74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal75 = bigDecimal42.abs(mathContext74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 97.0f + "'", float41 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test06487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06487");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal35 = bigDecimal9.ulp();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        java.lang.String str48 = bigDecimal47.toString();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        int int52 = bigDecimal50.signum();
        java.math.BigDecimal[] bigDecimalArray53 = bigDecimal47.divideAndRemainder(bigDecimal50);
        java.math.BigDecimal bigDecimal55 = bigDecimal47.pow((int) 'a');
        java.math.BigInteger bigInteger56 = bigDecimal47.toBigIntegerExact();
        java.math.BigDecimal bigDecimal57 = bigDecimal45.add(bigDecimal47);
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigInteger bigInteger68 = bigDecimal59.toBigIntegerExact();
        float float69 = bigDecimal59.floatValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal45.add(bigDecimal59);
        java.math.BigDecimal bigDecimal72 = bigDecimal59.pow((int) ' ');
        long long73 = bigDecimal72.longValueExact();
        int int74 = bigDecimal9.compareTo(bigDecimal72);
        java.math.BigDecimal bigDecimal75 = bigDecimal72.ulp();
        int int76 = bigDecimal72.precision();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 0.0f + "'", float69 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test06488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06488");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal("org.apache.commons.math.linear.InvalidMatrixException: 0", mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06489");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        double[][] doubleArray22 = realMatrix21.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.inverse();
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        double double42 = realMatrix41.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrix41.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix35.preMultiply(realMatrix44);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 1.0f);
        double[] doubleArray52 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix53 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray52);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrix54.scalarAdd((double) 6);
        int int57 = realMatrix54.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix54.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix47.preMultiply(realMatrix54);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix47.copy();
        boolean boolean62 = realMatrix61.isSquare();
        int int63 = realMatrix61.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrix21.add(realMatrix61);
        double[] doubleArray66 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray66);
        double[] doubleArray68 = realMatrix21.operate(doubleArray66);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray68);
        int int70 = realMatrix69.getColumnDimension();
        double double71 = realMatrix69.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[7.5116889E7]");
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 7.5116889E7d + "'", double71 == 7.5116889E7d);
    }

    @Test
    public void test06490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06490");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger28 = bigDecimal27.unscaledValue();
        java.lang.String str29 = bigDecimal27.toPlainString();
        java.math.BigDecimal bigDecimal30 = bigDecimal23.divideToIntegralValue(bigDecimal27);
        java.math.MathContext mathContext31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal32 = bigDecimal30.round(mathContext31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertNotNull(bigDecimal30);
    }

    @Test
    public void test06491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06491");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl26.getDataRef();
        java.lang.String str28 = bigMatrixImpl26.toString();
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        double[] doubleArray41 = realMatrix34.operate(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray41);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray41);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray45 = bigMatrixImpl26.operate(doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str28, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
    }

    @Test
    public void test06492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06492");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal((double) (short) -100);
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigInteger bigInteger46 = bigDecimal37.toBigIntegerExact();
        int int47 = bigDecimal37.precision();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        java.lang.String str50 = bigDecimal49.toString();
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal53 = bigDecimal52.stripTrailingZeros();
        int int54 = bigDecimal52.signum();
        java.math.BigDecimal[] bigDecimalArray55 = bigDecimal49.divideAndRemainder(bigDecimal52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        java.math.BigDecimal bigDecimal57 = bigMatrixImpl56.getNorm();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal70 = bigDecimal69.stripTrailingZeros();
        float float71 = bigDecimal69.floatValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.divideToIntegralValue(bigDecimal69);
        boolean boolean73 = bigMatrixImpl56.equals((java.lang.Object) bigDecimal69);
        java.math.BigDecimal[] bigDecimalArray74 = bigDecimal37.divideAndRemainder(bigDecimal69);
        java.math.BigDecimal bigDecimal75 = bigDecimal35.remainder(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl27.scalarMultiply(bigDecimal69);
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        int int79 = bigDecimal78.intValue();
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(0.0d);
        int int82 = bigDecimal81.intValue();
        java.math.BigDecimal bigDecimal83 = bigDecimal78.min(bigDecimal81);
        java.math.BigInteger bigInteger84 = bigDecimal78.toBigInteger();
        short short85 = bigDecimal78.shortValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl27.scalarAdd(bigDecimal78);
        java.math.BigDecimal bigDecimal88 = new java.math.BigDecimal(0.0d);
        java.lang.String str89 = bigDecimal88.toString();
        java.math.BigDecimal bigDecimal90 = bigDecimal88.plus();
        double double91 = bigDecimal88.doubleValue();
        java.math.BigDecimal bigDecimal92 = bigDecimal78.subtract(bigDecimal88);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0" + "'", str50, "0");
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 97.0f + "'", float71 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertTrue("'" + short85 + "' != '" + (short) 0 + "'", short85 == (short) 0);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "0" + "'", str89, "0");
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal92);
    }

    @Test
    public void test06493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06493");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        boolean boolean43 = bigMatrixImpl25.isSquare();
        java.math.BigDecimal[][] bigDecimalArray44 = bigMatrixImpl25.getData();
        java.lang.String str45 = bigMatrixImpl25.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl25.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double49 = realMatrix48.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.transpose();
        double[] doubleArray52 = realMatrix48.getColumn((int) (short) 10);
        double[] doubleArray54 = realMatrix48.getRow((int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl25.add(bigMatrix57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str45, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(bigMatrix57);
    }

    @Test
    public void test06494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06494");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode((int) '4');
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.min(bigDecimal51);
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal[][] bigDecimalArray55 = new java.math.BigDecimal[][] { bigDecimalArray38, bigDecimalArray46, bigDecimalArray54 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl58.getDataRef();
        java.math.BigDecimal bigDecimal60 = bigMatrixImpl58.getNorm();
        boolean boolean61 = bigMatrixImpl58.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl58.copy();
        double[] doubleArray64 = bigMatrixImpl58.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray66 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray67 = new java.lang.String[][] { strArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(strArray67);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl58.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl68);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl58.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl27.scalarAdd(bigDecimal70);
        java.math.BigDecimal bigDecimal73 = bigDecimal70.movePointLeft((int) (byte) -1);
        java.math.BigDecimal bigDecimal74 = bigDecimal73.plus();
        java.math.RoundingMode roundingMode76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal77 = bigDecimal73.setScale((int) (byte) -54, roundingMode76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal74);
    }

    @Test
    public void test06495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06495");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        boolean boolean27 = bigDecimal4.equals((java.lang.Object) realMatrix16);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix16.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix28.scalarMultiply((double) (byte) 97);
        double[] doubleArray35 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray35);
        double double37 = realMatrix36.getNorm();
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        double[] doubleArray50 = realMatrix43.operate(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray48);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrix52.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrix36.subtract(realMatrix52);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrix28.add(realMatrix36);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrix36.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix56.getRowMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrix56.getSubMatrix((-35), 2881, (int) (byte) 0, (int) (short) 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix58);
    }

    @Test
    public void test06496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06496");
        char[] charArray1 = new char[] { '4' };
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(charArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray1, (int) (short) 400, (int) (short) 9);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[4]");
    }

    @Test
    public void test06497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06497");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl5.copy();
        double[] doubleArray10 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray13 = bigMatrixImpl5.operate(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test06498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06498");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) 0);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.pow(4);
        java.math.MathContext mathContext4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal5 = bigDecimal1.negate(mathContext4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal3);
    }

    @Test
    public void test06499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06499");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal27 = bigDecimal1.min(bigDecimal16);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal[][] bigDecimalArray52 = new java.math.BigDecimal[][] { bigDecimalArray35, bigDecimalArray43, bigDecimalArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        java.math.BigDecimal[][] bigDecimalArray56 = bigMatrixImpl55.getDataRef();
        java.math.BigDecimal bigDecimal57 = bigMatrixImpl55.getNorm();
        boolean boolean58 = bigDecimal16.equals((java.lang.Object) bigMatrixImpl55);
        java.lang.String str59 = bigMatrixImpl55.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str59, "BigMatrixImpl{{0},{0},{0}}");
    }

    @Test
    public void test06500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06500");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        int int6 = realMatrix5.getColumnDimension();
        boolean boolean7 = realMatrix5.isSquare();
        double double8 = realMatrix5.getDeterminant();
        double[] doubleArray13 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray13);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray13);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix15.scalarAdd((double) 6);
        double double18 = realMatrix15.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix15.copy();
        double[] doubleArray24 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        double double26 = realMatrix25.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix25.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrix25.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix25.scalarAdd(1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix15.preMultiply(realMatrix31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrix5.add(realMatrix31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E20d + "'", double8 == 1.0E20d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 63.0d + "'", double18 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
    }
}


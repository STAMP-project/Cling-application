import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest37 {

    public static boolean debug = false;

    @Test
    public void test18501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18501");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isWith();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node23.hasChild(node33);
        int int35 = node23.getCharno();
        com.google.javascript.rhino.Node node36 = node13.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node41 = node13.srcref(node40);
        boolean boolean42 = node40.isNoSideEffectsCall();
        boolean boolean43 = node40.isGetterDef();
        com.google.javascript.rhino.Node node44 = node3.srcrefTree(node40);
        boolean boolean45 = node44.isIn();
        boolean boolean46 = node44.isAssignAdd();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable47 = node44.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor48 = ancestorIterable47.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor49 = ancestorIterable47.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator50 = ancestorIterable47.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(ancestorIterable47);
        org.junit.Assert.assertNotNull(nodeItor48);
        org.junit.Assert.assertNotNull(nodeItor49);
        org.junit.Assert.assertNotNull(nodeSpliterator50);
    }

    @Test
    public void test18502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18502");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        jSDocInfo0.setDeprecated(true);
        boolean boolean11 = jSDocInfo0.hasModifies();
        boolean boolean12 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getParameterNames();
        java.lang.String str15 = jSDocInfo0.getDescriptionForParameter("ERROR 1\n    STRING  0\n    STRING  0\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean17 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test18503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18503");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        boolean boolean22 = node20.isVar();
        boolean boolean23 = node20.isTypeOf();
        boolean boolean24 = node20.isAssignAdd();
        boolean boolean25 = node20.isStringKey();
        node20.setOptionalArg(true);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        boolean boolean37 = node31.isWith();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean42 = node41.isThrow();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node48.isDo();
        boolean boolean55 = node48.isDefaultCase();
        node48.setQuotedString();
        boolean boolean57 = node48.isDec();
        boolean boolean58 = node48.isLabel();
        boolean boolean59 = node48.isSetterDef();
        boolean boolean60 = node48.isRegExp();
        boolean boolean61 = node48.isName();
        boolean boolean62 = node48.isVoid();
        com.google.javascript.rhino.Node node63 = node48.cloneNode();
        com.google.javascript.rhino.Node node64 = node41.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node64.isFor();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(53, node20, node31, node64);
        node64.addSuppression("OR 1");
        boolean boolean69 = node64.isReturn();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = node64.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(staticSourceFile70);
    }

    @Test
    public void test18504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18504");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo1.getVersion();
        boolean boolean3 = jSDocInfo1.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo1.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo1.getImplementedInterfaces();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean10 = node9.isThrow();
        java.lang.String str14 = node9.toString(true, false, true);
        jSDocInfo1.setAssociatedNode(node9);
        com.google.javascript.rhino.Node node16 = node9.removeFirstChild();
        boolean boolean17 = node9.isNumber();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(52, node9, 45, 2);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int25 = node24.getType();
        boolean boolean26 = node24.isSyntheticBlock();
        node24.setQuotedString();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean33 = node32.isThrow();
        java.lang.String str37 = node32.toString(true, false, true);
        java.lang.String str38 = node32.getQualifiedName();
        boolean boolean39 = node32.isIn();
        com.google.javascript.rhino.Node node40 = node32.cloneTree();
        boolean boolean41 = node40.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(40, node40);
        com.google.javascript.rhino.Node node43 = node42.removeFirstChild();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        boolean boolean68 = node57.hasChild(node67);
        int int69 = node57.getCharno();
        com.google.javascript.rhino.Node node70 = node47.useSourceInfoIfMissingFrom(node57);
        boolean boolean71 = node47.isSwitch();
        java.lang.String str72 = node47.toString();
        boolean boolean73 = node47.wasEmptyNode();
        boolean boolean74 = node47.isAnd();
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.Node node76 = node24.useSourceInfoFrom(node47);
        boolean boolean77 = node20.hasChild(node76);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0" + "'", str14, "STRING  0");
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 40 + "'", int25 == 40);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "STRING  0" + "'", str37, "STRING  0");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR 1" + "'", str72, "OR 1");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test18505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18505");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        int int9 = sideEffectFlags1.valueOf();
        boolean boolean10 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test18506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18506");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str11 = jSDocInfo10.getVersion();
        boolean boolean12 = jSDocInfo10.hasEnumParameterType();
        boolean boolean13 = jSDocInfo10.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo10.getParameterType("STRING  0\n");
        jSDocInfo10.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo10.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo10.getAuthors();
        boolean boolean20 = jSDocInfo10.isConstructor();
        com.google.javascript.rhino.Node node21 = null;
        jSDocInfo10.setAssociatedNode(node21);
        boolean boolean23 = strSet9.remove((java.lang.Object) jSDocInfo10);
        boolean boolean24 = jSDocInfo10.isConstant();
        boolean boolean25 = jSDocInfo10.isInterface();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test18507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18507");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean6 = jSDocInfo0.hasType();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        java.lang.String str9 = jSDocInfo0.getLicense();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test18508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18508");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("STRING  0\n");
        jSDocInfo0.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("STRING  0 [var_args_name: 1]");
        boolean boolean12 = jSDocInfo0.isExpose();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = jSDocInfo0.getTypeNodes();
        java.lang.String str14 = jSDocInfo0.getMeaning();
        java.util.Collection<java.lang.String> strCollection15 = jSDocInfo0.getAuthors();
        java.lang.String str16 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(strCollection15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test18509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18509");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.isInc();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        java.lang.String str16 = node10.getQualifiedName();
        boolean boolean17 = node10.isThis();
        java.lang.String[] strArray20 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        boolean boolean28 = strSet21.addAll((java.util.Collection<java.lang.String>) strList26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str30 = jSDocInfo29.getVersion();
        java.lang.String str31 = jSDocInfo29.getFileOverview();
        boolean boolean32 = jSDocInfo29.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo29.getParameterNames();
        boolean boolean34 = strSet21.retainAll((java.util.Collection<java.lang.String>) strSet33);
        java.util.stream.Stream<java.lang.String> strStream35 = strSet21.stream();
        node10.setDirectives((java.util.Set<java.lang.String>) strSet21);
        boolean boolean37 = node10.isFor();
        com.google.javascript.rhino.Node node38 = node3.srcref(node10);
        int int39 = node10.getChildCount();
        boolean boolean40 = node10.isBlock();
        boolean boolean42 = node10.getBooleanProp(16419);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test18510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18510");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        jSDocInfo0.setLicense("(STRING  0 [source_file: Named type with empty name component])");
        jSDocInfo0.setLicense("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n)");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 39);
        com.google.javascript.rhino.Node node16 = node14.getAncestor(44);
        boolean boolean17 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node21.setCharno(1);
        boolean boolean24 = node21.isRegExp();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node29.isDo();
        boolean boolean36 = node29.isDefaultCase();
        node29.setQuotedString();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoFromForTree(node29);
        node29.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean42 = node29.isVarArgs();
        boolean boolean43 = node29.isName();
        node29.setLineno((-1));
        boolean boolean46 = node29.isDebugger();
        com.google.javascript.rhino.Node node47 = node14.srcref(node29);
        com.google.javascript.rhino.InputId inputId48 = null;
        node29.setInputId(inputId48);
        node29.setSourceFileForTesting("((ERROR))");
        boolean boolean52 = strSet12.remove((java.lang.Object) node29);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test18511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18511");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        int int10 = node9.getType();
        boolean boolean11 = node9.isDelProp();
        boolean boolean12 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node23 = node9.copyInformationFromForTree(node17);
        boolean boolean24 = node17.isOr();
        boolean boolean25 = node17.isWhile();
        node17.putIntProp((int) ' ', 131104);
        boolean boolean29 = node17.isTypeOf();
        boolean boolean30 = node17.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test18512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18512");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node13.setCharno(1);
        boolean boolean16 = node13.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node34.setCharno(1);
        java.util.Set<java.lang.String> strSet37 = node34.getDirectives();
        node34.setLength(0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node30, node34, node49, (int) 'a', (int) (short) 0);
        boolean boolean53 = node30.isNull();
        com.google.javascript.rhino.jstype.JSType jSType54 = node30.getJSType();
        jSDocInfo0.setAssociatedNode(node30);
        boolean boolean57 = jSDocInfo0.hasParameter("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nNUMBER 54.0 52\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: NUMBER 54.0 52\n)");
        com.google.javascript.rhino.Node node58 = jSDocInfo0.getAssociatedNode();
        boolean boolean59 = node58.isNumber();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test18513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18513");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node19.removeFirstChild();
        boolean boolean25 = node24.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str27 = jSDocInfo26.getVersion();
        boolean boolean28 = jSDocInfo26.hasEnumParameterType();
        boolean boolean29 = jSDocInfo26.isNoAlias();
        java.lang.String str31 = jSDocInfo26.getDescriptionForParameter("JSDocInfo");
        boolean boolean32 = jSDocInfo26.hasEnumParameterType();
        boolean boolean33 = jSDocInfo26.isIdGenerator();
        java.lang.String str34 = jSDocInfo26.getFileOverview();
        java.lang.String str35 = jSDocInfo26.getMeaning();
        boolean boolean36 = jSDocInfo26.isConstant();
        node24.setJSDocInfo(jSDocInfo26);
        java.lang.String str38 = node24.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "STRING  0 [jsdoc_info: JSDocInfo]" + "'", str38, "STRING  0 [jsdoc_info: JSDocInfo]");
    }

    @Test
    public void test18514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18514");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray5);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(41, nodeArray5, (int) (byte) 100, 4131);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(45, nodeArray5);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(38, nodeArray5, 49, 16);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(5, nodeArray5, 1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test18515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18515");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean6 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str8 = jSDocInfo7.getVersion();
        boolean boolean9 = jSDocInfo7.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo7.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo7.setVisibility(visibility11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str14 = jSDocInfo13.getVersion();
        boolean boolean15 = jSDocInfo13.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo13.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo13.setVisibility(visibility17);
        jSDocInfo7.setVisibility(visibility17);
        jSDocInfo0.setVisibility(visibility17);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean22 = jSDocInfo0.hasModifies();
        boolean boolean24 = jSDocInfo0.hasDescriptionForParameter("(Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  1044480\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  1044480\n)");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test18516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18516");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        boolean boolean22 = node20.isVar();
        boolean boolean23 = node20.isTypeOf();
        boolean boolean24 = node20.isAssignAdd();
        java.lang.String str25 = node20.getQualifiedName();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node35.hasChild(node45);
        boolean boolean47 = node45.isVar();
        boolean boolean48 = node45.isCase();
        boolean boolean49 = node20.hasChild(node45);
        boolean boolean50 = node20.isDebugger();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(21, node20);
        boolean boolean52 = node20.isVarArgs();
        boolean boolean53 = node20.isAdd();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test18517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18517");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node43.hasChild(node53);
        int int55 = node43.getCharno();
        com.google.javascript.rhino.Node node56 = node33.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node63 = node61.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node61, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node73 = node71.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) -1, node71, (int) (byte) 1, (int) '#');
        boolean boolean77 = node66.hasChild(node76);
        boolean boolean78 = node76.isVar();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((-1), node43, node76);
        boolean boolean80 = node43.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = node43.getJSDocInfo();
        com.google.javascript.rhino.Node node82 = node26.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean83 = node43.isAssignAdd();
        java.lang.String str84 = node43.getSourceFileName();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test18518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18518");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        int int12 = stringPosition0.getStartLine();
        java.lang.String str13 = stringPosition0.getItem();
        int int14 = stringPosition0.getPositionOnEndLine();
        java.lang.String str15 = stringPosition0.getItem();
        int int16 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("(ERROR 1\n    STRING  0\n    STRING  0\n)");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n" + "'", str13, "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n" + "'", str15, "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test18519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18519");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        boolean boolean66 = node65.isHook();
        boolean boolean67 = node65.isQualifiedName();
        boolean boolean68 = node65.isIn();
        node65.setSourceFileForTesting("NUMBER -1.0 0\n");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = node65.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test18520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18520");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isContinue();
        boolean boolean53 = node50.isDefaultCase();
        com.google.javascript.rhino.Node node54 = node50.cloneNode();
        boolean boolean55 = node54.isAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node60.setCharno(1);
        boolean boolean63 = node60.isRegExp();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node70 = node68.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) -1, node68, (int) (byte) 1, (int) '#');
        boolean boolean74 = node68.isDo();
        boolean boolean75 = node68.isDefaultCase();
        node68.setQuotedString();
        com.google.javascript.rhino.Node node77 = node60.useSourceInfoFromForTree(node68);
        boolean boolean78 = node60.isInc();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(30, node60);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double84 = node83.getDouble();
        boolean boolean85 = node83.isAdd();
        com.google.javascript.rhino.Node node86 = node83.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType87 = node86.getJSType();
        java.lang.String str88 = node86.toStringTree();
        node60.addChildToFront(node86);
        com.google.javascript.rhino.Node node90 = node54.copyInformationFromForTree(node86);
        com.google.javascript.rhino.Node node91 = node54.removeChildren();
        com.google.javascript.rhino.jstype.JSType jSType92 = node54.getJSType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node93 = node54.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4095.0d + "'", double84 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "NUMBER 4095.0 100\n" + "'", str88, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNull(jSType92);
    }

    @Test
    public void test18521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18521");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(17, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test18522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18522");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue2.or(ternaryValue4);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue7.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue9.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue5.and(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue0.and(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str16 = ternaryValue15.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue0.and(ternaryValue15);
        boolean boolean19 = ternaryValue17.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue17.not();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "false" + "'", str16, "false");
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ternaryValue20);
    }

    @Test
    public void test18523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18523");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        boolean boolean22 = node20.isCase();
        boolean boolean23 = node20.isFalse();
        boolean boolean24 = node20.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test18524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18524");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isConstant();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        int int10 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test18525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18525");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) ' ', (int) (byte) 0, 16);
        boolean boolean4 = node3.isGetterDef();
        boolean boolean5 = node3.isCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node20.hasChild(node30);
        int int32 = node20.getCharno();
        com.google.javascript.rhino.Node node33 = node10.useSourceInfoIfMissingFrom(node20);
        boolean boolean34 = node20.isAssignAdd();
        boolean boolean35 = node20.isUnscopedQualifiedName();
        int int36 = node20.getLineno();
        node20.addSuppression("STRING ");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 32);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 100, node20, node40);
        node3.addChildToBack(node41);
        boolean boolean43 = node41.isThrow();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean48 = node47.isThrow();
        java.lang.String str52 = node47.toString(true, false, true);
        java.lang.String str53 = node47.getQualifiedName();
        boolean boolean54 = node47.isThis();
        java.lang.String[] strArray57 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        boolean boolean65 = strSet58.addAll((java.util.Collection<java.lang.String>) strList63);
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str67 = jSDocInfo66.getVersion();
        java.lang.String str68 = jSDocInfo66.getFileOverview();
        boolean boolean69 = jSDocInfo66.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo66.getParameterNames();
        boolean boolean71 = strSet58.retainAll((java.util.Collection<java.lang.String>) strSet70);
        java.util.stream.Stream<java.lang.String> strStream72 = strSet58.stream();
        node47.setDirectives((java.util.Set<java.lang.String>) strSet58);
        boolean boolean74 = node47.isFor();
        node47.detachChildren();
        com.google.javascript.rhino.InputId inputId76 = node47.getInputId();
        node41.addChildrenToBack(node47);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean82 = node81.isThrow();
        java.lang.String str86 = node81.toString(true, false, true);
        int int88 = node81.getIntProp(51);
        node81.addSuppression("STRING  0 [quoted: 1]\n");
        node81.setSourceEncodedPositionForTree(3);
        java.lang.String str96 = node81.toString(true, true, true);
        com.google.javascript.rhino.Node node97 = node47.useSourceInfoFromForTree(node81);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "STRING  0" + "'", str52, "STRING  0");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "STRING  0" + "'", str86, "STRING  0");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "STRING  0 [jsdoc_info: JSDocInfo]" + "'", str96, "STRING  0 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test18526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18526");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        node32.addSuppression("STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean68 = node67.isThrow();
        java.lang.String str72 = node67.toString(true, false, true);
        int int74 = node67.getIntProp(51);
        node67.addSuppression("STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node77 = node32.useSourceInfoFrom(node67);
        boolean boolean78 = node77.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node77.getJSDocInfo();
        boolean boolean80 = jSDocInfo79.hasFileOverview();
        boolean boolean81 = jSDocInfo79.isExport();
        boolean boolean82 = jSDocInfo79.isNoSideEffects();
        com.google.javascript.rhino.Node node83 = jSDocInfo79.getAssociatedNode();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  0" + "'", str72, "STRING  0");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(node83);
    }

    @Test
    public void test18527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18527");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 4111);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test18528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18528");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        node4.setType(38);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("STRING  0 [synthetic: 1]\n", (int) ' ', (int) (byte) -1);
        node38.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node55.hasChild(node65);
        int int67 = node55.getCharno();
        com.google.javascript.rhino.Node node68 = node45.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node75 = node73.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) -1, node73, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node85 = node83.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) -1, node83, (int) (byte) 1, (int) '#');
        boolean boolean89 = node78.hasChild(node88);
        boolean boolean90 = node88.isVar();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((-1), node55, node88);
        com.google.javascript.rhino.Node node92 = node91.getParent();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) ' ', node4, node38, node91);
        com.google.javascript.rhino.Node node94 = node91.getFirstChild();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test18529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18529");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
    }

    @Test
    public void test18530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18530");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getStartLine();
        int int9 = stringPosition0.getStartLine();
        stringPosition0.setItem("Not declared as a constructor");
        stringPosition0.setPositionInformation((int) (byte) 10, 4095, 45, 45);
        stringPosition0.setPositionInformation(0, 53, 5, 31);
        int int22 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
    }

    @Test
    public void test18531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18531");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("STRING \n");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test18532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18532");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        int int27 = node15.getCharno();
        com.google.javascript.rhino.Node node28 = node5.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        boolean boolean50 = node48.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((-1), node15, node48);
        com.google.javascript.rhino.Node node52 = node51.getParent();
        boolean boolean53 = node51.isSetterDef();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((-1), node51);
        int int55 = node54.getSideEffectFlags();
        com.google.javascript.rhino.Node node56 = node54.removeChildren();
        boolean boolean57 = node56.isReturn();
        boolean boolean58 = node56.isStringKey();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(49, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(40, node63);
        node56.addChildToFront(node64);
        int int66 = node64.getChildCount();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test18533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18533");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray6);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(41, nodeArray6, (int) (byte) 100, 4131);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(45, nodeArray6);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(29, nodeArray6);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6, 41, 0);
        boolean boolean17 = node16.isDec();
        boolean boolean18 = node16.hasMoreThanOneChild();
        boolean boolean19 = node16.isCall();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test18534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18534");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        boolean boolean21 = node3.isInc();
        java.lang.String str25 = node3.toString(true, false, true);
        boolean boolean26 = node3.isDebugger();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node3.getStaticSourceFile();
        boolean boolean28 = node3.isWhile();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder29 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        node33.removeProp(47);
        boolean boolean36 = node33.isFromExterns();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double41 = node40.getDouble();
        boolean boolean42 = node40.isAdd();
        com.google.javascript.rhino.Node node43 = node40.cloneNode();
        boolean boolean44 = node43.isNE();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node56 = node54.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) -1, node54, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        boolean boolean70 = node59.hasChild(node69);
        int int71 = node59.getCharno();
        com.google.javascript.rhino.Node node72 = node49.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node77 = node49.srcref(node76);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean82 = node81.isFromExterns();
        boolean boolean83 = node77.hasChild(node81);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(52, node81);
        node43.addChildToBack(node84);
        java.lang.String str86 = node33.checkTreeEquals(node43);
        node33.setSourceFileForTesting("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        node33.setLength((int) (byte) 1);
        node33.setSourceEncodedPositionForTree(151562);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile93 = node33.getStaticSourceFile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile94 = node33.getStaticSourceFile();
        node3.setStaticSourceFile(staticSourceFile94);
        node3.setCharno(0);
        boolean boolean98 = node3.isCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING  0" + "'", str25, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 4095.0d + "'", double41 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n" + "'", str86, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        org.junit.Assert.assertNotNull(staticSourceFile93);
        org.junit.Assert.assertNotNull(staticSourceFile94);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test18535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18535");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node3.isFunction();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder28 = node3.new FileLevelJsDocBuilder();
        node3.setIsSyntheticBlock(true);
        boolean boolean31 = node3.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test18536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18536");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        int int21 = node20.getCharno();
        boolean boolean22 = node20.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            node20.setDouble((double) 45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test18537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18537");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.lang.Object[] objArray9 = strSet8.toArray();
        java.lang.Object[] objArray10 = strSet8.toArray();
        int int11 = strSet8.size();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test18538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18538");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str5 = jSDocInfo4.getVersion();
        boolean boolean6 = jSDocInfo4.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo4.getParameterNames();
        jSDocInfo4.addSuppression("");
        java.lang.String str10 = jSDocInfo4.getBlockDescription();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection11 = jSDocInfo4.getMarkers();
        boolean boolean12 = strSet2.remove((java.lang.Object) markerCollection11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean17 = node16.isThrow();
        java.lang.String str21 = node16.toString(true, false, true);
        node16.setIsSyntheticBlock(true);
        int int24 = node16.getLength();
        boolean boolean25 = node16.isNumber();
        node16.setSourceEncodedPositionForTree(40);
        boolean boolean28 = node16.isLocalResultCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node16.children();
        boolean boolean30 = strSet2.contains((java.lang.Object) node16);
        java.util.Spliterator<java.lang.String> strSpliterator31 = strSet2.spliterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(markerCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "STRING  0" + "'", str21, "STRING  0");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSpliterator31);
    }

    @Test
    public void test18539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18539");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(stringPosition10);
    }

    @Test
    public void test18540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18540");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test18541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18541");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        java.lang.String str12 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test18542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18542");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType12);
    }

    @Test
    public void test18543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18543");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 51);
        boolean boolean2 = node1.isVar();
        com.google.javascript.rhino.Node node3 = node1.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test18544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18544");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        node32.addSuppression("STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = node32.getStaticSourceFile();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(49);
        int int67 = node66.getLength();
        com.google.javascript.rhino.Node node68 = node32.useSourceInfoFromForTree(node66);
        boolean boolean69 = node32.isThrow();
        boolean boolean70 = node32.isTry();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(staticSourceFile64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test18545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18545");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet2.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet0.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet2.union(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet7.intersection(booleanLiteralSet9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test18546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18546");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean7 = node6.isThrow();
        java.lang.String str11 = node6.toString(true, false, true);
        java.lang.String str12 = node6.getQualifiedName();
        boolean boolean13 = node6.isIn();
        com.google.javascript.rhino.Node node14 = node6.cloneTree();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node19.isScript();
        com.google.javascript.rhino.Node node26 = node19.detachFromParent();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node30.setCharno(1);
        java.util.Set<java.lang.String> strSet33 = node30.getDirectives();
        boolean boolean34 = node30.isHook();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node66 = node38.srcref(node65);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(4095, node14, node26, node30, node38);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        int int78 = node77.getType();
        boolean boolean79 = node30.isEquivalentTo(node77);
        boolean boolean80 = node30.isUnscopedQualifiedName();
        node30.setVarArgs(false);
        boolean boolean83 = node30.isAssign();
        boolean boolean84 = node30.isLabelName();
        boolean boolean85 = node30.isLocalResultCall();
        boolean boolean86 = node30.isDelProp();
        boolean boolean87 = node30.isWhile();
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int92 = node91.getSourcePosition();
        int int93 = node91.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable94 = node91.children();
        com.google.javascript.rhino.Node node95 = node91.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = new com.google.javascript.rhino.Node(29, node1, node30, node91, 32, 397361);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  0" + "'", str11, "STRING  0");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 40 + "'", int93 == 40);
        org.junit.Assert.assertNotNull(nodeIterable94);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test18547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18547");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str8 = jSDocInfo7.getVersion();
        boolean boolean9 = jSDocInfo7.hasEnumParameterType();
        java.lang.String str11 = jSDocInfo7.getDescriptionForParameter("STRING  0\n");
        boolean boolean12 = jSDocInfo7.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str14 = jSDocInfo13.getVersion();
        boolean boolean15 = jSDocInfo13.hasEnumParameterType();
        boolean boolean16 = jSDocInfo13.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo13.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo13.setVisibility(visibility18);
        jSDocInfo7.setVisibility(visibility18);
        jSDocInfo0.setVisibility(visibility18);
        java.lang.String str22 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test18548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18548");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        java.lang.String str9 = jSDocInfo0.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test18549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18549");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean11 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getEnumParameterType();
        boolean boolean13 = jSDocInfo0.isDefine();
        java.lang.String str14 = jSDocInfo0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JSDocInfo" + "'", str14, "JSDocInfo");
    }

    @Test
    public void test18550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18550");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node24 = node9.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int29 = node28.getType();
        com.google.javascript.rhino.Node node30 = node28.cloneNode();
        com.google.javascript.rhino.Node node31 = node24.useSourceInfoFrom(node28);
        boolean boolean32 = node28.isNoSideEffectsCall();
        boolean boolean33 = node28.isBlock();
        boolean boolean34 = node28.isOr();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test18551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18551");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        java.lang.String str6 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection8 = jSDocInfo0.getMarkers();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(markerCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test18552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18552");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        jSDocInfo0.setDeprecated(true);
        boolean boolean11 = jSDocInfo0.hasModifies();
        boolean boolean12 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getParameterNames();
        java.lang.String str15 = jSDocInfo0.getDescriptionForParameter("ERROR 1\n    STRING  0\n    STRING  0\n");
        java.util.Collection<java.lang.String> strCollection16 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(strCollection16);
    }

    @Test
    public void test18553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18553");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("Not declared as a constructor");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        boolean boolean12 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18554");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        java.lang.String[] strArray12 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        boolean boolean20 = strSet13.addAll((java.util.Collection<java.lang.String>) strList18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str22 = jSDocInfo21.getVersion();
        java.lang.String str23 = jSDocInfo21.getFileOverview();
        boolean boolean24 = jSDocInfo21.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo21.getParameterNames();
        boolean boolean26 = strSet13.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.stream.Stream<java.lang.String> strStream27 = strSet13.stream();
        java.lang.String[] strArray30 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        boolean boolean38 = strSet31.addAll((java.util.Collection<java.lang.String>) strList36);
        boolean boolean40 = strSet31.remove((java.lang.Object) 1L);
        java.util.stream.Stream<java.lang.String> strStream41 = strSet31.parallelStream();
        java.lang.Object[] objArray42 = strSet31.toArray();
        boolean boolean43 = strSet13.addAll((java.util.Collection<java.lang.String>) strSet31);
        int int44 = strSet31.size();
        boolean boolean45 = strSet31.isEmpty();
        boolean boolean46 = strSet31.isEmpty();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("Unknown class name", (int) (short) 0, 4095);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node58 = node56.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) -1, node56, (int) (byte) 1, (int) '#');
        boolean boolean62 = node56.isDo();
        boolean boolean63 = node56.isDefaultCase();
        node56.setQuotedString();
        boolean boolean65 = node56.isDec();
        boolean boolean66 = node56.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable67 = node56.siblings();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(51);
        java.lang.String str70 = node56.checkTreeEquals(node69);
        boolean boolean71 = node56.isOr();
        node50.putProp(0, (java.lang.Object) node56);
        boolean boolean73 = strSet31.equals((java.lang.Object) node56);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str75 = jSDocInfo74.getVersion();
        boolean boolean76 = jSDocInfo74.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet77 = jSDocInfo74.getParameterNames();
        jSDocInfo74.addSuppression("");
        boolean boolean80 = jSDocInfo74.isImplicitCast();
        boolean boolean81 = jSDocInfo74.isIdGenerator();
        int int82 = jSDocInfo74.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo74.getImplementedInterfaces();
        boolean boolean84 = strSet31.remove((java.lang.Object) jSDocInfo74);
        boolean boolean85 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet31);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[STRING  0, hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[STRING  0, hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeIterable67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str70, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test18555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18555");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 39 + "'", int3 == 39);
    }

    @Test
    public void test18556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18556");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isSetterDef();
        boolean boolean53 = node50.isEmpty();
        boolean boolean54 = node50.isSetterDef();
        node50.removeProp(53);
        node50.setSourceEncodedPosition(51);
        boolean boolean59 = node50.isHook();
        boolean boolean60 = node50.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node67 = node65.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) -1, node65, (int) (byte) 1, (int) '#');
        int int71 = node70.getType();
        boolean boolean72 = node70.isDelProp();
        boolean boolean73 = node70.isCase();
        int int74 = node70.getLineno();
        boolean boolean75 = node70.isInstanceOf();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node76 = node50.getChildBefore(node70);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test18557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18557");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(51);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node8 = node6.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, (int) (byte) 1, (int) '#');
        boolean boolean12 = node6.isDo();
        boolean boolean13 = node6.isDefaultCase();
        node6.setQuotedString();
        com.google.javascript.rhino.Node node15 = node1.copyInformationFrom(node6);
        boolean boolean16 = node6.isAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node6.getJSDocInfo();
        node6.setQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str21 = jSDocInfo20.getVersion();
        boolean boolean22 = jSDocInfo20.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getImplementedInterfaces();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean29 = node28.isThrow();
        java.lang.String str33 = node28.toString(true, false, true);
        jSDocInfo20.setAssociatedNode(node28);
        com.google.javascript.rhino.Node node35 = node28.removeFirstChild();
        boolean boolean36 = node28.isNumber();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(52, node28, 45, 2);
        boolean boolean40 = node28.isRegExp();
        boolean boolean41 = node28.isScript();
        boolean boolean42 = node28.isReturn();
        // The following exception was thrown during execution in test generation
        try {
            node6.addChildrenToFront(node28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "STRING  0" + "'", str33, "STRING  0");
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test18558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18558");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        boolean boolean20 = node11.isDec();
        boolean boolean21 = node11.isLabel();
        boolean boolean22 = node11.isSetterDef();
        boolean boolean23 = node11.isRegExp();
        boolean boolean24 = node11.isName();
        boolean boolean25 = node11.isVoid();
        com.google.javascript.rhino.Node node26 = node11.cloneNode();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node26);
        boolean boolean28 = node4.isFunction();
        boolean boolean29 = node4.isVoid();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int34 = node33.getType();
        com.google.javascript.rhino.Node node35 = node33.cloneNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder36 = node33.new FileLevelJsDocBuilder();
        boolean boolean37 = node33.isFunction();
        int int38 = node33.getLength();
        com.google.javascript.rhino.InputId inputId39 = node33.getInputId();
        boolean boolean40 = node33.isWhile();
        node4.addChildrenToBack(node33);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 1, node4, 213002, 1);
        boolean boolean45 = node44.isLabelName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 40 + "'", int34 == 40);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(inputId39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test18559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18559");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        com.google.javascript.rhino.Node node16 = node4.getLastSibling();
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isNew();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node27.isScript();
        node27.setQuotedString();
        com.google.javascript.rhino.Node node35 = node22.srcrefTree(node27);
        boolean boolean36 = node35.isIf();
        com.google.javascript.rhino.Node node37 = node35.getParent();
        node35.removeProp((int) 'a');
        int int40 = node35.getLineno();
        com.google.javascript.rhino.Node node41 = node16.copyInformationFrom(node35);
        boolean boolean42 = node41.isThis();
        node41.setLength(100);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test18560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18560");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node13.setCharno(1);
        boolean boolean16 = node13.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node34.setCharno(1);
        java.util.Set<java.lang.String> strSet37 = node34.getDirectives();
        node34.setLength(0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node30, node34, node49, (int) 'a', (int) (short) 0);
        boolean boolean53 = node30.isNull();
        com.google.javascript.rhino.jstype.JSType jSType54 = node30.getJSType();
        jSDocInfo0.setAssociatedNode(node30);
        boolean boolean56 = jSDocInfo0.shouldPreserveTry();
        boolean boolean57 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str60 = jSDocInfo59.getVersion();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo59.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream62 = strSet61.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str64 = jSDocInfo63.getVersion();
        boolean boolean65 = jSDocInfo63.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet66 = jSDocInfo63.getParameterNames();
        jSDocInfo63.addSuppression("");
        java.lang.String str69 = jSDocInfo63.getBlockDescription();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection70 = jSDocInfo63.getMarkers();
        boolean boolean71 = strSet61.remove((java.lang.Object) markerCollection70);
        strSet61.clear();
        boolean boolean73 = strSet58.addAll((java.util.Collection<java.lang.String>) strSet61);
        strSet61.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strStream62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(markerCollection70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test18561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18561");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "true", 0, 54);
        int int5 = node4.getCharno();
        boolean boolean6 = node4.isParamList();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54 + "'", int5 == 54);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test18562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18562");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        node7.setQuotedString();
        boolean boolean16 = node7.isDec();
        boolean boolean17 = node7.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node7.siblings();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(51);
        java.lang.String str21 = node7.checkTreeEquals(node20);
        boolean boolean22 = node7.isCatch();
        com.google.javascript.rhino.InputId inputId23 = null;
        node7.setInputId(inputId23);
        typePosition0.setItem(node7);
        int int26 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node27 = typePosition0.getItem();
        int int28 = typePosition0.getStartLine();
        int int29 = typePosition0.getEndLine();
        int int30 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node34.setCharno(1);
        java.util.Set<java.lang.String> strSet37 = node34.getDirectives();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder38 = node34.getJsDocBuilderForNode();
        typePosition0.setItem(node34);
        int int40 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str21, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test18563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18563");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isIf();
        com.google.javascript.rhino.Node node18 = node16.getParent();
        node16.removeProp((int) 'a');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean25 = node24.isThrow();
        java.lang.String str29 = node24.toString(true, false, true);
        node24.setQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.getVersion();
        boolean boolean33 = jSDocInfo31.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo31.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo31.setVisibility(visibility35);
        node24.setJSDocInfo(jSDocInfo31);
        com.google.javascript.rhino.Node node38 = node16.clonePropsFrom(node24);
        boolean boolean39 = node38.isCatch();
        boolean boolean40 = node38.hasChildren();
        boolean boolean41 = node38.isAssignAdd();
        boolean boolean42 = node38.hasChildren();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING  0" + "'", str29, "STRING  0");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test18564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18564");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 21, 13, 11);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test18565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18565");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
    }

    @Test
    public void test18566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18566");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test18567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18567");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        int int11 = strSet3.size();
        java.lang.String[] strArray14 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = strSet15.addAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        boolean boolean26 = jSDocInfo23.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo23.getParameterNames();
        boolean boolean28 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        int int66 = node54.getCharno();
        com.google.javascript.rhino.Node node67 = node44.useSourceInfoIfMissingFrom(node54);
        int int68 = node44.getSourcePosition();
        java.lang.String str69 = node44.toString();
        int int70 = node33.getIndexOfChild(node44);
        boolean boolean71 = strSet15.equals((java.lang.Object) node33);
        boolean boolean72 = strSet15.isEmpty();
        boolean boolean73 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet15);
        java.util.Spliterator<java.lang.String> strSpliterator74 = strSet15.spliterator();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4131 + "'", int68 == 4131);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "OR 1" + "'", str69, "OR 1");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSpliterator74);
    }

    @Test
    public void test18568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18568");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("STRING OR 1 0");
        boolean boolean11 = jSDocInfo0.isOverride();
        boolean boolean12 = jSDocInfo0.isConstructor();
        boolean boolean14 = jSDocInfo0.hasParameter("((((OR 51))))");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test18569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18569");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node3.isVar();
        boolean boolean18 = node3.isCase();
        boolean boolean19 = node3.isLocalResultCall();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.isDo();
        boolean boolean31 = node24.isDefaultCase();
        node24.setQuotedString();
        boolean boolean33 = node24.isDec();
        boolean boolean34 = node24.isLabel();
        boolean boolean35 = node24.isSetterDef();
        com.google.javascript.rhino.Node node36 = node24.cloneTree();
        boolean boolean37 = node3.isEquivalentToTyped(node24);
        boolean boolean38 = node24.isBlock();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test18570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18570");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType14 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertNull(jSType14);
    }

    @Test
    public void test18571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18571");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getParameterType("JSDocInfo");
        boolean boolean13 = jSDocInfo0.hasFileOverview();
        boolean boolean14 = jSDocInfo0.isImplicitCast();
        boolean boolean16 = jSDocInfo0.hasDescriptionForParameter("false");
        boolean boolean17 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(markerCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test18572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18572");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        boolean boolean24 = node19.isStringKey();
        com.google.javascript.rhino.Node node25 = node19.removeChildren();
        java.lang.String[] strArray28 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strSet29.addAll((java.util.Collection<java.lang.String>) strList34);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str38 = jSDocInfo37.getVersion();
        java.lang.String str39 = jSDocInfo37.getFileOverview();
        boolean boolean40 = jSDocInfo37.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo37.getParameterNames();
        boolean boolean42 = strSet29.retainAll((java.util.Collection<java.lang.String>) strSet41);
        java.lang.String[] strArray45 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        boolean boolean53 = strSet46.addAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean54 = strSet29.containsAll((java.util.Collection<java.lang.String>) strSet46);
        java.lang.Object[] objArray55 = strSet46.toArray();
        boolean boolean57 = strSet46.contains((java.lang.Object) 32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str59 = jSDocInfo58.getVersion();
        java.lang.String str60 = jSDocInfo58.getFileOverview();
        boolean boolean61 = jSDocInfo58.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet62 = jSDocInfo58.getParameterNames();
        boolean boolean63 = strSet46.containsAll((java.util.Collection<java.lang.String>) strSet62);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node70 = node68.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) -1, node68, (int) (byte) 1, (int) '#');
        boolean boolean74 = node68.isDo();
        boolean boolean75 = node68.isDefaultCase();
        node68.setQuotedString();
        boolean boolean77 = node68.isDec();
        boolean boolean78 = node68.isLabel();
        boolean boolean79 = node68.wasEmptyNode();
        boolean boolean80 = strSet46.contains((java.lang.Object) node68);
        int int81 = strSet46.size();
        node19.setDirectives((java.util.Set<java.lang.String>) strSet46);
        boolean boolean83 = node19.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[STRING  0, hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[STRING  0, hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test18573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18573");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        boolean boolean22 = node20.isCase();
        boolean boolean23 = node20.isFalse();
        boolean boolean24 = node20.isCall();
        boolean boolean25 = node20.isOr();
        boolean boolean26 = node20.isFromExterns();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean31 = node30.isLabelName();
        boolean boolean32 = node30.isVarArgs();
        boolean boolean33 = node30.isSetterDef();
        boolean boolean34 = node30.isEmpty();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable35 = node30.getAncestors();
        boolean boolean36 = node30.isContinue();
        com.google.javascript.rhino.Node node37 = node20.useSourceInfoFromForTree(node30);
        boolean boolean38 = node20.isQualifiedName();
        com.google.javascript.rhino.Node node39 = node20.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ancestorIterable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
    }

    @Test
    public void test18574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18574");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        node4.setType(38);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("STRING  0 [synthetic: 1]\n", (int) ' ', (int) (byte) -1);
        node38.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node55.hasChild(node65);
        int int67 = node55.getCharno();
        com.google.javascript.rhino.Node node68 = node45.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node75 = node73.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) -1, node73, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node85 = node83.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) -1, node83, (int) (byte) 1, (int) '#');
        boolean boolean89 = node78.hasChild(node88);
        boolean boolean90 = node88.isVar();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((-1), node55, node88);
        com.google.javascript.rhino.Node node92 = node91.getParent();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) ' ', node4, node38, node91);
        node93.setWasEmptyNode(false);
        boolean boolean96 = node93.isFalse();
        java.lang.String str97 = node93.toString();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "TYPEOF" + "'", str97, "TYPEOF");
    }

    @Test
    public void test18575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18575");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("STRING  0\n");
        node2.putBooleanProp(30, false);
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node2.getIndexOfChild(node6);
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray10);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(29, nodeArray10);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(0, node2, node12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node13.setJSType(jSType14);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeArray10);
    }

    @Test
    public void test18576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18576");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.setCharno((int) (short) 1);
        java.lang.String str26 = node11.getString();
        com.google.javascript.rhino.Node node27 = node11.getParent();
        boolean boolean28 = node11.isNE();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node32.setCharno(1);
        boolean boolean35 = node32.isRegExp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node40.isDo();
        boolean boolean47 = node40.isDefaultCase();
        node40.setQuotedString();
        com.google.javascript.rhino.Node node49 = node32.useSourceInfoFromForTree(node40);
        boolean boolean50 = node32.isInc();
        java.lang.String str54 = node32.toString(true, false, true);
        boolean boolean55 = node32.isDebugger();
        node32.setSourceEncodedPosition(44);
        com.google.javascript.rhino.Node node58 = node11.srcrefTree(node32);
        java.lang.String str59 = node32.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "STRING  0" + "'", str54, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "STRING  0\n" + "'", str59, "STRING  0\n");
    }

    @Test
    public void test18577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18577");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str47 = jSDocInfo46.getVersion();
        boolean boolean48 = jSDocInfo46.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo46.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo46.getImplementedInterfaces();
        java.lang.String str51 = jSDocInfo46.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo46.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo46.getTypedefType();
        node2.setJSDocInfo(jSDocInfo46);
        boolean boolean56 = node2.isParamList();
        boolean boolean57 = node2.isCase();
        com.google.javascript.rhino.Node node58 = node2.getFirstChild();
        boolean boolean59 = node2.isGetElem();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JSDocInfo" + "'", str51, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test18578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18578");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str11 = jSDocInfo10.toString();
        boolean boolean12 = jSDocInfo10.isNoCompile();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo10.getModifies();
        boolean boolean14 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet13);
        int int15 = strSet13.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str17 = jSDocInfo16.getVersion();
        boolean boolean18 = jSDocInfo16.hasEnumParameterType();
        java.lang.String str20 = jSDocInfo16.getDescriptionForParameter("STRING  0\n");
        java.lang.String str21 = jSDocInfo16.getDescription();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node35.hasChild(node45);
        int int47 = node35.getCharno();
        com.google.javascript.rhino.Node node48 = node25.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node53 = node25.srcref(node52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean58 = node57.isFromExterns();
        boolean boolean59 = node53.hasChild(node57);
        jSDocInfo16.setAssociatedNode(node53);
        boolean boolean61 = jSDocInfo16.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility62 = jSDocInfo16.getVisibility();
        boolean boolean63 = strSet13.contains((java.lang.Object) jSDocInfo16);
        java.lang.String str64 = jSDocInfo16.getSourceName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JSDocInfo" + "'", str11, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(visibility62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test18579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18579");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
    }

    @Test
    public void test18580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18580");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test18581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18581");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 35.0");
        boolean boolean2 = node1.isEmpty();
        boolean boolean3 = node1.isCatch();
        java.lang.String str4 = node1.getString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER 35.0" + "'", str4, "NUMBER 35.0");
    }

    @Test
    public void test18582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18582");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        boolean boolean36 = node25.hasChild(node35);
        int int37 = node25.getCharno();
        com.google.javascript.rhino.Node node38 = node15.useSourceInfoIfMissingFrom(node25);
        int int39 = node15.getSourcePosition();
        java.lang.String str40 = node15.toString();
        int int41 = node4.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node45.setCharno(1);
        boolean boolean48 = node45.isRegExp();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node53.isDo();
        boolean boolean60 = node53.isDefaultCase();
        node53.setQuotedString();
        com.google.javascript.rhino.Node node62 = node45.useSourceInfoFromForTree(node53);
        node53.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        boolean boolean76 = node70.isScript();
        com.google.javascript.rhino.InputId inputId77 = node70.getInputId();
        com.google.javascript.rhino.Node node78 = node53.useSourceInfoFrom(node70);
        int int79 = node4.getIndexOfChild(node70);
        int int80 = node4.getLength();
        boolean boolean81 = node4.isInc();
        boolean boolean82 = node4.isIn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4131 + "'", int39 == 4131);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR 1" + "'", str40, "OR 1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(inputId77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test18583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18583");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10L);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isScript();
        node10.setQuotedString();
        com.google.javascript.rhino.Node node18 = node5.srcrefTree(node10);
        boolean boolean19 = node18.isIf();
        com.google.javascript.rhino.Node node20 = node18.getParent();
        node18.removeProp((int) 'a');
        int int23 = node18.getLineno();
        com.google.javascript.rhino.Node node24 = node1.clonePropsFrom(node18);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test18584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18584");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        com.google.javascript.rhino.Node node17 = node16.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node16.getStaticSourceFile();
        boolean boolean19 = node16.isGetProp();
        boolean boolean20 = node16.isNull();
        boolean boolean21 = node16.isWhile();
        boolean boolean22 = node16.isNot();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test18585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18585");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray3);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(0, nodeArray3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(2, nodeArray3);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node16.hasChild(node26);
        boolean boolean28 = node26.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node32.setCharno(1);
        boolean boolean35 = node32.isRegExp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node40.isDo();
        boolean boolean47 = node40.isDefaultCase();
        node40.setQuotedString();
        com.google.javascript.rhino.Node node49 = node32.useSourceInfoFromForTree(node40);
        boolean boolean50 = node49.isVarArgs();
        com.google.javascript.rhino.Node node51 = node26.useSourceInfoIfMissingFrom(node49);
        boolean boolean52 = node26.isUnscopedQualifiedName();
        boolean boolean53 = node26.isReturn();
        node6.addChildToFront(node26);
        boolean boolean55 = node26.isGetProp();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test18586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18586");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        boolean boolean12 = jSDocInfo0.isNoSideEffects();
        java.lang.String str13 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test18587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18587");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isSetterDef();
        boolean boolean53 = node50.isEmpty();
        boolean boolean54 = node50.isGetProp();
        boolean boolean55 = node50.isObjectLit();
        boolean boolean56 = node50.isObjectLit();
        com.google.javascript.rhino.InputId inputId57 = null;
        node50.setInputId(inputId57);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test18588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18588");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0 [quoted: 1]\n");
        int int2 = node1.getSourceOffset();
        boolean boolean3 = node1.isOr();
        node1.detachChildren();
        boolean boolean5 = node1.isSetterDef();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        boolean boolean27 = node25.isVar();
        boolean boolean28 = node25.isCase();
        boolean boolean29 = node25.isNE();
        boolean boolean30 = node25.isDefaultCase();
        node25.setLength(41);
        com.google.javascript.rhino.Node node33 = node1.useSourceInfoIfMissingFrom(node25);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING STRING  0 [quoted: 1]? 1 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test18589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18589");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        boolean boolean8 = jSDocInfo0.isConstructor();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 51\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 51\n");
        boolean boolean11 = jSDocInfo0.isOverride();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test18590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18590");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        boolean boolean22 = node10.isReturn();
        boolean boolean23 = node10.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str25 = jSDocInfo24.getVersion();
        boolean boolean26 = jSDocInfo24.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo24.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo24.getImplementedInterfaces();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean33 = node32.isThrow();
        java.lang.String str37 = node32.toString(true, false, true);
        jSDocInfo24.setAssociatedNode(node32);
        com.google.javascript.rhino.Node node39 = node32.removeFirstChild();
        boolean boolean40 = node32.isNumber();
        node10.addChildToBack(node32);
        java.lang.String str42 = node10.toStringTree();
        com.google.javascript.rhino.Node node43 = node10.cloneTree();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(44, node10);
        boolean boolean45 = node10.isNull();
        boolean boolean46 = node10.isNoSideEffectsCall();
        boolean boolean47 = node10.isScript();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "STRING  0" + "'", str37, "STRING  0");
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ERROR 1\n    STRING  0\n    STRING  0\n" + "'", str42, "ERROR 1\n    STRING  0\n    STRING  0\n");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test18591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18591");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        java.lang.String str44 = node23.getQualifiedName();
        com.google.javascript.rhino.Node node45 = node23.cloneTree();
        boolean boolean46 = node45.isLabel();
        node45.setQuotedString();
        com.google.javascript.rhino.Node node48 = node45.getFirstChild();
        boolean boolean49 = node48.isNumber();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node60 = node58.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) -1, node58, (int) (byte) 1, (int) '#');
        boolean boolean64 = node58.isScript();
        com.google.javascript.rhino.Node node65 = node58.detachFromParent();
        node65.setOptionalArg(false);
        boolean boolean69 = node65.getBooleanProp(31);
        com.google.javascript.rhino.Node node70 = node53.copyInformationFrom(node65);
        boolean boolean71 = node70.isLabel();
        boolean boolean72 = node70.isNot();
        boolean boolean73 = node70.isFalse();
        boolean boolean74 = node70.isTypeOf();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) 49, (int) (byte) 100, 10);
        boolean boolean79 = node78.isString();
        boolean boolean80 = node78.isGetProp();
        boolean boolean81 = node70.isEquivalentToTyped(node78);
        boolean boolean82 = node78.isArrayLit();
        java.lang.String str83 = node78.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node84 = node48.removeChildAfter(node78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test18592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18592");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(10);
        boolean boolean2 = node1.isNoSideEffectsCall();
        int int3 = node1.getLength();
        boolean boolean4 = node1.isName();
        com.google.javascript.rhino.Node node5 = node1.getLastSibling();
        boolean boolean6 = node1.isRegExp();
        com.google.javascript.rhino.Node node7 = node1.getFirstChild();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test18593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18593");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.lang.String str7 = jSDocInfo0.getLicense();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        java.lang.String str11 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test18594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18594");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        boolean boolean12 = strSet3.add("STRING  0");
        java.util.stream.Stream<java.lang.String> strStream13 = strSet3.parallelStream();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("(OR 0 [jsdoc_info: JSDocInfo])", 54, 51);
        boolean boolean18 = strSet3.contains((java.lang.Object) node17);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test18595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18595");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        java.lang.Object obj13 = node4.getProp(42);
        node4.setSourceEncodedPositionForTree(48);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node29.hasChild(node39);
        int int41 = node29.getCharno();
        com.google.javascript.rhino.Node node42 = node19.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node47 = node19.srcref(node46);
        boolean boolean48 = node46.isVarArgs();
        node4.addChildToFront(node46);
        boolean boolean50 = node46.isThis();
        boolean boolean51 = node46.isDebugger();
        boolean boolean52 = node46.isNE();
        boolean boolean53 = node46.isBreak();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test18596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18596");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        boolean boolean4 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("((Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n))");
        int int8 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test18597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18597");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getPositionOnStartLine();
        int int3 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node7.setCharno(1);
        java.util.Set<java.lang.String> strSet10 = node7.getDirectives();
        boolean boolean11 = node7.isHook();
        int int12 = node7.getSourceOffset();
        boolean boolean13 = node7.isFunction();
        typePosition0.setItem(node7);
        int int15 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node16 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test18598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18598");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        boolean boolean15 = node9.isScript();
        node9.setQuotedString();
        com.google.javascript.rhino.Node node17 = node4.srcrefTree(node9);
        boolean boolean18 = node17.isHook();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        boolean boolean40 = node38.isVar();
        boolean boolean41 = node38.isBreak();
        boolean boolean42 = node38.isBreak();
        boolean boolean43 = node38.isRegExp();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(46, node17, node38, 50, 100);
        com.google.javascript.rhino.Node node47 = node46.cloneNode();
        node46.setLineno((int) (byte) 1);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test18599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18599");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.Node node11 = node4.detachFromParent();
        boolean boolean12 = node4.isAssignAdd();
        boolean boolean13 = node4.isDefaultCase();
        com.google.javascript.rhino.Node node14 = node4.getLastSibling();
        node14.setQuotedString();
        node14.setLength(3);
        boolean boolean18 = node14.isFalse();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node14.children();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.isScript();
        com.google.javascript.rhino.Node node31 = node24.detachFromParent();
        node31.setOptionalArg(false);
        boolean boolean35 = node31.getBooleanProp(31);
        int int36 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node40.setCharno(1);
        java.util.Set<java.lang.String> strSet43 = node40.getDirectives();
        node40.setCharno((int) (short) -1);
        boolean boolean46 = node40.isRegExp();
        com.google.javascript.rhino.Node node47 = node40.getLastChild();
        boolean boolean48 = node40.isDec();
        com.google.javascript.rhino.Node node49 = node31.srcrefTree(node40);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node56 = node54.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) -1, node54, (int) (byte) 1, (int) '#');
        boolean boolean60 = node54.isScript();
        boolean boolean61 = node54.isTrue();
        com.google.javascript.rhino.InputId inputId62 = null;
        node54.setInputId(inputId62);
        boolean boolean64 = node54.isString();
        java.lang.String str65 = node31.checkTreeEquals(node54);
        boolean boolean66 = node54.isName();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node70.setCharno(1);
        java.util.Set<java.lang.String> strSet73 = node70.getDirectives();
        node70.setCharno((int) (short) -1);
        node70.setVarArgs(true);
        boolean boolean78 = node70.isArrayLit();
        java.lang.Object obj80 = node70.getProp(97);
        int int81 = node54.getIndexOfChild(node70);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder82 = node54.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            node14.addChildToBack(node54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder82);
    }

    @Test
    public void test18600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18600");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        boolean boolean11 = node4.isTrue();
        java.lang.String str12 = node4.getQualifiedName();
        boolean boolean13 = node4.isBreak();
        boolean boolean14 = node4.isLocalResultCall();
        node4.setQuotedString();
        boolean boolean16 = node4.isFromExterns();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test18601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18601");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility4);
        boolean boolean6 = jSDocInfo0.isDefine();
        java.lang.String str7 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        node24.setOptionalArg(false);
        boolean boolean28 = node24.getBooleanProp(31);
        com.google.javascript.rhino.Node node29 = node12.copyInformationFrom(node24);
        boolean boolean30 = node29.isLabel();
        com.google.javascript.rhino.InputId inputId31 = node29.getInputId();
        java.lang.String str32 = node29.getString();
        com.google.javascript.rhino.jstype.JSType jSType33 = node29.getJSType();
        boolean boolean34 = node29.isWhile();
        boolean boolean35 = node29.isNull();
        node29.setSourceFileForTesting("ERROR 1\n    STRING  0\n");
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node57, (int) (byte) 1, (int) '#');
        boolean boolean63 = node52.hasChild(node62);
        int int64 = node52.getCharno();
        com.google.javascript.rhino.Node node65 = node42.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node82 = node80.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) -1, node80, (int) (byte) 1, (int) '#');
        boolean boolean86 = node75.hasChild(node85);
        boolean boolean87 = node85.isVar();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((-1), node52, node85);
        boolean boolean89 = node52.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = node52.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile91 = null;
        node52.setStaticSourceFile(staticSourceFile91);
        boolean boolean93 = node52.isDefaultCase();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable94 = node52.getAncestors();
        com.google.javascript.rhino.Node node95 = node52.removeFirstChild();
        boolean boolean96 = node95.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node97 = node29.useSourceInfoFrom(node95);
        jSDocInfo0.setAssociatedNode(node97);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(inputId31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Not declared as a constructor" + "'", str32, "Not declared as a constructor");
        org.junit.Assert.assertNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(jSDocInfo90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(ancestorIterable94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test18602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18602");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        java.lang.String str3 = stringPosition0.getItem();
        java.lang.String str4 = stringPosition0.getItem();
        java.lang.String str5 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test18603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18603");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.hasChildren();
        boolean boolean6 = node3.isWhile();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        boolean boolean32 = node21.hasChild(node31);
        int int33 = node21.getCharno();
        com.google.javascript.rhino.Node node34 = node11.useSourceInfoIfMissingFrom(node21);
        boolean boolean35 = node11.isSwitch();
        java.lang.String str36 = node11.toString();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean41 = node40.isThrow();
        java.lang.String str45 = node40.toString(true, false, true);
        java.lang.String str46 = node40.getQualifiedName();
        boolean boolean47 = node40.isIn();
        boolean boolean48 = node11.hasChild(node40);
        java.lang.Object obj50 = node11.getProp(53);
        node11.setIsSyntheticBlock(false);
        node3.putProp((int) (byte) 100, (java.lang.Object) node11);
        com.google.javascript.rhino.Node node54 = node11.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR 1" + "'", str36, "OR 1");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "STRING  0" + "'", str45, "STRING  0");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(node54);
    }

    @Test
    public void test18604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18604");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        boolean boolean17 = node16.isRegExp();
        boolean boolean18 = node16.isDebugger();
        node3.addChildToBack(node16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.hasOneChild();
        java.lang.String str31 = node24.getQualifiedName();
        java.lang.String str32 = node16.checkTreeEquals(node24);
        java.lang.String str33 = node24.getString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test18605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18605");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str9 = jSDocInfo8.getVersion();
        boolean boolean10 = jSDocInfo8.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo8.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo8.setVisibility(visibility12);
        jSDocInfo0.setVisibility(visibility12);
        java.util.Set<java.lang.String> strSet15 = jSDocInfo0.getSuppressions();
        boolean boolean16 = jSDocInfo0.hasBaseType();
        boolean boolean17 = jSDocInfo0.isNoAlias();
        boolean boolean18 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
    }

    @Test
    public void test18606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18606");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        boolean boolean22 = node20.isCase();
        boolean boolean23 = node20.isFalse();
        boolean boolean24 = node20.isCall();
        boolean boolean25 = node20.isOr();
        boolean boolean26 = node20.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test18607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18607");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        java.lang.String str10 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        java.lang.String str12 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test18608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18608");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        int int6 = jSDocInfo0.getParameterCount();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getReturnType();
        java.util.Collection<java.lang.String> strCollection13 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(strCollection13);
    }

    @Test
    public void test18609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18609");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType13);
    }

    @Test
    public void test18610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18610");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo1.getVersion();
        boolean boolean3 = jSDocInfo1.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo1.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo1.getImplementedInterfaces();
        java.lang.String str6 = jSDocInfo1.toString();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        java.lang.String str16 = node10.getQualifiedName();
        boolean boolean17 = node10.isCatch();
        boolean boolean18 = node10.isOr();
        jSDocInfo1.setAssociatedNode(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        int int50 = node38.getCharno();
        com.google.javascript.rhino.Node node51 = node28.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node58 = node56.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) -1, node56, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node68 = node66.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node66, (int) (byte) 1, (int) '#');
        boolean boolean72 = node61.hasChild(node71);
        boolean boolean73 = node71.isVar();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((-1), node38, node71);
        com.google.javascript.rhino.Node node75 = node74.getParent();
        boolean boolean76 = node74.isSetterDef();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((-1), node74);
        boolean boolean78 = node22.isEquivalentTo(node77);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(46, node10, node22);
        com.google.javascript.rhino.InputId inputId80 = node79.getInputId();
        boolean boolean81 = node79.isTrue();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(inputId80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test18611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18611");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) 'a', 40, 36);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean8 = node7.isThrow();
        java.lang.String str12 = node7.toString(true, false, true);
        java.lang.String str13 = node7.getQualifiedName();
        boolean boolean14 = node7.isIn();
        com.google.javascript.rhino.Node node15 = node7.cloneTree();
        boolean boolean16 = node7.isStringKey();
        com.google.javascript.rhino.Node node17 = node3.useSourceInfoIfMissingFrom(node7);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = node7.getJSDocInfo();
        node7.setType((int) ' ');
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0" + "'", str12, "STRING  0");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(jSDocInfo18);
    }

    @Test
    public void test18612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18612");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 41, 2, 16);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        boolean boolean25 = node23.isVar();
        boolean boolean26 = node23.isCase();
        boolean boolean27 = node23.isInc();
        boolean boolean28 = node3.isEquivalentTo(node23);
        int int29 = node3.getSideEffectFlags();
        boolean boolean30 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder31.append("STRING ");
        fileLevelJsDocBuilder31.append("REGEXP \n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test18613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18613");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node11.setCharno(1);
        boolean boolean14 = node11.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node19.isDo();
        boolean boolean26 = node19.isDefaultCase();
        node19.setQuotedString();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoFromForTree(node19);
        node19.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean32 = node19.isVarArgs();
        jSDocInfo0.setAssociatedNode(node19);
        boolean boolean34 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo0.getEnumParameterType();
        boolean boolean36 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo0.getParameterType("(Named type with empty name component)");
        boolean boolean39 = jSDocInfo0.hasReturnType();
        java.lang.String str40 = jSDocInfo0.getMeaning();
        boolean boolean41 = jSDocInfo0.isExterns();
        java.lang.String str42 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test18614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18614");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(16920628, "Node tree inequality:\nTree1:\nOR 51 [incrdecr: 50]\n\n\nTree2:\nSTRING  0 [var_args_name: 1]\n\n\nSubtree1: OR 51 [incrdecr: 50]\n\n\nSubtree2: STRING  0 [var_args_name: 1]\n", 151560, 13);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test18615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18615");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        node3.setOptionalArg(true);
        java.lang.Object obj8 = node3.getProp(53);
        boolean boolean9 = node3.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test18616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18616");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(51);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node8 = node6.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, (int) (byte) 1, (int) '#');
        boolean boolean12 = node6.isDo();
        boolean boolean13 = node6.isDefaultCase();
        node6.setQuotedString();
        com.google.javascript.rhino.Node node15 = node1.copyInformationFrom(node6);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node20.isDo();
        boolean boolean27 = node20.isDefaultCase();
        node20.setQuotedString();
        boolean boolean29 = node20.isDec();
        boolean boolean30 = node20.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node20.siblings();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node20);
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node20.setJSType(jSType33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        boolean boolean62 = node48.isContinue();
        boolean boolean63 = node48.wasEmptyNode();
        boolean boolean64 = node48.isName();
        boolean boolean65 = node48.isFunction();
        boolean boolean66 = node48.hasOneChild();
        com.google.javascript.rhino.Node node67 = node20.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node node68 = node20.getFirstChild();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node68);
    }

    @Test
    public void test18617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18617");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        com.google.javascript.rhino.Node node15 = node8.detachFromParent();
        node15.setOptionalArg(false);
        boolean boolean19 = node15.getBooleanProp(31);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node15);
        boolean boolean21 = node20.isLabel();
        com.google.javascript.rhino.InputId inputId22 = node20.getInputId();
        java.lang.String str23 = node20.getString();
        com.google.javascript.rhino.jstype.JSType jSType24 = node20.getJSType();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node29.isScript();
        com.google.javascript.rhino.InputId inputId36 = node29.getInputId();
        boolean boolean37 = node29.isDelProp();
        boolean boolean38 = node29.isBlock();
        boolean boolean39 = node29.isQuotedString();
        boolean boolean40 = node29.isTrue();
        com.google.javascript.rhino.Node node41 = node20.srcref(node29);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        boolean boolean52 = node46.isDo();
        boolean boolean53 = node46.isDefaultCase();
        node46.setQuotedString();
        boolean boolean55 = node46.isDec();
        boolean boolean56 = node46.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable57 = node46.siblings();
        boolean boolean58 = node46.isEmpty();
        com.google.javascript.rhino.Node node59 = node46.getParent();
        boolean boolean60 = node59.isRegExp();
        boolean boolean61 = node59.hasOneChild();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node68 = node66.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node66, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node78 = node76.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (byte) -1, node76, (int) (byte) 1, (int) '#');
        boolean boolean82 = node71.hasChild(node81);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node86 = node71.clonePropsFrom(node85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = node86.getJSDocInfo();
        com.google.javascript.rhino.Node node88 = node59.clonePropsFrom(node86);
        int int89 = node20.getIndexOfChild(node86);
        com.google.javascript.rhino.Node node90 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = node86.isEquivalentTo(node90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Not declared as a constructor" + "'", str23, "Not declared as a constructor");
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeIterable57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test18618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18618");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        boolean boolean10 = jSDocInfo0.hasThisType();
        boolean boolean11 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18619");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.Node node11 = jSDocInfo0.getAssociatedNode();
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        jSDocInfo0.addSuppression("NUMBER 35.0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getBaseType();
        boolean boolean16 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test18620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18620");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        java.util.Set<java.lang.String> strSet6 = node3.getDirectives();
        node3.setCharno((int) (short) -1);
        boolean boolean9 = node3.isRegExp();
        boolean boolean10 = node3.isDefaultCase();
        boolean boolean11 = node3.isName();
        boolean boolean12 = node3.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18621");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        boolean boolean8 = jSDocInfo0.isConstant();
        boolean boolean10 = jSDocInfo0.hasParameterType("STRING  [synthetic: 1] [source_file: hi!]");
        boolean boolean11 = jSDocInfo0.isDefine();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection13 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(strCollection13);
    }

    @Test
    public void test18622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18622");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        node3.setVarArgs(false);
        boolean boolean13 = node3.isThis();
        boolean boolean14 = node3.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test18623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18623");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean10 = node9.isThrow();
        java.lang.String str14 = node9.toString(true, false, true);
        int int16 = node9.getIntProp(51);
        node9.addSuppression("STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node19 = node5.useSourceInfoFrom(node9);
        boolean boolean20 = node5.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = node5.getJSDocInfo();
        boolean boolean22 = node5.isUnscopedQualifiedName();
        boolean boolean23 = node5.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0" + "'", str14, "STRING  0");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSDocInfo21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test18624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18624");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        boolean boolean8 = node3.isBreak();
        boolean boolean9 = node3.isIf();
        node3.setWasEmptyNode(true);
        java.lang.Object obj13 = node3.getProp((int) (byte) 100);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test18625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18625");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((-1), 36, 0);
        boolean boolean4 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        int int15 = node14.getType();
        boolean boolean16 = node14.isDelProp();
        boolean boolean17 = node14.wasEmptyNode();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node28 = node14.copyInformationFromForTree(node22);
        com.google.javascript.rhino.jstype.JSType jSType29 = node28.getJSType();
        java.lang.String str30 = node28.getQualifiedName();
        com.google.javascript.rhino.Node node31 = node3.useSourceInfoIfMissingFrom(node28);
        java.lang.Class<?> wildcardClass32 = node31.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test18626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18626");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node15 = node3.getAncestor(4095);
        boolean boolean16 = node3.isQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str18 = jSDocInfo17.getVersion();
        boolean boolean19 = jSDocInfo17.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo17.getParameterNames();
        jSDocInfo17.addSuppression("");
        java.lang.String str23 = jSDocInfo17.getBlockDescription();
        boolean boolean24 = jSDocInfo17.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo17.getSuppressions();
        jSDocInfo17.setDeprecated(true);
        boolean boolean28 = jSDocInfo17.isJavaDispatch();
        node3.setJSDocInfo(jSDocInfo17);
        boolean boolean30 = jSDocInfo17.shouldPreserveTry();
        java.lang.String str31 = jSDocInfo17.getSourceName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test18627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18627");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 35, 15, 36);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test18628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18628");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node43.isLocalResultCall();
        node43.setSourceEncodedPosition(47);
        boolean boolean47 = node43.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test18629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18629");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        boolean boolean12 = node4.isFor();
        boolean boolean13 = node4.isThis();
        node4.setLineno(8);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node4.getJsDocBuilderForNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node4.getStaticSourceFile();
        node4.putBooleanProp(15, true);
        java.lang.String str21 = node4.getQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder16);
        org.junit.Assert.assertNull(staticSourceFile17);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test18630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18630");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getStartLine();
        stringPosition0.setPositionInformation(6, 31, 44, 4131);
        int int9 = stringPosition0.getStartLine();
        int int10 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4131 + "'", int10 == 4131);
    }

    @Test
    public void test18631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18631");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        node28.setType(16);
        boolean boolean68 = node28.isStringKey();
        node28.setIsSyntheticBlock(true);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        node28.setJSType(jSType71);
        int int73 = node28.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test18632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18632");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        java.lang.String str18 = node4.toStringTree();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node29.hasChild(node39);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node44 = node29.clonePropsFrom(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node53.isScript();
        com.google.javascript.rhino.Node node60 = node53.detachFromParent();
        node60.setOptionalArg(false);
        boolean boolean64 = node60.getBooleanProp(31);
        com.google.javascript.rhino.Node node65 = node48.copyInformationFrom(node60);
        boolean boolean66 = node65.isLabel();
        com.google.javascript.rhino.Node node67 = node43.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(32, node67, 16, 97);
        node4.addChildrenToFront(node70);
        com.google.javascript.rhino.Node node72 = null;
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 35, 0, 0);
        node76.setDouble((double) 41);
        boolean boolean79 = node76.isRegExp();
        java.lang.String str80 = node76.getSourceFileName();
        boolean boolean81 = node76.isCatch();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int86 = node85.getType();
        com.google.javascript.rhino.Node node87 = node85.cloneNode();
        boolean boolean88 = node85.isRegExp();
        boolean boolean89 = node85.isNew();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder90 = node85.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node91 = node85.getLastSibling();
        com.google.javascript.rhino.Node node92 = node76.useSourceInfoIfMissingFromForTree(node91);
        boolean boolean94 = node91.getBooleanProp(409601);
        // The following exception was thrown during execution in test generation
        try {
            node70.replaceChildAfter(node72, node91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0 [quoted: 1]\n" + "'", str18, "STRING  0 [quoted: 1]\n");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 40 + "'", int86 == 40);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test18633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18633");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getThisType();
        boolean boolean4 = jSDocInfo0.hasBaseType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        boolean boolean9 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test18634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18634");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        boolean boolean5 = node3.isAdd();
        boolean boolean6 = node3.isDelProp();
        com.google.javascript.rhino.Node node7 = node3.getFirstChild();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node3.setJSType(jSType8);
        boolean boolean10 = node3.isBlock();
        com.google.javascript.rhino.Node node11 = node3.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test18635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18635");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        int int4 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean5 = jSDocInfo0.hasThisType();
        java.lang.String str6 = jSDocInfo0.getVersion();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test18636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18636");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(39, "NUMBER 40.0 51", 204810, 43);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test18637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18637");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        int int27 = node15.getCharno();
        com.google.javascript.rhino.Node node28 = node5.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        boolean boolean50 = node48.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((-1), node15, node48);
        com.google.javascript.rhino.Node node52 = node51.getParent();
        boolean boolean53 = node51.isSetterDef();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(54, node51, 32, 32);
        boolean boolean57 = node56.isQuotedString();
        boolean boolean58 = node56.isQualifiedName();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node62.setCharno(1);
        boolean boolean65 = node62.isRegExp();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        boolean boolean76 = node70.isDo();
        boolean boolean77 = node70.isDefaultCase();
        node70.setQuotedString();
        com.google.javascript.rhino.Node node79 = node62.useSourceInfoFromForTree(node70);
        boolean boolean80 = node62.isInc();
        java.lang.String str84 = node62.toString(true, false, true);
        boolean boolean85 = node62.isDebugger();
        node62.setSourceEncodedPosition(44);
        com.google.javascript.rhino.Node node88 = node62.cloneTree();
        com.google.javascript.rhino.Node node89 = node56.copyInformationFrom(node88);
        com.google.javascript.rhino.Node node91 = node88.getAncestor(48);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "STRING  0" + "'", str84, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test18638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18638");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean6 = node5.isThrow();
        java.lang.String str10 = node5.toString(true, false, true);
        java.lang.String str11 = node5.getQualifiedName();
        boolean boolean12 = node5.isIn();
        com.google.javascript.rhino.Node node13 = node5.cloneTree();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node18.isScript();
        com.google.javascript.rhino.Node node25 = node18.detachFromParent();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node29.setCharno(1);
        java.util.Set<java.lang.String> strSet32 = node29.getDirectives();
        boolean boolean33 = node29.isHook();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        boolean boolean58 = node47.hasChild(node57);
        int int59 = node47.getCharno();
        com.google.javascript.rhino.Node node60 = node37.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node65 = node37.srcref(node64);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(4095, node13, node25, node29, node37);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node73 = node71.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) -1, node71, (int) (byte) 1, (int) '#');
        int int77 = node76.getType();
        boolean boolean78 = node29.isEquivalentTo(node76);
        boolean boolean79 = node29.isUnscopedQualifiedName();
        node29.setVarArgs(false);
        boolean boolean82 = node29.isAssign();
        com.google.javascript.rhino.Node node83 = node29.detachFromParent();
        boolean boolean84 = node83.isGetProp();
        boolean boolean85 = node83.isThis();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable86 = node83.getAncestors();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(1, node83);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0" + "'", str10, "STRING  0");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(ancestorIterable86);
    }

    @Test
    public void test18639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18639");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(visibility6);
    }

    @Test
    public void test18640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18640");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray2);
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(0, nodeArray2);
        boolean boolean5 = node4.isFor();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean9 = node8.isLabel();
        boolean boolean10 = node8.hasOneChild();
        int int11 = node8.getLength();
        com.google.javascript.rhino.Node node12 = node4.clonePropsFrom(node8);
        com.google.javascript.rhino.Node node13 = node8.cloneNode();
        boolean boolean14 = node13.isBreak();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test18641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18641");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("STRING  0 [jsdoc_info: JSDocInfo]");
        int int5 = stringPosition0.getStartLine();
        int int6 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test18642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18642");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility4);
        java.lang.String str6 = jSDocInfo0.toString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection8 = jSDocInfo0.getMarkers();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        boolean boolean12 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(markerCollection8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18643");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isThrow();
        com.google.javascript.rhino.Node node11 = node3.getLastSibling();
        java.lang.String[] strArray14 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = strSet15.addAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node27.isScript();
        node27.setQuotedString();
        boolean boolean35 = strSet15.equals((java.lang.Object) node27);
        boolean boolean36 = node27.isAssign();
        com.google.javascript.rhino.Node node37 = node11.copyInformationFromForTree(node27);
        node37.setLength(37);
        boolean boolean40 = node37.isWhile();
        com.google.javascript.rhino.Node node41 = node37.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test18644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18644");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        boolean boolean15 = node9.isScript();
        com.google.javascript.rhino.Node node16 = node9.detachFromParent();
        node16.setOptionalArg(false);
        boolean boolean20 = node16.getBooleanProp(31);
        com.google.javascript.rhino.Node node21 = node4.copyInformationFrom(node16);
        boolean boolean22 = node21.isLabel();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        java.lang.String str24 = node21.getString();
        com.google.javascript.rhino.jstype.JSType jSType25 = node21.getJSType();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        boolean boolean36 = node30.isScript();
        com.google.javascript.rhino.InputId inputId37 = node30.getInputId();
        boolean boolean38 = node30.isDelProp();
        boolean boolean39 = node30.isBlock();
        boolean boolean40 = node30.isQuotedString();
        boolean boolean41 = node30.isTrue();
        com.google.javascript.rhino.Node node42 = node21.srcref(node30);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node47.isDo();
        boolean boolean54 = node47.isDefaultCase();
        node47.setQuotedString();
        boolean boolean56 = node47.isDec();
        boolean boolean57 = node47.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = node47.siblings();
        boolean boolean59 = node47.isEmpty();
        com.google.javascript.rhino.Node node60 = node47.getParent();
        boolean boolean61 = node60.isRegExp();
        boolean boolean62 = node60.hasOneChild();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node69 = node67.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node67, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node79 = node77.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) -1, node77, (int) (byte) 1, (int) '#');
        boolean boolean83 = node72.hasChild(node82);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node87 = node72.clonePropsFrom(node86);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node87.getJSDocInfo();
        com.google.javascript.rhino.Node node89 = node60.clonePropsFrom(node87);
        int int90 = node21.getIndexOfChild(node87);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(41, node21, 50, (int) (byte) 0);
        node93.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Not declared as a constructor" + "'", str24, "Not declared as a constructor");
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputId37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeIterable58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test18645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18645");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection1 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = jSDocInfo0.getVisibility();
        java.lang.String str4 = jSDocInfo0.getFileOverview();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(strCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(visibility3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test18646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18646");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        boolean boolean46 = node18.isReturn();
        boolean boolean47 = node18.isHook();
        int int48 = node18.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str51 = jSDocInfo50.getVersion();
        boolean boolean52 = jSDocInfo50.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet53 = jSDocInfo50.getParameterNames();
        jSDocInfo50.addSuppression("");
        java.util.Collection<java.lang.String> strCollection56 = jSDocInfo50.getAuthors();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean61 = node60.isThrow();
        java.lang.String str65 = node60.toString(true, false, true);
        java.lang.String str66 = node60.getQualifiedName();
        boolean boolean67 = node60.isThis();
        java.lang.String[] strArray70 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        boolean boolean78 = strSet71.addAll((java.util.Collection<java.lang.String>) strList76);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str80 = jSDocInfo79.getVersion();
        java.lang.String str81 = jSDocInfo79.getFileOverview();
        boolean boolean82 = jSDocInfo79.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo79.getParameterNames();
        boolean boolean84 = strSet71.retainAll((java.util.Collection<java.lang.String>) strSet83);
        java.util.stream.Stream<java.lang.String> strStream85 = strSet71.stream();
        node60.setDirectives((java.util.Set<java.lang.String>) strSet71);
        jSDocInfo50.setAssociatedNode(node60);
        boolean boolean88 = jSDocInfo50.isNoShadow();
        boolean boolean89 = jSDocInfo50.isConstant();
        node18.putProp(54, (java.lang.Object) boolean89);
        boolean boolean91 = node18.hasOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(strCollection56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "STRING  0" + "'", str65, "STRING  0");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strStream85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test18647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18647");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        boolean boolean4 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test18648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18648");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isDefine();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        boolean boolean6 = jSDocInfo0.hasParameterType("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test18649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18649");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node24 = node9.clonePropsFrom(node23);
        node24.putIntProp(38, 32);
        boolean boolean28 = node24.isBreak();
        boolean boolean29 = node24.isExprResult();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node24.children();
        java.lang.String str31 = node24.toStringTree();
        com.google.javascript.rhino.Node node32 = node24.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node32.setSideEffectFlags(36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ERROR 1 [synthetic: 32]\n    STRING  0\n" + "'", str31, "ERROR 1 [synthetic: 32]\n    STRING  0\n");
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test18650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18650");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("STRING  0\n");
        jSDocInfo0.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        jSDocInfo0.setLicense("STRING  0 [jsdoc_info: JSDocInfo]");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test18651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18651");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = node3.srcref(node30);
        boolean boolean32 = node31.isDefaultCase();
        boolean boolean33 = node31.isCall();
        boolean boolean34 = node31.isObjectLit();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        boolean boolean45 = node39.isScript();
        com.google.javascript.rhino.Node node46 = node39.detachFromParent();
        node31.addChildToFront(node46);
        boolean boolean48 = node46.isAnd();
        int int49 = node46.getLength();
        com.google.javascript.rhino.Node node50 = node46.removeFirstChild();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(node50);
    }

    @Test
    public void test18652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18652");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isLocalResultCall();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        int int43 = node31.getCharno();
        com.google.javascript.rhino.Node node44 = node21.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((-1), node31, node64);
        boolean boolean68 = node31.isAssignAdd();
        com.google.javascript.rhino.Node node69 = node31.removeFirstChild();
        boolean boolean70 = node69.isNumber();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node69.siblings();
        boolean boolean72 = node69.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = node4.useSourceInfoFrom(node69);
        boolean boolean74 = node4.isLabelName();
        com.google.javascript.rhino.Node node75 = node4.detachFromParent();
        boolean boolean76 = node75.isTypeOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test18653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18653");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int9 = node8.getType();
        boolean boolean10 = node8.isArrayLit();
        node8.addSuppression("true");
        boolean boolean13 = node8.isReturn();
        typePosition0.setItem(node8);
        boolean boolean15 = node8.isFalse();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = node8.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 [jsdoc_info: JSDocInfo] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test18654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18654");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(2, 31, 29, 37);
        int int7 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node8 = typePosition0.getItem();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("STRING  0 [quoted: 1]\n");
        node10.setLineno(31);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean17 = node16.isThrow();
        java.lang.String str21 = node16.toString(true, false, true);
        boolean boolean22 = node16.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node16.setStaticSourceFile(staticSourceFile24);
        node10.addChildrenToBack(node16);
        typePosition0.setItem(node16);
        boolean boolean28 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        boolean boolean43 = node37.isScript();
        node37.setQuotedString();
        com.google.javascript.rhino.Node node45 = node32.srcrefTree(node37);
        boolean boolean46 = node45.isIf();
        com.google.javascript.rhino.Node node47 = node45.getParent();
        node45.removeProp((int) 'a');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean54 = node53.isThrow();
        java.lang.String str58 = node53.toString(true, false, true);
        node53.setQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str61 = jSDocInfo60.getVersion();
        boolean boolean62 = jSDocInfo60.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet63 = jSDocInfo60.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility64 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo60.setVisibility(visibility64);
        node53.setJSDocInfo(jSDocInfo60);
        com.google.javascript.rhino.Node node67 = node45.clonePropsFrom(node53);
        typePosition0.setItem(node45);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(35);
        typePosition0.setItem(node70);
        boolean boolean72 = typePosition0.hasBrackets();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37 + "'", int7 == 37);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "STRING  0" + "'", str21, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "STRING  0" + "'", str58, "STRING  0");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + visibility64 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility64.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test18655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18655");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        boolean boolean16 = node4.isEmpty();
        com.google.javascript.rhino.Node node17 = node4.getParent();
        node4.putBooleanProp(37, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str23 = jSDocInfo22.getVersion();
        boolean boolean24 = jSDocInfo22.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo22.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo22.getImplementedInterfaces();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean31 = node30.isThrow();
        java.lang.String str35 = node30.toString(true, false, true);
        jSDocInfo22.setAssociatedNode(node30);
        int int38 = node30.getIntProp((int) (byte) 10);
        node30.setSourceEncodedPositionForTree(15);
        node30.setLineno(1);
        boolean boolean43 = node30.isTry();
        node4.putProp(29, (java.lang.Object) node30);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags46 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int47 = sideEffectFlags46.valueOf();
        sideEffectFlags46.setMutatesArguments();
        sideEffectFlags46.setAllFlags();
        sideEffectFlags46.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node4.setSideEffectFlags(sideEffectFlags46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "STRING  0" + "'", str35, "STRING  0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 39 + "'", int47 == 39);
    }

    @Test
    public void test18656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18656");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        boolean boolean9 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test18657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18657");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue4.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue1.xor(ternaryValue6);
        java.lang.String str8 = ternaryValue7.toString();
        java.lang.String str9 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean12 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.or(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue13.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue16.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue10.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue7.xor(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.or(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue21.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue29.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue34.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue32.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str42 = ternaryValue41.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue32.and(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue27.or(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue7.or(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean48 = ternaryValue46.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue50.or(ternaryValue52);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue52.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue46.and(ternaryValue54);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue45.or(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
    }

    @Test
    public void test18658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18658");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        node30.setLength((int) ' ');
        node3.addChildrenToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node3.children();
        boolean boolean35 = node3.isHook();
        int int36 = node3.getSideEffectFlags();
        java.lang.String str37 = node3.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test18659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18659");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        boolean boolean12 = node11.isUnscopedQualifiedName();
        boolean boolean13 = node11.isGetElem();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        boolean boolean18 = node17.isAnd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str20 = jSDocInfo19.getVersion();
        java.lang.String str21 = jSDocInfo19.getFileOverview();
        jSDocInfo19.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo19.getExtendedInterfaces();
        boolean boolean25 = jSDocInfo19.isConstructor();
        node17.setJSDocInfo(jSDocInfo19);
        boolean boolean27 = node17.isIn();
        int int28 = node17.getLineno();
        com.google.javascript.rhino.Node node29 = node11.clonePropsFrom(node17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = null;
        node11.setJSDocInfo(jSDocInfo30);
        boolean boolean32 = node11.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test18660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18660");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str6 = stringPosition0.getItem();
        stringPosition0.setItem("Not declared as a type name");
        java.lang.String str9 = stringPosition0.getItem();
        int int10 = stringPosition0.getPositionOnStartLine();
        int int11 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("OR 1 [length: 32]");
        int int14 = stringPosition0.getEndLine();
        stringPosition0.setItem("(ERROR [opt_arg: 1])");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Not declared as a type name" + "'", str9, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36 + "'", int10 == 36);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36 + "'", int11 == 36);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
    }

    @Test
    public void test18661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18661");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        boolean boolean15 = node9.isScript();
        com.google.javascript.rhino.Node node16 = node9.detachFromParent();
        node16.setOptionalArg(false);
        boolean boolean20 = node16.getBooleanProp(31);
        com.google.javascript.rhino.Node node21 = node4.copyInformationFrom(node16);
        boolean boolean22 = node21.isLabel();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node26.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        node26.setStaticSourceFile(staticSourceFile29);
        boolean boolean31 = node26.isBreak();
        boolean boolean32 = node26.isQualifiedName();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(50, node21, node26, 151562, 29);
        com.google.javascript.rhino.Node[] nodeArray43 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray43);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0, nodeArray43);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(2, nodeArray43);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(49, nodeArray43, 38, 53);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(46, nodeArray43, 151562, 100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(0, nodeArray43);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(97, nodeArray43, (int) (byte) -1, 50);
        java.lang.String str60 = node56.toString(false, false, false);
        boolean boolean61 = node21.hasChild(node56);
        boolean boolean62 = node21.isGetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeArray43);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ASSIGN_MOD" + "'", str60, "ASSIGN_MOD");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test18662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18662");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isIf();
        boolean boolean18 = node16.hasMoreThanOneChild();
        boolean boolean19 = node16.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node20 = node16.cloneTree();
        node16.setCharno(151560);
        com.google.javascript.rhino.Node node23 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node24 = node16.useSourceInfoFromForTree(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test18663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18663");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nSTRING Not declared as a constructor 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: STRING Not declared as a constructor 0\n");
        node1.setCharno(51);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test18664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18664");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean6 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean12 = node11.isThrow();
        java.lang.String str16 = node11.toString(true, false, true);
        boolean boolean17 = node11.isThis();
        boolean boolean18 = strSet7.equals((java.lang.Object) boolean17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str20 = jSDocInfo19.getVersion();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo19.getSuppressions();
        int int22 = strSet21.size();
        strSet21.clear();
        boolean boolean24 = strSet7.addAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.stream.Stream<java.lang.String> strStream25 = strSet21.stream();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        boolean boolean36 = node30.isScript();
        com.google.javascript.rhino.Node node37 = node30.detachFromParent();
        boolean boolean38 = node30.isSyntheticBlock();
        java.lang.String[] strArray41 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        boolean boolean49 = strSet42.addAll((java.util.Collection<java.lang.String>) strList47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str51 = jSDocInfo50.getVersion();
        java.lang.String str52 = jSDocInfo50.getFileOverview();
        boolean boolean53 = jSDocInfo50.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo50.getParameterNames();
        boolean boolean55 = strSet42.retainAll((java.util.Collection<java.lang.String>) strSet54);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition56 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition58 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition59 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray60 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] { stringPosition56, stringPosition57, stringPosition58, stringPosition59 };
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray61 = strSet42.toArray(stringPositionArray60);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet42);
        boolean boolean64 = strSet42.add("(Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n)");
        boolean boolean65 = strSet42.isEmpty();
        boolean boolean66 = strSet21.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.stream.Stream<java.lang.String> strStream67 = strSet42.parallelStream();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "STRING  0" + "'", str16, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(stringPositionArray60);
        org.junit.Assert.assertNotNull(stringPositionArray61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strStream67);
    }

    @Test
    public void test18665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18665");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        boolean boolean22 = node4.isInc();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(30, node4);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double28 = node27.getDouble();
        boolean boolean29 = node27.isAdd();
        com.google.javascript.rhino.Node node30 = node27.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType31 = node30.getJSType();
        java.lang.String str32 = node30.toStringTree();
        node4.addChildToFront(node30);
        boolean boolean34 = node30.isAdd();
        boolean boolean35 = node30.isSetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4095.0d + "'", double28 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 4095.0 100\n" + "'", str32, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test18666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18666");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(409601, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str4 = jSDocInfo3.getVersion();
        java.lang.String str5 = jSDocInfo3.getFileOverview();
        jSDocInfo3.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo3.getExtendedInterfaces();
        boolean boolean9 = jSDocInfo3.isConstructor();
        boolean boolean10 = jSDocInfo3.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo3.getSuppressions();
        node2.setDirectives(strSet11);
        java.lang.String[] strArray15 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        boolean boolean23 = strSet16.addAll((java.util.Collection<java.lang.String>) strList21);
        strSet16.clear();
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet16.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str27 = jSDocInfo26.getVersion();
        boolean boolean28 = jSDocInfo26.hasEnumParameterType();
        boolean boolean29 = jSDocInfo26.isNoAlias();
        java.lang.String str31 = jSDocInfo26.getDescriptionForParameter("JSDocInfo");
        boolean boolean32 = jSDocInfo26.hasEnumParameterType();
        boolean boolean33 = jSDocInfo26.isIdGenerator();
        java.lang.String str34 = jSDocInfo26.getFileOverview();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo26.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet35.stream();
        boolean boolean37 = strSet16.removeAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.Iterator<java.lang.String> strItor38 = strSet16.iterator();
        boolean boolean39 = strSet11.retainAll((java.util.Collection<java.lang.String>) strSet16);
        strSet11.clear();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test18667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18667");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node26.isArrayLit();
        node26.setLineno(4131);
        node26.putIntProp(8, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = node26.getLastSibling();
        com.google.javascript.rhino.Node node34 = node26.cloneNode();
        java.lang.String str35 = node26.getQualifiedName();
        boolean boolean36 = node26.isNumber();
        boolean boolean37 = node26.isWith();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test18668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18668");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        com.google.javascript.rhino.Node node21 = node15.getLastSibling();
        java.lang.Object obj23 = node21.getProp(2);
        com.google.javascript.rhino.Node node24 = node21.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int29 = node28.getType();
        boolean boolean30 = node28.isArrayLit();
        node28.setWasEmptyNode(false);
        boolean boolean33 = node28.isNot();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node38.isDo();
        boolean boolean45 = node38.isDefaultCase();
        node38.setQuotedString();
        boolean boolean47 = node38.isDec();
        boolean boolean48 = node38.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node38.siblings();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(51);
        java.lang.String str52 = node38.checkTreeEquals(node51);
        boolean boolean53 = node38.isObjectLit();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(6);
        com.google.javascript.rhino.Node node56 = node38.copyInformationFrom(node55);
        boolean boolean57 = node38.isGetterDef();
        java.lang.String str58 = node28.checkTreeEquals(node38);
        node28.setSourceFileForTesting("STRING  0 [source_file: Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n]");
        com.google.javascript.rhino.Node node61 = node24.copyInformationFromForTree(node28);
        java.lang.String str62 = node28.getSourceFileName();
        java.lang.String str63 = node28.toStringTree();
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node28.setJSType(jSType64);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str52, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "STRING  0 [source_file: Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n]" + "'", str62, "STRING  0 [source_file: Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "STRING  0 [source_file: STRING  0 [source_file: Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n]]\n" + "'", str63, "STRING  0 [source_file: STRING  0 [source_file: Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n]]\n");
    }

    @Test
    public void test18669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18669");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.toString();
        boolean boolean8 = jSDocInfo0.isHidden();
        java.lang.String str9 = jSDocInfo0.getVersion();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        boolean boolean12 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18670");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getPositionOnStartLine();
        int int3 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        boolean boolean5 = typePosition0.hasBrackets();
        int int6 = typePosition0.getPositionOnStartLine();
        boolean boolean7 = typePosition0.hasBrackets();
        boolean boolean8 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node15 = node13.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) -1, node13, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node18.hasChild(node28);
        boolean boolean30 = node28.isVar();
        boolean boolean31 = node28.isCase();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        boolean boolean80 = node69.hasChild(node79);
        boolean boolean81 = node79.isVar();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((-1), node46, node79);
        boolean boolean83 = node46.isAssignAdd();
        com.google.javascript.rhino.Node node84 = node46.removeFirstChild();
        com.google.javascript.rhino.Node node85 = node28.srcrefTree(node84);
        boolean boolean86 = node85.isParamList();
        typePosition0.setItem(node85);
        int int88 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node89 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test18671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18671");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        node11.setString("");
        com.google.javascript.rhino.Node node31 = node11.getAncestor(0);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        boolean boolean56 = node45.hasChild(node55);
        int int57 = node45.getCharno();
        com.google.javascript.rhino.Node node58 = node35.useSourceInfoIfMissingFrom(node45);
        int int59 = node35.getSourcePosition();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean64 = node63.isThrow();
        java.lang.String str68 = node63.toString(true, false, true);
        int int70 = node63.getIntProp(51);
        node63.addSuppression("STRING  0 [quoted: 1]\n");
        node35.addChildrenToBack(node63);
        boolean boolean74 = node35.isBreak();
        node31.addChildrenToFront(node35);
        int int76 = node35.getSourcePosition();
        boolean boolean77 = node35.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4131 + "'", int59 == 4131);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "STRING  0" + "'", str68, "STRING  0");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4131 + "'", int76 == 4131);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test18672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18672");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(10);
        boolean boolean2 = node1.isNoSideEffectsCall();
        int int3 = node1.getLength();
        boolean boolean4 = node1.isName();
        node1.setWasEmptyNode(false);
        boolean boolean7 = node1.isNumber();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test18673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18673");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        node52.detachChildren();
        java.util.Set<java.lang.String> strSet56 = node52.getDirectives();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean61 = node60.isThrow();
        java.lang.String str65 = node60.toString(true, false, true);
        java.lang.String str66 = node60.getQualifiedName();
        boolean boolean67 = node60.isIn();
        com.google.javascript.rhino.Node node68 = node60.cloneTree();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node72.setCharno(1);
        java.util.Set<java.lang.String> strSet75 = node72.getDirectives();
        boolean boolean76 = node72.isHook();
        node68.addChildToFront(node72);
        boolean boolean78 = node68.isNE();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node68.siblings();
        com.google.javascript.rhino.Node node80 = node52.useSourceInfoFrom(node68);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable81 = node68.siblings();
        com.google.javascript.rhino.Node node82 = node68.cloneNode();
        boolean boolean83 = node68.isUnscopedQualifiedName();
        node68.setWasEmptyNode(true);
        boolean boolean86 = node68.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "STRING  0" + "'", str65, "STRING  0");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(nodeIterable81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test18674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18674");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue4.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue1.xor(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue9.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue14.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue16.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue12.and(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str22 = ternaryValue21.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue12.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue7.or(ternaryValue12);
        java.lang.String str25 = ternaryValue12.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue27.or(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue32.or(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue34.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue30.and(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str40 = ternaryValue39.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue30.and(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue41.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue12.and(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean47 = ternaryValue45.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean51 = ternaryValue49.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue52.or(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue49.xor(ternaryValue54);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue45.xor(ternaryValue49);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue58.or(ternaryValue60);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue63.or(ternaryValue65);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue65.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = ternaryValue61.and(ternaryValue65);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue49.and(ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue71.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = ternaryValue49.or(ternaryValue71);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue73.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue43.or(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue73.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "true" + "'", str22, "true");
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "false" + "'", str25, "false");
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "true" + "'", str40, "true");
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
    }

    @Test
    public void test18675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18675");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test18676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18676");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getPositionOnEndLine();
        boolean boolean3 = typePosition1.hasBrackets();
        int int4 = typePosition1.getEndLine();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node22.hasChild(node32);
        int int34 = node22.getCharno();
        com.google.javascript.rhino.Node node35 = node12.useSourceInfoIfMissingFrom(node22);
        node35.setLength((int) ' ');
        node8.addChildrenToBack(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node8.children();
        boolean boolean40 = node8.isHook();
        int int41 = node8.getSideEffectFlags();
        typePosition1.setItem(node8);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int47 = node46.getSourcePosition();
        int int48 = node46.getType();
        boolean boolean49 = node46.isLabel();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) ' ', node8, node46);
        boolean boolean51 = node8.isExprResult();
        boolean boolean52 = node8.isEmpty();
        int int53 = node8.getSideEffectFlags();
        com.google.javascript.rhino.Node node54 = node8.removeFirstChild();
        boolean boolean55 = node54.isAdd();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 40 + "'", int48 == 40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test18677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18677");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.isInterface();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str11 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test18678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18678");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isConstructor();
        java.lang.String str11 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test18679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18679");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        int int76 = node75.getType();
        boolean boolean77 = node28.isEquivalentTo(node75);
        boolean boolean78 = node28.isUnscopedQualifiedName();
        boolean boolean79 = node28.isTry();
        node28.setSourceEncodedPositionForTree(29);
        node28.setType((int) 'a');
        boolean boolean84 = node28.isString();
        boolean boolean85 = node28.isDo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test18680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18680");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        boolean boolean5 = node3.isAdd();
        com.google.javascript.rhino.Node node6 = node3.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType7 = node6.getJSType();
        boolean boolean8 = node6.isTry();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node6.getJSDocInfo();
        boolean boolean10 = node6.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test18681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18681");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 0);
        com.google.javascript.rhino.jstype.JSType jSType2 = null;
        node1.setJSType(jSType2);
        int int4 = node1.getSideEffectFlags();
        boolean boolean5 = node1.isQualifiedName();
        boolean boolean6 = node1.isSyntheticBlock();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        boolean boolean20 = node11.isDec();
        boolean boolean21 = node11.isLabel();
        boolean boolean22 = node11.isSetterDef();
        boolean boolean23 = node11.isRegExp();
        boolean boolean24 = node11.isName();
        boolean boolean25 = node11.isVoid();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        boolean boolean36 = node30.isDo();
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        int int48 = node47.getType();
        boolean boolean49 = node47.isFor();
        node30.addChildToFront(node47);
        boolean boolean51 = node30.hasChildren();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int53 = typePosition52.getPositionOnEndLine();
        com.google.javascript.rhino.Node node54 = typePosition52.getItem();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node59.isDo();
        boolean boolean66 = node59.isDefaultCase();
        node59.setQuotedString();
        boolean boolean68 = node59.isDec();
        boolean boolean69 = node59.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node59.siblings();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(51);
        java.lang.String str73 = node59.checkTreeEquals(node72);
        boolean boolean74 = node59.isCatch();
        com.google.javascript.rhino.InputId inputId75 = null;
        node59.setInputId(inputId75);
        typePosition52.setItem(node59);
        com.google.javascript.rhino.Node node78 = node30.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean83 = node82.isThrow();
        java.lang.String str87 = node82.toString(true, false, true);
        node82.setIsSyntheticBlock(true);
        int int90 = node82.getLength();
        boolean boolean91 = node82.isNumber();
        node82.setSourceEncodedPositionForTree(40);
        boolean boolean94 = node82.isLocalResultCall();
        com.google.javascript.rhino.Node node95 = node59.copyInformationFromForTree(node82);
        node59.removeProp(0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = node1.removeChildAfter(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str73, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "STRING  0" + "'", str87, "STRING  0");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test18682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18682");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node11.setStaticSourceFile(staticSourceFile28);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node38.isScript();
        com.google.javascript.rhino.Node node45 = node38.detachFromParent();
        node45.setOptionalArg(false);
        boolean boolean49 = node45.getBooleanProp(31);
        com.google.javascript.rhino.Node node50 = node33.copyInformationFrom(node45);
        int int51 = node45.getLineno();
        boolean boolean52 = node45.wasEmptyNode();
        com.google.javascript.rhino.Node node53 = node11.useSourceInfoFromForTree(node45);
        boolean boolean54 = node53.isQualifiedName();
        boolean boolean55 = node53.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test18683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18683");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        boolean boolean55 = node52.hasChildren();
        node52.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test18684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18684");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        node18.putIntProp(51, 48);
        com.google.javascript.rhino.Node node49 = node18.getLastChild();
        boolean boolean50 = node18.isReturn();
        boolean boolean51 = node18.isDec();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test18685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18685");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesGlobalState();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setMutatesArguments();
        int int8 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test18686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18686");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray11 = strSet10.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strSet10.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test18687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18687");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test18688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18688");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 5);
        boolean boolean2 = node1.isNew();
        int int3 = node1.getLength();
        int int4 = node1.getLineno();
        com.google.javascript.rhino.Node node5 = node1.getFirstChild();
        boolean boolean6 = node1.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test18689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18689");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getEndLine();
        boolean boolean5 = typePosition0.hasBrackets();
        int int6 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node7 = typePosition0.getItem();
        int int8 = typePosition0.getEndLine();
        int int9 = typePosition0.getStartLine();
        boolean boolean10 = typePosition0.hasBrackets();
        int int11 = typePosition0.getStartLine();
        int int12 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test18690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18690");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(45, 0, 48);
        java.lang.String str4 = node3.getSourceFileName();
        boolean boolean5 = node3.isOnlyModifiesThisCall();
        boolean boolean6 = node3.isWith();
        com.google.javascript.rhino.jstype.JSType jSType7 = node3.getJSType();
        boolean boolean8 = node3.isArrayLit();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int10 = typePosition9.getPositionOnEndLine();
        com.google.javascript.rhino.Node node11 = typePosition9.getItem();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isDo();
        boolean boolean23 = node16.isDefaultCase();
        node16.setQuotedString();
        boolean boolean25 = node16.isDec();
        boolean boolean26 = node16.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node16.siblings();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(51);
        java.lang.String str30 = node16.checkTreeEquals(node29);
        boolean boolean31 = node16.isCatch();
        com.google.javascript.rhino.InputId inputId32 = null;
        node16.setInputId(inputId32);
        typePosition9.setItem(node16);
        int int35 = typePosition9.getEndLine();
        int int36 = typePosition9.getStartLine();
        com.google.javascript.rhino.Node node37 = typePosition9.getItem();
        com.google.javascript.rhino.Node node38 = node37.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType39 = node38.getJSType();
        boolean boolean40 = node38.isLocalResultCall();
        boolean boolean41 = node38.isLabel();
        int int42 = node3.getIndexOfChild(node38);
        java.lang.String str43 = node38.getString();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str30, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test18691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18691");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isExterns();
        boolean boolean6 = jSDocInfo0.hasType();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        java.lang.String str9 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test18692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18692");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean8 = ternaryValue6.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue9.or(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue6.xor(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue2.xor(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue0.and(ternaryValue6);
        boolean boolean16 = ternaryValue14.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue14.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue19.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue17.xor(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean24 = ternaryValue22.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue25.or(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue25.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue28.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue22.or(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue20.xor(ternaryValue22);
        boolean boolean33 = ternaryValue20.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue35.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue35.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue38.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue38.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue34.xor(ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue20.and(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
    }

    @Test
    public void test18693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18693");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        int int52 = node40.getCharno();
        com.google.javascript.rhino.Node node53 = node30.useSourceInfoIfMissingFrom(node40);
        int int54 = node30.getSourcePosition();
        java.lang.String str55 = node30.toString();
        com.google.javascript.rhino.Node node56 = node3.srcref(node30);
        boolean boolean57 = node30.isStringKey();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str59 = jSDocInfo58.getVersion();
        boolean boolean60 = jSDocInfo58.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo58.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo58.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList63 = jSDocInfo58.getThrownTypes();
        java.lang.String str64 = jSDocInfo58.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str66 = jSDocInfo65.getVersion();
        boolean boolean67 = jSDocInfo65.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo65.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo65.setVisibility(visibility69);
        jSDocInfo58.setVisibility(visibility69);
        boolean boolean72 = jSDocInfo58.isExpose();
        node30.setJSDocInfo(jSDocInfo58);
        boolean boolean74 = jSDocInfo58.hasFileOverview();
        boolean boolean75 = jSDocInfo58.isExpose();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4131 + "'", int54 == 4131);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR 1" + "'", str55, "OR 1");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertNotNull(jSTypeExpressionList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + visibility69 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility69.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test18694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18694");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        boolean boolean28 = node25.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFromForTree(node33);
        boolean boolean43 = node42.isVarArgs();
        com.google.javascript.rhino.Node node44 = node19.useSourceInfoIfMissingFrom(node42);
        boolean boolean45 = node19.isUnscopedQualifiedName();
        boolean boolean46 = node19.isReturn();
        int int47 = node19.getLength();
        java.lang.String str51 = node19.toString(false, true, false);
        boolean boolean52 = node19.isQualifiedName();
        boolean boolean53 = node19.isArrayLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ERROR" + "'", str51, "ERROR");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test18695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18695");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int3 = namePosition2.getEndLine();
        int int4 = namePosition2.getPositionOnEndLine();
        com.google.javascript.rhino.Node node5 = null;
        namePosition2.setItem(node5);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        java.util.Set<java.lang.String> strSet13 = node10.getDirectives();
        namePosition2.setItem(node10);
        boolean boolean15 = node10.hasMoreThanOneChild();
        typePosition0.setItem(node10);
        boolean boolean17 = typePosition0.hasBrackets();
        int int18 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test18696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18696");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        boolean boolean2 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node3 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str5 = jSDocInfo4.getVersion();
        boolean boolean6 = jSDocInfo4.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo4.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo4.getImplementedInterfaces();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean13 = node12.isThrow();
        java.lang.String str17 = node12.toString(true, false, true);
        jSDocInfo4.setAssociatedNode(node12);
        boolean boolean19 = jSDocInfo4.hasTypedefType();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node33.hasChild(node43);
        int int45 = node33.getCharno();
        com.google.javascript.rhino.Node node46 = node23.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node51 = node23.srcref(node50);
        jSDocInfo4.setAssociatedNode(node23);
        node23.setLineno(47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str56 = jSDocInfo55.getVersion();
        boolean boolean57 = jSDocInfo55.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo55.getParameterNames();
        jSDocInfo55.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList61 = jSDocInfo55.getExtendedInterfaces();
        node23.setJSDocInfo(jSDocInfo55);
        typePosition0.setItem(node23);
        com.google.javascript.rhino.Node node64 = null;
        typePosition0.setItem(node64);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "STRING  0" + "'", str17, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(jSTypeExpressionList61);
        org.junit.Assert.assertNull(node66);
    }

    @Test
    public void test18697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18697");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        boolean boolean28 = node11.isDefaultCase();
        boolean boolean29 = node11.isVarArgs();
        com.google.javascript.rhino.Node node31 = node11.getAncestor((int) (short) 100);
        boolean boolean32 = node11.isHook();
        node11.setIsSyntheticBlock(false);
        boolean boolean35 = node11.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test18698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18698");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isVarArgs();
        boolean boolean6 = node3.isSetterDef();
        boolean boolean7 = node3.isQualifiedName();
        com.google.javascript.rhino.InputId inputId8 = node3.getInputId();
        boolean boolean9 = node3.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(inputId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test18699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18699");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        boolean boolean6 = jSDocInfo0.isExpose();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test18700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18700");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getStartLine();
        int int9 = stringPosition0.getEndLine();
        java.lang.String str10 = stringPosition0.getItem();
        java.lang.String str11 = stringPosition0.getItem();
        int int12 = stringPosition0.getStartLine();
        int int13 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36 + "'", int13 == 36);
    }

    @Test
    public void test18701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18701");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        boolean boolean12 = strSet3.add("STRING  0");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        int int23 = node22.getType();
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = node22.hasChild(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node29.setCharno(1);
        boolean boolean32 = node29.isRegExp();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        boolean boolean43 = node37.isDo();
        boolean boolean44 = node37.isDefaultCase();
        node37.setQuotedString();
        com.google.javascript.rhino.Node node46 = node29.useSourceInfoFromForTree(node37);
        node37.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean50 = node37.isVarArgs();
        node37.setLineno(37);
        boolean boolean53 = node37.isInstanceOf();
        boolean boolean54 = node37.isAdd();
        com.google.javascript.rhino.Node node55 = node22.srcref(node37);
        java.lang.Object obj57 = node55.getProp(4131);
        boolean boolean58 = strSet3.equals((java.lang.Object) node55);
        boolean boolean59 = strSet3.isEmpty();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean63 = ternaryValue61.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue64.or(ternaryValue65);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue61.xor(ternaryValue66);
        java.lang.String str68 = ternaryValue67.toString();
        java.lang.String str69 = ternaryValue67.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean72 = ternaryValue70.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue73.or(ternaryValue74);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue73.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = ternaryValue76.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue70.or(ternaryValue76);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = ternaryValue67.xor(ternaryValue78);
        boolean boolean80 = strSet3.equals((java.lang.Object) ternaryValue79);
        int int81 = strSet3.size();
        int int82 = strSet3.size();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "true" + "'", str68, "true");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "true" + "'", str69, "true");
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
    }

    @Test
    public void test18702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18702");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        boolean boolean2 = typePosition0.hasBrackets();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node5 = typePosition0.getItem();
        int int6 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double12 = node11.getDouble();
        boolean boolean13 = node11.isAdd();
        boolean boolean14 = node11.isDelProp();
        boolean boolean15 = node11.isLabelName();
        int int16 = node11.getSourcePosition();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean21 = node20.isThrow();
        java.lang.String str25 = node20.toString(true, false, true);
        boolean boolean26 = node20.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node20.getJSDocInfo();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        boolean boolean52 = node41.hasChild(node51);
        int int53 = node41.getCharno();
        com.google.javascript.rhino.Node node54 = node31.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node59 = node31.srcref(node58);
        boolean boolean60 = node59.isAssignAdd();
        boolean boolean61 = node20.isEquivalentToTyped(node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node59.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node63 = node11.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray69);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(0, nodeArray69);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(2, nodeArray69);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(49, nodeArray69, 38, 53);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(46, nodeArray69, 151562, 100);
        boolean boolean79 = node78.isTrue();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = null;
        node81.setStaticSourceFile(staticSourceFile82);
        boolean boolean84 = node81.isContinue();
        boolean boolean85 = node81.isRegExp();
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString(46, "OR", 0, 53);
        com.google.javascript.rhino.jstype.JSType jSType91 = node90.getJSType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable92 = node90.children();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(21, node63, node78, node81, node90, (int) (byte) 1, 97);
        boolean boolean96 = node90.isGetElem();
        com.google.javascript.rhino.Node node97 = node90.getLastChild();
        typePosition0.setItem(node90);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 4095.0d + "'", double12 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 409601 + "'", int16 == 409601);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING  0" + "'", str25, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(jSType91);
        org.junit.Assert.assertNotNull(nodeIterable92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(node97);
    }

    @Test
    public void test18703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18703");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node13.setCharno(1);
        boolean boolean16 = node13.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node34.setCharno(1);
        java.util.Set<java.lang.String> strSet37 = node34.getDirectives();
        node34.setLength(0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node30, node34, node49, (int) 'a', (int) (short) 0);
        boolean boolean53 = node30.isNull();
        com.google.javascript.rhino.jstype.JSType jSType54 = node30.getJSType();
        jSDocInfo0.setAssociatedNode(node30);
        int int56 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean57 = jSDocInfo0.isNoAlias();
        int int58 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList59 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo0.getReturnType();
        boolean boolean61 = jSDocInfo0.hasModifies();
        java.lang.String str62 = jSDocInfo0.getLendsName();
        boolean boolean63 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList59);
        org.junit.Assert.assertNull(jSTypeExpression60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test18704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18704");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        node3.setIsSyntheticBlock(true);
        boolean boolean11 = node3.isTry();
        java.lang.String str12 = node3.toStringTree();
        boolean boolean13 = node3.isRegExp();
        com.google.javascript.rhino.Node node14 = node3.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0 [synthetic: 1]\n" + "'", str12, "STRING  0 [synthetic: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
    }

    @Test
    public void test18705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18705");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getStartLine();
        int int9 = stringPosition0.getEndLine();
        int int10 = stringPosition0.getEndLine();
        stringPosition0.setPositionInformation(4, 27, 37, (int) (short) -1);
        int int16 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 37 + "'", int16 == 37);
    }

    @Test
    public void test18706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18706");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        node16.setLength(38);
        int int19 = node16.getChildCount();
        com.google.javascript.rhino.Node node20 = node16.cloneNode();
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        int int50 = node38.getCharno();
        com.google.javascript.rhino.Node node51 = node28.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node58 = node56.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) -1, node56, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node68 = node66.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node66, (int) (byte) 1, (int) '#');
        boolean boolean72 = node61.hasChild(node71);
        boolean boolean73 = node71.isVar();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((-1), node38, node71);
        com.google.javascript.rhino.Node node75 = node74.getParent();
        boolean boolean76 = node74.isSetterDef();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((-1), node74);
        int int78 = node77.getSideEffectFlags();
        com.google.javascript.rhino.Node node79 = node20.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean80 = node79.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test18707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18707");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(markerCollection9);
        org.junit.Assert.assertNotNull(nodeCollection10);
    }

    @Test
    public void test18708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18708");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        boolean boolean9 = jSDocInfo0.isConstant();
        boolean boolean10 = jSDocInfo0.hasModifies();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18709");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(52, 0, 43);
        boolean boolean6 = node5.isString();
        java.lang.String str7 = node5.toStringTree();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, node5, 36, (int) (short) 1);
        node10.setVarArgs(false);
        boolean boolean13 = node10.isLocalResultCall();
        boolean boolean14 = node10.isExprResult();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(4131, node10, 53, 52);
        int int18 = node17.getSourceOffset();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "INSTANCEOF 0\n" + "'", str7, "INSTANCEOF 0\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test18710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18710");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node24.hasChild(node34);
        int int36 = node24.getCharno();
        com.google.javascript.rhino.Node node37 = node14.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node42 = node14.srcref(node41);
        boolean boolean43 = node42.isAssignAdd();
        boolean boolean44 = node3.isEquivalentToTyped(node42);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(4131);
        node3.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        boolean boolean68 = node57.hasChild(node67);
        boolean boolean69 = node67.isVar();
        boolean boolean70 = node67.isTypeOf();
        boolean boolean71 = node67.isAssignAdd();
        boolean boolean72 = node67.isStringKey();
        com.google.javascript.rhino.Node node73 = node67.removeChildren();
        node3.addChildrenToFront(node67);
        boolean boolean75 = node67.hasOneChild();
        int int76 = node67.getChildCount();
        boolean boolean77 = node67.isNull();
        boolean boolean78 = node67.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test18711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18711");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node13.isAssignAdd();
        boolean boolean28 = node13.isScript();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test18712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18712");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("(Not declared as a type name)");
        boolean boolean10 = jSDocInfo0.hasReturnType();
        boolean boolean11 = jSDocInfo0.isConstructor();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getAuthors();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = jSDocInfo0.getTypeNodes();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strCollection12);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test18713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18713");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node4.getAncestors();
        boolean boolean17 = node4.isNoSideEffectsCall();
        java.lang.String str18 = node4.toString();
        node4.setSourceFileForTesting("((Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n))");
        boolean boolean21 = node4.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0 [quoted: 1]" + "'", str18, "STRING  0 [quoted: 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test18714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18714");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        boolean boolean11 = jSDocInfo0.isOverride();
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18715");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isContinue();
        boolean boolean53 = node50.isDefaultCase();
        com.google.javascript.rhino.Node node54 = node50.cloneNode();
        boolean boolean55 = node50.isInc();
        com.google.javascript.rhino.Node node56 = node50.getParent();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
    }

    @Test
    public void test18716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18716");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node24.hasChild(node34);
        int int36 = node24.getCharno();
        com.google.javascript.rhino.Node node37 = node14.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node42 = node14.srcref(node41);
        boolean boolean43 = node42.isAssignAdd();
        boolean boolean44 = node3.isEquivalentToTyped(node42);
        boolean boolean45 = node42.isRegExp();
        com.google.javascript.rhino.Node node46 = node42.cloneNode();
        boolean boolean47 = node46.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test18717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18717");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node13.getJSDocInfo();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node13.children();
        boolean boolean29 = node13.isUnscopedQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node13.children();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeIterable30);
    }

    @Test
    public void test18718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18718");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        boolean boolean12 = node4.isDelProp();
        boolean boolean13 = node4.isLocalResultCall();
        boolean boolean14 = node4.isWhile();
        boolean boolean15 = node4.isCase();
        boolean boolean16 = node4.isSetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test18719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18719");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        boolean boolean2 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation((int) (short) -1, 41, 42, 35);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        boolean boolean21 = node12.isDec();
        boolean boolean22 = node12.isLabel();
        int int23 = node12.getType();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node33 = node31.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) -1, node31, (int) (byte) 1, (int) '#');
        boolean boolean37 = node31.isDo();
        boolean boolean38 = node31.isDefaultCase();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node57, (int) (byte) 1, (int) '#');
        boolean boolean63 = node52.hasChild(node62);
        int int64 = node52.getCharno();
        com.google.javascript.rhino.Node node65 = node42.useSourceInfoIfMissingFrom(node52);
        int int66 = node42.getSourcePosition();
        java.lang.String str67 = node42.toString();
        int int68 = node31.getIndexOfChild(node42);
        int int69 = node26.getIndexOfChild(node42);
        boolean boolean70 = node26.isFromExterns();
        node12.addChildToFront(node26);
        com.google.javascript.rhino.jstype.JSType jSType72 = node26.getJSType();
        int int73 = node26.getSourcePosition();
        typePosition0.setItem(node26);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 40 + "'", int23 == 40);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4131 + "'", int66 == 4131);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "OR 1" + "'", str67, "OR 1");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test18720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18720");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test18721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18721");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int5 = node4.getSourcePosition();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node14.isScript();
        node14.setQuotedString();
        com.google.javascript.rhino.Node node22 = node9.srcrefTree(node14);
        boolean boolean23 = node22.isIf();
        com.google.javascript.rhino.Node node24 = node22.getParent();
        node22.removeProp((int) 'a');
        int int27 = node22.getLineno();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node33 = node32.removeFirstChild();
        com.google.javascript.rhino.Node[] nodeArray34 = new com.google.javascript.rhino.Node[] { node4, node22, node32 };
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(50, nodeArray34, 4095, (int) (short) 0);
        com.google.javascript.rhino.Node node38 = node37.getLastChild();
        boolean boolean39 = node38.isGetElem();
        boolean boolean40 = node38.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(nodeArray34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test18722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18722");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getEndLine();
        int int3 = namePosition0.getEndLine();
        namePosition0.setPositionInformation(97, (int) (short) 1, 151560, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test18723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18723");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        node3.setOptionalArg(true);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node20.hasChild(node30);
        int int32 = node20.getCharno();
        com.google.javascript.rhino.Node node33 = node10.useSourceInfoIfMissingFrom(node20);
        boolean boolean34 = node3.isEquivalentTo(node20);
        boolean boolean35 = node20.isExprResult();
        boolean boolean36 = node20.isWhile();
        node20.setVarArgs(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test18724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18724");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        boolean boolean11 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18725");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo1.getVersion();
        boolean boolean3 = jSDocInfo1.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo1.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo1.getImplementedInterfaces();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean10 = node9.isThrow();
        java.lang.String str14 = node9.toString(true, false, true);
        jSDocInfo1.setAssociatedNode(node9);
        int int17 = node9.getIntProp((int) (byte) 10);
        node9.setSourceEncodedPositionForTree(15);
        node9.setLineno(1);
        boolean boolean22 = node9.isFromExterns();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node26.setCharno(1);
        boolean boolean29 = node26.isRegExp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node34.isDo();
        boolean boolean41 = node34.isDefaultCase();
        node34.setQuotedString();
        com.google.javascript.rhino.Node node43 = node26.useSourceInfoFromForTree(node34);
        node34.putIntProp((int) (byte) 100, (int) (byte) 0);
        node34.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean50 = node34.isInc();
        node34.setQuotedString();
        boolean boolean52 = node34.isNoSideEffectsCall();
        com.google.javascript.rhino.InputId inputId53 = null;
        node34.setInputId(inputId53);
        com.google.javascript.rhino.Node node55 = node9.useSourceInfoFromForTree(node34);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(97, node9, (int) (short) 100, (int) (byte) 10);
        boolean boolean59 = node9.isSyntheticBlock();
        boolean boolean60 = node9.isComma();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0" + "'", str14, "STRING  0");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test18726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18726");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("(Not declared as a type name)");
        com.google.javascript.rhino.Node node3 = node2.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double8 = node7.getDouble();
        boolean boolean9 = node7.isAdd();
        com.google.javascript.rhino.Node node10 = node7.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType11 = node10.getJSType();
        java.lang.String str12 = node10.toStringTree();
        com.google.javascript.rhino.Node node13 = node10.getLastSibling();
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isExprResult();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) ' ', node2, node13);
        int int17 = node13.getChildCount();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node21.setCharno(1);
        com.google.javascript.rhino.Node node24 = node21.cloneNode();
        boolean boolean25 = node21.isThrow();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node35.hasChild(node45);
        boolean boolean47 = node45.isVar();
        boolean boolean48 = node45.isTypeOf();
        boolean boolean49 = node45.isAssignAdd();
        boolean boolean50 = node45.isStringKey();
        node45.setOptionalArg(true);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean57 = node56.isThrow();
        java.lang.String str61 = node56.toString(true, false, true);
        java.lang.String str62 = node56.getQualifiedName();
        boolean boolean63 = node56.isIn();
        com.google.javascript.rhino.Node node64 = node56.cloneTree();
        boolean boolean65 = node64.isRegExp();
        boolean boolean66 = node64.isExprResult();
        com.google.javascript.rhino.Node node67 = node45.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node68 = node67.removeChildren();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int73 = node72.getSourcePosition();
        int int74 = node72.getType();
        com.google.javascript.rhino.Node node75 = node67.useSourceInfoIfMissingFromForTree(node72);
        java.lang.String str79 = node67.toString(false, true, true);
        com.google.javascript.rhino.Node node80 = node21.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder81 = node80.getJsDocBuilderForNode();
        boolean boolean82 = node80.isBreak();
        int int83 = node13.getIndexOfChild(node80);
        boolean boolean84 = node80.isAssign();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 4095.0d + "'", double8 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 4095.0 100\n" + "'", str12, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "STRING  0" + "'", str61, "STRING  0");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 40 + "'", int74 == 40);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ERROR [opt_arg: 1]" + "'", str79, "ERROR [opt_arg: 1]");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test18727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18727");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean37 = node36.isFromExterns();
        boolean boolean38 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getVersion();
        boolean boolean44 = jSDocInfo42.hasEnumParameterType();
        boolean boolean45 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo42.getTypedefType();
        boolean boolean47 = jSDocInfo42.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo42.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo42.getThisType();
        node40.putProp(35, (java.lang.Object) jSTypeExpression49);
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node40.setJSType(jSType51);
        boolean boolean53 = node40.isSetterDef();
        boolean boolean54 = node40.isAssign();
        boolean boolean55 = node40.isParamList();
        com.google.javascript.rhino.Node node56 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(0, node32, node40, node56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test18728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18728");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean8 = ternaryValue6.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue9.or(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue6.xor(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue2.xor(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue0.and(ternaryValue6);
        boolean boolean16 = ternaryValue14.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue19.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue24.or(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue26.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue22.and(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue17.and(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue14.and(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue33.or(ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue38.or(ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue40.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue36.and(ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue45.or(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue50.or(ternaryValue52);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue52.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue48.and(ternaryValue52);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue43.and(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue56.not();
        java.lang.String str58 = ternaryValue56.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue14.and(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue59.and(ternaryValue60);
        java.lang.String str62 = ternaryValue61.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "false" + "'", str58, "false");
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "false" + "'", str62, "false");
    }

    @Test
    public void test18729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18729");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("TRUE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(TRUE)" + "'", str1, "(TRUE)");
    }

    @Test
    public void test18730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18730");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isString();
        boolean boolean45 = node21.isNew();
        boolean boolean46 = node21.isDo();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node51.isScript();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node61.setCharno(1);
        java.util.Set<java.lang.String> strSet64 = node61.getDirectives();
        java.lang.String str65 = node51.checkTreeEquals(node61);
        boolean boolean66 = node51.isNE();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node51.setJSType(jSType67);
        java.lang.String str69 = node21.checkTreeEquals(node51);
        com.google.javascript.rhino.Node node70 = node21.getParent();
        boolean boolean71 = node21.isDelProp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str74 = jSDocInfo73.getVersion();
        boolean boolean75 = jSDocInfo73.hasEnumParameterType();
        boolean boolean76 = jSDocInfo73.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo73.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo73.setVisibility(visibility78);
        boolean boolean80 = jSDocInfo73.isJavaDispatch();
        boolean boolean81 = jSDocInfo73.hasFileOverview();
        boolean boolean82 = jSDocInfo73.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo73.getType();
        java.lang.String str85 = jSDocInfo73.getDescriptionForParameter("NAME");
        java.lang.String str87 = jSDocInfo73.getDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER 97.0\n\n\nTree2:\nOR 51\n\n\nSubtree1: NUMBER 97.0\n\n\nSubtree2: OR 51\n");
        node21.putProp(4131, (java.lang.Object) str87);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression77);
        org.junit.Assert.assertTrue("'" + visibility78 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility78.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test18731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18731");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(15, "STRING  0 [source_file: Named type with empty name component]");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node2.siblings();
        boolean boolean5 = node2.getBooleanProp(37);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        boolean boolean13 = node10.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node18.isDo();
        boolean boolean25 = node18.isDefaultCase();
        node18.setQuotedString();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoFromForTree(node18);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node31.setCharno(1);
        java.util.Set<java.lang.String> strSet34 = node31.getDirectives();
        node31.setLength(0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(0, node27, node31, node46, (int) 'a', (int) (short) 0);
        boolean boolean50 = node27.isNull();
        com.google.javascript.rhino.jstype.JSType jSType51 = node27.getJSType();
        com.google.javascript.rhino.InputId inputId52 = null;
        node27.setInputId(inputId52);
        com.google.javascript.rhino.Node node54 = node2.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean55 = node2.isScript();
        boolean boolean56 = node2.isWith();
        com.google.javascript.rhino.InputId inputId57 = node2.getInputId();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(inputId57);
    }

    @Test
    public void test18732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18732");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 'a');
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean7 = node6.isThrow();
        java.lang.String str11 = node6.toString(true, false, true);
        boolean boolean12 = node6.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node6.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node27.hasChild(node37);
        int int39 = node27.getCharno();
        com.google.javascript.rhino.Node node40 = node17.useSourceInfoIfMissingFrom(node27);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node45 = node17.srcref(node44);
        boolean boolean46 = node45.isAssignAdd();
        boolean boolean47 = node6.isEquivalentToTyped(node45);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(4131);
        node6.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node71 = node69.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) -1, node69, (int) (byte) 1, (int) '#');
        boolean boolean75 = node64.hasChild(node74);
        int int76 = node64.getCharno();
        com.google.javascript.rhino.Node node77 = node54.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node82 = node54.srcref(node81);
        node81.removeProp(0);
        boolean boolean85 = node81.isInc();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(37, node2, node6, node81, 47, (int) (short) -1);
        boolean boolean89 = node6.isCase();
        boolean boolean90 = node6.isStringKey();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  0" + "'", str11, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test18733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18733");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setAllFlags();
        int int6 = sideEffectFlags0.valueOf();
        int int7 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test18734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18734");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        java.lang.String str9 = jSDocInfo0.getDeprecationReason();
        boolean boolean11 = jSDocInfo0.hasParameter("STRING  0\n    ERROR 1\n        STRING  0\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18735");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        jSDocInfo0.setDeprecated(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
    }

    @Test
    public void test18736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18736");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        boolean boolean12 = jSDocInfo0.isHidden();
        boolean boolean13 = jSDocInfo0.isJavaDispatch();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo0.getReferences();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strCollection14);
    }

    @Test
    public void test18737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18737");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  [quoted: 1]");
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str3 = jSDocInfo2.getVersion();
        boolean boolean4 = jSDocInfo2.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo2.getParameterNames();
        jSDocInfo2.addSuppression("");
        boolean boolean8 = jSDocInfo2.isImplicitCast();
        boolean boolean9 = jSDocInfo2.isIdGenerator();
        boolean boolean10 = jSDocInfo2.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo2.getSuppressions();
        boolean boolean12 = strSet11.isEmpty();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node22.isScript();
        node22.setQuotedString();
        com.google.javascript.rhino.Node node30 = node17.srcrefTree(node22);
        boolean boolean31 = node30.isIf();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean41 = node40.isThrow();
        java.lang.String str45 = node40.toString(true, false, true);
        boolean boolean46 = node40.isOptionalArg();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] { node30, node36, node40, node50 };
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(38, nodeArray51, (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 2, 8, 50);
        com.google.javascript.rhino.Node node59 = node54.useSourceInfoIfMissingFrom(node58);
        boolean boolean60 = strSet11.equals((java.lang.Object) node58);
        boolean boolean61 = node1.isEquivalentTo(node58);
        boolean boolean63 = node58.getBooleanProp(409601);
        boolean boolean64 = node58.isName();
        boolean boolean65 = node58.isGetElem();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "STRING  0" + "'", str45, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test18738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18738");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        int int8 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        boolean boolean10 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean11 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18739");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        boolean boolean11 = node4.isStringKey();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isScript();
        com.google.javascript.rhino.InputId inputId23 = node16.getInputId();
        java.lang.Object obj25 = node16.getProp(42);
        node16.setSourceEncodedPositionForTree(48);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        boolean boolean52 = node41.hasChild(node51);
        int int53 = node41.getCharno();
        com.google.javascript.rhino.Node node54 = node31.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node59 = node31.srcref(node58);
        boolean boolean60 = node58.isVarArgs();
        node16.addChildToFront(node58);
        boolean boolean62 = node58.isThis();
        boolean boolean63 = node58.isDebugger();
        boolean boolean64 = node58.isNull();
        java.lang.String str65 = node4.checkTreeEquals(node58);
        boolean boolean66 = node58.isStringKey();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nNUMBER 40.0 51\n\n\nSubtree1: STRING  0\n\n\nSubtree2: NUMBER 40.0 51\n" + "'", str65, "Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nNUMBER 40.0 51\n\n\nSubtree1: STRING  0\n\n\nSubtree2: NUMBER 40.0 51\n");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test18740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18740");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isLocalResultCall();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        int int43 = node31.getCharno();
        com.google.javascript.rhino.Node node44 = node21.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((-1), node31, node64);
        boolean boolean68 = node31.isAssignAdd();
        com.google.javascript.rhino.Node node69 = node31.removeFirstChild();
        boolean boolean70 = node69.isNumber();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node69.siblings();
        boolean boolean72 = node69.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = node4.useSourceInfoFrom(node69);
        boolean boolean74 = node69.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test18741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18741");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        int int7 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(47);
        node3.addChildrenToFront(node9);
        boolean boolean11 = node3.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18742");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(16773120);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable2 = node1.children();
        org.junit.Assert.assertNotNull(nodeIterable2);
    }

    @Test
    public void test18743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18743");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node11.setCharno(1);
        boolean boolean14 = node11.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node19.isDo();
        boolean boolean26 = node19.isDefaultCase();
        node19.setQuotedString();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoFromForTree(node19);
        node19.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean32 = node19.isVarArgs();
        jSDocInfo0.setAssociatedNode(node19);
        com.google.javascript.rhino.InputId inputId34 = node19.getInputId();
        boolean boolean35 = node19.isOr();
        boolean boolean36 = node19.wasEmptyNode();
        com.google.javascript.rhino.Node node37 = node19.cloneTree();
        boolean boolean38 = node19.isReturn();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("STRING  0 [quoted: 1]\n", (int) (byte) 1, 0);
        boolean boolean43 = node42.isLocalResultCall();
        boolean boolean44 = node19.isEquivalentTo(node42);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        node46.setSourceEncodedPosition(16);
        node46.putBooleanProp((int) (short) 10, false);
        com.google.javascript.rhino.Node node52 = node46.removeChildren();
        boolean boolean53 = node46.isInstanceOf();
        node46.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node56 = node42.useSourceInfoIfMissingFrom(node46);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(inputId34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test18744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18744");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        node2.setSourceEncodedPosition(16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node2.getStaticSourceFile();
        com.google.javascript.rhino.Node node6 = node2.getLastSibling();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 151562);
        boolean boolean9 = node8.isDelProp();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(15, node6, node8);
        boolean boolean11 = node8.isBreak();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18745");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isLocalResultCall();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        int int43 = node31.getCharno();
        com.google.javascript.rhino.Node node44 = node21.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((-1), node31, node64);
        boolean boolean68 = node31.isAssignAdd();
        com.google.javascript.rhino.Node node69 = node31.removeFirstChild();
        boolean boolean70 = node69.isNumber();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable71 = node69.siblings();
        boolean boolean72 = node69.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node73 = node4.useSourceInfoFrom(node69);
        boolean boolean74 = node69.isNumber();
        com.google.javascript.rhino.Node node75 = node69.getLastChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(nodeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test18746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18746");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        boolean boolean52 = node14.isDo();
        int int53 = node14.getSourceOffset();
        boolean boolean54 = node14.isFalse();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test18747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18747");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = node3.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean36 = node35.isFromExterns();
        boolean boolean37 = node31.hasChild(node35);
        node31.setLineno((-1));
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        boolean boolean43 = node42.isObjectLit();
        boolean boolean44 = node42.hasMoreThanOneChild();
        java.lang.String str45 = node42.getQualifiedName();
        int int46 = node42.getSourcePosition();
        int int47 = node31.getIndexOfChild(node42);
        boolean boolean48 = node31.isStringKey();
        java.lang.String str49 = node31.toStringTree();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "OR\n" + "'", str49, "OR\n");
    }

    @Test
    public void test18748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18748");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isContinue();
        boolean boolean53 = node50.isDefaultCase();
        com.google.javascript.rhino.Node node54 = node50.cloneNode();
        int int55 = node50.getSourcePosition();
        boolean boolean56 = node50.isEmpty();
        node50.setLineno((-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test18749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18749");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("Unknown class name");
        boolean boolean12 = jSDocInfo0.isExport();
        boolean boolean13 = jSDocInfo0.isHidden();
        java.lang.String str14 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test18750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18750");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        int int27 = node15.getCharno();
        com.google.javascript.rhino.Node node28 = node5.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        boolean boolean50 = node48.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((-1), node15, node48);
        com.google.javascript.rhino.Node node52 = node51.getParent();
        boolean boolean53 = node51.isSetterDef();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(54, node51, 32, 32);
        com.google.javascript.rhino.Node node57 = node51.getFirstChild();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test18751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18751");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = node3.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean36 = node35.isFromExterns();
        boolean boolean37 = node31.hasChild(node35);
        boolean boolean38 = node35.isOr();
        node35.putIntProp(35, 38);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean47 = node46.isFromExterns();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(39, node46, (int) '4', 51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = node46.getJSDocInfo();
        boolean boolean52 = node46.isFalse();
        int int53 = node35.getIndexOfChild(node46);
        boolean boolean54 = node35.wasEmptyNode();
        java.lang.Object obj56 = node35.getProp(131104);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test18752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18752");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str47 = jSDocInfo46.getVersion();
        boolean boolean48 = jSDocInfo46.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo46.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo46.getImplementedInterfaces();
        java.lang.String str51 = jSDocInfo46.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo46.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo46.getTypedefType();
        node2.setJSDocInfo(jSDocInfo46);
        boolean boolean56 = node2.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str58 = jSDocInfo57.getVersion();
        boolean boolean59 = jSDocInfo57.hasEnumParameterType();
        java.lang.String str61 = jSDocInfo57.getDescriptionForParameter("STRING  0\n");
        java.lang.String str62 = jSDocInfo57.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList63 = jSDocInfo57.getExtendedInterfaces();
        boolean boolean64 = jSDocInfo57.hasThisType();
        boolean boolean65 = jSDocInfo57.hasTypedefType();
        node2.setJSDocInfo(jSDocInfo57);
        boolean boolean67 = jSDocInfo57.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo57.getThisType();
        java.lang.String str69 = jSDocInfo57.getReturnDescription();
        boolean boolean70 = jSDocInfo57.hasFileOverview();
        boolean boolean71 = jSDocInfo57.isDefine();
        boolean boolean72 = jSDocInfo57.isExport();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JSDocInfo" + "'", str51, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(jSTypeExpressionList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test18753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18753");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(5, "STRING  0");
        boolean boolean3 = node2.isReturn();
        boolean boolean4 = node2.isNull();
        com.google.javascript.rhino.Node node5 = node2.cloneNode();
        boolean boolean6 = node2.isNew();
        boolean boolean7 = node2.isQualifiedName();
        com.google.javascript.rhino.Node node8 = node2.getNext();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test18754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18754");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setAllFlags();
        int int3 = sideEffectFlags0.valueOf();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setAllFlags();
        boolean boolean7 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test18755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18755");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(((())))");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test18756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18756");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList4 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("(Not declared as a type name)");
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test18757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18757");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        int int56 = node32.getSourcePosition();
        java.lang.String str57 = node32.toString();
        int int58 = node21.getIndexOfChild(node32);
        boolean boolean59 = strSet3.equals((java.lang.Object) node21);
        boolean boolean60 = node21.isCatch();
        com.google.javascript.rhino.Node node61 = node21.getFirstChild();
        com.google.javascript.rhino.Node node62 = node21.getLastChild();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4131 + "'", int56 == 4131);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR 1" + "'", str57, "OR 1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node62);
    }

    @Test
    public void test18758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18758");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        boolean boolean22 = node4.isInc();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(30, node4);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double28 = node27.getDouble();
        boolean boolean29 = node27.isAdd();
        com.google.javascript.rhino.Node node30 = node27.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType31 = node30.getJSType();
        java.lang.String str32 = node30.toStringTree();
        node4.addChildToFront(node30);
        node30.setVarArgs(false);
        java.lang.String str36 = node30.getQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4095.0d + "'", double28 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 4095.0 100\n" + "'", str32, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test18759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18759");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(strCollection8);
    }

    @Test
    public void test18760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18760");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        boolean boolean8 = jSDocInfo0.isConstant();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        boolean boolean10 = jSDocInfo0.isExport();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str13 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test18761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18761");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.hasParameterType("JSDocInfo");
        java.lang.String str8 = jSDocInfo0.getMeaning();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nNUMBER -1.0 42\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER -1.0 42\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test18762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18762");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node15.isScript();
        node15.setQuotedString();
        boolean boolean23 = strSet3.equals((java.lang.Object) node15);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isScript();
        com.google.javascript.rhino.InputId inputId35 = node28.getInputId();
        boolean boolean36 = node28.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node28.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str40 = jSDocInfo39.getVersion();
        boolean boolean41 = jSDocInfo39.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo39.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo39.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList44 = jSDocInfo39.getThrownTypes();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo39.getParameterNames();
        node28.putProp((-1), (java.lang.Object) jSDocInfo39);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo39.getTypedefType();
        java.lang.String str48 = jSDocInfo39.getLicense();
        boolean boolean49 = jSDocInfo39.isHidden();
        boolean boolean50 = strSet3.contains((java.lang.Object) jSDocInfo39);
        java.lang.String str51 = jSDocInfo39.getSourceName();
        boolean boolean52 = jSDocInfo39.hasBaseType();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertNotNull(jSTypeExpressionList44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test18763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18763");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(Not declared as a type name)");
        com.google.javascript.rhino.Node node2 = node1.cloneTree();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node2.new FileLevelJsDocBuilder();
        boolean boolean4 = node2.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test18764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18764");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isExprResult();
        boolean boolean12 = node4.isTrue();
        node4.setOptionalArg(false);
        boolean boolean15 = node4.isParamList();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node20.isDo();
        boolean boolean27 = node20.isDefaultCase();
        node20.setQuotedString();
        boolean boolean29 = node20.isDec();
        boolean boolean30 = node20.hasMoreThanOneChild();
        boolean boolean31 = node20.isUnscopedQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str33 = jSDocInfo32.getVersion();
        boolean boolean34 = jSDocInfo32.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo32.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo32.getImplementedInterfaces();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean41 = node40.isThrow();
        java.lang.String str45 = node40.toString(true, false, true);
        jSDocInfo32.setAssociatedNode(node40);
        int int48 = node40.getIntProp((int) (byte) 10);
        node40.setSourceEncodedPositionForTree(15);
        node40.setLineno(1);
        com.google.javascript.rhino.Node node53 = node20.copyInformationFromForTree(node40);
        com.google.javascript.rhino.Node node54 = node4.copyInformationFromForTree(node40);
        int int55 = node4.getSourcePosition();
        java.util.Set<java.lang.String> strSet56 = node4.getDirectives();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "STRING  0" + "'", str45, "STRING  0");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4111 + "'", int55 == 4111);
        org.junit.Assert.assertNull(strSet56);
    }

    @Test
    public void test18765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18765");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.setCharno((int) (short) 1);
        boolean boolean26 = node11.hasChildren();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        int int52 = node40.getCharno();
        com.google.javascript.rhino.Node node53 = node30.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        boolean boolean78 = node67.hasChild(node77);
        int int79 = node67.getCharno();
        com.google.javascript.rhino.Node node80 = node57.useSourceInfoIfMissingFrom(node67);
        int int81 = node57.getSourcePosition();
        java.lang.String str82 = node57.toString();
        com.google.javascript.rhino.Node node83 = node30.srcref(node57);
        com.google.javascript.rhino.Node node84 = node11.copyInformationFrom(node57);
        com.google.javascript.rhino.jstype.JSType jSType85 = null;
        node84.setJSType(jSType85);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4131 + "'", int81 == 4131);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "OR 1" + "'", str82, "OR 1");
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test18766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18766");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isHook();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node21.setCharno(1);
        boolean boolean24 = node21.isRegExp();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node29.isDo();
        boolean boolean36 = node29.isDefaultCase();
        node29.setQuotedString();
        com.google.javascript.rhino.Node node38 = node21.useSourceInfoFromForTree(node29);
        node29.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        boolean boolean52 = node46.isScript();
        com.google.javascript.rhino.InputId inputId53 = node46.getInputId();
        com.google.javascript.rhino.Node node54 = node29.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node71 = node69.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) -1, node69, (int) (byte) 1, (int) '#');
        boolean boolean75 = node64.hasChild(node74);
        boolean boolean76 = node74.isVar();
        boolean boolean77 = node74.isTypeOf();
        boolean boolean78 = node74.isAssignAdd();
        node74.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node81 = node29.copyInformationFrom(node74);
        com.google.javascript.rhino.Node node82 = node16.useSourceInfoFrom(node74);
        boolean boolean83 = node74.isIn();
        node74.removeProp(15);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(inputId53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test18767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18767");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getPositionOnEndLine();
        boolean boolean3 = typePosition1.hasBrackets();
        int int4 = typePosition1.getEndLine();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node22.hasChild(node32);
        int int34 = node22.getCharno();
        com.google.javascript.rhino.Node node35 = node12.useSourceInfoIfMissingFrom(node22);
        node35.setLength((int) ' ');
        node8.addChildrenToBack(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node8.children();
        boolean boolean40 = node8.isHook();
        int int41 = node8.getSideEffectFlags();
        typePosition1.setItem(node8);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int47 = node46.getSourcePosition();
        int int48 = node46.getType();
        boolean boolean49 = node46.isLabel();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) ' ', node8, node46);
        boolean boolean51 = node8.isExprResult();
        boolean boolean52 = node8.isEmpty();
        java.lang.String str53 = node8.toStringTree();
        node8.setSourceEncodedPositionForTree(49);
        java.lang.String str59 = node8.toString(true, false, true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 40 + "'", int48 == 40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER 40.0 51\n    OR 1 [length: 32]\n" + "'", str53, "NUMBER 40.0 51\n    OR 1 [length: 32]\n");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER 40.0 0" + "'", str59, "NUMBER 40.0 0");
    }

    @Test
    public void test18768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18768");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n", 46, 50);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node8.setCharno(1);
        boolean boolean11 = node8.isRegExp();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isDo();
        boolean boolean23 = node16.isDefaultCase();
        node16.setQuotedString();
        com.google.javascript.rhino.Node node25 = node8.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node29.setCharno(1);
        java.util.Set<java.lang.String> strSet32 = node29.getDirectives();
        node29.setLength(0);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(0, node25, node29, node44, (int) 'a', (int) (short) 0);
        int int48 = node25.getLineno();
        com.google.javascript.rhino.Node node49 = node3.useSourceInfoIfMissingFrom(node25);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test18769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18769");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        java.lang.String[] strArray14 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean18 = strSet15.add("STRING  0");
        java.lang.String[] strArray21 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        boolean boolean29 = strSet22.addAll((java.util.Collection<java.lang.String>) strList27);
        boolean boolean30 = strSet15.containsAll((java.util.Collection<java.lang.String>) strList27);
        java.lang.String[] strArray33 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean37 = strSet34.add("STRING  0");
        java.lang.String[] strArray40 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        boolean boolean48 = strSet41.addAll((java.util.Collection<java.lang.String>) strList46);
        boolean boolean49 = strSet34.containsAll((java.util.Collection<java.lang.String>) strList46);
        boolean boolean50 = strSet15.containsAll((java.util.Collection<java.lang.String>) strSet34);
        java.lang.String[] strArray53 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        boolean boolean57 = strSet54.add("STRING  0");
        java.lang.String[] strArray60 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        boolean boolean68 = strSet61.addAll((java.util.Collection<java.lang.String>) strList66);
        boolean boolean69 = strSet54.containsAll((java.util.Collection<java.lang.String>) strList66);
        java.lang.String[] strArray72 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        boolean boolean76 = strSet73.add("STRING  0");
        java.lang.String[] strArray79 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        boolean boolean87 = strSet80.addAll((java.util.Collection<java.lang.String>) strList85);
        boolean boolean88 = strSet73.containsAll((java.util.Collection<java.lang.String>) strList85);
        boolean boolean89 = strSet54.containsAll((java.util.Collection<java.lang.String>) strSet73);
        java.util.Spliterator<java.lang.String> strSpliterator90 = strSet73.spliterator();
        boolean boolean91 = strSet34.containsAll((java.util.Collection<java.lang.String>) strSet73);
        java.util.stream.Stream<java.lang.String> strStream92 = strSet34.stream();
        boolean boolean93 = strSet34.isEmpty();
        boolean boolean94 = strSet11.retainAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.stream.Stream<java.lang.String> strStream95 = strSet11.parallelStream();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(strSpliterator90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strStream95);
    }

    @Test
    public void test18770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18770");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        java.lang.String str10 = jSDocInfo0.getMeaning();
        boolean boolean11 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18771");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean8 = jSDocInfo0.hasType();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean10 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test18772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18772");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test18773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18773");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getPositionOnEndLine();
        int int3 = namePosition0.getPositionOnStartLine();
        namePosition0.setPositionInformation((int) '#', 0, 47, (int) 'a');
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int13 = node12.getType();
        com.google.javascript.rhino.Node node14 = node12.cloneNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node12.new FileLevelJsDocBuilder();
        boolean boolean16 = node12.isFunction();
        int int17 = node12.getLength();
        int int18 = node12.getLength();
        namePosition0.setItem(node12);
        int int20 = namePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 47 + "'", int20 == 47);
    }

    @Test
    public void test18774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18774");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test18775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18775");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node24.hasChild(node34);
        int int36 = node24.getCharno();
        com.google.javascript.rhino.Node node37 = node14.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node42 = node14.srcref(node41);
        boolean boolean43 = node42.isAssignAdd();
        boolean boolean44 = node3.isEquivalentToTyped(node42);
        boolean boolean46 = node3.getBooleanProp(48);
        boolean boolean47 = node3.isSyntheticBlock();
        node3.setSourceEncodedPosition(15);
        boolean boolean50 = node3.isDelProp();
        boolean boolean51 = node3.isAnd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test18776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18776");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.Node node5 = node3.getLastChild();
        boolean boolean6 = node3.isWhile();
        node3.setSourceFileForTesting("(Not declared as a type name)");
        boolean boolean9 = node3.isWhile();
        boolean boolean10 = node3.isAdd();
        boolean boolean11 = node3.hasOneChild();
        boolean boolean12 = node3.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18777");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "false");
        com.google.javascript.rhino.Node node3 = node2.getLastSibling();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        boolean boolean25 = node23.isVar();
        boolean boolean26 = node23.isTypeOf();
        boolean boolean27 = node23.isAssignAdd();
        com.google.javascript.rhino.Node node28 = node23.removeFirstChild();
        boolean boolean29 = node28.isSwitch();
        com.google.javascript.rhino.Node node30 = node3.clonePropsFrom(node28);
        boolean boolean31 = node28.isCatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test18778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18778");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 100, "STRING  0 [source_file: Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n]", (int) '#', 38);
        node4.setQuotedString();
        boolean boolean6 = node4.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test18779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18779");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isSetterDef();
        boolean boolean53 = node50.isEmpty();
        boolean boolean54 = node50.isSetterDef();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node59.isDo();
        boolean boolean66 = node59.isDefaultCase();
        node59.setQuotedString();
        boolean boolean68 = node59.isDec();
        boolean boolean69 = node59.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node59.siblings();
        com.google.javascript.rhino.Node node71 = node59.detachFromParent();
        boolean boolean72 = node59.isString();
        java.lang.String str73 = node50.checkTreeEquals(node59);
        boolean boolean74 = node59.isThis();
        boolean boolean75 = node59.isGetterDef();
        boolean boolean76 = node59.isParamList();
        java.lang.String str77 = node59.toString();
        node59.setQuotedString();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Node tree inequality:\nTree1:\nERROR\n    ERROR 1\n        STRING  0\n    ERROR 1\n        STRING  0\n\n\nTree2:\nSTRING  0 [quoted: 1]\n\n\nSubtree1: ERROR\n    ERROR 1\n        STRING  0\n    ERROR 1\n        STRING  0\n\n\nSubtree2: STRING  0 [quoted: 1]\n" + "'", str73, "Node tree inequality:\nTree1:\nERROR\n    ERROR 1\n        STRING  0\n    ERROR 1\n        STRING  0\n\n\nTree2:\nSTRING  0 [quoted: 1]\n\n\nSubtree1: ERROR\n    ERROR 1\n        STRING  0\n    ERROR 1\n        STRING  0\n\n\nSubtree2: STRING  0 [quoted: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "STRING  0 [quoted: 1]" + "'", str77, "STRING  0 [quoted: 1]");
    }

    @Test
    public void test18780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18780");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test18781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18781");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        node40.setOptionalArg(false);
        boolean boolean46 = node40.isBreak();
        boolean boolean47 = node40.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean52 = node51.isThrow();
        java.lang.String str56 = node51.toString(true, false, true);
        boolean boolean57 = node51.isOptionalArg();
        boolean boolean58 = node51.isThrow();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node69 = node67.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node67, (int) (byte) 1, (int) '#');
        boolean boolean73 = node67.isScript();
        node67.setQuotedString();
        com.google.javascript.rhino.Node node75 = node62.srcrefTree(node67);
        boolean boolean76 = node75.isIf();
        com.google.javascript.rhino.Node node77 = node75.getParent();
        boolean boolean78 = node75.isWith();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double83 = node82.getDouble();
        boolean boolean84 = node82.isContinue();
        java.lang.String str85 = node75.checkTreeEquals(node82);
        boolean boolean86 = node51.hasChild(node82);
        node40.addChildrenToFront(node82);
        com.google.javascript.rhino.Node node88 = node40.detachFromParent();
        com.google.javascript.rhino.Node node89 = node88.getParent();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "STRING  0" + "'", str56, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4095.0d + "'", double83 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Node tree inequality:\nTree1:\nOR 0\n\n\nTree2:\nNUMBER 4095.0 100\n\n\nSubtree1: OR 0\n\n\nSubtree2: NUMBER 4095.0 100\n" + "'", str85, "Node tree inequality:\nTree1:\nOR 0\n\n\nTree2:\nNUMBER 4095.0 100\n\n\nSubtree1: OR 0\n\n\nSubtree2: NUMBER 4095.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test18782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18782");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(43);
        boolean boolean2 = node1.isIf();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test18783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18783");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 49, (int) (byte) 10, 47);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        boolean boolean26 = node13.isTry();
        boolean boolean27 = node13.isDec();
        node13.setLineno(8);
        node3.addChildrenToBack(node13);
        node3.addSuppression("((NUMBER -1.0 0\n))");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test18784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18784");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        int int6 = jSDocInfo0.getParameterCount();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        boolean boolean12 = jSDocInfo0.isExterns();
        boolean boolean13 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test18785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18785");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(16, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, 16773120, 9);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test18786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18786");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(51, "(Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n)");
        com.google.javascript.rhino.Node node3 = node2.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = node2.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: IN (Node tree inequality:?Tree1:?NUMBER 4095.0 100???Tree2:?NUMBER 4095.0 100?    INSTANCEOF?        STRING  0???Subtree1: NUMBER 4095.0 100???Subtree2: NUMBER 4095.0 100?    INSTANCEOF?        STRING  0?) is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test18787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18787");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10.0f, (int) ' ', 0);
        com.google.javascript.rhino.Node node4 = node3.cloneNode();
        boolean boolean5 = node4.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test18788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18788");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("((OR 51))");
        jSDocInfo0.setLicense("OR 51");
        java.util.Set<java.lang.String> strSet14 = jSDocInfo0.getModifies();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(jSTypeExpression16);
    }

    @Test
    public void test18789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18789");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        int int27 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        int int38 = node31.getIntProp(51);
        node31.addSuppression("STRING  0 [quoted: 1]\n");
        node3.addChildrenToBack(node31);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node31.setJSType(jSType42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        boolean boolean68 = node57.hasChild(node67);
        int int69 = node57.getCharno();
        com.google.javascript.rhino.Node node70 = node47.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = node47.getStaticSourceFile();
        boolean boolean72 = node31.isEquivalentTo(node47);
        java.lang.String str73 = node31.getSourceFileName();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 44);
        com.google.javascript.rhino.Node node76 = node75.cloneNode();
        com.google.javascript.rhino.Node node77 = node31.useSourceInfoFrom(node75);
        boolean boolean78 = node77.isVarArgs();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4131 + "'", int27 == 4131);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(staticSourceFile71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test18790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18790");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("OR 51");
        boolean boolean10 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getThisType();
        boolean boolean12 = jSDocInfo0.isNoShadow();
        boolean boolean13 = jSDocInfo0.hasFileOverview();
        java.lang.String str14 = jSDocInfo0.getLicense();
        boolean boolean15 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test18791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18791");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 53, (int) (short) -1, (int) ' ');
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test18792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18792");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.setCharno((int) (short) 1);
        java.lang.String str26 = node11.getString();
        com.google.javascript.rhino.Node node27 = node11.getParent();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("NUMBER 12.0", 4111, 49);
        com.google.javascript.rhino.Node node32 = node11.useSourceInfoFromForTree(node31);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test18793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18793");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        boolean boolean44 = node23.hasChildren();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getPositionOnEndLine();
        com.google.javascript.rhino.Node node47 = typePosition45.getItem();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        boolean boolean58 = node52.isDo();
        boolean boolean59 = node52.isDefaultCase();
        node52.setQuotedString();
        boolean boolean61 = node52.isDec();
        boolean boolean62 = node52.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node52.siblings();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(51);
        java.lang.String str66 = node52.checkTreeEquals(node65);
        boolean boolean67 = node52.isCatch();
        com.google.javascript.rhino.InputId inputId68 = null;
        node52.setInputId(inputId68);
        typePosition45.setItem(node52);
        com.google.javascript.rhino.Node node71 = node23.useSourceInfoIfMissingFrom(node52);
        boolean boolean72 = node52.isLocalResultCall();
        boolean boolean73 = node52.isCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str66, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test18794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18794");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        int int27 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        int int38 = node31.getIntProp(51);
        node31.addSuppression("STRING  0 [quoted: 1]\n");
        node3.addChildrenToBack(node31);
        boolean boolean42 = node31.isIn();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node63 = node61.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node61, (int) (byte) 1, (int) '#');
        boolean boolean67 = node56.hasChild(node66);
        int int68 = node56.getCharno();
        com.google.javascript.rhino.Node node69 = node46.useSourceInfoIfMissingFrom(node56);
        boolean boolean70 = node56.isContinue();
        boolean boolean71 = node56.wasEmptyNode();
        com.google.javascript.rhino.Node node72 = node31.copyInformationFromForTree(node56);
        boolean boolean73 = node72.isEmpty();
        boolean boolean74 = node72.isRegExp();
        boolean boolean75 = node72.isUnscopedQualifiedName();
        boolean boolean76 = node72.isGetterDef();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4131 + "'", int27 == 4131);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test18795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18795");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.addSuppression("OR 1");
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean12 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node16.setCharno(1);
        boolean boolean19 = node16.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.isDo();
        boolean boolean31 = node24.isDefaultCase();
        node24.setQuotedString();
        com.google.javascript.rhino.Node node33 = node16.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node33.new FileLevelJsDocBuilder();
        boolean boolean35 = node33.isFalse();
        boolean boolean36 = node33.hasChildren();
        node33.setIsSyntheticBlock(true);
        jSDocInfo0.setAssociatedNode(node33);
        boolean boolean40 = node33.isFunction();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test18796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18796");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(51);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node8 = node6.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, (int) (byte) 1, (int) '#');
        boolean boolean12 = node6.isDo();
        boolean boolean13 = node6.isDefaultCase();
        node6.setQuotedString();
        com.google.javascript.rhino.Node node15 = node1.copyInformationFrom(node6);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node20.isDo();
        boolean boolean27 = node20.isDefaultCase();
        node20.setQuotedString();
        boolean boolean29 = node20.isDec();
        boolean boolean30 = node20.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node20.siblings();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node20);
        boolean boolean33 = node20.isSetterDef();
        node20.setSourceEncodedPosition((int) '#');
        java.lang.Object obj37 = node20.getProp(30);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test18797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18797");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection1 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str3 = jSDocInfo2.getVersion();
        boolean boolean4 = jSDocInfo2.hasEnumParameterType();
        boolean boolean5 = jSDocInfo2.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo2.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo2.setVisibility(visibility7);
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str10 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        boolean boolean12 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(strCollection1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18798");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        boolean boolean2 = jSDocInfo0.isNoCompile();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor4 = strSet3.iterator();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strItor4);
    }

    @Test
    public void test18799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18799");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node24 = node9.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int29 = node28.getType();
        com.google.javascript.rhino.Node node30 = node28.cloneNode();
        com.google.javascript.rhino.Node node31 = node24.useSourceInfoFrom(node28);
        boolean boolean32 = node28.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node33 = node28.getParent();
        int int34 = node28.getSourcePosition();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
    }

    @Test
    public void test18800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18800");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        boolean boolean4 = node1.isContinue();
        boolean boolean5 = node1.isRegExp();
        boolean boolean6 = node1.isDefaultCase();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test18801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18801");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node9.isReturn();
        boolean boolean22 = node9.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        boolean boolean25 = jSDocInfo23.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo23.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo23.getImplementedInterfaces();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        jSDocInfo23.setAssociatedNode(node31);
        com.google.javascript.rhino.Node node38 = node31.removeFirstChild();
        boolean boolean39 = node31.isNumber();
        node9.addChildToBack(node31);
        boolean boolean41 = node31.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean46 = node45.isThrow();
        java.lang.String str50 = node45.toString(true, false, true);
        java.lang.String str51 = node45.getQualifiedName();
        boolean boolean52 = node45.isIn();
        com.google.javascript.rhino.Node node53 = node45.cloneTree();
        boolean boolean54 = node53.isRegExp();
        int int55 = node53.getSourcePosition();
        node31.addChildrenToBack(node53);
        node53.setLineno((int) (short) 10);
        boolean boolean59 = node53.isLabelName();
        node53.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "STRING  0" + "'", str50, "STRING  0");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test18802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18802");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.wasEmptyNode();
        java.lang.String str19 = node4.toString(false, true, true);
        boolean boolean20 = node4.isVoid();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node4.setJSType(jSType21);
        boolean boolean23 = node4.isHook();
        boolean boolean24 = node4.isIf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING  [quoted: 1]" + "'", str19, "STRING  [quoted: 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test18803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18803");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        boolean boolean12 = jSDocInfo0.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = jSDocInfo0.getTypeNodes();
        java.lang.String str14 = jSDocInfo0.getSourceName();
        jSDocInfo0.addSuppression("ERROR 0\n    STRING  0\n");
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test18804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18804");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node10 = jSDocInfo0.getAssociatedNode();
        boolean boolean11 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getType();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test18805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18805");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = node3.srcref(node30);
        boolean boolean32 = node31.isDefaultCase();
        boolean boolean33 = node31.isVar();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable34 = node31.getAncestors();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ancestorIterable34);
    }

    @Test
    public void test18806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18806");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node26.isArrayLit();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        node26.addChildrenToFront(node37);
        java.lang.Object obj51 = node26.getProp(40);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable52 = node26.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor53 = ancestorIterable52.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor54 = ancestorIterable52.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator55 = ancestorIterable52.spliterator();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(ancestorIterable52);
        org.junit.Assert.assertNotNull(nodeItor53);
        org.junit.Assert.assertNotNull(nodeItor54);
        org.junit.Assert.assertNotNull(nodeSpliterator55);
    }

    @Test
    public void test18807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18807");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        boolean boolean9 = jSDocInfo0.isConstant();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test18808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18808");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean24 = node11.isVarArgs();
        node11.setLineno(37);
        boolean boolean27 = node11.isInstanceOf();
        boolean boolean28 = node11.isVar();
        int int29 = node11.getSourcePosition();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags31 = new com.google.javascript.rhino.Node.SideEffectFlags((-1));
        sideEffectFlags31.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node11.setSideEffectFlags(sideEffectFlags31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 151562 + "'", int29 == 151562);
    }

    @Test
    public void test18809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18809");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isScript();
        com.google.javascript.rhino.InputId inputId35 = node28.getInputId();
        com.google.javascript.rhino.Node node36 = node11.useSourceInfoFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean41 = node40.isThrow();
        java.lang.String str45 = node40.toString(true, false, true);
        node40.setIsSyntheticBlock(true);
        boolean boolean48 = node40.isTry();
        boolean boolean49 = node11.hasChild(node40);
        boolean boolean50 = node40.isStringKey();
        node40.setType(36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node40.children();
        boolean boolean54 = node40.isDefaultCase();
        boolean boolean55 = node40.isUnscopedQualifiedName();
        boolean boolean56 = node40.isQuotedString();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node40.getAncestors();
        com.google.javascript.rhino.Node node58 = node40.cloneNode();
        java.lang.String str59 = node58.getString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "STRING  0" + "'", str45, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(ancestorIterable57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test18810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18810");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        boolean boolean11 = jSDocInfo0.isNoCompile();
        boolean boolean13 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        boolean boolean15 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test18811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18811");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        boolean boolean2 = typePosition0.hasBrackets();
        int int3 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean8 = node7.isThrow();
        java.lang.String str12 = node7.toString(true, false, true);
        java.lang.String str13 = node7.getQualifiedName();
        node7.addSuppression("STRING  0");
        boolean boolean16 = node7.isNull();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder17 = node7.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node18 = node7.getNext();
        typePosition0.setItem(node7);
        boolean boolean20 = node7.isAdd();
        boolean boolean21 = node7.isDec();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0" + "'", str12, "STRING  0");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test18812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18812");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isString();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        boolean boolean67 = node64.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node64.children();
        com.google.javascript.rhino.Node node69 = node21.srcref(node64);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        boolean boolean80 = node74.isDo();
        boolean boolean81 = node74.isExprResult();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.Node node83 = node21.useSourceInfoFrom(node74);
        com.google.javascript.rhino.Node node85 = node21.getAncestor(21);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test18813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18813");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray7);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(2, nodeArray7);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(4, nodeArray7, 39, (int) (short) 100);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100, nodeArray7, (int) '4', (int) (byte) 0);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(50, nodeArray7, 2, 151562);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(29, nodeArray7, 39, 7);
        org.junit.Assert.assertNotNull(nodeArray7);
    }

    @Test
    public void test18814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18814");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = node3.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean36 = node35.isFromExterns();
        boolean boolean37 = node31.hasChild(node35);
        boolean boolean38 = node35.isOr();
        boolean boolean39 = node35.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str41 = jSDocInfo40.getVersion();
        boolean boolean42 = jSDocInfo40.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo40.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList44 = jSDocInfo40.getImplementedInterfaces();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean49 = node48.isThrow();
        java.lang.String str53 = node48.toString(true, false, true);
        jSDocInfo40.setAssociatedNode(node48);
        int int56 = node48.getIntProp((int) (byte) 10);
        node48.setSourceEncodedPositionForTree(15);
        node48.setLineno(1);
        boolean boolean61 = node35.isEquivalentTo(node48);
        boolean boolean62 = node35.isFalse();
        boolean boolean63 = node35.isNot();
        boolean boolean64 = node35.isNot();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(jSTypeExpressionList44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "STRING  0" + "'", str53, "STRING  0");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test18815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18815");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.lang.String str9 = jSDocInfo0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test18816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18816");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.isInc();
        com.google.javascript.rhino.Node node7 = node3.getParent();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        boolean boolean36 = node25.hasChild(node35);
        int int37 = node25.getCharno();
        com.google.javascript.rhino.Node node38 = node15.useSourceInfoIfMissingFrom(node25);
        node38.setLength((int) ' ');
        node11.addChildrenToBack(node38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node11.children();
        com.google.javascript.rhino.Node node43 = node11.getLastSibling();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node11.new FileLevelJsDocBuilder();
        boolean boolean45 = node11.isThrow();
        boolean boolean46 = node11.isScript();
        boolean boolean47 = node11.isComma();
        com.google.javascript.rhino.Node node48 = node3.useSourceInfoIfMissingFrom(node11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node11.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(jSDocInfo49);
    }

    @Test
    public void test18817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18817");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        int int10 = node9.getType();
        boolean boolean11 = node9.isDelProp();
        boolean boolean12 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node23 = node9.copyInformationFromForTree(node17);
        com.google.javascript.rhino.jstype.JSType jSType24 = node23.getJSType();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder26 = node23.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node27 = node23.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node27.setSideEffectFlags(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test18818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18818");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.or(ternaryValue1);
        boolean boolean4 = ternaryValue0.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue0.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean9 = ternaryValue7.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue10.or(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue7.xor(ternaryValue12);
        java.lang.String str14 = ternaryValue13.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue5.and(ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue15.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue18.or(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue18.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue26.or(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue28.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue24.xor(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue28.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue18.and(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue15.or(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue34.not();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "true" + "'", str14, "true");
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
    }

    @Test
    public void test18819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18819");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue1.or(ternaryValue3);
        java.lang.String str5 = ternaryValue3.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue3.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "false" + "'", str5, "false");
        org.junit.Assert.assertNotNull(ternaryValue6);
    }

    @Test
    public void test18820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18820");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isNull();
        java.lang.String[] strArray47 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strSet48.addAll((java.util.Collection<java.lang.String>) strList53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node60.isScript();
        node60.setQuotedString();
        boolean boolean68 = strSet48.equals((java.lang.Object) node60);
        com.google.javascript.rhino.Node node69 = node21.copyInformationFrom(node60);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node80 = node21.useSourceInfoFrom(node79);
        boolean boolean81 = node80.isParamList();
        int int82 = node80.getType();
        boolean boolean83 = node80.isObjectLit();
        node80.addSuppression("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n)");
        boolean boolean86 = node80.isArrayLit();
        java.lang.String str87 = node80.toString();
        boolean boolean88 = node80.isIn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 40 + "'", int82 == 40);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "STRING  1 [jsdoc_info: JSDocInfo]" + "'", str87, "STRING  1 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test18821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18821");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = null;
        jSDocInfo0.setVisibility(visibility8);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        boolean boolean11 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str13 = jSDocInfo12.getVersion();
        boolean boolean14 = jSDocInfo12.hasEnumParameterType();
        boolean boolean15 = jSDocInfo12.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo12.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility17 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo12.setVisibility(visibility17);
        boolean boolean19 = jSDocInfo12.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo12.getImplementedInterfaces();
        boolean boolean21 = jSDocInfo12.containsDeclaration();
        boolean boolean22 = jSDocInfo12.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo12.getAuthors();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean28 = node27.isThrow();
        java.lang.String str32 = node27.toString(true, false, true);
        boolean boolean33 = node27.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node27.getJSDocInfo();
        boolean boolean35 = node27.isIf();
        jSDocInfo12.setAssociatedNode(node27);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo12.getParameterType("(STRING  0\n)");
        boolean boolean39 = jSDocInfo12.hasReturnType();
        java.lang.String str40 = jSDocInfo12.getSourceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str42 = jSDocInfo41.getVersion();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo41.getSuppressions();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        boolean boolean68 = node57.hasChild(node67);
        int int69 = node57.getCharno();
        com.google.javascript.rhino.Node node70 = node47.useSourceInfoIfMissingFrom(node57);
        boolean boolean71 = node47.isSwitch();
        java.lang.String str72 = node47.toString();
        boolean boolean73 = node47.wasEmptyNode();
        boolean boolean74 = strSet43.remove((java.lang.Object) boolean73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str76 = jSDocInfo75.getVersion();
        boolean boolean77 = jSDocInfo75.hasEnumParameterType();
        java.lang.String str79 = jSDocInfo75.getDescriptionForParameter("STRING  0\n");
        boolean boolean80 = jSDocInfo75.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str82 = jSDocInfo81.getVersion();
        boolean boolean83 = jSDocInfo81.hasEnumParameterType();
        boolean boolean84 = jSDocInfo81.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = jSDocInfo81.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility86 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo81.setVisibility(visibility86);
        jSDocInfo75.setVisibility(visibility86);
        boolean boolean89 = jSDocInfo75.hasFileOverview();
        java.lang.String str90 = jSDocInfo75.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility91 = jSDocInfo75.getVisibility();
        boolean boolean92 = strSet43.remove((java.lang.Object) visibility91);
        jSDocInfo12.setVisibility(visibility91);
        jSDocInfo0.setVisibility(visibility91);
        boolean boolean95 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + visibility17 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility17.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "STRING  0" + "'", str32, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR 1" + "'", str72, "OR 1");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSTypeExpression85);
        org.junit.Assert.assertTrue("'" + visibility86 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility86.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + visibility91 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility91.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test18822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18822");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
    }

    @Test
    public void test18823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18823");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        int int10 = node9.getType();
        boolean boolean11 = node9.isFor();
        boolean boolean12 = node9.isContinue();
        com.google.javascript.rhino.jstype.JSType jSType13 = node9.getJSType();
        boolean boolean14 = node9.isRegExp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test18824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18824");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean10 = node9.isThrow();
        java.lang.String str14 = node9.toString(true, false, true);
        java.lang.String str15 = node9.getQualifiedName();
        boolean boolean16 = node9.isIn();
        com.google.javascript.rhino.Node node17 = node9.cloneTree();
        boolean boolean18 = node17.isRegExp();
        boolean boolean19 = node17.isDebugger();
        node4.addChildToBack(node17);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        boolean boolean45 = node34.hasChild(node44);
        int int46 = node34.getCharno();
        com.google.javascript.rhino.Node node47 = node24.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node58 = node56.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) -1, node56, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node68 = node66.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node66, (int) (byte) 1, (int) '#');
        boolean boolean72 = node61.hasChild(node71);
        int int73 = node61.getCharno();
        com.google.javascript.rhino.Node node74 = node51.useSourceInfoIfMissingFrom(node61);
        int int75 = node51.getSourcePosition();
        java.lang.String str76 = node51.toString();
        com.google.javascript.rhino.Node node77 = node24.srcref(node51);
        node77.setSourceEncodedPosition((-1));
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 1, node4, node77, (int) (short) 0, (int) (byte) 0);
        boolean boolean83 = node77.isTrue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0" + "'", str14, "STRING  0");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4131 + "'", int75 == 4131);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "OR 1" + "'", str76, "OR 1");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test18825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18825");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        com.google.javascript.rhino.Node node62 = node32.getNext();
        boolean boolean63 = node32.isQuotedString();
        node32.setType(151562);
        node32.setSourceEncodedPositionForTree(0);
        boolean boolean68 = node32.isDebugger();
        node32.setVarArgs(false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test18826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18826");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        com.google.javascript.rhino.Node node2 = node1.getNext();
        boolean boolean3 = node1.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test18827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18827");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(Not declared as a type name)");
        com.google.javascript.rhino.Node node2 = node1.cloneTree();
        boolean boolean3 = node2.isGetProp();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isDo();
        boolean boolean15 = node8.isDefaultCase();
        node8.setQuotedString();
        boolean boolean17 = node8.isDec();
        boolean boolean18 = node8.isLabel();
        boolean boolean19 = node8.isSetterDef();
        boolean boolean20 = node8.isRegExp();
        boolean boolean21 = node8.isName();
        boolean boolean22 = node8.isAssignAdd();
        node8.setCharno(31);
        int int25 = node2.getIndexOfChild(node8);
        java.lang.String str26 = node8.getString();
        boolean boolean27 = node8.isOptionalArg();
        boolean boolean28 = node8.isObjectLit();
        boolean boolean29 = node8.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test18828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18828");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node7 = node3.cloneNode();
        boolean boolean8 = node3.isOptionalArg();
        int int9 = node3.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test18829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18829");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.hasTypedefType();
        boolean boolean11 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18830");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
    }

    @Test
    public void test18831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18831");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node9.isReturn();
        boolean boolean22 = node9.isAnd();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(38);
        com.google.javascript.rhino.Node node25 = node9.copyInformationFrom(node24);
        java.lang.String str26 = node9.getSourceFileName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test18832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18832");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.toString();
        boolean boolean8 = jSDocInfo0.isHidden();
        java.lang.String str9 = jSDocInfo0.getVersion();
        java.lang.String str10 = jSDocInfo0.getLicense();
        jSDocInfo0.setLicense("(REGEXP \n)");
        boolean boolean13 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test18833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18833");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        boolean boolean11 = jSDocInfo0.isConstructor();
        boolean boolean12 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18834");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str12 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test18835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18835");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        boolean boolean18 = node15.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        boolean boolean30 = node23.isDefaultCase();
        node23.setQuotedString();
        com.google.javascript.rhino.Node node32 = node15.useSourceInfoFromForTree(node23);
        node23.putIntProp((int) (byte) 100, (int) (byte) 0);
        node23.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        node23.detachChildren();
        com.google.javascript.rhino.Node node40 = node4.useSourceInfoIfMissingFromForTree(node23);
        int int41 = node4.getType();
        int int42 = node4.getCharno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(0, 2, 32);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean52 = node51.isThrow();
        java.lang.String str56 = node51.toString(true, false, true);
        node51.setIsSyntheticBlock(true);
        boolean boolean59 = node51.isTry();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean64 = node63.isThrow();
        java.lang.String str68 = node63.toString(true, false, true);
        java.lang.String str69 = node63.getQualifiedName();
        boolean boolean70 = node63.isThis();
        java.lang.String[] strArray73 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        boolean boolean81 = strSet74.addAll((java.util.Collection<java.lang.String>) strList79);
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str83 = jSDocInfo82.getVersion();
        java.lang.String str84 = jSDocInfo82.getFileOverview();
        boolean boolean85 = jSDocInfo82.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet86 = jSDocInfo82.getParameterNames();
        boolean boolean87 = strSet74.retainAll((java.util.Collection<java.lang.String>) strSet86);
        java.util.stream.Stream<java.lang.String> strStream88 = strSet74.stream();
        node63.setDirectives((java.util.Set<java.lang.String>) strSet74);
        com.google.javascript.rhino.Node node90 = node51.srcref(node63);
        com.google.javascript.rhino.Node node91 = node47.clonePropsFrom(node63);
        int int92 = node4.getIndexOfChild(node47);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 40 + "'", int41 == 40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "STRING  0" + "'", str56, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "STRING  0" + "'", str68, "STRING  0");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(strStream88);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test18836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18836");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(38, "STRING  0");
        int int3 = node2.getLineno();
        boolean boolean4 = node2.isNew();
        boolean boolean5 = node2.isNE();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test18837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18837");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        java.lang.String str5 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node19.hasChild(node29);
        int int31 = node19.getCharno();
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node37 = node9.srcref(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean42 = node41.isFromExterns();
        boolean boolean43 = node37.hasChild(node41);
        jSDocInfo0.setAssociatedNode(node37);
        java.lang.String str45 = jSDocInfo0.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean47 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test18838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18838");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.isNumber();
        int int31 = node26.getSideEffectFlags();
        boolean boolean32 = node26.isRegExp();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = node26.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR 1 [length: 32] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test18839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18839");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("STRING  0\n");
        jSDocInfo0.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.hasType();
        java.lang.String str12 = jSDocInfo0.getReturnDescription();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getModifies();
        java.lang.String str14 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test18840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18840");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        boolean boolean15 = node9.isScript();
        com.google.javascript.rhino.Node node16 = node9.detachFromParent();
        node16.setOptionalArg(false);
        boolean boolean20 = node16.getBooleanProp(31);
        com.google.javascript.rhino.Node node21 = node4.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean26 = node25.isThrow();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node32.isDo();
        boolean boolean39 = node32.isDefaultCase();
        node32.setQuotedString();
        boolean boolean41 = node32.isDec();
        boolean boolean42 = node32.isLabel();
        boolean boolean43 = node32.isSetterDef();
        boolean boolean44 = node32.isRegExp();
        boolean boolean45 = node32.isName();
        boolean boolean46 = node32.isVoid();
        com.google.javascript.rhino.Node node47 = node32.cloneNode();
        com.google.javascript.rhino.Node node48 = node25.useSourceInfoIfMissingFrom(node47);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node50 = node21.clonePropsFrom(node48);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean55 = node54.isFromExterns();
        boolean boolean56 = node54.isAssignAdd();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(97, node50, node54);
        com.google.javascript.rhino.Node node58 = node57.removeChildren();
        node57.setCharno(143361);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test18841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18841");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        boolean boolean9 = jSDocInfo0.isDefine();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test18842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18842");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean14 = node4.getBooleanProp(52);
        boolean boolean15 = node4.isThis();
        boolean boolean16 = node4.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        boolean boolean31 = node21.getBooleanProp(52);
        int int32 = node21.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node21.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node34 = node4.copyInformationFrom(node21);
        boolean boolean35 = node4.isIf();
        boolean boolean36 = node4.isArrayLit();
        boolean boolean37 = node4.isInstanceOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test18843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18843");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        int int5 = node3.getCharno();
        int int6 = node3.getType();
        boolean boolean7 = node3.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = node3.getExistingIntProp(27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 27");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test18844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18844");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getEndLine();
        namePosition0.setPositionInformation(38, 46, (int) '4', 15);
        int int8 = namePosition0.getPositionOnEndLine();
        int int9 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node14.isScript();
        com.google.javascript.rhino.Node node21 = node14.detachFromParent();
        boolean boolean22 = node14.isSyntheticBlock();
        java.lang.String[] strArray25 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        boolean boolean33 = strSet26.addAll((java.util.Collection<java.lang.String>) strList31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str35 = jSDocInfo34.getVersion();
        java.lang.String str36 = jSDocInfo34.getFileOverview();
        boolean boolean37 = jSDocInfo34.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet38 = jSDocInfo34.getParameterNames();
        boolean boolean39 = strSet26.retainAll((java.util.Collection<java.lang.String>) strSet38);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition40 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition42 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray44 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] { stringPosition40, stringPosition41, stringPosition42, stringPosition43 };
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray45 = strSet26.toArray(stringPositionArray44);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet26);
        namePosition0.setItem(node14);
        boolean boolean48 = node14.isExprResult();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 38 + "'", int9 == 38);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(stringPositionArray44);
        org.junit.Assert.assertNotNull(stringPositionArray45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test18845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18845");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isAdd();
        boolean boolean12 = node4.isArrayLit();
        node4.setSourceEncodedPosition((-1));
        com.google.javascript.rhino.Node node15 = null;
        boolean boolean16 = node4.hasChild(node15);
        boolean boolean17 = node4.isRegExp();
        node4.putIntProp(10, 4131);
        boolean boolean21 = node4.isObjectLit();
        com.google.javascript.rhino.Node node22 = node4.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test18846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18846");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        jSDocInfo0.setLicense("IN\n");
        java.lang.String str11 = jSDocInfo0.getOriginalCommentString();
        boolean boolean12 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18847");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node3.isFunction();
        boolean boolean28 = node3.isVoid();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test18848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18848");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isFromExterns();
        boolean boolean5 = node3.isGetElem();
        com.google.javascript.rhino.Node node6 = node3.getParent();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = node6.getLineno();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test18849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18849");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 1);
        java.lang.Object obj3 = node1.getProp(42);
        node1.putBooleanProp(12, false);
        boolean boolean7 = node1.hasChildren();
        int int8 = node1.getChildCount();
        boolean boolean9 = node1.isTypeOf();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test18850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18850");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        boolean boolean12 = jSDocInfo0.hasBaseType();
        boolean boolean13 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test18851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18851");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        jSDocInfo0.setDeprecated(true);
        jSDocInfo0.setLicense("(STRING  0\n)");
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(visibility12);
    }

    @Test
    public void test18852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18852");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        boolean boolean12 = node4.isDelProp();
        boolean boolean13 = node4.isCall();
        boolean boolean14 = node4.isNot();
        node4.setSourceFileForTesting("(NUMBER 4095.0)");
        boolean boolean17 = node4.isGetterDef();
        boolean boolean18 = node4.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test18853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18853");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        boolean boolean17 = node4.isAssignAdd();
        boolean boolean18 = node4.isNull();
        boolean boolean19 = node4.isGetElem();
        com.google.javascript.rhino.Node node20 = node4.getFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test18854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18854");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        int int11 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean12 = jSDocInfo0.isExpose();
        java.lang.String str13 = jSDocInfo0.getMeaning();
        boolean boolean14 = jSDocInfo0.isNoSideEffects();
        boolean boolean15 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test18855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18855");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean2 = ternaryValue0.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean11 = ternaryValue9.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue12.or(ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue9.xor(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue5.xor(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue3.and(ternaryValue9);
        boolean boolean19 = ternaryValue17.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue22.or(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue27.or(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue29.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue25.and(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue20.and(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue17.and(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue34.xor(ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue0.xor(ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue37.and(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue39);
    }

    @Test
    public void test18856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18856");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        boolean boolean12 = node4.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node4.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str16 = jSDocInfo15.getVersion();
        boolean boolean17 = jSDocInfo15.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo15.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo15.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo15.getThrownTypes();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo15.getParameterNames();
        node4.putProp((-1), (java.lang.Object) jSDocInfo15);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo15.getTypedefType();
        boolean boolean24 = jSDocInfo15.hasTypedefType();
        boolean boolean25 = jSDocInfo15.isConsistentIdGenerator();
        boolean boolean26 = jSDocInfo15.hasFileOverview();
        jSDocInfo15.setDeprecated(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test18857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18857");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        int int6 = strSet5.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo7.getAuthors();
        int int9 = jSDocInfo7.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo7.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        boolean boolean13 = jSDocInfo11.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo11.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo11.getImplementedInterfaces();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean20 = node19.isThrow();
        java.lang.String str24 = node19.toString(true, false, true);
        jSDocInfo11.setAssociatedNode(node19);
        boolean boolean26 = jSDocInfo11.hasTypedefType();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        int int52 = node40.getCharno();
        com.google.javascript.rhino.Node node53 = node30.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node58 = node30.srcref(node57);
        jSDocInfo11.setAssociatedNode(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable60 = node30.children();
        boolean boolean61 = node30.isGetElem();
        boolean boolean62 = strSet10.equals((java.lang.Object) boolean61);
        boolean boolean63 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = strSet5.add("STRING  [quoted: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "STRING  0" + "'", str24, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(nodeIterable60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test18858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18858");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = node3.srcref(node30);
        boolean boolean32 = node30.isNoSideEffectsCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node30.siblings();
        boolean boolean34 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        boolean boolean45 = node39.isScript();
        com.google.javascript.rhino.InputId inputId46 = node39.getInputId();
        boolean boolean47 = node39.isDelProp();
        boolean boolean48 = node39.isBlock();
        boolean boolean49 = node39.isQuotedString();
        boolean boolean50 = node39.isTrue();
        com.google.javascript.rhino.Node node51 = node30.clonePropsFrom(node39);
        boolean boolean52 = node39.isDefaultCase();
        int int53 = node39.getLineno();
        boolean boolean54 = node39.isName();
        boolean boolean55 = node39.isNumber();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(inputId46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test18859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18859");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnEndLine();
        java.lang.String str10 = stringPosition0.getItem();
        int int11 = stringPosition0.getEndLine();
        java.lang.String str12 = stringPosition0.getItem();
        int int13 = stringPosition0.getStartLine();
        int int14 = stringPosition0.getStartLine();
        int int15 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test18860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18860");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue8.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue5.xor(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue1.xor(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue14.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue19.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue17.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue5.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue27.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue5.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue31.or(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue33.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue29.and(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue33.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue40.or(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue40.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue48.or(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue50.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue46.xor(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue50.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue40.and(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue38.xor(ternaryValue55);
        java.lang.String str57 = ternaryValue56.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue33.or(ternaryValue56);
        boolean boolean60 = ternaryValue33.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "false" + "'", str57, "false");
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test18861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18861");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        boolean boolean8 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str10 = jSDocInfo9.getVersion();
        boolean boolean11 = jSDocInfo9.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo9.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo9.setVisibility(visibility13);
        jSDocInfo0.setVisibility(visibility13);
        boolean boolean16 = jSDocInfo0.isImplicitCast();
        boolean boolean17 = jSDocInfo0.hasFileOverview();
        java.lang.String str18 = jSDocInfo0.getLendsName();
        boolean boolean19 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + visibility13 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility13.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test18862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18862");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean6 = jSDocInfo0.isConstructor();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str8 = jSDocInfo0.getDescription();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getThrownTypes();
        boolean boolean14 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test18863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18863");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.setCharno((int) (short) 1);
        java.lang.String str26 = node11.getString();
        int int27 = node11.getCharno();
        java.lang.String str28 = node11.getQualifiedName();
        node11.setString("STRING  52 [quoted: 1]\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test18864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18864");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray2);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(131104, nodeArray2, 151562, 8);
        org.junit.Assert.assertNotNull(nodeArray2);
    }

    @Test
    public void test18865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18865");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node29.hasChild(node39);
        int int41 = node29.getCharno();
        com.google.javascript.rhino.Node node42 = node19.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node47 = node19.srcref(node46);
        jSDocInfo0.setAssociatedNode(node19);
        node19.setLineno(47);
        int int51 = node19.getLength();
        boolean boolean52 = node19.isParamList();
        com.google.javascript.rhino.InputId inputId53 = node19.getInputId();
        boolean boolean54 = node19.isTry();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(inputId53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test18866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18866");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        boolean boolean9 = jSDocInfo0.isExpose();
        boolean boolean10 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test18867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18867");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.isExpose();
        boolean boolean7 = jSDocInfo0.hasModifies();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        boolean boolean12 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18868");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        boolean boolean9 = jSDocInfo0.hasType();
        boolean boolean10 = jSDocInfo0.isInterface();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        java.lang.String str12 = jSDocInfo0.toString();
        boolean boolean13 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JSDocInfo" + "'", str12, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test18869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18869");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getAuthors();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test18870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18870");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        boolean boolean18 = node15.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        boolean boolean30 = node23.isDefaultCase();
        node23.setQuotedString();
        com.google.javascript.rhino.Node node32 = node15.useSourceInfoFromForTree(node23);
        node23.putIntProp((int) (byte) 100, (int) (byte) 0);
        node23.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        node23.detachChildren();
        com.google.javascript.rhino.Node node40 = node4.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean45 = node44.isThrow();
        java.lang.String str49 = node44.toString(true, false, true);
        node44.setIsSyntheticBlock(true);
        boolean boolean52 = node44.isTry();
        java.lang.String str53 = node44.toStringTree();
        com.google.javascript.rhino.Node node54 = node4.copyInformationFrom(node44);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.Node node56 = node54.getParent();
        int int57 = node54.getLength();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "STRING  0" + "'", str49, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "STRING  0 [synthetic: 1]\n" + "'", str53, "STRING  0 [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test18871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18871");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.Node node3 = null;
        typePosition0.setItem(node3);
        int int5 = typePosition0.getStartLine();
        int int6 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test18872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18872");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 1, node1, 24, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test18873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18873");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node19.isScript();
        node19.setQuotedString();
        com.google.javascript.rhino.Node node27 = node14.srcrefTree(node19);
        boolean boolean28 = node27.isHook();
        boolean boolean29 = node27.isDelProp();
        boolean boolean30 = strSet3.contains((java.lang.Object) node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.toString();
        java.lang.String str33 = jSDocInfo31.getLicense();
        boolean boolean34 = jSDocInfo31.isConstructor();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection35 = jSDocInfo31.getMarkers();
        boolean boolean36 = jSDocInfo31.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = jSDocInfo31.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo31.getEnumParameterType();
        boolean boolean39 = strSet3.contains((java.lang.Object) jSTypeExpression38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        boolean boolean50 = node44.isDo();
        boolean boolean51 = node44.isDefaultCase();
        node44.setQuotedString();
        boolean boolean53 = node44.isDec();
        boolean boolean54 = node44.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node44.siblings();
        boolean boolean56 = node44.isEmpty();
        com.google.javascript.rhino.Node node57 = node44.getParent();
        boolean boolean58 = node57.isRegExp();
        boolean boolean59 = node57.isQualifiedName();
        boolean boolean60 = node57.isThrow();
        boolean boolean61 = node57.wasEmptyNode();
        boolean boolean62 = node57.isUnscopedQualifiedName();
        boolean boolean63 = strSet3.contains((java.lang.Object) boolean62);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSDocInfo" + "'", str32, "JSDocInfo");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(markerCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test18874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18874");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  0 [synthetic: 1]\n", (int) ' ', (int) (byte) -1);
        boolean boolean4 = node3.isDefaultCase();
        boolean boolean5 = node3.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test18875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18875");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getEndLine();
        boolean boolean5 = typePosition0.hasBrackets();
        int int6 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node7 = typePosition0.getItem();
        boolean boolean8 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node12.setCharno(1);
        boolean boolean15 = node12.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node20.isDo();
        boolean boolean27 = node20.isDefaultCase();
        node20.setQuotedString();
        com.google.javascript.rhino.Node node29 = node12.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node29.new FileLevelJsDocBuilder();
        boolean boolean31 = node29.isFalse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str33 = jSDocInfo32.getVersion();
        boolean boolean34 = jSDocInfo32.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo32.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str37 = jSDocInfo36.getVersion();
        java.lang.String str38 = jSDocInfo36.getFileOverview();
        boolean boolean39 = jSDocInfo36.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo36.getParameterNames();
        java.util.Iterator<java.lang.String> strItor41 = strSet40.iterator();
        boolean boolean42 = strSet40.isEmpty();
        boolean boolean43 = strSet35.containsAll((java.util.Collection<java.lang.String>) strSet40);
        node29.setDirectives(strSet35);
        boolean boolean45 = node29.isNull();
        typePosition0.setItem(node29);
        boolean boolean47 = node29.isDebugger();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test18876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18876");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("TYPEOF\n    NAME STRING  0\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
    }

    @Test
    public void test18877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18877");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        int int27 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        int int38 = node31.getIntProp(51);
        node31.addSuppression("STRING  0 [quoted: 1]\n");
        node3.addChildrenToBack(node31);
        boolean boolean42 = node3.isBreak();
        boolean boolean43 = node3.isDelProp();
        com.google.javascript.rhino.Node node44 = node3.cloneNode();
        boolean boolean45 = node3.isBlock();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4131 + "'", int27 == 4131);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test18878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18878");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str5 = jSDocInfo4.getVersion();
        boolean boolean6 = jSDocInfo4.hasEnumParameterType();
        boolean boolean7 = jSDocInfo4.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo4.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo4.setVisibility(visibility9);
        jSDocInfo0.setVisibility(visibility9);
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        java.lang.String str13 = jSDocInfo0.getLendsName();
        boolean boolean14 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertNull(jSTypeExpression16);
    }

    @Test
    public void test18879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18879");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("STRING  0 [quoted: 1]");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.isExport();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test18880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18880");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        com.google.javascript.rhino.Node node28 = node11.getLastSibling();
        boolean boolean30 = node28.getBooleanProp(15);
        boolean boolean31 = node28.isArrayLit();
        boolean boolean32 = node28.isNot();
        boolean boolean33 = node28.isSwitch();
        boolean boolean34 = node28.isNumber();
        com.google.javascript.rhino.Node node35 = node28.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test18881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18881");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isCall();
        node16.setSourceEncodedPosition((int) (short) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(38, "STRING  0");
        int int23 = node22.getLineno();
        boolean boolean24 = node22.isNew();
        com.google.javascript.rhino.Node node25 = node16.copyInformationFromForTree(node22);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node25.setJSType(jSType26);
        com.google.javascript.rhino.InputId inputId28 = null;
        node25.setInputId(inputId28);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test18882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18882");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test18883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18883");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo3.getAuthors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str6 = jSDocInfo5.getVersion();
        boolean boolean7 = jSDocInfo5.hasEnumParameterType();
        boolean boolean8 = jSDocInfo5.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo5.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo5.setVisibility(visibility10);
        jSDocInfo3.setVisibility(visibility10);
        boolean boolean13 = strSet2.remove((java.lang.Object) jSDocInfo3);
        java.lang.String str14 = jSDocInfo3.getLicense();
        boolean boolean15 = jSDocInfo3.isIdGenerator();
        java.lang.String str16 = jSDocInfo3.getVersion();
        boolean boolean17 = jSDocInfo3.hasTypedefType();
        boolean boolean18 = jSDocInfo3.hasBaseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test18884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18884");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        boolean boolean7 = jSDocInfo0.isConstructor();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test18885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18885");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "STRING  0 [quoted: 1] [synthetic: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test18886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18886");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(43, "(Not declared as a type name)");
        boolean boolean3 = node2.isArrayLit();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node2.siblings();
        boolean boolean5 = node2.isComma();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test18887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18887");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray2);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(41, nodeArray2, (int) (byte) 100, 4131);
        com.google.javascript.rhino.Node node7 = node6.getLastSibling();
        boolean boolean8 = node7.isFunction();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node7.getStaticSourceFile();
        boolean boolean10 = node7.isFromExterns();
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test18888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18888");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        node32.addSuppression("STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean68 = node67.isThrow();
        java.lang.String str72 = node67.toString(true, false, true);
        int int74 = node67.getIntProp(51);
        node67.addSuppression("STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node77 = node32.useSourceInfoFrom(node67);
        boolean boolean78 = node77.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = node77.getJSDocInfo();
        boolean boolean80 = jSDocInfo79.hasFileOverview();
        java.lang.String str81 = jSDocInfo79.getDescription();
        boolean boolean82 = jSDocInfo79.isConsistentIdGenerator();
        java.lang.String str83 = jSDocInfo79.getSourceName();
        java.lang.String str84 = jSDocInfo79.toString();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  0" + "'", str72, "STRING  0");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "JSDocInfo" + "'", str84, "JSDocInfo");
    }

    @Test
    public void test18889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18889");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean57 = node56.isThrow();
        java.lang.String str61 = node56.toString(true, false, true);
        java.lang.String str62 = node56.getQualifiedName();
        node56.addSuppression("STRING  0");
        boolean boolean65 = node56.isNull();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node56.new FileLevelJsDocBuilder();
        node14.addChildrenToBack(node56);
        boolean boolean68 = node14.isNull();
        boolean boolean69 = node14.isName();
        boolean boolean70 = node14.isString();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "STRING  0" + "'", str61, "STRING  0");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test18890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18890");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.setDeprecated(false);
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("NAME STRING  0 100 [source_file: ]\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test18891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18891");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) ' ', (int) (byte) 0, 16);
        boolean boolean4 = node3.isGetterDef();
        node3.setDouble((double) 51);
        boolean boolean7 = node3.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str9 = jSDocInfo8.getVersion();
        java.lang.String str10 = jSDocInfo8.getFileOverview();
        boolean boolean11 = jSDocInfo8.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo8.getParameterNames();
        boolean boolean13 = jSDocInfo8.isExpose();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node17.setCharno(1);
        boolean boolean20 = node17.isRegExp();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node25.isDo();
        boolean boolean32 = node25.isDefaultCase();
        node25.setQuotedString();
        com.google.javascript.rhino.Node node34 = node17.useSourceInfoFromForTree(node25);
        jSDocInfo8.setAssociatedNode(node17);
        node17.setType((int) '4');
        boolean boolean38 = node3.isEquivalentToTyped(node17);
        boolean boolean39 = node17.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test18892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18892");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        int int6 = jSDocInfo0.getParameterCount();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getReturnType();
        jSDocInfo0.setDeprecated(true);
        boolean boolean15 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test18893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18893");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node9.toString();
        com.google.javascript.rhino.Node node11 = node9.removeFirstChild();
        com.google.javascript.rhino.Node node12 = node9.cloneNode();
        boolean boolean13 = node12.isDebugger();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ERROR 1" + "'", str10, "ERROR 1");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test18894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18894");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker0.getDescription();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(typePosition8);
        org.junit.Assert.assertNull(stringPosition9);
    }

    @Test
    public void test18895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18895");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility4);
        java.lang.String str6 = jSDocInfo0.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test18896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18896");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(49, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(40, node4);
        com.google.javascript.rhino.Node node6 = node5.getFirstChild();
        boolean boolean7 = node6.isQuotedString();
        boolean boolean8 = node6.isLabel();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test18897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18897");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean14 = node4.getBooleanProp(52);
        node4.setLineno((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = node4.getParent();
        int int18 = node4.getCharno();
        boolean boolean19 = node4.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test18898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18898");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isString();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        boolean boolean67 = node64.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node64.children();
        com.google.javascript.rhino.Node node69 = node21.srcref(node64);
        com.google.javascript.rhino.Node node70 = node69.getLastSibling();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder71 = node69.new FileLevelJsDocBuilder();
        boolean boolean72 = node69.isNumber();
        node69.setLineno(4095);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test18899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18899");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) '#', (-1), 31);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean8 = node7.isThrow();
        java.lang.String str12 = node7.toString(true, false, true);
        java.lang.String str13 = node7.getQualifiedName();
        boolean boolean14 = node7.isIn();
        com.google.javascript.rhino.Node node15 = node7.cloneTree();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node19.setCharno(1);
        java.util.Set<java.lang.String> strSet22 = node19.getDirectives();
        boolean boolean23 = node19.isHook();
        node15.addChildToFront(node19);
        com.google.javascript.rhino.Node node25 = node3.copyInformationFrom(node19);
        com.google.javascript.rhino.Node node26 = node19.detachFromParent();
        java.util.Set<java.lang.String> strSet27 = node19.getDirectives();
        java.lang.Object obj29 = node19.getProp(10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = null;
        node19.setJSDocInfo(jSDocInfo30);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0" + "'", str12, "STRING  0");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test18900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18900");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test18901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18901");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        boolean boolean12 = jSDocInfo0.hasBaseType();
        java.lang.String str13 = jSDocInfo0.getReturnDescription();
        boolean boolean14 = jSDocInfo0.isHidden();
        int int15 = jSDocInfo0.getParameterCount();
        boolean boolean16 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
    }

    @Test
    public void test18902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18902");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        node30.setLength((int) ' ');
        node3.addChildrenToBack(node30);
        com.google.javascript.rhino.Node node34 = node30.getParent();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        boolean boolean45 = node39.isDo();
        boolean boolean46 = node39.isDefaultCase();
        node39.setQuotedString();
        boolean boolean48 = node39.isDec();
        boolean boolean49 = node39.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node39.siblings();
        boolean boolean51 = node39.isEmpty();
        com.google.javascript.rhino.Node node52 = node39.getParent();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node56.setCharno(1);
        com.google.javascript.rhino.Node node59 = node56.cloneNode();
        int int60 = node56.getChildCount();
        boolean boolean61 = node39.isEquivalentToTyped(node56);
        com.google.javascript.rhino.Node node62 = node34.useSourceInfoFromForTree(node39);
        int int63 = node62.getSourcePosition();
        boolean boolean64 = node62.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test18903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18903");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        boolean boolean7 = jSDocInfo0.hasModifies();
        boolean boolean8 = jSDocInfo0.isDefine();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        boolean boolean12 = jSDocInfo0.isNoAlias();
        java.lang.String str13 = jSDocInfo0.getDescription();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test18904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18904");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("((ERROR 1\n    STRING  0\n    STRING  0\n))", 0, 43);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test18905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18905");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        java.lang.String str11 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test18906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18906");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue4.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue1.xor(ternaryValue6);
        java.lang.String str8 = ternaryValue7.toString();
        java.lang.String str9 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean12 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.or(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue13.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue16.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue10.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue7.xor(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.or(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue21.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue29.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue34.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue32.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str42 = ternaryValue41.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue32.and(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue27.or(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue46.or(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue51.or(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue53.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue49.and(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str59 = ternaryValue58.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue49.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue27.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue18.or(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue62.or(ternaryValue63);
        java.lang.String str65 = ternaryValue62.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue68.or(ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue73.or(ternaryValue75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = ternaryValue75.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue71.and(ternaryValue75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = ternaryValue66.and(ternaryValue75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = ternaryValue75.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = ternaryValue62.xor(ternaryValue80);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue82 = ternaryValue81.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "true" + "'", str59, "true");
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "true" + "'", str65, "true");
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValue82);
    }

    @Test
    public void test18907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18907");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        com.google.javascript.rhino.Node node21 = node15.getLastSibling();
        node21.removeProp((int) '#');
        node21.setLength(0);
        com.google.javascript.rhino.Node node26 = node21.getLastChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean31 = node30.isThrow();
        java.lang.String str35 = node30.toString(true, false, true);
        boolean boolean36 = node30.isOptionalArg();
        boolean boolean37 = node30.isThrow();
        com.google.javascript.rhino.Node node38 = node30.getLastSibling();
        java.lang.String[] strArray41 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        boolean boolean49 = strSet42.addAll((java.util.Collection<java.lang.String>) strList47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node56 = node54.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) -1, node54, (int) (byte) 1, (int) '#');
        boolean boolean60 = node54.isScript();
        node54.setQuotedString();
        boolean boolean62 = strSet42.equals((java.lang.Object) node54);
        boolean boolean63 = node54.isAssign();
        com.google.javascript.rhino.Node node64 = node38.copyInformationFromForTree(node54);
        node64.setLength(37);
        java.lang.String str67 = node64.getString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node68 = node26.srcrefTree(node64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "STRING  0" + "'", str35, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test18908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18908");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        boolean boolean66 = node65.isHook();
        boolean boolean67 = node65.isQualifiedName();
        boolean boolean68 = node65.isIn();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node75 = node73.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) -1, node73, (int) (byte) 1, (int) '#');
        java.lang.String str79 = node73.toStringTree();
        boolean boolean80 = node73.isStringKey();
        boolean boolean81 = node73.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = node73.getStaticSourceFile();
        com.google.javascript.rhino.Node node83 = node65.clonePropsFrom(node73);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "STRING  0\n" + "'", str79, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(staticSourceFile82);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test18909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18909");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getStartLine();
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setPositionInformation((int) (short) -1, (int) (byte) 10, 52, 409601);
        int int14 = stringPosition0.getPositionOnStartLine();
        int int15 = stringPosition0.getStartLine();
        int int16 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test18910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18910");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isSetterDef();
        boolean boolean53 = node50.isEmpty();
        boolean boolean54 = node50.isSetterDef();
        node50.removeProp(53);
        boolean boolean57 = node50.isComma();
        com.google.javascript.rhino.Node node58 = node50.getLastSibling();
        node58.setCharno(180223);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test18911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18911");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        int int27 = node15.getCharno();
        com.google.javascript.rhino.Node node28 = node5.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        boolean boolean50 = node48.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((-1), node15, node48);
        com.google.javascript.rhino.Node node52 = node51.getParent();
        boolean boolean53 = node51.isSetterDef();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(54, node51, 32, 32);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node51.setJSType(jSType57);
        boolean boolean59 = node51.isDec();
        node51.putIntProp((int) ' ', (int) (short) 10);
        boolean boolean63 = node51.isTry();
        int int64 = node51.getType();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test18912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18912");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        boolean boolean31 = node30.isDelProp();
        boolean boolean32 = node30.isAssignAdd();
        boolean boolean33 = node30.isBreak();
        node30.setType(13);
        boolean boolean36 = node30.isNull();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test18913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18913");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(10);
        boolean boolean2 = node1.isQuotedString();
        node1.setOptionalArg(true);
        boolean boolean5 = node1.isFunction();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(39, "BITXOR");
        node1.addChildrenToFront(node8);
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got BITXOR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test18914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18914");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("ERROR 1\n    STRING  0\n    STRING  0\n");
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.Node node11 = jSDocInfo0.getAssociatedNode();
        boolean boolean12 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("STRING  0 [quoted: 1] [synthetic: 1]\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo0.getVisibility();
        java.lang.String str16 = jSDocInfo0.getLendsName();
        boolean boolean17 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test18915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18915");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR 1\n", (int) ' ', 43);
        boolean boolean4 = node3.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test18916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18916");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getPositionOnStartLine();
        int int3 = typePosition0.getPositionOnStartLine();
        boolean boolean4 = typePosition0.hasBrackets();
        boolean boolean5 = typePosition0.hasBrackets();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(192609, 409601, 48, 19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 192609?end-line: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test18917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18917");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(30);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable2 = node1.getAncestors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str4 = jSDocInfo3.getVersion();
        boolean boolean5 = jSDocInfo3.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo3.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo3.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo3.getThrownTypes();
        java.lang.String str9 = jSDocInfo3.getDeprecationReason();
        boolean boolean10 = jSDocInfo3.isDeprecated();
        java.lang.String str11 = jSDocInfo3.getLendsName();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo3.getSuppressions();
        boolean boolean13 = jSDocInfo3.isConstructor();
        boolean boolean15 = jSDocInfo3.hasParameterType("");
        node1.setJSDocInfo(jSDocInfo3);
        boolean boolean17 = node1.isDelProp();
        org.junit.Assert.assertNotNull(ancestorIterable2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test18918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18918");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0\n");
        node1.putBooleanProp(30, false);
        boolean boolean5 = node1.isCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test18919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18919");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        boolean boolean27 = strSet20.addAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.lang.Object[] objArray29 = strSet20.toArray();
        boolean boolean31 = strSet20.contains((java.lang.Object) 32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str33 = jSDocInfo32.getVersion();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo32.getParameterNames();
        boolean boolean37 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node42.isDo();
        boolean boolean49 = node42.isDefaultCase();
        node42.setQuotedString();
        boolean boolean51 = node42.isDec();
        boolean boolean52 = node42.isLabel();
        boolean boolean53 = node42.wasEmptyNode();
        boolean boolean54 = strSet20.contains((java.lang.Object) node42);
        boolean boolean55 = node42.isCatch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node59.setCharno(1);
        boolean boolean62 = node59.isRegExp();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node69 = node67.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node67, (int) (byte) 1, (int) '#');
        boolean boolean73 = node67.isDo();
        boolean boolean74 = node67.isDefaultCase();
        node67.setQuotedString();
        com.google.javascript.rhino.Node node76 = node59.useSourceInfoFromForTree(node67);
        node67.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node80 = node67.cloneNode();
        boolean boolean81 = node42.isEquivalentToTyped(node67);
        com.google.javascript.rhino.Node node82 = node42.getParent();
        com.google.javascript.rhino.Node node83 = node42.cloneTree();
        java.lang.Object obj85 = node42.getProp(192609);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[STRING  0, hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[STRING  0, hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test18920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18920");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isIf();
        com.google.javascript.rhino.Node node18 = node16.getParent();
        node16.removeProp((int) 'a');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean25 = node24.isThrow();
        java.lang.String str29 = node24.toString(true, false, true);
        node24.setQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.getVersion();
        boolean boolean33 = jSDocInfo31.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo31.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo31.setVisibility(visibility35);
        node24.setJSDocInfo(jSDocInfo31);
        com.google.javascript.rhino.Node node38 = node16.clonePropsFrom(node24);
        int int39 = node38.getChildCount();
        com.google.javascript.rhino.InputId inputId40 = null;
        node38.setInputId(inputId40);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING  0" + "'", str29, "STRING  0");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test18921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18921");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        boolean boolean5 = node3.isAdd();
        boolean boolean6 = node3.isDelProp();
        boolean boolean7 = node3.isGetElem();
        boolean boolean8 = node3.isComma();
        boolean boolean9 = node3.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test18922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18922");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        com.google.javascript.rhino.Node node45 = node43.getAncestor(45);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = node45.isBlock();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test18923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18923");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        boolean boolean6 = node5.isExprResult();
        boolean boolean7 = node5.isInc();
        boolean boolean8 = node5.isLabelName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(409601, node5);
        boolean boolean10 = node9.hasMoreThanOneChild();
        boolean boolean11 = node9.isBlock();
        com.google.javascript.rhino.InputId inputId12 = node9.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node9.getJSDocInfo();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNull(jSDocInfo13);
    }

    @Test
    public void test18924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18924");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.hasTypedefType();
        java.lang.String str11 = jSDocInfo0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JSDocInfo" + "'", str11, "JSDocInfo");
    }

    @Test
    public void test18925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18925");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test18926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18926");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getEndLine();
        int int3 = namePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test18927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18927");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray5);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0, nodeArray5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(2, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(4, nodeArray5, 39, (int) (short) 100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(8, nodeArray5, 29, 31);
        node14.setOptionalArg(true);
        boolean boolean17 = node14.isArrayLit();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str19 = jSDocInfo18.getVersion();
        boolean boolean20 = jSDocInfo18.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo18.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo18.getImplementedInterfaces();
        java.lang.String str23 = jSDocInfo18.toString();
        boolean boolean24 = jSDocInfo18.isOverride();
        boolean boolean25 = jSDocInfo18.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo18.getReturnType();
        boolean boolean27 = jSDocInfo18.isNoShadow();
        boolean boolean28 = jSDocInfo18.isConstant();
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo18.getAuthors();
        node14.setJSDocInfo(jSDocInfo18);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "JSDocInfo" + "'", str23, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strCollection29);
    }

    @Test
    public void test18928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18928");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        int int16 = node8.getIntProp((int) (byte) 10);
        node8.setSourceEncodedPositionForTree(15);
        boolean boolean19 = node8.isNull();
        boolean boolean20 = node8.wasEmptyNode();
        node8.detachChildren();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test18929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18929");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(409601, "NUMBER 10.0 40");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test18930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18930");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str8 = jSDocInfo7.getVersion();
        boolean boolean9 = jSDocInfo7.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo7.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo7.getImplementedInterfaces();
        java.lang.String str12 = jSDocInfo7.getMeaning();
        boolean boolean13 = jSDocInfo7.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str15 = jSDocInfo14.getVersion();
        boolean boolean16 = jSDocInfo14.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo14.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo14.getImplementedInterfaces();
        boolean boolean19 = jSDocInfo14.hasReturnType();
        boolean boolean20 = jSDocInfo14.hasBaseType();
        boolean boolean21 = jSDocInfo14.isNoCompile();
        boolean boolean22 = jSDocInfo14.hasBaseType();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node27.setCharno(1);
        boolean boolean30 = node27.isRegExp();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node35.isDo();
        boolean boolean42 = node35.isDefaultCase();
        node35.setQuotedString();
        com.google.javascript.rhino.Node node44 = node27.useSourceInfoFromForTree(node35);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node48.setCharno(1);
        java.util.Set<java.lang.String> strSet51 = node48.getDirectives();
        node48.setLength(0);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node60 = node58.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) -1, node58, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(0, node44, node48, node63, (int) 'a', (int) (short) 0);
        boolean boolean67 = node44.isNull();
        com.google.javascript.rhino.jstype.JSType jSType68 = node44.getJSType();
        jSDocInfo14.setAssociatedNode(node44);
        boolean boolean70 = jSDocInfo14.shouldPreserveTry();
        boolean boolean71 = jSDocInfo14.hasModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str73 = jSDocInfo72.getVersion();
        boolean boolean74 = jSDocInfo72.hasEnumParameterType();
        java.lang.String str76 = jSDocInfo72.getDescriptionForParameter("STRING  0\n");
        boolean boolean77 = jSDocInfo72.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str79 = jSDocInfo78.getVersion();
        boolean boolean80 = jSDocInfo78.hasEnumParameterType();
        boolean boolean81 = jSDocInfo78.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo78.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility83 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo78.setVisibility(visibility83);
        jSDocInfo72.setVisibility(visibility83);
        jSDocInfo14.setVisibility(visibility83);
        jSDocInfo7.setVisibility(visibility83);
        jSDocInfo0.setVisibility(visibility83);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = jSDocInfo0.getParameterType("STRING  0 [source_file: STRING  0\n]\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList91 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean92 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertTrue("'" + visibility83 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility83.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(jSTypeExpression90);
        org.junit.Assert.assertNotNull(jSTypeExpressionList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test18931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18931");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        boolean boolean24 = node19.isStringKey();
        boolean boolean25 = node19.isVoid();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node35.isScript();
        node35.setQuotedString();
        com.google.javascript.rhino.Node node43 = node30.srcrefTree(node35);
        boolean boolean44 = node43.isIf();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean54 = node53.isThrow();
        java.lang.String str58 = node53.toString(true, false, true);
        boolean boolean59 = node53.isOptionalArg();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node[] nodeArray64 = new com.google.javascript.rhino.Node[] { node43, node49, node53, node63 };
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(38, nodeArray64, (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 2, 8, 50);
        com.google.javascript.rhino.Node node72 = node67.useSourceInfoIfMissingFrom(node71);
        boolean boolean73 = node67.isNot();
        boolean boolean74 = node67.isString();
        java.lang.String str75 = node19.checkTreeEquals(node67);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "STRING  0" + "'", str58, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(nodeArray64);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nNAME 8\n    OR 0\n    GETELEM OR 1 0\n    STRING  0\n    STRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: NAME 8\n    OR 0\n    GETELEM OR 1 0\n    STRING  0\n    STRING  0\n" + "'", str75, "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nNAME 8\n    OR 0\n    GETELEM OR 1 0\n    STRING  0\n    STRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: NAME 8\n    OR 0\n    GETELEM OR 1 0\n    STRING  0\n    STRING  0\n");
    }

    @Test
    public void test18932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18932");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(typePosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(stringPosition11);
        org.junit.Assert.assertNull(stringPosition12);
    }

    @Test
    public void test18933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18933");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node19 = node4.cloneNode();
        boolean boolean20 = node19.isEmpty();
        boolean boolean21 = node19.isGetterDef();
        java.lang.String str25 = node19.toString(false, false, true);
        boolean boolean26 = node19.hasOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING " + "'", str25, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test18934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18934");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(35, 50, (int) (short) 100, 38);
        int int13 = stringPosition0.getPositionOnStartLine();
        int int14 = stringPosition0.getPositionOnEndLine();
        int int15 = stringPosition0.getEndLine();
        java.lang.String str16 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36 + "'", int7 == 36);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 38 + "'", int14 == 38);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test18935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18935");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node8 = node6.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, (int) (byte) 1, (int) '#');
        boolean boolean12 = node6.isDo();
        boolean boolean13 = node6.isDefaultCase();
        node6.setQuotedString();
        boolean boolean15 = node6.isDec();
        boolean boolean16 = node6.hasMoreThanOneChild();
        boolean boolean17 = node6.isTrue();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node6);
        boolean boolean19 = node1.isObjectLit();
        boolean boolean20 = node1.isInc();
        java.lang.String str21 = node1.getSourceFileName();
        boolean boolean22 = node1.isThrow();
        boolean boolean23 = node1.isEmpty();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test18936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18936");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        boolean boolean9 = jSDocInfo0.hasType();
        java.lang.String str10 = jSDocInfo0.getLendsName();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test18937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18937");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node19.hasChild(node29);
        int int31 = node19.getCharno();
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoIfMissingFrom(node19);
        node32.setLength((int) ' ');
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node66 = node38.srcref(node65);
        boolean boolean67 = node32.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node84 = node82.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) -1, node82, (int) (byte) 1, (int) '#');
        boolean boolean88 = node77.hasChild(node87);
        boolean boolean89 = node87.isVar();
        boolean boolean90 = node87.isCase();
        boolean boolean91 = node38.hasChild(node87);
        jSDocInfo0.setAssociatedNode(node38);
        java.lang.String str93 = jSDocInfo0.getReturnDescription();
        boolean boolean94 = jSDocInfo0.isExterns();
        boolean boolean95 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test18938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18938");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        com.google.javascript.rhino.Node node15 = node8.detachFromParent();
        node15.setOptionalArg(false);
        boolean boolean19 = node15.getBooleanProp(31);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node15);
        boolean boolean21 = node20.isLabel();
        boolean boolean22 = node20.isNot();
        boolean boolean23 = node20.isFalse();
        boolean boolean24 = node20.isTypeOf();
        boolean boolean25 = node20.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test18939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18939");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str8 = jSDocInfo7.getVersion();
        boolean boolean9 = jSDocInfo7.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo7.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo7.getImplementedInterfaces();
        boolean boolean12 = jSDocInfo7.hasReturnType();
        boolean boolean13 = jSDocInfo7.hasBaseType();
        boolean boolean14 = jSDocInfo7.isNoCompile();
        boolean boolean15 = jSDocInfo7.hasBaseType();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node20.setCharno(1);
        boolean boolean23 = node20.isRegExp();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isDo();
        boolean boolean35 = node28.isDefaultCase();
        node28.setQuotedString();
        com.google.javascript.rhino.Node node37 = node20.useSourceInfoFromForTree(node28);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node41.setCharno(1);
        java.util.Set<java.lang.String> strSet44 = node41.getDirectives();
        node41.setLength(0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node37, node41, node56, (int) 'a', (int) (short) 0);
        boolean boolean60 = node37.isNull();
        com.google.javascript.rhino.jstype.JSType jSType61 = node37.getJSType();
        jSDocInfo7.setAssociatedNode(node37);
        boolean boolean63 = jSDocInfo7.shouldPreserveTry();
        boolean boolean64 = jSDocInfo7.hasModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str66 = jSDocInfo65.getVersion();
        boolean boolean67 = jSDocInfo65.hasEnumParameterType();
        java.lang.String str69 = jSDocInfo65.getDescriptionForParameter("STRING  0\n");
        boolean boolean70 = jSDocInfo65.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str72 = jSDocInfo71.getVersion();
        boolean boolean73 = jSDocInfo71.hasEnumParameterType();
        boolean boolean74 = jSDocInfo71.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo71.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo71.setVisibility(visibility76);
        jSDocInfo65.setVisibility(visibility76);
        jSDocInfo7.setVisibility(visibility76);
        jSDocInfo0.setVisibility(visibility76);
        boolean boolean82 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        int int83 = jSDocInfo0.getParameterCount();
        boolean boolean84 = jSDocInfo0.hasFileOverview();
        boolean boolean85 = jSDocInfo0.isNoCompile();
        jSDocInfo0.addSuppression("NAME 8");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + visibility76 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility76.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test18940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18940");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node9.isReturn();
        boolean boolean22 = node9.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        boolean boolean25 = jSDocInfo23.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo23.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo23.getImplementedInterfaces();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        jSDocInfo23.setAssociatedNode(node31);
        com.google.javascript.rhino.Node node38 = node31.removeFirstChild();
        boolean boolean39 = node31.isNumber();
        node9.addChildToBack(node31);
        boolean boolean41 = node31.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean46 = node45.isThrow();
        java.lang.String str50 = node45.toString(true, false, true);
        java.lang.String str51 = node45.getQualifiedName();
        boolean boolean52 = node45.isIn();
        com.google.javascript.rhino.Node node53 = node45.cloneTree();
        boolean boolean54 = node53.isRegExp();
        int int55 = node53.getSourcePosition();
        node31.addChildrenToBack(node53);
        node53.setLineno((int) (byte) -1);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable59 = node53.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor60 = ancestorIterable59.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator61 = ancestorIterable59.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor62 = ancestorIterable59.iterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "STRING  0" + "'", str50, "STRING  0");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(ancestorIterable59);
        org.junit.Assert.assertNotNull(nodeItor60);
        org.junit.Assert.assertNotNull(nodeSpliterator61);
        org.junit.Assert.assertNotNull(nodeItor62);
    }

    @Test
    public void test18941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18941");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray8);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(29, nodeArray8);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray8);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(38, nodeArray8, 23, (int) (byte) 100);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(30, nodeArray8);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(2, nodeArray8, (int) (short) 100, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(0, nodeArray8, 12, 35);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(143361, nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray8);
    }

    @Test
    public void test18942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18942");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        boolean boolean13 = jSDocInfo11.hasEnumParameterType();
        boolean boolean14 = jSDocInfo11.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo11.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo11.setVisibility(visibility16);
        boolean boolean18 = jSDocInfo11.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo11.getImplementedInterfaces();
        java.lang.String str20 = jSDocInfo11.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str22 = jSDocInfo21.getVersion();
        boolean boolean23 = jSDocInfo21.hasEnumParameterType();
        boolean boolean24 = jSDocInfo21.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo21.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo21.setVisibility(visibility26);
        boolean boolean28 = jSDocInfo21.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo21.getImplementedInterfaces();
        boolean boolean30 = jSDocInfo21.containsDeclaration();
        boolean boolean31 = jSDocInfo21.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection32 = jSDocInfo21.getAuthors();
        boolean boolean33 = jSDocInfo21.isNoAlias();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str35 = jSDocInfo34.getVersion();
        java.lang.String str36 = jSDocInfo34.getFileOverview();
        jSDocInfo34.addSuppression("STRING  0");
        boolean boolean39 = jSDocInfo34.isNoCompile();
        boolean boolean40 = jSDocInfo34.isOverride();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str42 = jSDocInfo41.getVersion();
        boolean boolean43 = jSDocInfo41.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo41.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo41.setVisibility(visibility45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str48 = jSDocInfo47.getVersion();
        boolean boolean49 = jSDocInfo47.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo47.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo47.setVisibility(visibility51);
        jSDocInfo41.setVisibility(visibility51);
        jSDocInfo34.setVisibility(visibility51);
        jSDocInfo21.setVisibility(visibility51);
        jSDocInfo11.setVisibility(visibility51);
        jSDocInfo0.setVisibility(visibility51);
        java.lang.String str58 = jSDocInfo0.toString();
        boolean boolean60 = jSDocInfo0.hasParameter("ASSIGN_MOD");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "JSDocInfo" + "'", str20, "JSDocInfo");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strCollection32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "JSDocInfo" + "'", str58, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test18943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18943");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test18944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18944");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING STRING  0 [quoted: 1] 3\n", 37, (int) (byte) 100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node15 = node13.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) -1, node13, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node18.hasChild(node28);
        int int30 = node18.getCharno();
        com.google.javascript.rhino.Node node31 = node8.useSourceInfoIfMissingFrom(node18);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        boolean boolean52 = node41.hasChild(node51);
        boolean boolean53 = node51.isVar();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((-1), node18, node51);
        com.google.javascript.rhino.Node node55 = node54.getParent();
        boolean boolean56 = node54.isContinue();
        boolean boolean57 = node54.isDefaultCase();
        com.google.javascript.rhino.Node node58 = node54.cloneNode();
        boolean boolean59 = node58.isAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node64.setCharno(1);
        boolean boolean67 = node64.isRegExp();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        boolean boolean78 = node72.isDo();
        boolean boolean79 = node72.isDefaultCase();
        node72.setQuotedString();
        com.google.javascript.rhino.Node node81 = node64.useSourceInfoFromForTree(node72);
        boolean boolean82 = node64.isInc();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(30, node64);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double88 = node87.getDouble();
        boolean boolean89 = node87.isAdd();
        com.google.javascript.rhino.Node node90 = node87.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType91 = node90.getJSType();
        java.lang.String str92 = node90.toStringTree();
        node64.addChildToFront(node90);
        com.google.javascript.rhino.Node node94 = node58.copyInformationFromForTree(node90);
        com.google.javascript.rhino.Node node95 = node58.removeChildren();
        node3.addChildrenToFront(node58);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 4095.0d + "'", double88 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(jSType91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "NUMBER 4095.0 100\n" + "'", str92, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNull(node95);
    }

    @Test
    public void test18945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18945");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        node32.detachChildren();
        java.lang.String[] strArray65 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        boolean boolean69 = strSet66.add("STRING  0");
        java.lang.String[] strArray72 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        boolean boolean80 = strSet73.addAll((java.util.Collection<java.lang.String>) strList78);
        boolean boolean81 = strSet66.containsAll((java.util.Collection<java.lang.String>) strList78);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet66);
        node32.setSourceFileForTesting("");
        // The following exception was thrown during execution in test generation
        try {
            int int86 = node32.getExistingIntProp(17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 17");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test18946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18946");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(12);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node8 = node6.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, (int) (byte) 1, (int) '#');
        boolean boolean12 = node6.isDo();
        com.google.javascript.rhino.Node node13 = node6.getLastSibling();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(46, (int) (byte) -1, 29);
        com.google.javascript.rhino.Node node18 = node13.srcrefTree(node17);
        com.google.javascript.rhino.Node node19 = node1.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double25 = node24.getDouble();
        int int26 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node30.setCharno(1);
        boolean boolean33 = node30.isRegExp();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node38.isDo();
        boolean boolean45 = node38.isDefaultCase();
        node38.setQuotedString();
        com.google.javascript.rhino.Node node47 = node30.useSourceInfoFromForTree(node38);
        node38.putIntProp((int) (byte) 100, (int) (byte) 0);
        node38.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean54 = node38.isInc();
        node38.setQuotedString();
        java.lang.String str56 = node38.getSourceFileName();
        com.google.javascript.rhino.Node node57 = node24.copyInformationFrom(node38);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(10, node24);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("(OR 1\n)", (int) (byte) 100, 15);
        com.google.javascript.rhino.Node node63 = node24.srcrefTree(node62);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node64 = node19.removeChildAfter(node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 4095.0d + "'", double25 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 409601 + "'", int26 == 409601);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test18947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18947");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node29.hasChild(node39);
        int int41 = node29.getCharno();
        com.google.javascript.rhino.Node node42 = node19.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node47 = node19.srcref(node46);
        jSDocInfo0.setAssociatedNode(node19);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo0.getReturnType();
        int int50 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean51 = jSDocInfo0.isNoShadow();
        boolean boolean52 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo0.getType();
        int int54 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test18948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18948");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray5);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) 'a', nodeArray5, 4131, 1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray5);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) ' ', nodeArray5, 9, (int) (byte) 1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str16 = jSDocInfo15.getVersion();
        boolean boolean17 = jSDocInfo15.hasEnumParameterType();
        java.lang.String str19 = jSDocInfo15.getDescriptionForParameter("STRING  0\n");
        java.lang.String str20 = jSDocInfo15.getDescription();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        boolean boolean45 = node34.hasChild(node44);
        int int46 = node34.getCharno();
        com.google.javascript.rhino.Node node47 = node24.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node52 = node24.srcref(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean57 = node56.isFromExterns();
        boolean boolean58 = node52.hasChild(node56);
        jSDocInfo15.setAssociatedNode(node52);
        java.lang.Object obj61 = node52.getProp(40);
        boolean boolean62 = node52.isNE();
        boolean boolean63 = node52.isQuotedString();
        boolean boolean64 = node52.isNull();
        boolean boolean65 = node52.isWhile();
        com.google.javascript.rhino.Node node66 = node14.srcref(node52);
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test18949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18949");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(32, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN 5\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN 5\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test18950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18950");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue4.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue1.xor(ternaryValue6);
        java.lang.String str8 = ternaryValue7.toString();
        java.lang.String str9 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean12 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.or(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue13.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue16.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue10.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue7.xor(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.or(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue21.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue29.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue34.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue32.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str42 = ternaryValue41.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue32.and(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue27.or(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue46.or(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue51.or(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue53.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue49.and(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str59 = ternaryValue58.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue49.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue27.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue18.or(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue62.or(ternaryValue63);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue66.or(ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue71.or(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue73.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue69.and(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean81 = ternaryValue79.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean85 = ternaryValue83.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue87 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue88 = ternaryValue86.or(ternaryValue87);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue89 = ternaryValue83.xor(ternaryValue88);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue90 = ternaryValue79.xor(ternaryValue83);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue91 = ternaryValue77.and(ternaryValue83);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = ternaryValue76.xor(ternaryValue83);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue93 = ternaryValue63.and(ternaryValue76);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue94 = ternaryValue93.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "true" + "'", str59, "true");
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(ternaryValue88);
        org.junit.Assert.assertNotNull(ternaryValue89);
        org.junit.Assert.assertNotNull(ternaryValue90);
        org.junit.Assert.assertNotNull(ternaryValue91);
        org.junit.Assert.assertNotNull(ternaryValue92);
        org.junit.Assert.assertNotNull(ternaryValue93);
        org.junit.Assert.assertNotNull(ternaryValue94);
    }

    @Test
    public void test18951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18951");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        boolean boolean10 = strSet7.add("STRING  0");
        java.lang.String[] strArray13 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        boolean boolean21 = strSet14.addAll((java.util.Collection<java.lang.String>) strList19);
        boolean boolean22 = strSet7.containsAll((java.util.Collection<java.lang.String>) strList19);
        boolean boolean23 = strSet2.addAll((java.util.Collection<java.lang.String>) strList19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str25 = jSDocInfo24.getVersion();
        boolean boolean26 = jSDocInfo24.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo24.getParameterNames();
        boolean boolean28 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str30 = jSDocInfo29.getVersion();
        boolean boolean31 = jSDocInfo29.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo29.getParameterNames();
        jSDocInfo29.addSuppression("");
        java.lang.String str35 = jSDocInfo29.getBlockDescription();
        boolean boolean36 = jSDocInfo29.shouldPreserveTry();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection37 = jSDocInfo29.getMarkers();
        boolean boolean38 = jSDocInfo29.isNoSideEffects();
        boolean boolean39 = strSet2.contains((java.lang.Object) boolean38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node60 = node58.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) -1, node58, (int) (byte) 1, (int) '#');
        boolean boolean64 = node53.hasChild(node63);
        int int65 = node53.getCharno();
        com.google.javascript.rhino.Node node66 = node43.useSourceInfoIfMissingFrom(node53);
        int int67 = node43.getSourcePosition();
        boolean boolean68 = node43.isThrow();
        boolean boolean69 = strSet2.contains((java.lang.Object) boolean68);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(markerCollection37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4131 + "'", int67 == 4131);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test18952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18952");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 0, "");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test18953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18953");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node26.isArrayLit();
        node26.setLineno(4131);
        node26.setCharno((int) '4');
        boolean boolean32 = node26.isParamList();
        boolean boolean33 = node26.isGetProp();
        boolean boolean34 = node26.isSyntheticBlock();
        boolean boolean35 = node26.isAssignAdd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int41 = node40.getType();
        boolean boolean42 = node40.isArrayLit();
        node40.setWasEmptyNode(false);
        boolean boolean45 = node40.isNot();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        boolean boolean56 = node50.isDo();
        boolean boolean57 = node50.isDefaultCase();
        node50.setQuotedString();
        boolean boolean59 = node50.isDec();
        boolean boolean60 = node50.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node50.siblings();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(51);
        java.lang.String str64 = node50.checkTreeEquals(node63);
        boolean boolean65 = node50.isObjectLit();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(6);
        com.google.javascript.rhino.Node node68 = node50.copyInformationFrom(node67);
        boolean boolean69 = node50.isGetterDef();
        java.lang.String str70 = node40.checkTreeEquals(node50);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean75 = node74.isThrow();
        java.lang.String str79 = node74.toString(true, false, true);
        boolean boolean80 = node74.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = node74.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile82 = null;
        node74.setStaticSourceFile(staticSourceFile82);
        boolean boolean84 = node74.isQualifiedName();
        com.google.javascript.rhino.Node node86 = node74.getAncestor(4095);
        boolean boolean87 = node74.isQuotedString();
        com.google.javascript.rhino.Node node88 = node50.useSourceInfoIfMissingFromForTree(node74);
        node26.putProp(192612, (java.lang.Object) node74);
        boolean boolean90 = node26.isNot();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 40 + "'", int41 == 40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str64, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "STRING  0" + "'", str79, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test18954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18954");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        boolean boolean12 = node11.isUnscopedQualifiedName();
        boolean boolean13 = node11.isGetElem();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        boolean boolean18 = node17.isAnd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str20 = jSDocInfo19.getVersion();
        java.lang.String str21 = jSDocInfo19.getFileOverview();
        jSDocInfo19.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo19.getExtendedInterfaces();
        boolean boolean25 = jSDocInfo19.isConstructor();
        node17.setJSDocInfo(jSDocInfo19);
        boolean boolean27 = node17.isIn();
        int int28 = node17.getLineno();
        com.google.javascript.rhino.Node node29 = node11.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(35);
        boolean boolean32 = node31.isSwitch();
        node11.addChildrenToBack(node31);
        boolean boolean34 = node31.isGetProp();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node56 = node54.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) -1, node54, (int) (byte) 1, (int) '#');
        boolean boolean60 = node49.hasChild(node59);
        int int61 = node49.getCharno();
        com.google.javascript.rhino.Node node62 = node39.useSourceInfoIfMissingFrom(node49);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node69 = node67.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node67, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node79 = node77.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) -1, node77, (int) (byte) 1, (int) '#');
        boolean boolean83 = node72.hasChild(node82);
        boolean boolean84 = node82.isVar();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((-1), node49, node82);
        com.google.javascript.rhino.Node node86 = node85.getParent();
        boolean boolean87 = node85.isContinue();
        boolean boolean88 = node85.isDefaultCase();
        com.google.javascript.rhino.Node node89 = node85.cloneNode();
        com.google.javascript.rhino.Node node90 = node89.getLastSibling();
        boolean boolean91 = node31.isEquivalentToTyped(node90);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable92 = node31.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator93 = ancestorIterable92.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(ancestorIterable92);
        org.junit.Assert.assertNotNull(nodeSpliterator93);
    }

    @Test
    public void test18955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18955");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
    }

    @Test
    public void test18956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18956");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("IN\n");
        boolean boolean11 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("(THROW STRING  0\n 0\n)");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test18957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18957");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        jSDocInfo0.setLicense("false");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getReturnType();
        boolean boolean14 = jSDocInfo0.isExterns();
        boolean boolean15 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test18958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18958");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("STRING  0\n");
        boolean boolean6 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n)");
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean10 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test18959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18959");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        boolean boolean11 = node5.isScript();
        com.google.javascript.rhino.Node node12 = node5.detachFromParent();
        boolean boolean13 = node5.isLabel();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(2, node5);
        com.google.javascript.rhino.Node node15 = node14.removeFirstChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test18960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18960");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, (int) '#');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        sideEffectFlags6.setAllFlags();
        sideEffectFlags6.setAllFlags();
        sideEffectFlags6.clearAllFlags();
        sideEffectFlags6.setMutatesGlobalState();
        sideEffectFlags6.clearAllFlags();
        int int12 = sideEffectFlags6.valueOf();
        sideEffectFlags6.clearAllFlags();
        node3.putProp(4131, (java.lang.Object) sideEffectFlags6);
        boolean boolean15 = sideEffectFlags6.areAllFlagsSet();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test18961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18961");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        boolean boolean7 = jSDocInfo0.hasModifies();
        java.lang.String str8 = jSDocInfo0.getVersion();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean10 = jSDocInfo0.isOverride();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        jSDocInfo0.addSuppression("(NUMBER 4095.0 100\n)");
        com.google.javascript.rhino.Node node14 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test18962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18962");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("STRING OR 1 0");
        stringPosition0.setItem("THROW STRING  0\n");
        stringPosition0.setPositionInformation(46, 6, 52, 16);
        int int13 = stringPosition0.getStartLine();
        int int14 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nSTRING ASSIGN_MOD\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: STRING ASSIGN_MOD\n");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 46 + "'", int13 == 46);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
    }

    @Test
    public void test18963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18963");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node9.setCharno(1);
        boolean boolean12 = node9.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isDo();
        boolean boolean24 = node17.isDefaultCase();
        node17.setQuotedString();
        com.google.javascript.rhino.Node node26 = node9.useSourceInfoFromForTree(node17);
        jSDocInfo0.setAssociatedNode(node9);
        java.lang.String str28 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo0.getType();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.getVersion();
        boolean boolean33 = jSDocInfo31.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo31.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo31.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo31.getThrownTypes();
        java.lang.String str37 = jSDocInfo31.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = jSDocInfo31.getVisibility();
        boolean boolean39 = jSDocInfo31.isInterface();
        jSDocInfo31.setLicense("Node tree inequality:\nTree1:\nOR 0\n\n\nTree2:\nNUMBER 4095.0 100\n\n\nSubtree1: OR 0\n\n\nSubtree2: NUMBER 4095.0 100\n");
        boolean boolean42 = jSDocInfo31.hasFileOverview();
        java.lang.String str43 = jSDocInfo31.getReturnDescription();
        boolean boolean44 = strSet30.equals((java.lang.Object) jSDocInfo31);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        boolean boolean49 = node48.isAnd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str51 = jSDocInfo50.getVersion();
        java.lang.String str52 = jSDocInfo50.getFileOverview();
        jSDocInfo50.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo50.getExtendedInterfaces();
        boolean boolean56 = jSDocInfo50.isConstructor();
        node48.setJSDocInfo(jSDocInfo50);
        boolean boolean58 = jSDocInfo50.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList59 = jSDocInfo50.getImplementedInterfaces();
        boolean boolean60 = jSDocInfo50.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo50.getModifies();
        boolean boolean62 = strSet61.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str64 = jSDocInfo63.getVersion();
        boolean boolean65 = jSDocInfo63.hasEnumParameterType();
        boolean boolean66 = jSDocInfo63.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo63.getParameterType("STRING  0\n");
        jSDocInfo63.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList71 = jSDocInfo63.getExtendedInterfaces();
        boolean boolean72 = jSDocInfo63.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = jSDocInfo63.getParameterType("STRING  0 [var_args_name: 1]");
        java.lang.String str75 = jSDocInfo63.getVersion();
        java.util.Set<java.lang.String> strSet76 = jSDocInfo63.getSuppressions();
        boolean boolean77 = strSet61.retainAll((java.util.Collection<java.lang.String>) strSet76);
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str79 = jSDocInfo78.getVersion();
        boolean boolean80 = jSDocInfo78.hasEnumParameterType();
        boolean boolean81 = jSDocInfo78.isNoAlias();
        java.lang.String str83 = jSDocInfo78.getDescriptionForParameter("JSDocInfo");
        boolean boolean84 = jSDocInfo78.hasEnumParameterType();
        jSDocInfo78.setLicense("Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        java.lang.String str87 = jSDocInfo78.getLicense();
        boolean boolean88 = jSDocInfo78.isIdGenerator();
        boolean boolean89 = jSDocInfo78.hasBaseType();
        boolean boolean90 = jSDocInfo78.isIdGenerator();
        boolean boolean91 = strSet76.equals((java.lang.Object) boolean90);
        boolean boolean92 = strSet30.containsAll((java.util.Collection<java.lang.String>) strSet76);
        java.util.stream.Stream<java.lang.String> strStream93 = strSet30.stream();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(visibility38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertNotNull(jSTypeExpressionList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n" + "'", str87, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strStream93);
    }

    @Test
    public void test18964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18964");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnStartLine();
        int int8 = stringPosition0.getPositionOnEndLine();
        int int9 = stringPosition0.getStartLine();
        int int10 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 36 + "'", int7 == 36);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test18965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18965");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        int int56 = node32.getSourcePosition();
        java.lang.String str57 = node32.toString();
        int int58 = node21.getIndexOfChild(node32);
        boolean boolean59 = strSet3.equals((java.lang.Object) node21);
        boolean boolean60 = node21.isDec();
        node21.putBooleanProp(42, false);
        node21.setCharno(12);
        node21.putBooleanProp((int) (short) 0, false);
        boolean boolean69 = node21.isBlock();
        node21.setWasEmptyNode(true);
        boolean boolean72 = node21.isComma();
        java.lang.String str73 = node21.getSourceFileName();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4131 + "'", int56 == 4131);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR 1" + "'", str57, "OR 1");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test18966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18966");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        int int27 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        int int38 = node31.getIntProp(51);
        node31.addSuppression("STRING  0 [quoted: 1]\n");
        node3.addChildrenToBack(node31);
        node3.setLineno(4131);
        node3.removeProp(23);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4131 + "'", int27 == 4131);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test18967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18967");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("true");
        java.lang.String str11 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test18968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18968");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str9 = jSDocInfo8.getVersion();
        boolean boolean10 = jSDocInfo8.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo8.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo8.setVisibility(visibility12);
        jSDocInfo0.setVisibility(visibility12);
        java.util.Set<java.lang.String> strSet15 = jSDocInfo0.getSuppressions();
        boolean boolean16 = jSDocInfo0.isNoSideEffects();
        java.lang.String str17 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo0.getModifies();
        java.lang.Object[] objArray19 = strSet18.toArray();
        boolean boolean20 = strSet18.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test18969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18969");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        boolean boolean12 = jSDocInfo0.isConstructor();
        boolean boolean13 = jSDocInfo0.isNoAlias();
        java.lang.String str14 = jSDocInfo0.getSourceName();
        boolean boolean15 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test18970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18970");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(12);
        sideEffectFlags1.clearAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        int int4 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
    }

    @Test
    public void test18971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18971");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(4131, 36, (int) (byte) 0);
    }

    @Test
    public void test18972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18972");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.setCharno((int) (short) 1);
        java.lang.String str26 = node11.getString();
        boolean boolean27 = node11.isThis();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable28 = node11.getAncestors();
        boolean boolean29 = node11.isSyntheticBlock();
        int int31 = node11.getIntProp(409601);
        boolean boolean32 = node11.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(ancestorIterable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test18973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18973");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test18974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18974");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        jSDocInfo0.setDeprecated(false);
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nTHROW 0\n\n\nTree2:\nSTRING  0 [quoted: 1]\n\n\nSubtree1: THROW 0\n\n\nSubtree2: STRING  0 [quoted: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test18975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18975");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        int int3 = node2.getChildCount();
        boolean boolean4 = node2.isCase();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 32, (int) (short) -1);
        boolean boolean9 = node8.isParamList();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(8, node2, node8);
        node10.removeProp(19);
        com.google.javascript.rhino.Node node13 = node10.cloneNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test18976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18976");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.setLicense("Named type with empty name component");
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getAuthors();
        java.lang.String str13 = jSDocInfo0.getLicense();
        boolean boolean14 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strCollection12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Named type with empty name component" + "'", str13, "Named type with empty name component");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test18977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18977");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        boolean boolean10 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node24.hasChild(node34);
        int int36 = node24.getCharno();
        com.google.javascript.rhino.Node node37 = node14.useSourceInfoIfMissingFrom(node24);
        node37.setLength((int) ' ');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node60 = node58.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) -1, node58, (int) (byte) 1, (int) '#');
        boolean boolean64 = node53.hasChild(node63);
        int int65 = node53.getCharno();
        com.google.javascript.rhino.Node node66 = node43.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node71 = node43.srcref(node70);
        boolean boolean72 = node37.isEquivalentToTyped(node43);
        node43.addSuppression("STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node43.getStaticSourceFile();
        jSDocInfo0.setAssociatedNode(node43);
        jSDocInfo0.addSuppression("STRING  0 [quoted: 1]\n");
        jSDocInfo0.setLicense("THROW STRING  0\n 0\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(staticSourceFile75);
    }

    @Test
    public void test18978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18978");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 35, 1);
        boolean boolean4 = node3.isThrow();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        node3.setSourceEncodedPositionForTree(50);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node15.isDo();
        boolean boolean22 = node15.isDefaultCase();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node33 = node31.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) -1, node31, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        boolean boolean47 = node36.hasChild(node46);
        int int48 = node36.getCharno();
        com.google.javascript.rhino.Node node49 = node26.useSourceInfoIfMissingFrom(node36);
        int int50 = node26.getSourcePosition();
        java.lang.String str51 = node26.toString();
        int int52 = node15.getIndexOfChild(node26);
        int int53 = node10.getIndexOfChild(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str55 = jSDocInfo54.getVersion();
        boolean boolean56 = jSDocInfo54.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo54.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList58 = jSDocInfo54.getImplementedInterfaces();
        java.lang.String str59 = jSDocInfo54.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo54.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo54.getTypedefType();
        node10.setJSDocInfo(jSDocInfo54);
        boolean boolean64 = node10.isReturn();
        com.google.javascript.rhino.Node node65 = node10.cloneNode();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        node67.setLineno(15);
        int int70 = node67.getSourceOffset();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenAfter(node10, node67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4131 + "'", int50 == 4131);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "OR 1" + "'", str51, "OR 1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(jSTypeExpressionList58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "JSDocInfo" + "'", str59, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test18979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18979");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 16419, 24, 47);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test18980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18980");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnStartLine();
        int int3 = stringPosition0.getEndLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(0, 42, (int) (short) 100, 51);
        int int10 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test18981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18981");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        boolean boolean36 = node25.hasChild(node35);
        int int37 = node25.getCharno();
        com.google.javascript.rhino.Node node38 = node15.useSourceInfoIfMissingFrom(node25);
        int int39 = node15.getSourcePosition();
        java.lang.String str40 = node15.toString();
        int int41 = node4.getIndexOfChild(node15);
        boolean boolean42 = node4.isGetProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4131 + "'", int39 == 4131);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR 1" + "'", str40, "OR 1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test18982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18982");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        int int9 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test18983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18983");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        jSDocInfo0.addSuppression("STRING  0 [synthetic: 1]\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean8 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
    }

    @Test
    public void test18984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18984");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        boolean boolean16 = node4.isEmpty();
        com.google.javascript.rhino.Node node17 = node4.getParent();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node25.isDo();
        boolean boolean32 = node25.isDefaultCase();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        int int60 = node36.getSourcePosition();
        java.lang.String str61 = node36.toString();
        int int62 = node25.getIndexOfChild(node36);
        int int63 = node20.getIndexOfChild(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str65 = jSDocInfo64.getVersion();
        boolean boolean66 = jSDocInfo64.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet67 = jSDocInfo64.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList68 = jSDocInfo64.getImplementedInterfaces();
        java.lang.String str69 = jSDocInfo64.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo64.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = jSDocInfo64.getTypedefType();
        node20.setJSDocInfo(jSDocInfo64);
        boolean boolean74 = node20.isReturn();
        com.google.javascript.rhino.Node node75 = node20.cloneNode();
        com.google.javascript.rhino.Node node76 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean77 = node20.isHook();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4131 + "'", int60 == 4131);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "OR 1" + "'", str61, "OR 1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(jSTypeExpressionList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "JSDocInfo" + "'", str69, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertNull(jSTypeExpression72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test18985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18985");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        boolean boolean10 = jSDocInfo0.hasType();
        boolean boolean11 = jSDocInfo0.hasType();
        boolean boolean12 = jSDocInfo0.isConstant();
        boolean boolean13 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList14 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test18986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18986");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray4);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(29, nodeArray4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray4);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(12, nodeArray4, (int) (byte) 100, (int) '#');
        boolean boolean11 = node10.isDelProp();
        boolean boolean12 = node10.isWhile();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test18987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18987");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR 1 [length: 32]");
        com.google.javascript.rhino.InputId inputId2 = null;
        node1.setInputId(inputId2);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test18988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18988");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        boolean boolean5 = node3.isArrayLit();
        node3.addSuppression("true");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node3.new FileLevelJsDocBuilder();
        boolean boolean9 = node3.isTrue();
        int int10 = node3.getChildCount();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node24.hasChild(node34);
        int int36 = node24.getCharno();
        com.google.javascript.rhino.Node node37 = node14.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node42 = node14.srcref(node41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean47 = node46.isFromExterns();
        boolean boolean48 = node42.hasChild(node46);
        node42.setLineno((-1));
        node42.setSourceEncodedPosition(37);
        boolean boolean53 = node42.isHook();
        com.google.javascript.rhino.Node node54 = node3.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        int int65 = node64.getType();
        boolean boolean66 = node64.isDelProp();
        node64.setSourceFileForTesting("(ERROR 1)");
        com.google.javascript.rhino.Node node69 = node64.getLastChild();
        boolean boolean70 = node69.isSyntheticBlock();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenToFront(node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test18989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18989");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.intersection(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet4.intersection(booleanLiteralSet5);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = booleanLiteralSet3.intersection(booleanLiteralSet4);
        boolean boolean9 = booleanLiteralSet7.contains(false);
        boolean boolean11 = booleanLiteralSet7.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = booleanLiteralSet1.intersection(booleanLiteralSet7);
        boolean boolean14 = booleanLiteralSet7.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet17.intersection(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet16.intersection(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet15.union(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet17.union(booleanLiteralSet22);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet25.intersection(booleanLiteralSet26);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet24.intersection(booleanLiteralSet25);
        boolean boolean30 = booleanLiteralSet28.contains(false);
        boolean boolean32 = booleanLiteralSet28.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet17.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet35.intersection(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = booleanLiteralSet34.intersection(booleanLiteralSet35);
        boolean boolean40 = booleanLiteralSet38.contains(false);
        boolean boolean42 = booleanLiteralSet38.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet45.intersection(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = booleanLiteralSet44.intersection(booleanLiteralSet45);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = booleanLiteralSet43.union(booleanLiteralSet45);
        boolean boolean51 = booleanLiteralSet43.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = booleanLiteralSet38.union(booleanLiteralSet43);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = booleanLiteralSet33.union(booleanLiteralSet38);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = booleanLiteralSet7.intersection(booleanLiteralSet33);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test18990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18990");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        int int27 = node15.getCharno();
        com.google.javascript.rhino.Node node28 = node5.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        boolean boolean50 = node48.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((-1), node15, node48);
        com.google.javascript.rhino.Node node52 = node51.getParent();
        boolean boolean53 = node51.isSetterDef();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((-1), node51);
        boolean boolean55 = node54.isString();
        node54.putBooleanProp(131104, true);
        node54.setOptionalArg(true);
        boolean boolean61 = node54.isThrow();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test18991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18991");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        boolean boolean28 = node25.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFromForTree(node33);
        boolean boolean43 = node42.isVarArgs();
        com.google.javascript.rhino.Node node44 = node19.useSourceInfoIfMissingFrom(node42);
        int int45 = node19.getSourcePosition();
        java.lang.String str46 = node19.getSourceFileName();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node51.setCharno(1);
        boolean boolean54 = node51.isRegExp();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node59.isDo();
        boolean boolean66 = node59.isDefaultCase();
        node59.setQuotedString();
        com.google.javascript.rhino.Node node68 = node51.useSourceInfoFromForTree(node59);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node72.setCharno(1);
        java.util.Set<java.lang.String> strSet75 = node72.getDirectives();
        node72.setLength(0);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node84 = node82.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) -1, node82, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(0, node68, node72, node87, (int) 'a', (int) (short) 0);
        int int91 = node68.getLineno();
        boolean boolean92 = node68.isDefaultCase();
        com.google.javascript.rhino.Node node93 = node19.useSourceInfoIfMissingFrom(node68);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test18992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18992");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        boolean boolean24 = node19.isStringKey();
        node19.setOptionalArg(true);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean31 = node30.isThrow();
        java.lang.String str35 = node30.toString(true, false, true);
        java.lang.String str36 = node30.getQualifiedName();
        boolean boolean37 = node30.isIn();
        com.google.javascript.rhino.Node node38 = node30.cloneTree();
        boolean boolean39 = node38.isRegExp();
        boolean boolean40 = node38.isExprResult();
        com.google.javascript.rhino.Node node41 = node19.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int47 = node46.getSourcePosition();
        int int48 = node46.getType();
        com.google.javascript.rhino.Node node49 = node41.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str51 = jSDocInfo50.getVersion();
        java.lang.String str52 = jSDocInfo50.getFileOverview();
        jSDocInfo50.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo50.getExtendedInterfaces();
        boolean boolean56 = jSDocInfo50.isOverride();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo50.getModifies();
        node46.setDirectives(strSet57);
        com.google.javascript.rhino.Node node59 = node46.getLastChild();
        com.google.javascript.rhino.Node node61 = node46.getAncestor(4095);
        com.google.javascript.rhino.Node node63 = node46.getAncestor(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = node63.isWith();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "STRING  0" + "'", str35, "STRING  0");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 40 + "'", int48 == 40);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(node63);
    }

    @Test
    public void test18993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18993");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        boolean boolean10 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str11 = jSDocInfo0.getLendsName();
        java.lang.String str12 = jSDocInfo0.getReturnDescription();
        boolean boolean13 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getTypedefType();
        boolean boolean15 = jSDocInfo0.isConstructor();
        boolean boolean16 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test18994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18994");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node3.isSwitch();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        boolean boolean52 = node41.hasChild(node51);
        int int53 = node41.getCharno();
        com.google.javascript.rhino.Node node54 = node31.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node59 = node31.srcref(node58);
        boolean boolean60 = node59.isAssignAdd();
        int int61 = node3.getIndexOfChild(node59);
        com.google.javascript.rhino.Node node63 = node3.getAncestor(1);
        java.util.Set<java.lang.String> strSet64 = node3.getDirectives();
        boolean boolean65 = node3.isThis();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test18995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18995");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(213002, (int) 'a', 16);
    }

    @Test
    public void test18996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18996");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        int int27 = node15.getCharno();
        com.google.javascript.rhino.Node node28 = node5.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        boolean boolean50 = node48.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((-1), node15, node48);
        com.google.javascript.rhino.Node node52 = node51.getParent();
        boolean boolean53 = node51.isSetterDef();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(54, node51, 32, 32);
        boolean boolean57 = node56.isQuotedString();
        boolean boolean58 = node56.isQualifiedName();
        com.google.javascript.rhino.Node node59 = node56.getLastSibling();
        node56.addSuppression("STRING NUMBER 4095.0 100\n 4095");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test18997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18997");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.clearSideEffectFlags();
        sideEffectFlags0.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test18998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18998");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        boolean boolean8 = jSDocInfo0.isExpose();
        jSDocInfo0.setLicense("ERROR 1\n    STRING  0\n    STRING  0\n");
        boolean boolean11 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str13 = jSDocInfo12.getVersion();
        boolean boolean14 = jSDocInfo12.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo12.getParameterNames();
        jSDocInfo12.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection18 = jSDocInfo12.getTypeNodes();
        boolean boolean19 = jSDocInfo12.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo12.getThisType();
        java.lang.String str21 = jSDocInfo12.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str23 = jSDocInfo22.getVersion();
        boolean boolean24 = jSDocInfo22.hasEnumParameterType();
        boolean boolean25 = jSDocInfo22.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo22.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo22.setVisibility(visibility27);
        boolean boolean29 = jSDocInfo22.isJavaDispatch();
        jSDocInfo22.setLicense("Named type with empty name component");
        boolean boolean32 = jSDocInfo22.isInterface();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = jSDocInfo22.getVisibility();
        jSDocInfo12.setVisibility(visibility33);
        jSDocInfo0.setVisibility(visibility33);
        boolean boolean36 = jSDocInfo0.hasFileOverview();
        java.lang.String str37 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(nodeCollection18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test18999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test18999");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        boolean boolean10 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str11 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.Node node12 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getEnumParameterType();
        boolean boolean15 = jSDocInfo0.hasDescriptionForParameter("STRING hi! 1\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test19000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest37.test19000");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean11 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean13 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }
}


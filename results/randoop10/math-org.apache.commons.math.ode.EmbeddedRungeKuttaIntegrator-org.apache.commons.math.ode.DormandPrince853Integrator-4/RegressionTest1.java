import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        stepHandler18.handleStep(stepInterpolator19, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        java.lang.String str36 = dormandPrince853Integrator35.getName();
        dormandPrince853Integrator35.setSafety((double) 0L);
        dormandPrince853Integrator35.setMaxGrowth((double) 'a');
        int int41 = dormandPrince853Integrator35.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction42, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator35.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction54, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator53.setMinReduction(100.0d);
        double double61 = dormandPrince853Integrator53.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction62 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction62, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator53.getStepHandler();
        java.lang.String str68 = dormandPrince853Integrator53.getName();
        org.apache.commons.math.ode.StepHandler stepHandler69 = dormandPrince853Integrator53.getStepHandler();
        dormandPrince853Integrator35.setStepHandler(stepHandler69);
        dormandPrince853Integrator4.setStepHandler(stepHandler69);
        boolean boolean72 = stepHandler69.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator73 = null;
        stepHandler69.handleStep(stepInterpolator73, false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str68, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (-0.0d), (double) (short) 10, (double) 1);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        double double23 = switchingFunctionsHandler0.getEventTime();
        boolean boolean24 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray33 = new double[] { Double.NaN };
        double[] doubleArray42 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray45 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray42, doubleArray45);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray33, doubleArray42);
        double[] doubleArray56 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray59 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray56, doubleArray59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray33, doubleArray56);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler62 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator63 = null;
        boolean boolean64 = switchingFunctionsHandler62.evaluateStep(stepInterpolator63);
        double[] doubleArray74 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray77 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray74, doubleArray77);
        switchingFunctionsHandler62.stepAccepted(100.0d, doubleArray74);
        boolean boolean80 = switchingFunctionsHandler62.isEmpty();
        double[] doubleArray90 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray93 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray90, doubleArray93);
        boolean boolean95 = switchingFunctionsHandler62.reset(10.0d, doubleArray93);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 3, doubleArray33, doubleArray93);
        switchingFunctionsHandler0.stepAccepted(0.2d, doubleArray33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        double double19 = dormandPrince853Integrator17.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction20, 0.0d, 0.9d, 100);
        double double25 = dormandPrince853Integrator17.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.2d + "'", double19 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (-1.0d), (double) (-1), (int) '#');
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations16 = null;
        double[] doubleArray18 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        boolean boolean28 = switchingFunctionsHandler26.evaluateStep(stepInterpolator27);
        double[] doubleArray38 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray41 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray38, doubleArray41);
        switchingFunctionsHandler26.stepAccepted(100.0d, doubleArray38);
        switchingFunctionsHandler24.stepAccepted((double) (short) 1, doubleArray38);
        double[] doubleArray48 = new double[] { Double.NaN };
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray48, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray38, doubleArray48);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler64 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean65 = switchingFunctionsHandler64.stop();
        double double66 = switchingFunctionsHandler64.getEventTime();
        double[] doubleArray71 = new double[] { Double.NaN };
        double[] doubleArray80 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray83 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray80, doubleArray83);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray71, doubleArray80);
        switchingFunctionsHandler64.stepAccepted(0.2d, doubleArray71);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) -1, doubleArray38, doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations16, 0.6324555320336759d, doubleArray18, (double) (-1), doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.9, 0.0]");
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        boolean boolean21 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction12, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator11.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator11.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator20 = null;
        stepHandler19.handleStep(stepInterpolator20, false);
        stepHandler19.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler19);
        int int25 = dormandPrince853Integrator4.getOrder();
        int int26 = dormandPrince853Integrator4.getOrder();
        int int27 = dormandPrince853Integrator4.getOrder();
        double double28 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        int int17 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (byte) -1);
        double double20 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        int int16 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double22 = dormandPrince853Integrator21.getSafety();
        double double23 = dormandPrince853Integrator21.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction29, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator28.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator28.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        stepHandler36.handleStep(stepInterpolator37, false);
        stepHandler36.reset();
        dormandPrince853Integrator21.setStepHandler(stepHandler36);
        boolean boolean42 = stepHandler36.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler36);
        java.lang.String str44 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double double19 = switchingFunctionsHandler0.getEventTime();
        boolean boolean20 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler22 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean23 = switchingFunctionsHandler22.stop();
        double double24 = switchingFunctionsHandler22.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        boolean boolean28 = switchingFunctionsHandler26.evaluateStep(stepInterpolator27);
        double[] doubleArray38 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray41 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray38, doubleArray41);
        switchingFunctionsHandler26.stepAccepted(100.0d, doubleArray38);
        switchingFunctionsHandler22.stepAccepted(10.0d, doubleArray38);
        boolean boolean45 = switchingFunctionsHandler22.isEmpty();
        double double46 = switchingFunctionsHandler22.getEventTime();
        double[] doubleArray53 = new double[] { Double.NaN };
        double[] doubleArray62 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray65 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray62, doubleArray65);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray53, doubleArray62);
        double[] doubleArray76 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray79 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray76, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray53, doubleArray76);
        boolean boolean82 = switchingFunctionsHandler22.reset((double) (short) 1, doubleArray76);
        switchingFunctionsHandler0.stepAccepted((double) (byte) 0, doubleArray76);
        boolean boolean84 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator85 = null;
        boolean boolean86 = switchingFunctionsHandler0.evaluateStep(stepInterpolator85);
        boolean boolean87 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction(97.0d);
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations15 = null;
        double[] doubleArray17 = null;
        double[] doubleArray29 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray32 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray29, doubleArray32);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler38 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        boolean boolean40 = switchingFunctionsHandler38.evaluateStep(stepInterpolator39);
        double[] doubleArray50 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray53 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray50, doubleArray53);
        switchingFunctionsHandler38.stepAccepted(100.0d, doubleArray50);
        switchingFunctionsHandler36.stepAccepted((double) (short) 1, doubleArray50);
        double[] doubleArray60 = new double[] { Double.NaN };
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray60, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray50, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, (double) (-1.0f), doubleArray29, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations15, (double) (-1), doubleArray17, 31.622776601683793d, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean3 = switchingFunctionsHandler2.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler2.evaluateStep(stepInterpolator4);
        double[] doubleArray7 = new double[] {};
        switchingFunctionsHandler2.stepAccepted((double) 100L, doubleArray7);
        double[] doubleArray14 = new double[] { Double.NaN };
        double[] doubleArray23 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray26 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray23, doubleArray26);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray14, doubleArray23);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler31 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler33 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator34 = null;
        boolean boolean35 = switchingFunctionsHandler33.evaluateStep(stepInterpolator34);
        double[] doubleArray45 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray48 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray45, doubleArray48);
        switchingFunctionsHandler33.stepAccepted(100.0d, doubleArray45);
        switchingFunctionsHandler31.stepAccepted((double) (short) 1, doubleArray45);
        double[] doubleArray55 = new double[] { Double.NaN };
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray55, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray45, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) 0.0f, doubleArray23, doubleArray45);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.0d, (double) (short) 1, doubleArray7, doubleArray23);
        dormandPrince853Integrator72.setMaxGrowth((double) (byte) 1);
        dormandPrince853Integrator72.setSafety((double) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (-1.0d), (double) (-1), (int) '#');
        double double15 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction((double) 2);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction18, (double) (short) 100, (double) (short) -1, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 0);
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations20 = null;
        double[] doubleArray22 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler28 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        boolean boolean30 = switchingFunctionsHandler28.evaluateStep(stepInterpolator29);
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        switchingFunctionsHandler28.stepAccepted(100.0d, doubleArray40);
        switchingFunctionsHandler26.stepAccepted((double) (short) 1, doubleArray40);
        double[] doubleArray50 = new double[] { Double.NaN };
        double[] doubleArray59 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray62 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray59, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray50, doubleArray59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray40, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations20, (double) 1.0f, doubleArray22, 14.142135623730951d, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.9, 0.0]");
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        int int17 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        stepHandler20.reset();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(stepHandler20);
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction2 = null;
        switchingFunctionsHandler0.add(switchingFunction2, (double) 2, 35.0d, (int) (byte) 1);
        double double7 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler11 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        boolean boolean13 = switchingFunctionsHandler11.evaluateStep(stepInterpolator12);
        double[] doubleArray23 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray26 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray23, doubleArray26);
        switchingFunctionsHandler11.stepAccepted(100.0d, doubleArray23);
        boolean boolean29 = switchingFunctionsHandler11.isEmpty();
        double[] doubleArray39 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray42 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray39, doubleArray42);
        boolean boolean44 = switchingFunctionsHandler11.reset(10.0d, doubleArray42);
        boolean boolean45 = switchingFunctionsHandler11.stop();
        double double46 = switchingFunctionsHandler11.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler48 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean49 = switchingFunctionsHandler48.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler51 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator52 = null;
        boolean boolean53 = switchingFunctionsHandler51.evaluateStep(stepInterpolator52);
        double[] doubleArray63 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray66 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray63, doubleArray66);
        switchingFunctionsHandler51.stepAccepted(100.0d, doubleArray63);
        switchingFunctionsHandler48.stepAccepted((double) (short) 10, doubleArray63);
        boolean boolean70 = switchingFunctionsHandler11.reset((double) (byte) 1, doubleArray63);
        double[] doubleArray71 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, 17.320508075688775d, doubleArray63, doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(14.142135623730951d, doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double[] doubleArray22 = new double[] { Double.NaN };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray22, doubleArray31);
        boolean boolean37 = switchingFunctionsHandler0.reset(100.0d, doubleArray22);
        double double38 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        switchingFunctionsHandler0.add(switchingFunction39, 14.142135623730951d, (double) 'a', 100);
        double double44 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler46 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean47 = switchingFunctionsHandler46.stop();
        double double48 = switchingFunctionsHandler46.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler50 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator51 = null;
        boolean boolean52 = switchingFunctionsHandler50.evaluateStep(stepInterpolator51);
        double[] doubleArray62 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray65 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray62, doubleArray65);
        switchingFunctionsHandler50.stepAccepted(100.0d, doubleArray62);
        switchingFunctionsHandler46.stepAccepted(10.0d, doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted((double) (byte) 1, doubleArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.9, 0.0]");
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double31 = dormandPrince853Integrator4.getMaxGrowth();
        int int32 = dormandPrince853Integrator4.getOrder();
        int int33 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) 10.0f, (double) 10.0f, (double) (byte) 10);
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator38.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler39);
        stepHandler39.reset();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(stepHandler39);
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        double double21 = switchingFunctionsHandler0.getEventTime();
        boolean boolean22 = switchingFunctionsHandler0.stop();
        double[] doubleArray31 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray31, doubleArray40);
        switchingFunctionsHandler0.stepAccepted((double) (-1), doubleArray40);
        boolean boolean47 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        double double25 = dormandPrince853Integrator17.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction26, (double) 3, (double) (-1L), (int) (byte) -1);
        double double31 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction32, (double) (-1), (double) 1.0f, 8);
        java.lang.String str37 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        java.lang.Class<?> wildcardClass40 = stepHandler38.getClass();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        stepHandler18.handleStep(stepInterpolator19, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double23 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        double double26 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0L);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety(14.142135623730951d);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double18 = dormandPrince853Integrator4.getCurrentStepStart();
        double double19 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.2d + "'", double19 == 0.2d);
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) ' ', (double) (short) 0, (int) '#');
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction20, 1.0d, (double) 2, (int) (byte) 1);
        java.lang.Class<?> wildcardClass25 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        stepHandler18.handleStep(stepInterpolator19, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double23 = dormandPrince853Integrator4.getMinStep();
        double double24 = dormandPrince853Integrator4.getMinStep();
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        double double26 = dormandPrince853Integrator4.getSafety();
        java.lang.String str27 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction34, 14.142135623730951d, 0.2d, (int) (short) 10);
        java.lang.String str39 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction40, (double) 10, 14.142135623730951d, 10);
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator12.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str39, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler45);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        switchingFunctionsHandler0.add(switchingFunction21, (double) (byte) -1, (double) (byte) -1, 2);
        boolean boolean26 = switchingFunctionsHandler0.stop();
        boolean boolean27 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        switchingFunctionsHandler0.add(switchingFunction28, (double) 10.0f, (double) 100.0f, (int) 'a');
        double double33 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = switchingFunctionsHandler0.evaluateStep(stepInterpolator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        dormandPrince853Integrator4.setMaxGrowth(35.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        int int16 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 0);
        double double19 = dormandPrince853Integrator4.getMaxStep();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        java.lang.String str33 = dormandPrince853Integrator32.getName();
        dormandPrince853Integrator32.setMinReduction(0.9d);
        java.lang.String str36 = dormandPrince853Integrator32.getName();
        double double37 = dormandPrince853Integrator32.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator32.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        stepHandler38.handleStep(stepInterpolator39, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        double double43 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.9d + "'", double37 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        double double17 = dormandPrince853Integrator12.getMaxGrowth();
        double double18 = dormandPrince853Integrator12.getMaxStep();
        java.lang.Class<?> wildcardClass19 = dormandPrince853Integrator12.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 100.0f, (double) 1, 8.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations6 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler8 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean9 = switchingFunctionsHandler8.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler11 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        boolean boolean13 = switchingFunctionsHandler11.evaluateStep(stepInterpolator12);
        double[] doubleArray23 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray26 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray23, doubleArray26);
        switchingFunctionsHandler11.stepAccepted(100.0d, doubleArray23);
        switchingFunctionsHandler8.stepAccepted((double) (short) 10, doubleArray23);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler31 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean32 = switchingFunctionsHandler31.stop();
        double double33 = switchingFunctionsHandler31.getEventTime();
        double[] doubleArray38 = new double[] { Double.NaN };
        double[] doubleArray47 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray50 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray47, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray38, doubleArray47);
        switchingFunctionsHandler31.stepAccepted(0.2d, doubleArray38);
        boolean boolean54 = switchingFunctionsHandler8.reset((double) (byte) -1, doubleArray38);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler56 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator57 = null;
        boolean boolean58 = switchingFunctionsHandler56.evaluateStep(stepInterpolator57);
        double[] doubleArray68 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray71 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray68, doubleArray71);
        switchingFunctionsHandler56.stepAccepted(100.0d, doubleArray68);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler75 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean76 = switchingFunctionsHandler75.stop();
        double double77 = switchingFunctionsHandler75.getEventTime();
        double[] doubleArray82 = new double[] { Double.NaN };
        double[] doubleArray91 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray94 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator95 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray91, doubleArray94);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray82, doubleArray91);
        switchingFunctionsHandler75.stepAccepted(0.2d, doubleArray82);
        boolean boolean98 = switchingFunctionsHandler56.reset((double) 'a', doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations6, 14.142135623730951d, doubleArray38, (double) (short) 0, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        double double13 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator12.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator12.getStepHandler();
        double double16 = dormandPrince853Integrator12.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9486832980505138d + "'", double13 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2d + "'", double16 == 0.2d);
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        boolean boolean33 = switchingFunctionsHandler0.reset(10.0d, doubleArray31);
        boolean boolean34 = switchingFunctionsHandler0.stop();
        double double35 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler37 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean38 = switchingFunctionsHandler37.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler40 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator41 = null;
        boolean boolean42 = switchingFunctionsHandler40.evaluateStep(stepInterpolator41);
        double[] doubleArray52 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray55 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray52, doubleArray55);
        switchingFunctionsHandler40.stepAccepted(100.0d, doubleArray52);
        switchingFunctionsHandler37.stepAccepted((double) (short) 10, doubleArray52);
        boolean boolean59 = switchingFunctionsHandler0.reset((double) (byte) 1, doubleArray52);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction60 = null;
        switchingFunctionsHandler0.add(switchingFunction60, (double) (-1L), 31.622776601683793d, 8);
        java.lang.Class<?> wildcardClass65 = switchingFunctionsHandler0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        int int16 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        stepHandler17.reset();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(stepHandler17);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        int int14 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) 100L, (double) 10L, (int) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        double double21 = dormandPrince853Integrator4.getMinStep();
        int int22 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        double double13 = dormandPrince853Integrator4.getSafety();
        int int14 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        double[] doubleArray7 = new double[] { Double.NaN };
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray7, doubleArray16);
        double[] doubleArray30 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray33 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray30, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray7, doubleArray30);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        boolean boolean38 = switchingFunctionsHandler36.evaluateStep(stepInterpolator37);
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        switchingFunctionsHandler36.stepAccepted(100.0d, doubleArray48);
        boolean boolean54 = switchingFunctionsHandler36.isEmpty();
        double double55 = switchingFunctionsHandler36.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler57 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean58 = switchingFunctionsHandler57.stop();
        double double59 = switchingFunctionsHandler57.getEventTime();
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        switchingFunctionsHandler57.stepAccepted(0.2d, doubleArray64);
        boolean boolean80 = switchingFunctionsHandler36.reset((double) '4', doubleArray64);
        double[] doubleArray90 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray93 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray90, doubleArray93);
        boolean boolean95 = switchingFunctionsHandler36.reset((double) (-1), doubleArray93);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 100.0d, doubleArray7, doubleArray93);
        double double97 = dormandPrince853Integrator96.getCurrentSignedStepsize();
        int int98 = dormandPrince853Integrator96.getOrder();
        double double99 = dormandPrince853Integrator96.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 8 + "'", int98 == 8);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 100.0d + "'", double99 == 100.0d);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        dormandPrince853Integrator12.setMinReduction((double) (short) 100);
        double double18 = dormandPrince853Integrator12.getMaxStep();
        double double19 = dormandPrince853Integrator12.getSafety();
        double double20 = dormandPrince853Integrator12.getSafety();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 35.0d, (double) 0.0f, 8);
        boolean boolean28 = switchingFunctionsHandler0.isEmpty();
        double double29 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double[] doubleArray24 = null;
        boolean boolean25 = switchingFunctionsHandler0.reset((double) 0L, doubleArray24);
        double double26 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler0.add(switchingFunction27, 14.142135623730951d, (double) 0.0f, (int) '#');
        boolean boolean32 = switchingFunctionsHandler0.isEmpty();
        double double33 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        switchingFunctionsHandler0.add(switchingFunction34, 17.320508075688775d, (double) (byte) 0, (int) 'a');
        double double39 = switchingFunctionsHandler0.getEventTime();
        boolean boolean40 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        switchingFunctionsHandler0.add(switchingFunction41, (double) 1, Double.NaN, (int) (byte) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        switchingFunctionsHandler0.add(switchingFunction46, (double) 100, 0.0d, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) 0, (double) 10L, (double) ' ');
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety((double) ' ');
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 0);
        double double18 = dormandPrince853Integrator4.getMaxStep();
        double double19 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 1.0d, (double) 100.0f, (double) (-1.0f));
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, 97.0d, (double) 'a', 2);
        dormandPrince853Integrator4.setMaxGrowth((double) '#');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction13, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double18 = dormandPrince853Integrator11.getSafety();
        double double19 = dormandPrince853Integrator11.getMaxGrowth();
        double double20 = dormandPrince853Integrator11.getCurrentStepStart();
        double double21 = dormandPrince853Integrator11.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator11.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator27.addSwitchingFunction(switchingFunction28, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator27.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator27.getStepHandler();
        boolean boolean36 = stepHandler35.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        stepHandler35.handleStep(stepInterpolator37, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator4.getStepHandler();
        double double43 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 14.142135623730951d + "'", double43 == 14.142135623730951d);
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 1.0f, (double) 0, (int) (byte) 0);
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) (-1), 97.0d, 1);
        int int16 = dormandPrince853Integrator4.getOrder();
        double[] doubleArray25 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray28 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray25, doubleArray28);
        java.lang.String str30 = dormandPrince853Integrator29.getName();
        dormandPrince853Integrator29.setMinReduction(0.9d);
        dormandPrince853Integrator29.setSafety((double) (-1.0f));
        dormandPrince853Integrator29.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction42, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator41.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator41.getStepHandler();
        boolean boolean50 = stepHandler49.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator51 = null;
        stepHandler49.handleStep(stepInterpolator51, false);
        dormandPrince853Integrator29.setStepHandler(stepHandler49);
        double double55 = dormandPrince853Integrator29.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction61 = null;
        dormandPrince853Integrator60.addSwitchingFunction(switchingFunction61, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator60.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator60.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator69 = null;
        stepHandler68.handleStep(stepInterpolator69, false);
        boolean boolean72 = stepHandler68.requiresDenseOutput();
        stepHandler68.reset();
        dormandPrince853Integrator29.setStepHandler(stepHandler68);
        org.apache.commons.math.ode.StepHandler stepHandler75 = dormandPrince853Integrator29.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler75);
        stepHandler75.reset();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.9d + "'", double55 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(stepHandler75);
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction25, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator24.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator24.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        stepHandler32.handleStep(stepInterpolator33, false);
        dormandPrince853Integrator18.setStepHandler(stepHandler32);
        boolean boolean37 = stepHandler32.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator4.getStepHandler();
        stepHandler39.reset();
        stepHandler39.reset();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(stepHandler39);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        boolean boolean22 = switchingFunctionsHandler4.isEmpty();
        double[] doubleArray32 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray35 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray32, doubleArray35);
        boolean boolean37 = switchingFunctionsHandler4.reset(10.0d, doubleArray35);
        double[] doubleArray41 = new double[] { Double.NaN };
        double[] doubleArray50 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray53 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray50, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray41, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray35, doubleArray50);
        double[] doubleArray64 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray64, doubleArray73);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 0.0d, doubleArray50, doubleArray73);
        double double80 = dormandPrince853Integrator79.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.0d) + "'", double80 == (-0.0d));
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        stepHandler20.handleStep(stepInterpolator21, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        stepHandler20.handleStep(stepInterpolator24, true);
        stepHandler20.reset();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler20);
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (short) -1, (double) 0L, (double) 8);
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) 1L, 0.0d, (double) (-1));
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations6 = null;
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        boolean boolean42 = switchingFunctionsHandler24.isEmpty();
        double[] doubleArray52 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray55 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray52, doubleArray55);
        boolean boolean57 = switchingFunctionsHandler24.reset(10.0d, doubleArray55);
        boolean boolean58 = switchingFunctionsHandler24.stop();
        double double59 = switchingFunctionsHandler24.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler61 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean62 = switchingFunctionsHandler61.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler64 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator65 = null;
        boolean boolean66 = switchingFunctionsHandler64.evaluateStep(stepInterpolator65);
        double[] doubleArray76 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray79 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray76, doubleArray79);
        switchingFunctionsHandler64.stepAccepted(100.0d, doubleArray76);
        switchingFunctionsHandler61.stepAccepted((double) (short) 10, doubleArray76);
        boolean boolean83 = switchingFunctionsHandler24.reset((double) (byte) 1, doubleArray76);
        double[] doubleArray84 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, 17.320508075688775d, doubleArray76, doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations6, (double) 2, doubleArray19, (double) (byte) -1, doubleArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) -1, (double) (byte) -1, (double) 0L);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        stepHandler16.reset();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        org.apache.commons.math.ode.StepHandler stepHandler18 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        java.lang.String str20 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (-1.0f));
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, (double) 0.0f, (double) 10L, (int) (short) 100);
        boolean boolean28 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = switchingFunctionsHandler0.evaluateStep(stepInterpolator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        java.lang.String str24 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator29.addSwitchingFunction(switchingFunction30, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator29.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator29.getStepHandler();
        boolean boolean38 = stepHandler37.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        stepHandler37.handleStep(stepInterpolator39, false);
        dormandPrince853Integrator12.setStepHandler(stepHandler37);
        stepHandler37.reset();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 10);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        double[] doubleArray2 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean4 = switchingFunctionsHandler3.stop();
        double double5 = switchingFunctionsHandler3.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        switchingFunctionsHandler3.add(switchingFunction6, (double) (byte) 0, (double) 10.0f, 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        switchingFunctionsHandler3.add(switchingFunction11, (double) (byte) 1, (double) (byte) 100, (int) (short) 1);
        boolean boolean16 = switchingFunctionsHandler3.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        switchingFunctionsHandler3.add(switchingFunction17, 0.0d, (double) 1L, (int) (byte) 10);
        boolean boolean22 = switchingFunctionsHandler3.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean25 = switchingFunctionsHandler24.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler29 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        boolean boolean31 = switchingFunctionsHandler29.evaluateStep(stepInterpolator30);
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        switchingFunctionsHandler29.stepAccepted(100.0d, doubleArray41);
        boolean boolean47 = switchingFunctionsHandler29.isEmpty();
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        boolean boolean62 = switchingFunctionsHandler29.reset(10.0d, doubleArray60);
        double[] doubleArray66 = new double[] { Double.NaN };
        double[] doubleArray75 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray78 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray75, doubleArray78);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray66, doubleArray75);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray60, doubleArray75);
        switchingFunctionsHandler24.stepAccepted(0.9d, doubleArray60);
        boolean boolean83 = switchingFunctionsHandler3.reset((double) 10L, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, 5.916079783099616d, doubleArray2, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        double double90 = dormandPrince853Integrator89.getCurrentStepStart();
        double double91 = dormandPrince853Integrator89.getMinReduction();
        dormandPrince853Integrator89.setSafety(1.0d);
        org.apache.commons.math.ode.StepHandler stepHandler94 = dormandPrince853Integrator89.getStepHandler();
        dormandPrince853Integrator84.setStepHandler(stepHandler94);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.2d + "'", double91 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler94);
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        double double22 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double23 = dormandPrince853Integrator4.getMinStep();
        double double24 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction34, 14.142135623730951d, 0.2d, (int) (short) 10);
        double[] doubleArray47 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray50 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray47, doubleArray50);
        java.lang.String str52 = dormandPrince853Integrator51.getName();
        dormandPrince853Integrator51.setMinReduction(0.9d);
        java.lang.String str55 = dormandPrince853Integrator51.getName();
        double double56 = dormandPrince853Integrator51.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator51.getStepHandler();
        int int58 = dormandPrince853Integrator51.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler59 = dormandPrince853Integrator51.getStepHandler();
        double double60 = dormandPrince853Integrator51.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction66 = null;
        dormandPrince853Integrator65.addSwitchingFunction(switchingFunction66, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator65.setMinReduction(100.0d);
        double double73 = dormandPrince853Integrator65.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction74 = null;
        dormandPrince853Integrator65.addSwitchingFunction(switchingFunction74, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler79 = dormandPrince853Integrator65.getStepHandler();
        java.lang.String str80 = dormandPrince853Integrator65.getName();
        org.apache.commons.math.ode.StepHandler stepHandler81 = dormandPrince853Integrator65.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator82 = null;
        stepHandler81.handleStep(stepInterpolator82, true);
        stepHandler81.reset();
        boolean boolean86 = stepHandler81.requiresDenseOutput();
        dormandPrince853Integrator51.setStepHandler(stepHandler81);
        dormandPrince853Integrator12.setStepHandler(stepHandler81);
        java.lang.Class<?> wildcardClass89 = stepHandler81.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str52, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str55, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.9d + "'", double56 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(stepHandler59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 10.0d + "'", double73 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str80, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        double double17 = dormandPrince853Integrator12.getMaxGrowth();
        double double18 = dormandPrince853Integrator12.getMaxGrowth();
        double double19 = dormandPrince853Integrator12.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 3, (double) (byte) 0, (double) 100.0f);
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        java.lang.String str14 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 1L);
        dormandPrince853Integrator12.setMaxGrowth(13.92838827718412d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (-1L), (double) ' ', (int) (byte) 1);
        int int19 = dormandPrince853Integrator4.getOrder();
        int int20 = dormandPrince853Integrator4.getOrder();
        int int21 = dormandPrince853Integrator4.getOrder();
        int int22 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 10L, 0.9486832980505138d, (int) (byte) -1);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, (double) 8, (double) 100.0f, 1);
        double double24 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.2d + "'", double24 == 0.2d);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        stepHandler15.reset();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler15);
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        boolean boolean22 = switchingFunctionsHandler0.evaluateStep(stepInterpolator21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler29 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        boolean boolean31 = switchingFunctionsHandler29.evaluateStep(stepInterpolator30);
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        switchingFunctionsHandler29.stepAccepted(100.0d, doubleArray41);
        boolean boolean47 = switchingFunctionsHandler29.isEmpty();
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        boolean boolean62 = switchingFunctionsHandler29.reset(10.0d, doubleArray60);
        boolean boolean63 = switchingFunctionsHandler0.reset((double) 10, doubleArray60);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler65 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler67 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator68 = null;
        boolean boolean69 = switchingFunctionsHandler67.evaluateStep(stepInterpolator68);
        double[] doubleArray79 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray82 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray79, doubleArray82);
        switchingFunctionsHandler67.stepAccepted(100.0d, doubleArray79);
        switchingFunctionsHandler65.stepAccepted((double) (short) 1, doubleArray79);
        boolean boolean86 = switchingFunctionsHandler0.reset((double) 0.0f, doubleArray79);
        double double87 = switchingFunctionsHandler0.getEventTime();
        double double88 = switchingFunctionsHandler0.getEventTime();
        double double89 = switchingFunctionsHandler0.getEventTime();
        boolean boolean90 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = switchingFunctionsHandler0.evaluateStep(stepInterpolator91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, (double) 0.0f, (double) 10L, (int) (short) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        switchingFunctionsHandler0.add(switchingFunction28, (double) 1L, (double) (short) 0, (int) (byte) -1);
        boolean boolean33 = switchingFunctionsHandler0.isEmpty();
        boolean boolean34 = switchingFunctionsHandler0.isEmpty();
        boolean boolean35 = switchingFunctionsHandler0.stop();
        boolean boolean36 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = switchingFunctionsHandler0.evaluateStep(stepInterpolator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator12.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction31, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator30.setMinReduction(100.0d);
        double double38 = dormandPrince853Integrator30.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction39, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator30.getStepHandler();
        java.lang.String str45 = dormandPrince853Integrator30.getName();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator30.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler46);
        double double48 = dormandPrince853Integrator12.getCurrentStepStart();
        double double49 = dormandPrince853Integrator12.getCurrentStepStart();
        dormandPrince853Integrator12.setMaxGrowth((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        int int13 = dormandPrince853Integrator4.getOrder();
        int int14 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (short) 10);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler17);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        double double23 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        switchingFunctionsHandler0.add(switchingFunction24, (double) (byte) 10, 0.0d, (int) '4');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        switchingFunctionsHandler0.add(switchingFunction29, (double) (-1L), (double) (byte) 1, (int) (byte) 10);
        java.lang.Class<?> wildcardClass34 = switchingFunctionsHandler0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler14 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler14);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        double double3 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler7 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean8 = switchingFunctionsHandler7.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler10 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        boolean boolean12 = switchingFunctionsHandler10.evaluateStep(stepInterpolator11);
        double[] doubleArray22 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray25 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray22, doubleArray25);
        switchingFunctionsHandler10.stepAccepted(100.0d, doubleArray22);
        switchingFunctionsHandler7.stepAccepted((double) (short) 10, doubleArray22);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        switchingFunctionsHandler7.add(switchingFunction29, (double) (byte) 10, (double) 100, 0);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler35 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator36 = null;
        boolean boolean37 = switchingFunctionsHandler35.evaluateStep(stepInterpolator36);
        double[] doubleArray47 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray50 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray47, doubleArray50);
        switchingFunctionsHandler35.stepAccepted(100.0d, doubleArray47);
        boolean boolean53 = switchingFunctionsHandler35.isEmpty();
        double double54 = switchingFunctionsHandler35.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler56 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean57 = switchingFunctionsHandler56.stop();
        double double58 = switchingFunctionsHandler56.getEventTime();
        double[] doubleArray63 = new double[] { Double.NaN };
        double[] doubleArray72 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray75 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray72, doubleArray75);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray63, doubleArray72);
        switchingFunctionsHandler56.stepAccepted(0.2d, doubleArray63);
        boolean boolean79 = switchingFunctionsHandler35.reset((double) '4', doubleArray63);
        double[] doubleArray89 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray92 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray89, doubleArray92);
        boolean boolean94 = switchingFunctionsHandler35.reset((double) (-1), doubleArray92);
        boolean boolean95 = switchingFunctionsHandler7.reset((double) 0, doubleArray92);
        double[] doubleArray96 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator97 = new org.apache.commons.math.ode.DormandPrince853Integrator(31.622776601683793d, (double) '#', doubleArray92, doubleArray96);
        boolean boolean98 = switchingFunctionsHandler0.reset((double) (-1.0f), doubleArray96);
        boolean boolean99 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        stepHandler5.handleStep(stepInterpolator6, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        stepHandler5.handleStep(stepInterpolator9, false);
        boolean boolean12 = stepHandler5.requiresDenseOutput();
        stepHandler5.reset();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction16, (double) (-1.0f), (double) (byte) 0, (int) (short) -1);
        int int21 = dormandPrince853Integrator12.getOrder();
        double double22 = dormandPrince853Integrator12.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        double[] doubleArray7 = new double[] { Double.NaN };
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray7, doubleArray16);
        double[] doubleArray30 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray33 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray30, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray7, doubleArray30);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        boolean boolean38 = switchingFunctionsHandler36.evaluateStep(stepInterpolator37);
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        switchingFunctionsHandler36.stepAccepted(100.0d, doubleArray48);
        boolean boolean54 = switchingFunctionsHandler36.isEmpty();
        double double55 = switchingFunctionsHandler36.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler57 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean58 = switchingFunctionsHandler57.stop();
        double double59 = switchingFunctionsHandler57.getEventTime();
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        switchingFunctionsHandler57.stepAccepted(0.2d, doubleArray64);
        boolean boolean80 = switchingFunctionsHandler36.reset((double) '4', doubleArray64);
        double[] doubleArray90 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray93 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray90, doubleArray93);
        boolean boolean95 = switchingFunctionsHandler36.reset((double) (-1), doubleArray93);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 100.0d, doubleArray7, doubleArray93);
        java.lang.String str97 = dormandPrince853Integrator96.getName();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str97, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        int int13 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        stepHandler14.handleStep(stepInterpolator15, true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(stepHandler14);
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction(3.0d);
        java.lang.Class<?> wildcardClass8 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler24);
        int int26 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations27 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler29 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean30 = switchingFunctionsHandler29.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        boolean boolean32 = switchingFunctionsHandler29.evaluateStep(stepInterpolator31);
        double[] doubleArray34 = new double[] {};
        switchingFunctionsHandler29.stepAccepted((double) 100L, doubleArray34);
        double[] doubleArray37 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator12.integrate(firstOrderDifferentialEquations27, (double) (short) 0, doubleArray34, (double) (short) 0, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean3 = switchingFunctionsHandler2.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler5 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        boolean boolean7 = switchingFunctionsHandler5.evaluateStep(stepInterpolator6);
        double[] doubleArray17 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray20 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray17, doubleArray20);
        switchingFunctionsHandler5.stepAccepted(100.0d, doubleArray17);
        switchingFunctionsHandler2.stepAccepted((double) (short) 10, doubleArray17);
        boolean boolean24 = switchingFunctionsHandler2.isEmpty();
        boolean boolean25 = switchingFunctionsHandler2.isEmpty();
        double[] doubleArray34 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray43 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray46 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray43, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray34, doubleArray43);
        boolean boolean49 = switchingFunctionsHandler2.reset((double) (short) 0, doubleArray34);
        double[] doubleArray55 = new double[] { Double.NaN };
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray55, doubleArray64);
        double[] doubleArray77 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray86 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray89 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray86, doubleArray89);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray77, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (-1.0f), doubleArray55, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (-1L), doubleArray34, doubleArray55);
        java.lang.String str94 = dormandPrince853Integrator93.getName();
        dormandPrince853Integrator93.setMaxGrowth((double) 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str94, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        double[] doubleArray5 = new double[] { Double.NaN };
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray5, doubleArray14);
        double[] doubleArray27 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray27, doubleArray36);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (-1.0f), doubleArray5, doubleArray27);
        int int43 = dormandPrince853Integrator42.getOrder();
        double double44 = dormandPrince853Integrator42.getCurrentSignedStepsize();
        int int45 = dormandPrince853Integrator42.getOrder();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-0.0d) + "'", double44 == (-0.0d));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) -1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 1.0f, (double) '#', (int) (short) 0);
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double7 = dormandPrince853Integrator6.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction8, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double13 = dormandPrince853Integrator6.getSafety();
        double double14 = dormandPrince853Integrator6.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction20, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator19.setMinReduction(100.0d);
        double double27 = dormandPrince853Integrator19.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double33 = dormandPrince853Integrator32.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator32.addSwitchingFunction(switchingFunction34, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double39 = dormandPrince853Integrator32.getCurrentStepStart();
        dormandPrince853Integrator32.setInitialStepSize((double) 0.0f);
        java.lang.String str42 = dormandPrince853Integrator32.getName();
        java.io.IOException iOException44 = new java.io.IOException("hi!");
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray47, throwable48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException49);
        java.lang.String str51 = mathException50.getPattern();
        java.lang.Object[] objArray52 = mathException50.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException53 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray52);
        double[] doubleArray62 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray65 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray62, doubleArray65);
        java.lang.String str67 = dormandPrince853Integrator66.getName();
        dormandPrince853Integrator66.setMinReduction(0.9d);
        java.lang.String str70 = dormandPrince853Integrator66.getName();
        java.lang.Object[] objArray71 = new java.lang.Object[] { double14, double27, dormandPrince853Integrator32, "hi!", objArray52, dormandPrince853Integrator66 };
        java.lang.Object[] objArray73 = new java.lang.Object[] {};
        java.lang.Throwable throwable74 = null;
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("hi!", objArray73, throwable74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray52, (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray52);
        java.lang.String str79 = mathException78.toString();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str42, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str67, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str79, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction17, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator16.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        stepHandler24.handleStep(stepInterpolator25, false);
        stepHandler24.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        double double30 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean23 = switchingFunctionsHandler0.stop();
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        boolean boolean43 = switchingFunctionsHandler0.reset((double) 1L, doubleArray28);
        boolean boolean44 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        switchingFunctionsHandler0.add(switchingFunction45, 0.0d, (double) 0.0f, (int) 'a');
        boolean boolean50 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        switchingFunctionsHandler0.add(switchingFunction51, (double) (byte) -1, 0.2d, (int) (byte) 10);
        double[] doubleArray57 = null;
        boolean boolean58 = switchingFunctionsHandler0.reset((double) '#', doubleArray57);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(14.142135623730951d, (double) (-1.0f), (double) 0, (double) (byte) 100);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations6 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler8 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        boolean boolean10 = switchingFunctionsHandler8.evaluateStep(stepInterpolator9);
        double[] doubleArray20 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray23 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray20, doubleArray23);
        switchingFunctionsHandler8.stepAccepted(100.0d, doubleArray20);
        boolean boolean26 = switchingFunctionsHandler8.isEmpty();
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        boolean boolean41 = switchingFunctionsHandler8.reset(10.0d, doubleArray39);
        double[] doubleArray51 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray54 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray51, doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations6, (double) 0, doubleArray39, 10.0d, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.9, 0.0]");
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.Class<?> wildcardClass18 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction34, 14.142135623730951d, 0.2d, (int) (short) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction39, 0.0d, (double) (short) 1, 100);
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations44 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler46 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator47 = null;
        boolean boolean48 = switchingFunctionsHandler46.evaluateStep(stepInterpolator47);
        double[] doubleArray58 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray61 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray58, doubleArray61);
        switchingFunctionsHandler46.stepAccepted(100.0d, doubleArray58);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction64 = null;
        switchingFunctionsHandler46.add(switchingFunction64, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean69 = switchingFunctionsHandler46.stop();
        double[] doubleArray74 = new double[] { Double.NaN };
        double[] doubleArray83 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray86 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray83, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray74, doubleArray83);
        boolean boolean89 = switchingFunctionsHandler46.reset((double) 1L, doubleArray74);
        double[] doubleArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator12.integrate(firstOrderDifferentialEquations44, (double) (short) 10, doubleArray74, 0.2d, doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        double double19 = dormandPrince853Integrator17.getMinStep();
        java.lang.String str20 = dormandPrince853Integrator17.getName();
        double double21 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        double double22 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        double double23 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 0.9d, 0.9d, 0.0d);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double24 = dormandPrince853Integrator23.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction25, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator34.addSwitchingFunction(switchingFunction35, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator34.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator34.getStepHandler();
        boolean boolean43 = stepHandler42.requiresDenseOutput();
        boolean boolean44 = stepHandler42.requiresDenseOutput();
        dormandPrince853Integrator23.setStepHandler(stepHandler42);
        dormandPrince853Integrator18.setStepHandler(stepHandler42);
        dormandPrince853Integrator4.setStepHandler(stepHandler42);
        double double48 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, (double) (-1), (double) 1.0f, 8);
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        java.lang.String str25 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator12.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction31, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator30.setMinReduction(100.0d);
        double double38 = dormandPrince853Integrator30.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction39, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator30.getStepHandler();
        java.lang.String str45 = dormandPrince853Integrator30.getName();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator30.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler46);
        double double48 = dormandPrince853Integrator12.getMaxGrowth();
        dormandPrince853Integrator12.setInitialStepSize(0.6324555320336759d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 97.0d + "'", double48 == 97.0d);
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction13, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double18 = dormandPrince853Integrator11.getSafety();
        double double19 = dormandPrince853Integrator11.getMaxGrowth();
        double double20 = dormandPrince853Integrator11.getCurrentStepStart();
        double double21 = dormandPrince853Integrator11.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator11.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator27.addSwitchingFunction(switchingFunction28, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator27.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator27.getStepHandler();
        boolean boolean36 = stepHandler35.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        stepHandler35.handleStep(stepInterpolator37, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        double double42 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.Class<?> wildcardClass43 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations10 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler12 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        boolean boolean14 = switchingFunctionsHandler12.evaluateStep(stepInterpolator13);
        double[] doubleArray24 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray27 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray24, doubleArray27);
        switchingFunctionsHandler12.stepAccepted(100.0d, doubleArray24);
        boolean boolean30 = switchingFunctionsHandler12.isEmpty();
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        boolean boolean45 = switchingFunctionsHandler12.reset(10.0d, doubleArray43);
        boolean boolean46 = switchingFunctionsHandler12.stop();
        double double47 = switchingFunctionsHandler12.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler49 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean50 = switchingFunctionsHandler49.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler52 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator53 = null;
        boolean boolean54 = switchingFunctionsHandler52.evaluateStep(stepInterpolator53);
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        switchingFunctionsHandler52.stepAccepted(100.0d, doubleArray64);
        switchingFunctionsHandler49.stepAccepted((double) (short) 10, doubleArray64);
        boolean boolean71 = switchingFunctionsHandler12.reset((double) (byte) 1, doubleArray64);
        double[] doubleArray81 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray84 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray81, doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations10, (double) 10, doubleArray64, (double) 2, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.9, 0.0]");
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getMinReduction();
        dormandPrince853Integrator12.setInitialStepSize((double) 8);
        double double20 = dormandPrince853Integrator12.getMaxGrowth();
        double double21 = dormandPrince853Integrator12.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.2d + "'", double17 == 0.2d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getMinReduction();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double20 = dormandPrince853Integrator12.getSafety();
        int int21 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9486832980505138d + "'", double19 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) 100, (double) (short) 0, (int) (short) 1);
        double double20 = dormandPrince853Integrator4.getMinReduction();
        double double21 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction22, 0.2d, (double) (byte) 0, (int) 'a');
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.2d + "'", double20 == 0.2d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) (short) 0, 0.0d, (double) (-1L));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) ' ', (-1.0d), 2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, 97.0d, (-0.0d), 0.6324555320336759d);
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', (double) (-1.0f), 14.142135623730951d);
        dormandPrince853Integrator4.setSafety(1.0d);
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double31 = dormandPrince853Integrator30.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction32, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction42, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator41.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator41.getStepHandler();
        boolean boolean50 = stepHandler49.requiresDenseOutput();
        boolean boolean51 = stepHandler49.requiresDenseOutput();
        dormandPrince853Integrator30.setStepHandler(stepHandler49);
        double double53 = dormandPrince853Integrator30.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction59 = null;
        dormandPrince853Integrator58.addSwitchingFunction(switchingFunction59, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator58.setMinReduction(100.0d);
        double double66 = dormandPrince853Integrator58.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction67 = null;
        dormandPrince853Integrator58.addSwitchingFunction(switchingFunction67, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler72 = dormandPrince853Integrator58.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator73 = null;
        stepHandler72.handleStep(stepInterpolator73, false);
        dormandPrince853Integrator30.setStepHandler(stepHandler72);
        dormandPrince853Integrator12.setStepHandler(stepHandler72);
        java.lang.String str78 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction79 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction79, (double) ' ', (double) 1L, (int) '#');
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.9d + "'", double31 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.9d + "'", double53 == 0.9d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler72);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str78, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        double double19 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        int int22 = dormandPrince853Integrator4.getOrder();
        double double23 = dormandPrince853Integrator4.getCurrentStepStart();
        double double24 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) (-1), (double) 10L, 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction24, (double) ' ', 35.0d, 0);
        java.lang.String str29 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator12.getStepHandler();
        java.lang.String str31 = dormandPrince853Integrator12.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str29, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double9 = dormandPrince853Integrator8.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator8.addSwitchingFunction(switchingFunction10, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double15 = dormandPrince853Integrator8.getSafety();
        double double16 = dormandPrince853Integrator8.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        double double29 = dormandPrince853Integrator21.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double35 = dormandPrince853Integrator34.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction36 = null;
        dormandPrince853Integrator34.addSwitchingFunction(switchingFunction36, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double41 = dormandPrince853Integrator34.getCurrentStepStart();
        dormandPrince853Integrator34.setInitialStepSize((double) 0.0f);
        java.lang.String str44 = dormandPrince853Integrator34.getName();
        java.io.IOException iOException46 = new java.io.IOException("hi!");
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray49, throwable50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException51);
        java.lang.String str53 = mathException52.getPattern();
        java.lang.Object[] objArray54 = mathException52.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException55 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray54);
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        java.lang.String str69 = dormandPrince853Integrator68.getName();
        dormandPrince853Integrator68.setMinReduction(0.9d);
        java.lang.String str72 = dormandPrince853Integrator68.getName();
        java.lang.Object[] objArray73 = new java.lang.Object[] { double16, double29, dormandPrince853Integrator34, "hi!", objArray54, dormandPrince853Integrator68 };
        java.lang.Object[] objArray75 = new java.lang.Object[] {};
        java.lang.Throwable throwable76 = null;
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!", objArray75, throwable76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray54, (java.lang.Throwable) mathException78);
        java.lang.Object[] objArray83 = new java.lang.Object[] {};
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray83, throwable84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException85);
        java.lang.String str87 = mathException86.getPattern();
        java.lang.Object[] objArray88 = mathException86.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException89 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray88);
        org.apache.commons.math.ode.IntegratorException integratorException90 = new org.apache.commons.math.ode.IntegratorException("", objArray88);
        java.io.IOException iOException91 = new java.io.IOException((java.lang.Throwable) integratorException90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray54, (java.lang.Throwable) iOException91);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray54);
        java.io.IOException iOException96 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)");
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) iOException96);
        java.io.IOException iOException98 = new java.io.IOException((java.lang.Throwable) iOException96);
        org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray54, (java.lang.Throwable) iOException96);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9d + "'", double9 == 0.9d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.9d + "'", double35 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str69, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str72, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        double double6 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.Class<?> wildcardClass7 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator12.getStepHandler();
        stepHandler17.reset();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertNotNull(stepHandler17);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        switchingFunctionsHandler0.add(switchingFunction21, (double) (byte) -1, (double) (byte) -1, 2);
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler42 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator43 = null;
        boolean boolean44 = switchingFunctionsHandler42.evaluateStep(stepInterpolator43);
        double[] doubleArray54 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray57 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray54, doubleArray57);
        switchingFunctionsHandler42.stepAccepted(100.0d, doubleArray54);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler61 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean62 = switchingFunctionsHandler61.stop();
        double double63 = switchingFunctionsHandler61.getEventTime();
        double[] doubleArray68 = new double[] { Double.NaN };
        double[] doubleArray77 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray80 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray77, doubleArray80);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray68, doubleArray77);
        switchingFunctionsHandler61.stepAccepted(0.2d, doubleArray68);
        boolean boolean84 = switchingFunctionsHandler42.reset((double) 'a', doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, (double) 100, doubleArray40, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(0.6324555320336759d, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler0.evaluateStep(stepInterpolator2);
        boolean boolean4 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray11 = new double[] { Double.NaN };
        double[] doubleArray20 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray23 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray20, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray11, doubleArray20);
        double[] doubleArray35 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray44 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray47 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray44, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray35, doubleArray44);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler52 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler54 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator55 = null;
        boolean boolean56 = switchingFunctionsHandler54.evaluateStep(stepInterpolator55);
        double[] doubleArray66 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray69 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray66, doubleArray69);
        switchingFunctionsHandler54.stepAccepted(100.0d, doubleArray66);
        switchingFunctionsHandler52.stepAccepted((double) (short) 1, doubleArray66);
        double[] doubleArray76 = new double[] { Double.NaN };
        double[] doubleArray85 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray88 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray85, doubleArray88);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray76, doubleArray85);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray66, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) (-1), doubleArray44, doubleArray66);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 0.9486832980505138d, doubleArray11, doubleArray66);
        switchingFunctionsHandler0.stepAccepted((double) (-1), doubleArray66);
        boolean boolean95 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        int int18 = dormandPrince853Integrator4.getOrder();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        int int20 = dormandPrince853Integrator4.getOrder();
        double[] doubleArray29 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray32 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray29, doubleArray32);
        java.lang.String str34 = dormandPrince853Integrator33.getName();
        dormandPrince853Integrator33.setSafety((double) 0L);
        dormandPrince853Integrator33.setMaxGrowth((double) 'a');
        int int39 = dormandPrince853Integrator33.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator33.addSwitchingFunction(switchingFunction40, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator33.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction52 = null;
        dormandPrince853Integrator51.addSwitchingFunction(switchingFunction52, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator51.setMinReduction(100.0d);
        double double59 = dormandPrince853Integrator51.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction60 = null;
        dormandPrince853Integrator51.addSwitchingFunction(switchingFunction60, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler65 = dormandPrince853Integrator51.getStepHandler();
        java.lang.String str66 = dormandPrince853Integrator51.getName();
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator51.getStepHandler();
        dormandPrince853Integrator33.setStepHandler(stepHandler67);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator69 = null;
        stepHandler67.handleStep(stepInterpolator69, true);
        stepHandler67.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler67);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str66, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler67);
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        int int14 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) 100L, (double) 10L, (int) (short) 1);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction22, 0.0d, (double) 1L, 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.stop();
        double double9 = switchingFunctionsHandler0.getEventTime();
        boolean boolean10 = switchingFunctionsHandler0.isEmpty();
        double double11 = switchingFunctionsHandler0.getEventTime();
        double double12 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler14 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        boolean boolean16 = switchingFunctionsHandler14.evaluateStep(stepInterpolator15);
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        switchingFunctionsHandler14.stepAccepted(100.0d, doubleArray26);
        double[] doubleArray36 = new double[] { Double.NaN };
        double[] doubleArray45 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray48 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray45, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray36, doubleArray45);
        boolean boolean51 = switchingFunctionsHandler14.reset(100.0d, doubleArray36);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator52 = null;
        boolean boolean53 = switchingFunctionsHandler14.evaluateStep(stepInterpolator52);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler57 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler59 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator60 = null;
        boolean boolean61 = switchingFunctionsHandler59.evaluateStep(stepInterpolator60);
        double[] doubleArray71 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray74 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray71, doubleArray74);
        switchingFunctionsHandler59.stepAccepted(100.0d, doubleArray71);
        switchingFunctionsHandler57.stepAccepted((double) (short) 1, doubleArray71);
        double[] doubleArray81 = new double[] { Double.NaN };
        double[] doubleArray90 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray93 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray90, doubleArray93);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator95 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray81, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray71, doubleArray81);
        boolean boolean97 = switchingFunctionsHandler14.reset((double) ' ', doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(0.0d, doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, 0.0d, 10.0d, (int) (short) 100);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 1);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator15.addSwitchingFunction(switchingFunction16, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator15.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator15.getStepHandler();
        boolean boolean24 = stepHandler23.requiresDenseOutput();
        boolean boolean25 = stepHandler23.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double27 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler30 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler32 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        boolean boolean34 = switchingFunctionsHandler32.evaluateStep(stepInterpolator33);
        double[] doubleArray44 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray47 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray44, doubleArray47);
        switchingFunctionsHandler32.stepAccepted(100.0d, doubleArray44);
        switchingFunctionsHandler30.stepAccepted((double) (short) 1, doubleArray44);
        double[] doubleArray54 = new double[] { Double.NaN };
        double[] doubleArray63 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray66 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray63, doubleArray66);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray54, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray44, doubleArray54);
        double double70 = dormandPrince853Integrator69.getSafety();
        double double71 = dormandPrince853Integrator69.getCurrentStepStart();
        dormandPrince853Integrator69.setInitialStepSize((double) 100L);
        org.apache.commons.math.ode.StepHandler stepHandler74 = dormandPrince853Integrator69.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler74);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator76 = null;
        stepHandler74.handleStep(stepInterpolator76, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator79 = null;
        stepHandler74.handleStep(stepInterpolator79, true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.9d + "'", double70 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(stepHandler74);
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        java.io.IOException iOException5 = new java.io.IOException("hi!", (java.lang.Throwable) mathException4);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double13 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction14, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double19 = dormandPrince853Integrator12.getSafety();
        double double20 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator25.addSwitchingFunction(switchingFunction26, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator25.setMinReduction(100.0d);
        double double33 = dormandPrince853Integrator25.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double39 = dormandPrince853Integrator38.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator38.addSwitchingFunction(switchingFunction40, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double45 = dormandPrince853Integrator38.getCurrentStepStart();
        dormandPrince853Integrator38.setInitialStepSize((double) 0.0f);
        java.lang.String str48 = dormandPrince853Integrator38.getName();
        java.io.IOException iOException50 = new java.io.IOException("hi!");
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray53, throwable54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        java.lang.String str57 = mathException56.getPattern();
        java.lang.Object[] objArray58 = mathException56.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray58);
        double[] doubleArray68 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray71 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray68, doubleArray71);
        java.lang.String str73 = dormandPrince853Integrator72.getName();
        dormandPrince853Integrator72.setMinReduction(0.9d);
        java.lang.String str76 = dormandPrince853Integrator72.getName();
        java.lang.Object[] objArray77 = new java.lang.Object[] { double20, double33, dormandPrince853Integrator38, "hi!", objArray58, dormandPrince853Integrator72 };
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray79, throwable80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray58, (java.lang.Throwable) mathException82);
        org.apache.commons.math.ode.IntegratorException integratorException84 = new org.apache.commons.math.ode.IntegratorException("", objArray58);
        mathException4.addSuppressed((java.lang.Throwable) integratorException84);
        org.apache.commons.math.ode.DerivativeException derivativeException86 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException4);
        java.lang.String str87 = mathException4.toString();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.9d + "'", double39 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str76, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str87, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, (double) 0, (double) 1.0f, 0);
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction23, (double) 10, (double) 'a', (int) (byte) 10);
        double double28 = dormandPrince853Integrator22.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction29, (double) 1.0f, (double) '#', (int) (short) 0);
        dormandPrince853Integrator22.setMaxGrowth((double) 0);
        double double36 = dormandPrince853Integrator22.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double42 = dormandPrince853Integrator41.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction43 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction43, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double48 = dormandPrince853Integrator41.getCurrentStepStart();
        java.lang.String str49 = dormandPrince853Integrator41.getName();
        double[] doubleArray58 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray61 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray58, doubleArray61);
        java.lang.String str63 = dormandPrince853Integrator62.getName();
        double[] doubleArray67 = new double[] { Double.NaN };
        double[] doubleArray76 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray79 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray76, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray67, doubleArray76);
        org.apache.commons.math.ode.StepHandler stepHandler82 = dormandPrince853Integrator81.getStepHandler();
        dormandPrince853Integrator62.setStepHandler(stepHandler82);
        dormandPrince853Integrator41.setStepHandler(stepHandler82);
        stepHandler82.reset();
        dormandPrince853Integrator22.setStepHandler(stepHandler82);
        boolean boolean87 = stepHandler82.requiresDenseOutput();
        boolean boolean88 = stepHandler82.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler82);
        java.lang.String str90 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9d + "'", double42 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str63, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str90, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) (-1L), 0.0d, (int) (byte) 0);
        double double20 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.0d, 0.2d, (double) 8, (double) 8);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) (byte) 100, 31.622776601683793d, 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, 8.0d, (double) (byte) 0, 8);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.6324555320336759d + "'", double6 == 0.6324555320336759d);
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) ' ', 0.0d, (int) (short) 100);
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations14 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler16 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean17 = switchingFunctionsHandler16.stop();
        double double18 = switchingFunctionsHandler16.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler20 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        boolean boolean22 = switchingFunctionsHandler20.evaluateStep(stepInterpolator21);
        double[] doubleArray32 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray35 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray32, doubleArray35);
        switchingFunctionsHandler20.stepAccepted(100.0d, doubleArray32);
        switchingFunctionsHandler16.stepAccepted(10.0d, doubleArray32);
        double[] doubleArray50 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray53 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray50, doubleArray53);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler57 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler59 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator60 = null;
        boolean boolean61 = switchingFunctionsHandler59.evaluateStep(stepInterpolator60);
        double[] doubleArray71 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray74 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray71, doubleArray74);
        switchingFunctionsHandler59.stepAccepted(100.0d, doubleArray71);
        switchingFunctionsHandler57.stepAccepted((double) (short) 1, doubleArray71);
        double[] doubleArray81 = new double[] { Double.NaN };
        double[] doubleArray90 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray93 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray90, doubleArray93);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator95 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray81, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray71, doubleArray81);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator97 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, (double) (-1.0f), doubleArray50, doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations14, 0.0d, doubleArray32, (double) (byte) -1, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.9, 0.0]");
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        dormandPrince853Integrator4.setMinReduction((double) (-1));
        double double17 = dormandPrince853Integrator4.getMinStep();
        double double18 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        java.lang.String str14 = dormandPrince853Integrator12.getName();
        double double15 = dormandPrince853Integrator12.getMaxStep();
        int int16 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.0d, 1.7320508075688772d, (double) (-1L), (double) (short) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 10.0f, 5.916079783099616d, (int) '4');
        double double18 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 100.0f, Double.NaN, (int) '4');
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.0d + "'", double5 == 2.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler5 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        boolean boolean7 = switchingFunctionsHandler5.evaluateStep(stepInterpolator6);
        double[] doubleArray17 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray20 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray17, doubleArray20);
        switchingFunctionsHandler5.stepAccepted(100.0d, doubleArray17);
        boolean boolean23 = switchingFunctionsHandler5.isEmpty();
        double[] doubleArray33 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray36 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray33, doubleArray36);
        boolean boolean38 = switchingFunctionsHandler5.reset(10.0d, doubleArray36);
        double[] doubleArray42 = new double[] { Double.NaN };
        double[] doubleArray51 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray54 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray51, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray42, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray36, doubleArray51);
        switchingFunctionsHandler0.stepAccepted(0.9d, doubleArray36);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator59 = null;
        boolean boolean60 = switchingFunctionsHandler0.evaluateStep(stepInterpolator59);
        boolean boolean61 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction62 = null;
        switchingFunctionsHandler0.add(switchingFunction62, (double) 'a', 13.92838827718412d, (-1));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction67 = null;
        switchingFunctionsHandler0.add(switchingFunction67, Double.NaN, (double) 1.0f, (int) (byte) 100);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = switchingFunctionsHandler0.evaluateStep(stepInterpolator72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 10, 0.0d, (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction13, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double18 = dormandPrince853Integrator11.getSafety();
        double double19 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction25, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator24.setMinReduction(100.0d);
        double double32 = dormandPrince853Integrator24.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double38 = dormandPrince853Integrator37.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator37.addSwitchingFunction(switchingFunction39, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double44 = dormandPrince853Integrator37.getCurrentStepStart();
        dormandPrince853Integrator37.setInitialStepSize((double) 0.0f);
        java.lang.String str47 = dormandPrince853Integrator37.getName();
        java.io.IOException iOException49 = new java.io.IOException("hi!");
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray52, throwable53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException54);
        java.lang.String str56 = mathException55.getPattern();
        java.lang.Object[] objArray57 = mathException55.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException58 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray57);
        double[] doubleArray67 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray70 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray67, doubleArray70);
        java.lang.String str72 = dormandPrince853Integrator71.getName();
        dormandPrince853Integrator71.setMinReduction(0.9d);
        java.lang.String str75 = dormandPrince853Integrator71.getName();
        java.lang.Object[] objArray76 = new java.lang.Object[] { double19, double32, dormandPrince853Integrator37, "hi!", objArray57, dormandPrince853Integrator71 };
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray78, throwable79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray57, (java.lang.Throwable) mathException81);
        org.apache.commons.math.ode.IntegratorException integratorException83 = new org.apache.commons.math.ode.IntegratorException("", objArray57);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray2, (java.lang.Throwable) integratorException83);
        org.apache.commons.math.ode.IntegratorException integratorException85 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException83);
        java.lang.String str86 = integratorException85.getPattern();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException85);
        org.apache.commons.math.ode.IntegratorException integratorException88 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException85);
        java.lang.Class<?> wildcardClass89 = integratorException88.getClass();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.9d + "'", double38 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str47, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str72, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str75, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler0.evaluateStep(stepInterpolator3);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler6 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler8 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        boolean boolean10 = switchingFunctionsHandler8.evaluateStep(stepInterpolator9);
        double[] doubleArray20 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray23 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray20, doubleArray23);
        switchingFunctionsHandler8.stepAccepted(100.0d, doubleArray20);
        switchingFunctionsHandler6.stepAccepted((double) (short) 1, doubleArray20);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler28 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler30 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        boolean boolean32 = switchingFunctionsHandler30.evaluateStep(stepInterpolator31);
        double[] doubleArray42 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray45 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray42, doubleArray45);
        switchingFunctionsHandler30.stepAccepted(100.0d, doubleArray42);
        switchingFunctionsHandler28.stepAccepted((double) (short) 1, doubleArray42);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator49 = null;
        boolean boolean50 = switchingFunctionsHandler28.evaluateStep(stepInterpolator49);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        switchingFunctionsHandler28.add(switchingFunction51, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler57 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator58 = null;
        boolean boolean59 = switchingFunctionsHandler57.evaluateStep(stepInterpolator58);
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        switchingFunctionsHandler57.stepAccepted(100.0d, doubleArray69);
        boolean boolean75 = switchingFunctionsHandler57.isEmpty();
        double[] doubleArray85 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray88 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray85, doubleArray88);
        boolean boolean90 = switchingFunctionsHandler57.reset(10.0d, doubleArray88);
        boolean boolean91 = switchingFunctionsHandler28.reset((double) 10, doubleArray88);
        switchingFunctionsHandler6.stepAccepted((double) (byte) -1, doubleArray88);
        boolean boolean93 = switchingFunctionsHandler0.reset((double) (byte) -1, doubleArray88);
        boolean boolean94 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator95 = null;
        boolean boolean96 = switchingFunctionsHandler0.evaluateStep(stepInterpolator95);
        double[] doubleArray98 = null;
        boolean boolean99 = switchingFunctionsHandler0.reset(7.211102550927978d, doubleArray98);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        double double16 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int12 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize((double) (-1));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) (byte) 10, (-1.0d), (int) '#');
        double double20 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double[] doubleArray24 = null;
        boolean boolean25 = switchingFunctionsHandler0.reset((double) 0L, doubleArray24);
        double double26 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler0.add(switchingFunction27, 14.142135623730951d, (double) 0.0f, (int) '#');
        boolean boolean32 = switchingFunctionsHandler0.isEmpty();
        double double33 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        switchingFunctionsHandler0.add(switchingFunction34, 17.320508075688775d, (double) (byte) 0, (int) 'a');
        double double39 = switchingFunctionsHandler0.getEventTime();
        boolean boolean40 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        switchingFunctionsHandler0.add(switchingFunction41, (double) 1, Double.NaN, (int) (byte) 10);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler49 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean50 = switchingFunctionsHandler49.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler52 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator53 = null;
        boolean boolean54 = switchingFunctionsHandler52.evaluateStep(stepInterpolator53);
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        switchingFunctionsHandler52.stepAccepted(100.0d, doubleArray64);
        switchingFunctionsHandler49.stepAccepted((double) (short) 10, doubleArray64);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler72 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean73 = switchingFunctionsHandler72.stop();
        double double74 = switchingFunctionsHandler72.getEventTime();
        double[] doubleArray79 = new double[] { Double.NaN };
        double[] doubleArray88 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray91 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray88, doubleArray91);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray79, doubleArray88);
        switchingFunctionsHandler72.stepAccepted(0.2d, doubleArray79);
        boolean boolean95 = switchingFunctionsHandler49.reset((double) (byte) -1, doubleArray79);
        double[] doubleArray96 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator97 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), 31.622776601683793d, doubleArray79, doubleArray96);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(0.0d, doubleArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 8, (double) '4', 0);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator17.getStepHandler();
        stepHandler23.reset();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler23);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Throwable) derivativeException5);
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException5);
        java.lang.String str8 = derivativeException7.getPattern();
        java.lang.Throwable[] throwableArray9 = derivativeException7.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException10 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Object[]) throwableArray9);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray13, throwable14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double23 = dormandPrince853Integrator22.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction24, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double29 = dormandPrince853Integrator22.getSafety();
        double double30 = dormandPrince853Integrator22.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction36 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction36, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator35.setMinReduction(100.0d);
        double double43 = dormandPrince853Integrator35.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double49 = dormandPrince853Integrator48.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction50 = null;
        dormandPrince853Integrator48.addSwitchingFunction(switchingFunction50, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double55 = dormandPrince853Integrator48.getCurrentStepStart();
        dormandPrince853Integrator48.setInitialStepSize((double) 0.0f);
        java.lang.String str58 = dormandPrince853Integrator48.getName();
        java.io.IOException iOException60 = new java.io.IOException("hi!");
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        java.lang.Throwable throwable64 = null;
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("hi!", objArray63, throwable64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        java.lang.String str67 = mathException66.getPattern();
        java.lang.Object[] objArray68 = mathException66.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException69 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray68);
        double[] doubleArray78 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray81 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray78, doubleArray81);
        java.lang.String str83 = dormandPrince853Integrator82.getName();
        dormandPrince853Integrator82.setMinReduction(0.9d);
        java.lang.String str86 = dormandPrince853Integrator82.getName();
        java.lang.Object[] objArray87 = new java.lang.Object[] { double30, double43, dormandPrince853Integrator48, "hi!", objArray68, dormandPrince853Integrator82 };
        java.lang.Object[] objArray89 = new java.lang.Object[] {};
        java.lang.Throwable throwable90 = null;
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("hi!", objArray89, throwable90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException91);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray68, (java.lang.Throwable) mathException92);
        org.apache.commons.math.ode.IntegratorException integratorException94 = new org.apache.commons.math.ode.IntegratorException("", objArray68);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray13, (java.lang.Throwable) integratorException94);
        org.apache.commons.math.ode.IntegratorException integratorException96 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException94);
        java.lang.String str97 = integratorException96.getPattern();
        org.apache.commons.math.MathException mathException98 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException96);
        org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray9, (java.lang.Throwable) integratorException96);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str8, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9d + "'", double29 == 0.9d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.9d + "'", double49 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str58, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str83, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str86, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double[] doubleArray24 = null;
        boolean boolean25 = switchingFunctionsHandler0.reset((double) 0L, doubleArray24);
        double double26 = switchingFunctionsHandler0.getEventTime();
        boolean boolean27 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        switchingFunctionsHandler0.add(switchingFunction28, (double) (byte) -1, 0.0d, 1);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = switchingFunctionsHandler0.evaluateStep(stepInterpolator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations17 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler19 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator20 = null;
        boolean boolean21 = switchingFunctionsHandler19.evaluateStep(stepInterpolator20);
        double[] doubleArray33 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray36 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray33, doubleArray36);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler38 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        boolean boolean40 = switchingFunctionsHandler38.evaluateStep(stepInterpolator39);
        double[] doubleArray50 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray53 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray50, doubleArray53);
        switchingFunctionsHandler38.stepAccepted(100.0d, doubleArray50);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler57 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean58 = switchingFunctionsHandler57.stop();
        double double59 = switchingFunctionsHandler57.getEventTime();
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        switchingFunctionsHandler57.stepAccepted(0.2d, doubleArray64);
        boolean boolean80 = switchingFunctionsHandler38.reset((double) 'a', doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, (double) 100, doubleArray36, doubleArray64);
        boolean boolean82 = switchingFunctionsHandler19.reset((double) 1.0f, doubleArray36);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler84 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean85 = switchingFunctionsHandler84.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator86 = null;
        boolean boolean87 = switchingFunctionsHandler84.evaluateStep(stepInterpolator86);
        double[] doubleArray89 = new double[] {};
        switchingFunctionsHandler84.stepAccepted((double) 100L, doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations17, 1.0d, doubleArray36, Double.NaN, doubleArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) (-1), (double) 10L, 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction24, (double) ' ', 35.0d, 0);
        java.lang.String str29 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator12.getStepHandler();
        stepHandler30.reset();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str29, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler30);
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (-1.0d), (double) (-1), (double) 100);
        double double5 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 100);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double13 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction14, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double19 = dormandPrince853Integrator12.getSafety();
        double double20 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator25.addSwitchingFunction(switchingFunction26, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator25.setMinReduction(100.0d);
        double double33 = dormandPrince853Integrator25.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double39 = dormandPrince853Integrator38.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator38.addSwitchingFunction(switchingFunction40, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double45 = dormandPrince853Integrator38.getCurrentStepStart();
        dormandPrince853Integrator38.setInitialStepSize((double) 0.0f);
        java.lang.String str48 = dormandPrince853Integrator38.getName();
        java.io.IOException iOException50 = new java.io.IOException("hi!");
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray53, throwable54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        java.lang.String str57 = mathException56.getPattern();
        java.lang.Object[] objArray58 = mathException56.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray58);
        double[] doubleArray68 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray71 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray68, doubleArray71);
        java.lang.String str73 = dormandPrince853Integrator72.getName();
        dormandPrince853Integrator72.setMinReduction(0.9d);
        java.lang.String str76 = dormandPrince853Integrator72.getName();
        java.lang.Object[] objArray77 = new java.lang.Object[] { double20, double33, dormandPrince853Integrator38, "hi!", objArray58, dormandPrince853Integrator72 };
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray79, throwable80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray58, (java.lang.Throwable) mathException82);
        org.apache.commons.math.ode.IntegratorException integratorException84 = new org.apache.commons.math.ode.IntegratorException("", objArray58);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray3, (java.lang.Throwable) integratorException84);
        java.io.IOException iOException86 = new java.io.IOException((java.lang.Throwable) integratorException84);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) integratorException84);
        java.lang.String str88 = integratorException84.toString();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.9d + "'", double39 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str76, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.apache.commons.math.ode.IntegratorException: " + "'", str88, "org.apache.commons.math.ode.IntegratorException: ");
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction13, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double18 = dormandPrince853Integrator11.getSafety();
        double double19 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction25, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator24.setMinReduction(100.0d);
        double double32 = dormandPrince853Integrator24.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double38 = dormandPrince853Integrator37.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator37.addSwitchingFunction(switchingFunction39, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double44 = dormandPrince853Integrator37.getCurrentStepStart();
        dormandPrince853Integrator37.setInitialStepSize((double) 0.0f);
        java.lang.String str47 = dormandPrince853Integrator37.getName();
        java.io.IOException iOException49 = new java.io.IOException("hi!");
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        java.lang.Throwable throwable53 = null;
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray52, throwable53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException54);
        java.lang.String str56 = mathException55.getPattern();
        java.lang.Object[] objArray57 = mathException55.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException58 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray57);
        double[] doubleArray67 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray70 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray67, doubleArray70);
        java.lang.String str72 = dormandPrince853Integrator71.getName();
        dormandPrince853Integrator71.setMinReduction(0.9d);
        java.lang.String str75 = dormandPrince853Integrator71.getName();
        java.lang.Object[] objArray76 = new java.lang.Object[] { double19, double32, dormandPrince853Integrator37, "hi!", objArray57, dormandPrince853Integrator71 };
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        java.lang.Throwable throwable79 = null;
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", objArray78, throwable79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray57, (java.lang.Throwable) mathException81);
        org.apache.commons.math.ode.IntegratorException integratorException83 = new org.apache.commons.math.ode.IntegratorException("", objArray57);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray2, (java.lang.Throwable) integratorException83);
        org.apache.commons.math.ode.IntegratorException integratorException85 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException83);
        java.lang.String str86 = integratorException85.getPattern();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException85);
        org.apache.commons.math.ode.IntegratorException integratorException88 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException85);
        java.io.IOException iOException89 = new java.io.IOException((java.lang.Throwable) integratorException85);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9d + "'", double12 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.9d + "'", double38 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str47, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str72, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str75, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) (byte) 10, 10.0d, (double) (byte) 10);
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        double double13 = dormandPrince853Integrator12.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction14, 100.0d, (double) 1L, (int) (byte) 10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction24, (double) 10, (double) 'a', (int) (byte) 10);
        double double29 = dormandPrince853Integrator23.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction30, (double) 1.0f, (double) '#', (int) (short) 0);
        double double35 = dormandPrince853Integrator23.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double46 = dormandPrince853Integrator45.getSafety();
        double double47 = dormandPrince853Integrator45.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction53 = null;
        dormandPrince853Integrator52.addSwitchingFunction(switchingFunction53, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator52.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator52.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator61 = null;
        stepHandler60.handleStep(stepInterpolator61, false);
        stepHandler60.reset();
        dormandPrince853Integrator45.setStepHandler(stepHandler60);
        dormandPrince853Integrator40.setStepHandler(stepHandler60);
        stepHandler60.reset();
        dormandPrince853Integrator23.setStepHandler(stepHandler60);
        dormandPrince853Integrator12.setStepHandler(stepHandler60);
        int int70 = dormandPrince853Integrator12.getOrder();
        double double71 = dormandPrince853Integrator12.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 10.0d + "'", double71 == 10.0d);
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, Double.NaN, 3.0d, (-1.0d));
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler1 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler1.evaluateStep(stepInterpolator2);
        double[] doubleArray13 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray16 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray13, doubleArray16);
        switchingFunctionsHandler1.stepAccepted(100.0d, doubleArray13);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        switchingFunctionsHandler1.add(switchingFunction19, 100.0d, (double) 0.0f, (int) (byte) 1);
        java.io.IOException iOException25 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator31.addSwitchingFunction(switchingFunction32, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator31.setMinReduction(100.0d);
        double double39 = dormandPrince853Integrator31.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator31.addSwitchingFunction(switchingFunction40, (double) 3, (double) (-1L), (int) (byte) -1);
        java.lang.Object[] objArray45 = new java.lang.Object[] { switchingFunctionsHandler1, "hi!", "Dormand-Prince 8 (5, 3)", (-1L) };
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray47, throwable48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException49);
        java.lang.String str51 = mathException50.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException52 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray45, (java.lang.Throwable) mathException50);
        java.lang.Throwable[] throwableArray54 = mathException50.getSuppressed();
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", objArray59, throwable60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        java.lang.String str63 = mathException62.getPattern();
        java.lang.Object[] objArray64 = mathException62.getArguments();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException62);
        java.io.IOException iOException66 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException62);
        java.lang.Throwable[] throwableArray67 = mathException62.getSuppressed();
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray69, throwable70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException71);
        java.lang.String str73 = mathException72.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException74 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException72);
        java.io.IOException iOException75 = new java.io.IOException((java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray67, (java.lang.Throwable) iOException75);
        mathException50.addSuppressed((java.lang.Throwable) iOException75);
        java.lang.String str78 = mathException50.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str78, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        double double14 = dormandPrince853Integrator4.getSafety();
        int int15 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth(100.0d);
        dormandPrince853Integrator4.setMaxGrowth((double) 10.0f);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        double double19 = dormandPrince853Integrator17.getSafety();
        double double20 = dormandPrince853Integrator17.getCurrentStepStart();
        double double21 = dormandPrince853Integrator17.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator12.getStepHandler();
        double double15 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator12.getMinReduction();
        double double17 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double18 = dormandPrince853Integrator12.getCurrentStepStart();
        double double19 = dormandPrince853Integrator12.getMinReduction();
        java.lang.Class<?> wildcardClass20 = dormandPrince853Integrator12.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9486832980505138d + "'", double15 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2d + "'", double16 == 0.2d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9486832980505138d + "'", double17 == 0.9486832980505138d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.2d + "'", double19 == 0.2d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction11, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double16 = dormandPrince853Integrator9.getSafety();
        double double17 = dormandPrince853Integrator9.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction23, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator22.setMinReduction(100.0d);
        double double30 = dormandPrince853Integrator22.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double36 = dormandPrince853Integrator35.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction37, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double42 = dormandPrince853Integrator35.getCurrentStepStart();
        dormandPrince853Integrator35.setInitialStepSize((double) 0.0f);
        java.lang.String str45 = dormandPrince853Integrator35.getName();
        java.io.IOException iOException47 = new java.io.IOException("hi!");
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray50, throwable51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        java.lang.String str54 = mathException53.getPattern();
        java.lang.Object[] objArray55 = mathException53.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray55);
        double[] doubleArray65 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray68 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray65, doubleArray68);
        java.lang.String str70 = dormandPrince853Integrator69.getName();
        dormandPrince853Integrator69.setMinReduction(0.9d);
        java.lang.String str73 = dormandPrince853Integrator69.getName();
        java.lang.Object[] objArray74 = new java.lang.Object[] { double17, double30, dormandPrince853Integrator35, "hi!", objArray55, dormandPrince853Integrator69 };
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray76, throwable77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray55, (java.lang.Throwable) mathException79);
        org.apache.commons.math.ode.IntegratorException integratorException81 = new org.apache.commons.math.ode.IntegratorException("", objArray55);
        java.lang.Object[] objArray83 = new java.lang.Object[] {};
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray83, throwable84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException85);
        java.lang.String str87 = mathException86.getPattern();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray55, (java.lang.Throwable) mathException86);
        org.apache.commons.math.ode.IntegratorException integratorException90 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException", objArray55);
        java.lang.Object[] objArray91 = integratorException90.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException92 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", objArray91);
        java.lang.Throwable throwable93 = null;
        // The following exception was thrown during execution in test generation
        try {
            integratorException92.addSuppressed(throwable93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.9d + "'", double36 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.stop();
        double double9 = switchingFunctionsHandler0.getEventTime();
        boolean boolean10 = switchingFunctionsHandler0.isEmpty();
        double double11 = switchingFunctionsHandler0.getEventTime();
        boolean boolean12 = switchingFunctionsHandler0.stop();
        double[] doubleArray23 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray32 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray35 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray32, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray23, doubleArray32);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler40 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler42 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator43 = null;
        boolean boolean44 = switchingFunctionsHandler42.evaluateStep(stepInterpolator43);
        double[] doubleArray54 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray57 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray54, doubleArray57);
        switchingFunctionsHandler42.stepAccepted(100.0d, doubleArray54);
        switchingFunctionsHandler40.stepAccepted((double) (short) 1, doubleArray54);
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray54, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) (-1), doubleArray32, doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(0.0d, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction11, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction21, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator20.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator20.getStepHandler();
        boolean boolean29 = stepHandler28.requiresDenseOutput();
        boolean boolean30 = stepHandler28.requiresDenseOutput();
        dormandPrince853Integrator9.setStepHandler(stepHandler28);
        dormandPrince853Integrator4.setStepHandler(stepHandler28);
        org.apache.commons.math.ode.StepHandler stepHandler33 = dormandPrince853Integrator4.getStepHandler();
        double double34 = dormandPrince853Integrator4.getCurrentStepStart();
        double double35 = dormandPrince853Integrator4.getMaxGrowth();
        int int36 = dormandPrince853Integrator4.getOrder();
        double double37 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(stepHandler33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations13 = null;
        double[] doubleArray15 = null;
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations13, Double.NaN, doubleArray15, 0.0d, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double14 = dormandPrince853Integrator13.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator13.addSwitchingFunction(switchingFunction15, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double20 = dormandPrince853Integrator13.getSafety();
        double double21 = dormandPrince853Integrator13.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction27, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator26.setMinReduction(100.0d);
        double double34 = dormandPrince853Integrator26.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction41, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double46 = dormandPrince853Integrator39.getCurrentStepStart();
        dormandPrince853Integrator39.setInitialStepSize((double) 0.0f);
        java.lang.String str49 = dormandPrince853Integrator39.getName();
        java.io.IOException iOException51 = new java.io.IOException("hi!");
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray54, throwable55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        java.lang.String str58 = mathException57.getPattern();
        java.lang.Object[] objArray59 = mathException57.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray59);
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        java.lang.String str74 = dormandPrince853Integrator73.getName();
        dormandPrince853Integrator73.setMinReduction(0.9d);
        java.lang.String str77 = dormandPrince853Integrator73.getName();
        java.lang.Object[] objArray78 = new java.lang.Object[] { double21, double34, dormandPrince853Integrator39, "hi!", objArray59, dormandPrince853Integrator73 };
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("hi!", objArray80, throwable81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray59, (java.lang.Throwable) mathException83);
        org.apache.commons.math.ode.IntegratorException integratorException85 = new org.apache.commons.math.ode.IntegratorException("", objArray59);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray4, (java.lang.Throwable) integratorException85);
        org.apache.commons.math.ode.IntegratorException integratorException87 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray4);
        java.lang.Throwable throwable90 = null;
        org.apache.commons.math.ode.DerivativeException derivativeException91 = new org.apache.commons.math.ode.DerivativeException(throwable90);
        java.lang.Throwable[] throwableArray92 = derivativeException91.getSuppressed();
        org.apache.commons.math.ode.IntegratorException integratorException93 = new org.apache.commons.math.ode.IntegratorException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray92);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.IntegratorException: ", (java.lang.Throwable) integratorException93);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: hi!", objArray4, (java.lang.Throwable) integratorException93);
        java.lang.String str96 = mathException95.toString();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: hi!" + "'", str96, "org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator12.getStepHandler();
        dormandPrince853Integrator12.setInitialStepSize((double) (byte) 1);
        double double21 = dormandPrince853Integrator12.getCurrentStepStart();
        double double22 = dormandPrince853Integrator12.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction23, (double) 2, (-0.0d), 1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        int int13 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (byte) 100, (double) 1, (-1));
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        int int20 = dormandPrince853Integrator4.getOrder();
        double double21 = dormandPrince853Integrator4.getSafety();
        double[] doubleArray30 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray33 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray30, doubleArray33);
        java.lang.String str35 = dormandPrince853Integrator34.getName();
        dormandPrince853Integrator34.setSafety((double) 0L);
        dormandPrince853Integrator34.setMaxGrowth((double) 'a');
        int int40 = dormandPrince853Integrator34.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction46, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator45.setMinReduction(100.0d);
        double double53 = dormandPrince853Integrator45.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction54, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler59 = dormandPrince853Integrator45.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator60 = null;
        stepHandler59.handleStep(stepInterpolator60, false);
        dormandPrince853Integrator34.setStepHandler(stepHandler59);
        dormandPrince853Integrator4.setStepHandler(stepHandler59);
        int int65 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str35, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 10.0d + "'", double53 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction16, (double) (-1.0f), (double) (byte) 0, (int) (short) -1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction21, (double) '4', 0.0d, 0);
        int int26 = dormandPrince853Integrator12.getOrder();
        double double27 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator12.getStepHandler();
        double double29 = dormandPrince853Integrator12.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9d + "'", double29 == 0.9d);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        double double18 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, 14.142135623730951d, 2.0d, (int) (short) 1);
        int int19 = dormandPrince853Integrator4.getOrder();
        double double20 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        double double20 = switchingFunctionsHandler2.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        boolean boolean22 = switchingFunctionsHandler2.evaluateStep(stepInterpolator21);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean25 = switchingFunctionsHandler24.stop();
        double double26 = switchingFunctionsHandler24.getEventTime();
        double[] doubleArray31 = new double[] { Double.NaN };
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray31, doubleArray40);
        switchingFunctionsHandler24.stepAccepted(0.2d, doubleArray31);
        switchingFunctionsHandler2.stepAccepted((double) 8, doubleArray31);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler48 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean49 = switchingFunctionsHandler48.stop();
        double double50 = switchingFunctionsHandler48.getEventTime();
        double[] doubleArray55 = new double[] { Double.NaN };
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray55, doubleArray64);
        switchingFunctionsHandler48.stepAccepted(0.2d, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 3, (double) (-1), doubleArray31, doubleArray55);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction72 = null;
        dormandPrince853Integrator71.addSwitchingFunction(switchingFunction72, 0.6324555320336759d, 0.0d, 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getSafety();
        double double17 = dormandPrince853Integrator4.getMinReduction();
        int int18 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.2d + "'", double17 == 0.2d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(13.92838827718412d, (double) (byte) -1, 3.0d, (double) (-1L));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean3 = switchingFunctionsHandler2.stop();
        double double4 = switchingFunctionsHandler2.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        switchingFunctionsHandler2.add(switchingFunction5, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean10 = switchingFunctionsHandler2.stop();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler34 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        boolean boolean38 = switchingFunctionsHandler36.evaluateStep(stepInterpolator37);
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        switchingFunctionsHandler36.stepAccepted(100.0d, doubleArray48);
        switchingFunctionsHandler34.stepAccepted((double) (short) 1, doubleArray48);
        double[] doubleArray58 = new double[] { Double.NaN };
        double[] doubleArray67 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray70 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray67, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray58, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray48, doubleArray58);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (double) '#', doubleArray26, doubleArray48);
        boolean boolean75 = switchingFunctionsHandler2.reset((double) 1, doubleArray26);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler76 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator77 = null;
        boolean boolean78 = switchingFunctionsHandler76.evaluateStep(stepInterpolator77);
        double[] doubleArray88 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray91 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray88, doubleArray91);
        switchingFunctionsHandler76.stepAccepted(100.0d, doubleArray88);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, 10.0d, doubleArray26, doubleArray88);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction95 = null;
        dormandPrince853Integrator94.addSwitchingFunction(switchingFunction95, 0.2d, (double) 1, 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.9, 0.0]");
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, (double) (-1), (double) 1.0f, 8);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 10);
        int int26 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.isEmpty();
        boolean boolean23 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        boolean boolean25 = switchingFunctionsHandler0.evaluateStep(stepInterpolator24);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        switchingFunctionsHandler0.add(switchingFunction26, (double) '#', 10.0d, (int) (short) 10);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = switchingFunctionsHandler0.evaluateStep(stepInterpolator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        dormandPrince853Integrator12.setMinReduction(100.0d);
        int int19 = dormandPrince853Integrator12.getOrder();
        java.lang.Class<?> wildcardClass20 = dormandPrince853Integrator12.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double double18 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        boolean boolean20 = switchingFunctionsHandler0.evaluateStep(stepInterpolator19);
        boolean boolean21 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator22 = null;
        boolean boolean23 = switchingFunctionsHandler0.evaluateStep(stepInterpolator22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) (byte) 10, 97.0d, (-1));
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler19 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean20 = switchingFunctionsHandler19.stop();
        double double21 = switchingFunctionsHandler19.getEventTime();
        double[] doubleArray26 = new double[] { Double.NaN };
        double[] doubleArray35 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray38 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray35, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray26, doubleArray35);
        switchingFunctionsHandler19.stepAccepted(0.2d, doubleArray26);
        boolean boolean42 = switchingFunctionsHandler0.reset((double) 'a', doubleArray26);
        double double43 = switchingFunctionsHandler0.getEventTime();
        double double44 = switchingFunctionsHandler0.getEventTime();
        double double45 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        switchingFunctionsHandler0.add(switchingFunction46, (double) 10L, (double) (short) -1, 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        switchingFunctionsHandler0.add(switchingFunction51, 14.142135623730951d, (double) (short) 10, (int) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction56 = null;
        switchingFunctionsHandler0.add(switchingFunction56, 0.9d, (double) 100L, 100);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator61 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = switchingFunctionsHandler0.evaluateStep(stepInterpolator61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        double[] doubleArray7 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray7, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator21.getStepHandler();
        java.lang.String str23 = dormandPrince853Integrator21.getName();
        double double24 = dormandPrince853Integrator21.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.2d + "'", double24 == 0.2d);
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator7 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double8 = dormandPrince853Integrator7.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator7.addSwitchingFunction(switchingFunction9, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double14 = dormandPrince853Integrator7.getSafety();
        double double15 = dormandPrince853Integrator7.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction21, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator20.setMinReduction(100.0d);
        double double28 = dormandPrince853Integrator20.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double34 = dormandPrince853Integrator33.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator33.addSwitchingFunction(switchingFunction35, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double40 = dormandPrince853Integrator33.getCurrentStepStart();
        dormandPrince853Integrator33.setInitialStepSize((double) 0.0f);
        java.lang.String str43 = dormandPrince853Integrator33.getName();
        java.io.IOException iOException45 = new java.io.IOException("hi!");
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        java.lang.Throwable throwable49 = null;
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", objArray48, throwable49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException50);
        java.lang.String str52 = mathException51.getPattern();
        java.lang.Object[] objArray53 = mathException51.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException54 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray53);
        double[] doubleArray63 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray66 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray63, doubleArray66);
        java.lang.String str68 = dormandPrince853Integrator67.getName();
        dormandPrince853Integrator67.setMinReduction(0.9d);
        java.lang.String str71 = dormandPrince853Integrator67.getName();
        java.lang.Object[] objArray72 = new java.lang.Object[] { double15, double28, dormandPrince853Integrator33, "hi!", objArray53, dormandPrince853Integrator67 };
        java.lang.Object[] objArray74 = new java.lang.Object[] {};
        java.lang.Throwable throwable75 = null;
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", objArray74, throwable75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray53, (java.lang.Throwable) mathException77);
        org.apache.commons.math.ode.IntegratorException integratorException79 = new org.apache.commons.math.ode.IntegratorException("", objArray53);
        java.lang.Object[] objArray81 = new java.lang.Object[] {};
        java.lang.Throwable throwable82 = null;
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("hi!", objArray81, throwable82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException83);
        java.lang.String str85 = mathException84.getPattern();
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray53, (java.lang.Throwable) mathException84);
        org.apache.commons.math.ode.DerivativeException derivativeException88 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException84);
        org.apache.commons.math.ode.IntegratorException integratorException89 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException84);
        java.lang.Throwable[] throwableArray90 = integratorException89.getSuppressed();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.9d + "'", double34 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str68, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str71, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) 10.0f, (double) 10.0f, (double) (byte) 10);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        int int19 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction20, (double) (-1L), (double) (byte) 1, (int) (short) 1);
        dormandPrince853Integrator4.setSafety((double) '4');
        dormandPrince853Integrator4.setSafety((double) (byte) -1);
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        dormandPrince853Integrator12.setMaxGrowth((double) (short) 1);
        double double21 = dormandPrince853Integrator12.getMinReduction();
        java.lang.String str22 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction23, (double) 'a', 1.7320508075688772d, (int) ' ');
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double[] doubleArray24 = null;
        boolean boolean25 = switchingFunctionsHandler0.reset((double) 0L, doubleArray24);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler27 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean28 = switchingFunctionsHandler27.stop();
        double double29 = switchingFunctionsHandler27.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler31 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator32 = null;
        boolean boolean33 = switchingFunctionsHandler31.evaluateStep(stepInterpolator32);
        double[] doubleArray43 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray46 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray43, doubleArray46);
        switchingFunctionsHandler31.stepAccepted(100.0d, doubleArray43);
        switchingFunctionsHandler27.stepAccepted(10.0d, doubleArray43);
        boolean boolean50 = switchingFunctionsHandler27.isEmpty();
        double double51 = switchingFunctionsHandler27.getEventTime();
        double[] doubleArray58 = new double[] { Double.NaN };
        double[] doubleArray67 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray70 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray67, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray58, doubleArray67);
        double[] doubleArray81 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray84 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray81, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray58, doubleArray81);
        boolean boolean87 = switchingFunctionsHandler27.reset((double) (short) 1, doubleArray81);
        boolean boolean88 = switchingFunctionsHandler0.reset((double) (byte) 1, doubleArray81);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator89 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = switchingFunctionsHandler0.evaluateStep(stepInterpolator89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        dormandPrince853Integrator4.setMinReduction((double) (byte) 10);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double[] doubleArray22 = new double[] { Double.NaN };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray22, doubleArray31);
        boolean boolean37 = switchingFunctionsHandler0.reset(100.0d, doubleArray22);
        double double38 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        switchingFunctionsHandler0.add(switchingFunction39, (double) (short) 0, (double) 10.0f, 1);
        boolean boolean44 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        stepHandler12.handleStep(stepInterpolator13, false);
        stepHandler12.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator17 = null;
        stepHandler12.handleStep(stepInterpolator17, true);
        boolean boolean20 = stepHandler12.requiresDenseOutput();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler2.stepAccepted((double) (short) 1, doubleArray16);
        double[] doubleArray26 = new double[] { Double.NaN };
        double[] doubleArray35 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray38 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray35, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray26, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray16, doubleArray26);
        double double42 = dormandPrince853Integrator41.getCurrentStepStart();
        double double43 = dormandPrince853Integrator41.getCurrentStepStart();
        double double44 = dormandPrince853Integrator41.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction45, (double) 1, (double) 0, 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, Double.NaN, (double) 100.0f, (int) (byte) 0);
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator25.addSwitchingFunction(switchingFunction26, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator25.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler33 = dormandPrince853Integrator25.getStepHandler();
        java.lang.String str34 = dormandPrince853Integrator25.getName();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(stepHandler33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler35);
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', (double) (-1.0f), 14.142135623730951d);
        dormandPrince853Integrator4.setSafety((double) (byte) 1);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction34, 14.142135623730951d, 0.2d, (int) (short) 10);
        java.lang.String str39 = dormandPrince853Integrator12.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str39, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double[] doubleArray22 = new double[] { Double.NaN };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray22, doubleArray31);
        boolean boolean37 = switchingFunctionsHandler0.reset(100.0d, doubleArray22);
        double double38 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        switchingFunctionsHandler0.add(switchingFunction39, 14.142135623730951d, (double) 'a', 100);
        double double44 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler46 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator47 = null;
        boolean boolean48 = switchingFunctionsHandler46.evaluateStep(stepInterpolator47);
        double[] doubleArray58 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray61 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray58, doubleArray61);
        switchingFunctionsHandler46.stepAccepted(100.0d, doubleArray58);
        boolean boolean64 = switchingFunctionsHandler46.isEmpty();
        double[] doubleArray74 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray77 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray74, doubleArray77);
        boolean boolean79 = switchingFunctionsHandler46.reset(10.0d, doubleArray77);
        boolean boolean80 = switchingFunctionsHandler0.reset((double) (-1), doubleArray77);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator81 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = switchingFunctionsHandler0.evaluateStep(stepInterpolator81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        double double18 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) 3);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction12, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator11.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator11.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator20 = null;
        stepHandler19.handleStep(stepInterpolator20, false);
        stepHandler19.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler19);
        int int25 = dormandPrince853Integrator4.getOrder();
        double double26 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction27, 0.0d, 2.0d, (int) ' ');
        double double32 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations33 = null;
        double[] doubleArray45 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray48 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray45, doubleArray48);
        double[] doubleArray53 = new double[] { Double.NaN };
        double[] doubleArray62 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray65 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray62, doubleArray65);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray53, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 0.0f, doubleArray48, doubleArray53);
        double[] doubleArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations33, 5.916079783099616d, doubleArray48, (double) 1, doubleArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.9, 0.0]");
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        switchingFunctionsHandler0.add(switchingFunction8, (double) (byte) 1, (double) (byte) 100, (int) (short) 1);
        boolean boolean13 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        switchingFunctionsHandler0.add(switchingFunction14, 0.0d, (double) 1L, (int) (byte) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        switchingFunctionsHandler0.add(switchingFunction19, (double) 1.0f, (double) 'a', 2);
        double[] doubleArray30 = new double[] { Double.NaN };
        double[] doubleArray39 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray42 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray39, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray30, doubleArray39);
        double[] doubleArray53 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray56 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray53, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray30, doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted((double) 0L, doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.9, 0.0]");
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        double double11 = dormandPrince853Integrator9.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction17, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator16.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        stepHandler24.handleStep(stepInterpolator25, false);
        stepHandler24.reset();
        dormandPrince853Integrator9.setStepHandler(stepHandler24);
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        double double31 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(0.9486832980505138d);
        double double34 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int35 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator4.getStepHandler();
        int int37 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction25, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator24.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator24.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        stepHandler32.handleStep(stepInterpolator33, false);
        dormandPrince853Integrator18.setStepHandler(stepHandler32);
        boolean boolean37 = stepHandler32.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        double double39 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double20 = dormandPrince853Integrator19.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction21, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double26 = dormandPrince853Integrator19.getCurrentStepStart();
        java.lang.String str27 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator19.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler28);
        stepHandler28.reset();
        boolean boolean31 = stepHandler28.requiresDenseOutput();
        stepHandler28.reset();
        stepHandler28.reset();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setInitialStepSize((double) 2);
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        stepHandler9.reset();
        org.junit.Assert.assertNotNull(stepHandler9);
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) ' ', (double) (short) 0, (int) '#');
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction20, 1.0d, (double) 2, (int) (byte) 1);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator4.getStepHandler();
        boolean boolean26 = stepHandler25.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        stepHandler25.handleStep(stepInterpolator27, true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator12.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction40, (double) 10, (double) 'a', (int) (byte) 10);
        int int45 = dormandPrince853Integrator39.getOrder();
        double double46 = dormandPrince853Integrator39.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction52 = null;
        dormandPrince853Integrator51.addSwitchingFunction(switchingFunction52, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator51.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler59 = dormandPrince853Integrator51.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator60 = null;
        stepHandler59.handleStep(stepInterpolator60, false);
        stepHandler59.reset();
        dormandPrince853Integrator39.setStepHandler(stepHandler59);
        dormandPrince853Integrator12.setStepHandler(stepHandler59);
        dormandPrince853Integrator12.setMaxGrowth((double) (short) 0);
        int int68 = dormandPrince853Integrator12.getOrder();
        dormandPrince853Integrator12.setMaxGrowth((double) 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        int int13 = dormandPrince853Integrator4.getOrder();
        java.lang.Class<?> wildcardClass14 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 10.0d, Double.NaN, 17.320508075688775d);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, 31.622776601683793d, (double) (short) 1, (int) (short) 10);
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations12 = null;
        double[] doubleArray20 = new double[] { 31.622776601683793d, (-1.0f) };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        boolean boolean38 = switchingFunctionsHandler36.evaluateStep(stepInterpolator37);
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        switchingFunctionsHandler36.stepAccepted(100.0d, doubleArray48);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler55 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean56 = switchingFunctionsHandler55.stop();
        double double57 = switchingFunctionsHandler55.getEventTime();
        double[] doubleArray62 = new double[] { Double.NaN };
        double[] doubleArray71 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray74 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray71, doubleArray74);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray62, doubleArray71);
        switchingFunctionsHandler55.stepAccepted(0.2d, doubleArray62);
        boolean boolean78 = switchingFunctionsHandler36.reset((double) 'a', doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, (double) 100, doubleArray34, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 10.0d, doubleArray20, doubleArray62);
        double[] doubleArray81 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, 8.0d, doubleArray62, doubleArray81);
        double[] doubleArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations12, (double) 2, doubleArray81, 31.622776601683793d, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[31.622776601683793, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) 0, 1.0d, 3);
        double double13 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        stepHandler23.handleStep(stepInterpolator24, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        stepHandler23.handleStep(stepInterpolator27, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler23.handleStep(stepInterpolator30, false);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertNotNull(stepHandler23);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler0.evaluateStep(stepInterpolator2);
        double[] doubleArray5 = new double[] {};
        switchingFunctionsHandler0.stepAccepted((double) 100L, doubleArray5);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler8 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler10 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        boolean boolean12 = switchingFunctionsHandler10.evaluateStep(stepInterpolator11);
        double[] doubleArray22 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray25 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray22, doubleArray25);
        switchingFunctionsHandler10.stepAccepted(100.0d, doubleArray22);
        switchingFunctionsHandler8.stepAccepted((double) (short) 1, doubleArray22);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler30 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean31 = switchingFunctionsHandler30.stop();
        double double32 = switchingFunctionsHandler30.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction33 = null;
        switchingFunctionsHandler30.add(switchingFunction33, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean38 = switchingFunctionsHandler30.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler40 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator41 = null;
        boolean boolean42 = switchingFunctionsHandler40.evaluateStep(stepInterpolator41);
        double[] doubleArray52 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray55 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray52, doubleArray55);
        switchingFunctionsHandler40.stepAccepted(100.0d, doubleArray52);
        double[] doubleArray62 = new double[] { Double.NaN };
        double[] doubleArray71 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray74 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray71, doubleArray74);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray62, doubleArray71);
        boolean boolean77 = switchingFunctionsHandler40.reset(100.0d, doubleArray62);
        boolean boolean78 = switchingFunctionsHandler30.reset((double) (-1), doubleArray62);
        switchingFunctionsHandler8.stepAccepted((double) 8, doubleArray62);
        switchingFunctionsHandler0.stepAccepted((double) 1, doubleArray62);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction81 = null;
        switchingFunctionsHandler0.add(switchingFunction81, (double) 3, (double) 100L, 3);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator86 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = switchingFunctionsHandler0.evaluateStep(stepInterpolator86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler1 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler1.evaluateStep(stepInterpolator2);
        double[] doubleArray13 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray16 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray13, doubleArray16);
        switchingFunctionsHandler1.stepAccepted(100.0d, doubleArray13);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        switchingFunctionsHandler1.add(switchingFunction19, 100.0d, (double) 0.0f, (int) (byte) 1);
        java.io.IOException iOException25 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator31.addSwitchingFunction(switchingFunction32, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator31.setMinReduction(100.0d);
        double double39 = dormandPrince853Integrator31.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator31.addSwitchingFunction(switchingFunction40, (double) 3, (double) (-1L), (int) (byte) -1);
        java.lang.Object[] objArray45 = new java.lang.Object[] { switchingFunctionsHandler1, "hi!", "Dormand-Prince 8 (5, 3)", (-1L) };
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        java.lang.Throwable throwable48 = null;
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", objArray47, throwable48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException49);
        java.lang.String str51 = mathException50.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException52 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray45, (java.lang.Throwable) mathException50);
        java.lang.Throwable[] throwableArray54 = mathException50.getSuppressed();
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        java.lang.Throwable throwable60 = null;
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", objArray59, throwable60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        java.lang.String str63 = mathException62.getPattern();
        java.lang.Object[] objArray64 = mathException62.getArguments();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException62);
        java.io.IOException iOException66 = new java.io.IOException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException62);
        java.lang.Throwable[] throwableArray67 = mathException62.getSuppressed();
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        java.lang.Throwable throwable70 = null;
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray69, throwable70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException71);
        java.lang.String str73 = mathException72.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException74 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException72);
        java.io.IOException iOException75 = new java.io.IOException((java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray67, (java.lang.Throwable) iOException75);
        mathException50.addSuppressed((java.lang.Throwable) iOException75);
        java.lang.Class<?> wildcardClass78 = iOException75.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        switchingFunctionsHandler0.add(switchingFunction19, (double) 0.0f, (double) (short) 100, (int) (short) 10);
        double[] doubleArray30 = new double[] { Double.NaN };
        double[] doubleArray39 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray42 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray39, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray30, doubleArray39);
        double[] doubleArray52 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray61 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray64 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray61, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray52, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (-1.0f), doubleArray30, doubleArray52);
        boolean boolean68 = switchingFunctionsHandler0.reset((double) '#', doubleArray30);
        boolean boolean69 = switchingFunctionsHandler0.stop();
        boolean boolean70 = switchingFunctionsHandler0.isEmpty();
        boolean boolean71 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 5.916079783099616d, (-1.0d), (double) 3);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction15, (double) 100, (double) (short) 0, (int) (short) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double25 = dormandPrince853Integrator24.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction26, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double31 = dormandPrince853Integrator24.getSafety();
        double double32 = dormandPrince853Integrator24.getMaxGrowth();
        double double33 = dormandPrince853Integrator24.getCurrentStepStart();
        double double34 = dormandPrince853Integrator24.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator24.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator36 = null;
        stepHandler35.handleStep(stepInterpolator36, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        stepHandler35.handleStep(stepInterpolator39, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator42 = null;
        stepHandler35.handleStep(stepInterpolator42, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setSafety(100.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction48, (double) (byte) 100, (double) ' ', 3);
        int int53 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize(0.9486832980505138d);
        dormandPrince853Integrator4.setMaxGrowth(2.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9d + "'", double25 == 0.9d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.9d + "'", double31 == 0.9d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.2d + "'", double34 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        switchingFunctionsHandler0.add(switchingFunction22, (double) (byte) 10, (double) 100, 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler0.add(switchingFunction27, (double) 10.0f, 0.9486832980505138d, 8);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = switchingFunctionsHandler0.evaluateStep(stepInterpolator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator17.getStepHandler();
        double double20 = dormandPrince853Integrator17.getMaxGrowth();
        double double21 = dormandPrince853Integrator17.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double27 = dormandPrince853Integrator26.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction28, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double33 = dormandPrince853Integrator26.getCurrentStepStart();
        double double34 = dormandPrince853Integrator26.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator17.setStepHandler(stepHandler35);
        int int37 = dormandPrince853Integrator17.getOrder();
        double double38 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.9d + "'", double27 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 1.0d, (double) 100.0f, (double) (-1.0f));
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double11 = dormandPrince853Integrator10.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction12, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double17 = dormandPrince853Integrator10.getCurrentStepStart();
        dormandPrince853Integrator10.setInitialStepSize((double) 0.0f);
        java.lang.String str20 = dormandPrince853Integrator10.getName();
        java.lang.String str21 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator10.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler22);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str25 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction26, (double) 10.0f, (double) 100L, (int) ' ');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction25, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator24.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator24.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        stepHandler32.handleStep(stepInterpolator33, false);
        dormandPrince853Integrator18.setStepHandler(stepHandler32);
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator38 = null;
        stepHandler32.handleStep(stepInterpolator38, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator41 = null;
        stepHandler32.handleStep(stepInterpolator41, false);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 1.7320508075688772d, (double) 0.0f, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(5.916079783099616d, 0.9486832980505138d, (double) (byte) -1, 14.142135623730951d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator10.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator10.setMaxGrowth(0.9486832980505138d);
        double[] doubleArray18 = new double[] { Double.NaN };
        double[] doubleArray27 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray30 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray27, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray18, doubleArray27);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction33 = null;
        dormandPrince853Integrator32.addSwitchingFunction(switchingFunction33, (double) 8, (double) '4', 0);
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator32.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler38);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator40 = null;
        stepHandler38.handleStep(stepInterpolator40, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator44 = null;
        stepHandler38.handleStep(stepInterpolator44, false);
        boolean boolean47 = stepHandler38.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 2, 2.0d, (double) (short) 10);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4.47213595499958d + "'", double5 == 4.47213595499958d);
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, 0.0d, (double) 2, (int) (byte) 100);
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler19 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator20 = null;
        boolean boolean21 = switchingFunctionsHandler19.evaluateStep(stepInterpolator20);
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        switchingFunctionsHandler19.stepAccepted(100.0d, doubleArray31);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler38 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean39 = switchingFunctionsHandler38.stop();
        double double40 = switchingFunctionsHandler38.getEventTime();
        double[] doubleArray45 = new double[] { Double.NaN };
        double[] doubleArray54 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray57 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray54, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray45, doubleArray54);
        switchingFunctionsHandler38.stepAccepted(0.2d, doubleArray45);
        boolean boolean61 = switchingFunctionsHandler19.reset((double) 'a', doubleArray45);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, (double) 100, doubleArray17, doubleArray45);
        boolean boolean63 = switchingFunctionsHandler0.reset((double) 1.0f, doubleArray17);
        boolean boolean64 = switchingFunctionsHandler0.isEmpty();
        double double65 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray5, throwable6);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double15 = dormandPrince853Integrator14.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator14.addSwitchingFunction(switchingFunction16, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double21 = dormandPrince853Integrator14.getSafety();
        double double22 = dormandPrince853Integrator14.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator27.addSwitchingFunction(switchingFunction28, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator27.setMinReduction(100.0d);
        double double35 = dormandPrince853Integrator27.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double41 = dormandPrince853Integrator40.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        dormandPrince853Integrator40.addSwitchingFunction(switchingFunction42, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double47 = dormandPrince853Integrator40.getCurrentStepStart();
        dormandPrince853Integrator40.setInitialStepSize((double) 0.0f);
        java.lang.String str50 = dormandPrince853Integrator40.getName();
        java.io.IOException iOException52 = new java.io.IOException("hi!");
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray55, throwable56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException57);
        java.lang.String str59 = mathException58.getPattern();
        java.lang.Object[] objArray60 = mathException58.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException61 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray60);
        double[] doubleArray70 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray73 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray70, doubleArray73);
        java.lang.String str75 = dormandPrince853Integrator74.getName();
        dormandPrince853Integrator74.setMinReduction(0.9d);
        java.lang.String str78 = dormandPrince853Integrator74.getName();
        java.lang.Object[] objArray79 = new java.lang.Object[] { double22, double35, dormandPrince853Integrator40, "hi!", objArray60, dormandPrince853Integrator74 };
        java.lang.Object[] objArray81 = new java.lang.Object[] {};
        java.lang.Throwable throwable82 = null;
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("hi!", objArray81, throwable82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray60, (java.lang.Throwable) mathException84);
        org.apache.commons.math.ode.IntegratorException integratorException86 = new org.apache.commons.math.ode.IntegratorException("", objArray60);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray5, (java.lang.Throwable) integratorException86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException88);
        java.lang.Throwable[] throwableArray90 = mathException88.getSuppressed();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException", (java.lang.Object[]) throwableArray90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException91);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9d + "'", double41 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str75, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str78, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertNotNull(throwableArray90);
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) 1);
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        int int17 = dormandPrince853Integrator4.getOrder();
        double double18 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        java.lang.String str17 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth(0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) (short) 0, 0.0d, (double) (-1L));
        double double5 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) ' ');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        dormandPrince853Integrator4.setSafety((double) 8);
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        double double23 = dormandPrince853Integrator4.getCurrentStepStart();
        double double24 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        switchingFunctionsHandler0.add(switchingFunction21, (double) (byte) -1, (double) (byte) -1, 2);
        boolean boolean26 = switchingFunctionsHandler0.stop();
        boolean boolean27 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        switchingFunctionsHandler0.add(switchingFunction28, (double) 10.0f, (double) 100.0f, (int) 'a');
        double double33 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        switchingFunctionsHandler0.add(switchingFunction34, (double) (byte) 1, 0.0d, 10);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = switchingFunctionsHandler0.evaluateStep(stepInterpolator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction17, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator16.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        stepHandler24.handleStep(stepInterpolator25, false);
        stepHandler24.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler24.handleStep(stepInterpolator30, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        stepHandler24.handleStep(stepInterpolator33, true);
        boolean boolean36 = stepHandler24.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 'a', (double) 0, (int) (byte) 1);
        int int24 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 'a', 0.0d, (double) '#', 2.0d);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator4.setMaxGrowth(0.9486832980505138d);
        double[] doubleArray12 = new double[] { Double.NaN };
        double[] doubleArray21 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray24 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray21, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray12, doubleArray21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction27, (double) 8, (double) '4', 0);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        double double34 = dormandPrince853Integrator4.getCurrentStepStart();
        double double35 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 35.0d, (double) 0.0f, 8);
        boolean boolean28 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = switchingFunctionsHandler0.evaluateStep(stepInterpolator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        boolean boolean23 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        boolean boolean25 = switchingFunctionsHandler0.evaluateStep(stepInterpolator24);
        boolean boolean26 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler0.add(switchingFunction27, 0.6324555320336759d, 8.0d, 0);
        boolean boolean32 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = switchingFunctionsHandler0.evaluateStep(stepInterpolator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator12.getMaxStep();
        double double20 = dormandPrince853Integrator12.getCurrentStepStart();
        dormandPrince853Integrator12.setMaxGrowth(5.916079783099616d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        int int19 = dormandPrince853Integrator4.getOrder();
        double double20 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction22, (-1.0d), (double) 0.0f, 10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler21);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 0.0f);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        stepHandler16.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator18 = null;
        stepHandler16.handleStep(stepInterpolator18, true);
        stepHandler16.reset();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double[] doubleArray22 = new double[] { Double.NaN };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray22, doubleArray31);
        boolean boolean37 = switchingFunctionsHandler0.reset(100.0d, doubleArray22);
        double double38 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        switchingFunctionsHandler0.add(switchingFunction39, 14.142135623730951d, (double) 'a', 100);
        double double44 = switchingFunctionsHandler0.getEventTime();
        boolean boolean45 = switchingFunctionsHandler0.isEmpty();
        double double46 = switchingFunctionsHandler0.getEventTime();
        boolean boolean47 = switchingFunctionsHandler0.isEmpty();
        double double48 = switchingFunctionsHandler0.getEventTime();
        double double49 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = switchingFunctionsHandler0.evaluateStep(stepInterpolator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean23 = switchingFunctionsHandler0.stop();
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        boolean boolean43 = switchingFunctionsHandler0.reset((double) 1L, doubleArray28);
        boolean boolean44 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        switchingFunctionsHandler0.add(switchingFunction45, 0.0d, (double) 0.0f, (int) 'a');
        boolean boolean50 = switchingFunctionsHandler0.isEmpty();
        boolean boolean51 = switchingFunctionsHandler0.stop();
        java.lang.Class<?> wildcardClass52 = switchingFunctionsHandler0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (-1L), (double) ' ', (int) (byte) 1);
        dormandPrince853Integrator4.setMinReduction((double) ' ');
        double double21 = dormandPrince853Integrator4.getMinStep();
        java.lang.Class<?> wildcardClass22 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) 100);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator17 = null;
        stepHandler16.handleStep(stepInterpolator17, true);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 2, (double) 8, (double) 100, 10.0d);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (-0.0d), 0.2d, (int) (short) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator14.addSwitchingFunction(switchingFunction15, (double) 10, (double) 'a', (int) (byte) 10);
        int int20 = dormandPrince853Integrator14.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator14.getStepHandler();
        stepHandler21.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler21);
        double double24 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(stepHandler21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        boolean boolean20 = switchingFunctionsHandler2.isEmpty();
        double[] doubleArray30 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray33 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray30, doubleArray33);
        boolean boolean35 = switchingFunctionsHandler2.reset(10.0d, doubleArray33);
        double[] doubleArray39 = new double[] { Double.NaN };
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray39, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray33, doubleArray48);
        dormandPrince853Integrator54.setMinReduction((double) (byte) -1);
        dormandPrince853Integrator54.setInitialStepSize((double) (byte) 1);
        dormandPrince853Integrator54.setInitialStepSize((double) (-1));
        java.lang.String str61 = dormandPrince853Integrator54.getName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str61, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        double double19 = dormandPrince853Integrator17.getMinStep();
        java.lang.String str20 = dormandPrince853Integrator17.getName();
        dormandPrince853Integrator17.setMaxGrowth((double) '#');
        double double23 = dormandPrince853Integrator17.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, Double.NaN, (double) 2, 17.320508075688775d);
        double[] doubleArray13 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray16 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray13, doubleArray16);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        double[] doubleArray22 = new double[] { Double.NaN };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray22, doubleArray31);
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator36.getStepHandler();
        dormandPrince853Integrator17.setStepHandler(stepHandler37);
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator40 = null;
        stepHandler39.handleStep(stepInterpolator40, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler39);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertNotNull(stepHandler39);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, 100.0d, (double) 100L, (double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator9.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler10);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        boolean boolean2 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (-1.0d), (double) 1L, (int) '#');
        boolean boolean8 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler10 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler12 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        boolean boolean14 = switchingFunctionsHandler12.evaluateStep(stepInterpolator13);
        double[] doubleArray24 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray27 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray24, doubleArray27);
        switchingFunctionsHandler12.stepAccepted(100.0d, doubleArray24);
        switchingFunctionsHandler10.stepAccepted((double) (short) 1, doubleArray24);
        double double31 = switchingFunctionsHandler10.getEventTime();
        double double32 = switchingFunctionsHandler10.getEventTime();
        double double33 = switchingFunctionsHandler10.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler37 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler39 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator40 = null;
        boolean boolean41 = switchingFunctionsHandler39.evaluateStep(stepInterpolator40);
        double[] doubleArray51 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray54 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray51, doubleArray54);
        switchingFunctionsHandler39.stepAccepted(100.0d, doubleArray51);
        switchingFunctionsHandler37.stepAccepted((double) (short) 1, doubleArray51);
        double[] doubleArray61 = new double[] { Double.NaN };
        double[] doubleArray70 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray73 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray70, doubleArray73);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray61, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray51, doubleArray61);
        switchingFunctionsHandler10.stepAccepted(97.0d, doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted((double) (-1), doubleArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.9, 0.0]");
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator12.getStepHandler();
        int int19 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator12.getStepHandler();
        double double21 = dormandPrince853Integrator12.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double double18 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        boolean boolean20 = switchingFunctionsHandler0.evaluateStep(stepInterpolator19);
        boolean boolean21 = switchingFunctionsHandler0.stop();
        boolean boolean22 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator23 = null;
        boolean boolean24 = switchingFunctionsHandler0.evaluateStep(stepInterpolator23);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator12.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator18 = null;
        stepHandler17.handleStep(stepInterpolator18, false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler17);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 100, (double) (short) 10, Double.NaN);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 1);
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction17, (double) (-1.0f), 10.0d, 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        int int18 = dormandPrince853Integrator4.getOrder();
        java.lang.String str19 = dormandPrince853Integrator4.getName();
        int int20 = dormandPrince853Integrator4.getOrder();
        double[] doubleArray29 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray32 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray29, doubleArray32);
        java.lang.String str34 = dormandPrince853Integrator33.getName();
        double[] doubleArray38 = new double[] { Double.NaN };
        double[] doubleArray47 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray50 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray47, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray38, doubleArray47);
        org.apache.commons.math.ode.StepHandler stepHandler53 = dormandPrince853Integrator52.getStepHandler();
        dormandPrince853Integrator33.setStepHandler(stepHandler53);
        double double55 = dormandPrince853Integrator33.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction61 = null;
        dormandPrince853Integrator60.addSwitchingFunction(switchingFunction61, (double) 10, (double) 'a', (int) (byte) 10);
        int int66 = dormandPrince853Integrator60.getOrder();
        double double67 = dormandPrince853Integrator60.getCurrentSignedStepsize();
        double double68 = dormandPrince853Integrator60.getCurrentSignedStepsize();
        int int69 = dormandPrince853Integrator60.getOrder();
        double double70 = dormandPrince853Integrator60.getMinReduction();
        int int71 = dormandPrince853Integrator60.getOrder();
        int int72 = dormandPrince853Integrator60.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction78 = null;
        dormandPrince853Integrator77.addSwitchingFunction(switchingFunction78, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator77.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler85 = dormandPrince853Integrator77.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator86 = null;
        stepHandler85.handleStep(stepInterpolator86, false);
        stepHandler85.reset();
        dormandPrince853Integrator60.setStepHandler(stepHandler85);
        dormandPrince853Integrator33.setStepHandler(stepHandler85);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator92 = null;
        stepHandler85.handleStep(stepInterpolator92, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler85);
        dormandPrince853Integrator4.setMinReduction(5.916079783099616d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler53);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.2d + "'", double70 == 0.2d);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 8 + "'", int72 == 8);
        org.junit.Assert.assertNotNull(stepHandler85);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) ' ', 0.0d, (int) (short) 100);
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double13 = dormandPrince853Integrator4.getSafety();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double[] doubleArray19 = new double[] { Double.NaN };
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray19, doubleArray28);
        java.lang.String str34 = dormandPrince853Integrator33.getName();
        java.lang.String str35 = dormandPrince853Integrator33.getName();
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator33.getStepHandler();
        boolean boolean37 = stepHandler36.requiresDenseOutput();
        stepHandler36.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler36);
        boolean boolean40 = stepHandler36.requiresDenseOutput();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str35, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        double[] doubleArray2 = null;
        double[] doubleArray10 = new double[] { Double.NaN };
        double[] doubleArray19 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray22 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray19, doubleArray22);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray10, doubleArray19);
        double[] doubleArray33 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray36 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray33, doubleArray36);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray10, doubleArray33);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler39 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator40 = null;
        boolean boolean41 = switchingFunctionsHandler39.evaluateStep(stepInterpolator40);
        double[] doubleArray51 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray54 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray51, doubleArray54);
        switchingFunctionsHandler39.stepAccepted(100.0d, doubleArray51);
        boolean boolean57 = switchingFunctionsHandler39.isEmpty();
        double[] doubleArray67 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray70 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray67, doubleArray70);
        boolean boolean72 = switchingFunctionsHandler39.reset(10.0d, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 3, doubleArray10, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (-1), doubleArray2, doubleArray70);
        double double75 = dormandPrince853Integrator74.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator22.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction29, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator28.setMinReduction(100.0d);
        double double36 = dormandPrince853Integrator28.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction37, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator28.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator43 = null;
        stepHandler42.handleStep(stepInterpolator43, false);
        boolean boolean46 = stepHandler42.requiresDenseOutput();
        dormandPrince853Integrator22.setStepHandler(stepHandler42);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator48 = null;
        stepHandler42.handleStep(stepInterpolator48, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator51 = null;
        stepHandler42.handleStep(stepInterpolator51, true);
        dormandPrince853Integrator12.setStepHandler(stepHandler42);
        int int55 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9486832980505138d + "'", double17 == 0.9486832980505138d);
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction12, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator11.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator11.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator20 = null;
        stepHandler19.handleStep(stepInterpolator20, false);
        stepHandler19.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler19);
        int int25 = dormandPrince853Integrator4.getOrder();
        double double26 = dormandPrince853Integrator4.getCurrentStepStart();
        double double27 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator4.getStepHandler();
        java.lang.Class<?> wildcardClass29 = stepHandler28.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 3, (double) 0, (double) 1L);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double[] doubleArray24 = null;
        boolean boolean25 = switchingFunctionsHandler0.reset((double) 0L, doubleArray24);
        double double26 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler0.add(switchingFunction27, 14.142135623730951d, (double) 0.0f, (int) '#');
        double[] doubleArray38 = new double[] { Double.NaN };
        double[] doubleArray47 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray50 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray47, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray38, doubleArray47);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler55 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler57 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator58 = null;
        boolean boolean59 = switchingFunctionsHandler57.evaluateStep(stepInterpolator58);
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        switchingFunctionsHandler57.stepAccepted(100.0d, doubleArray69);
        switchingFunctionsHandler55.stepAccepted((double) (short) 1, doubleArray69);
        double[] doubleArray79 = new double[] { Double.NaN };
        double[] doubleArray88 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray91 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray88, doubleArray91);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray79, doubleArray88);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray69, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator95 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) 0.0f, doubleArray47, doubleArray69);
        boolean boolean96 = switchingFunctionsHandler0.reset(1.0d, doubleArray47);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator97 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = switchingFunctionsHandler0.evaluateStep(stepInterpolator97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) 10.0f, (double) 10.0f, (double) (byte) 10);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 10L, 0.9486832980505138d, (int) (byte) -1);
        double double18 = dormandPrince853Integrator4.getCurrentStepStart();
        double double19 = dormandPrince853Integrator4.getMinStep();
        double double20 = dormandPrince853Integrator4.getMinStep();
        int int21 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        switchingFunctionsHandler0.add(switchingFunction19, (double) 0.0f, (double) (short) 100, (int) (short) 10);
        double double24 = switchingFunctionsHandler0.getEventTime();
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        double[] doubleArray44 = new double[] { Double.NaN };
        double[] doubleArray53 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray56 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray53, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (short) 10, doubleArray36, doubleArray44);
        boolean boolean60 = switchingFunctionsHandler0.reset((double) (byte) 10, doubleArray36);
        double double61 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, (double) (-1), (double) 1.0f, 8);
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction26, 0.9486832980505138d, 100.0d, (int) ' ');
        dormandPrince853Integrator4.setMinReduction((double) (byte) 1);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        boolean boolean42 = switchingFunctionsHandler0.reset((double) 100, doubleArray36);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction43 = null;
        switchingFunctionsHandler0.add(switchingFunction43, 0.0d, (double) 1.0f, 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        switchingFunctionsHandler0.add(switchingFunction48, 3.0d, (double) (short) -1, 0);
        double double53 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        switchingFunctionsHandler0.add(switchingFunction54, 0.2d, 1.0d, (int) (short) 100);
        boolean boolean59 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator60 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = switchingFunctionsHandler0.evaluateStep(stepInterpolator60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (-1.0d), (double) (-1), (int) '#');
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMinStep();
        int int17 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        int int16 = dormandPrince853Integrator4.getOrder();
        double double17 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction24, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator23.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator23.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator32 = null;
        stepHandler31.handleStep(stepInterpolator32, false);
        stepHandler31.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler31);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        stepHandler31.handleStep(stepInterpolator37, false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler31);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        double double18 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator17.getCurrentStepStart();
        double double20 = dormandPrince853Integrator17.getMinReduction();
        dormandPrince853Integrator17.setSafety(0.0d);
        dormandPrince853Integrator17.setSafety(0.0d);
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations25 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler27 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean28 = switchingFunctionsHandler27.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        boolean boolean30 = switchingFunctionsHandler27.evaluateStep(stepInterpolator29);
        double[] doubleArray32 = new double[] {};
        switchingFunctionsHandler27.stepAccepted((double) 100L, doubleArray32);
        double[] doubleArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator17.integrate(firstOrderDifferentialEquations25, 7.211102550927978d, doubleArray32, (double) 10.0f, doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.2d + "'", double20 == 0.2d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler2.evaluateStep(stepInterpolator5);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler8 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler10 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        boolean boolean12 = switchingFunctionsHandler10.evaluateStep(stepInterpolator11);
        double[] doubleArray22 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray25 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray22, doubleArray25);
        switchingFunctionsHandler10.stepAccepted(100.0d, doubleArray22);
        switchingFunctionsHandler8.stepAccepted((double) (short) 1, doubleArray22);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler30 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler32 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        boolean boolean34 = switchingFunctionsHandler32.evaluateStep(stepInterpolator33);
        double[] doubleArray44 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray47 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray44, doubleArray47);
        switchingFunctionsHandler32.stepAccepted(100.0d, doubleArray44);
        switchingFunctionsHandler30.stepAccepted((double) (short) 1, doubleArray44);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator51 = null;
        boolean boolean52 = switchingFunctionsHandler30.evaluateStep(stepInterpolator51);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction53 = null;
        switchingFunctionsHandler30.add(switchingFunction53, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler59 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator60 = null;
        boolean boolean61 = switchingFunctionsHandler59.evaluateStep(stepInterpolator60);
        double[] doubleArray71 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray74 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray71, doubleArray74);
        switchingFunctionsHandler59.stepAccepted(100.0d, doubleArray71);
        boolean boolean77 = switchingFunctionsHandler59.isEmpty();
        double[] doubleArray87 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray90 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray87, doubleArray90);
        boolean boolean92 = switchingFunctionsHandler59.reset(10.0d, doubleArray90);
        boolean boolean93 = switchingFunctionsHandler30.reset((double) 10, doubleArray90);
        switchingFunctionsHandler8.stepAccepted((double) (byte) -1, doubleArray90);
        boolean boolean95 = switchingFunctionsHandler2.reset((double) (byte) -1, doubleArray90);
        double[] doubleArray96 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator97 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 8, 1.0d, doubleArray90, doubleArray96);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        boolean boolean22 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        boolean boolean42 = switchingFunctionsHandler0.reset((double) 100, doubleArray36);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction43 = null;
        switchingFunctionsHandler0.add(switchingFunction43, 0.0d, (double) 1.0f, 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        switchingFunctionsHandler0.add(switchingFunction48, 3.0d, (double) (short) -1, 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction53 = null;
        switchingFunctionsHandler0.add(switchingFunction53, (double) (-1), 35.0d, 2);
        double[] doubleArray59 = null;
        boolean boolean60 = switchingFunctionsHandler0.reset((double) (byte) 10, doubleArray59);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction61 = null;
        switchingFunctionsHandler0.add(switchingFunction61, (double) 10L, 31.622776601683793d, (int) (short) -1);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = switchingFunctionsHandler0.evaluateStep(stepInterpolator66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        boolean boolean22 = switchingFunctionsHandler0.evaluateStep(stepInterpolator21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler29 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        boolean boolean31 = switchingFunctionsHandler29.evaluateStep(stepInterpolator30);
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        switchingFunctionsHandler29.stepAccepted(100.0d, doubleArray41);
        boolean boolean47 = switchingFunctionsHandler29.isEmpty();
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        boolean boolean62 = switchingFunctionsHandler29.reset(10.0d, doubleArray60);
        boolean boolean63 = switchingFunctionsHandler0.reset((double) 10, doubleArray60);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler65 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler67 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator68 = null;
        boolean boolean69 = switchingFunctionsHandler67.evaluateStep(stepInterpolator68);
        double[] doubleArray79 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray82 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray79, doubleArray82);
        switchingFunctionsHandler67.stepAccepted(100.0d, doubleArray79);
        switchingFunctionsHandler65.stepAccepted((double) (short) 1, doubleArray79);
        boolean boolean86 = switchingFunctionsHandler0.reset((double) 0.0f, doubleArray79);
        boolean boolean87 = switchingFunctionsHandler0.isEmpty();
        boolean boolean88 = switchingFunctionsHandler0.stop();
        boolean boolean89 = switchingFunctionsHandler0.stop();
        boolean boolean90 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = switchingFunctionsHandler0.evaluateStep(stepInterpolator91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize((double) '4');
        double double13 = dormandPrince853Integrator4.getMinReduction();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        int int15 = dormandPrince853Integrator4.getOrder();
        double double16 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction(35.0d);
        double double19 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 97.0d, 100.0d, (int) '4');
        dormandPrince853Integrator4.setMinReduction(14.142135623730951d);
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        java.lang.String str25 = dormandPrince853Integrator4.getName();
        int int26 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) -1);
        double double8 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator13.addSwitchingFunction(switchingFunction14, (double) 10, (double) 'a', (int) (byte) 10);
        int int19 = dormandPrince853Integrator13.getOrder();
        double double20 = dormandPrince853Integrator13.getCurrentSignedStepsize();
        double double21 = dormandPrince853Integrator13.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator13.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler22);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction24, (double) (short) 0, (double) '4', (int) (byte) -1);
        java.lang.String str29 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction30, 0.0d, (double) 2, 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str29, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        double double23 = switchingFunctionsHandler0.getEventTime();
        boolean boolean24 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler41 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator42 = null;
        boolean boolean43 = switchingFunctionsHandler41.evaluateStep(stepInterpolator42);
        double[] doubleArray53 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray56 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray53, doubleArray56);
        switchingFunctionsHandler41.stepAccepted(100.0d, doubleArray53);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler60 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean61 = switchingFunctionsHandler60.stop();
        double double62 = switchingFunctionsHandler60.getEventTime();
        double[] doubleArray67 = new double[] { Double.NaN };
        double[] doubleArray76 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray79 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray76, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray67, doubleArray76);
        switchingFunctionsHandler60.stepAccepted(0.2d, doubleArray67);
        boolean boolean83 = switchingFunctionsHandler41.reset((double) 'a', doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, (double) 100, doubleArray39, doubleArray67);
        switchingFunctionsHandler0.stepAccepted((double) (-1), doubleArray67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        int int14 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double22 = dormandPrince853Integrator21.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction23, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction33 = null;
        dormandPrince853Integrator32.addSwitchingFunction(switchingFunction33, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator32.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator32.getStepHandler();
        boolean boolean41 = stepHandler40.requiresDenseOutput();
        boolean boolean42 = stepHandler40.requiresDenseOutput();
        dormandPrince853Integrator21.setStepHandler(stepHandler40);
        double double44 = dormandPrince853Integrator21.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction50 = null;
        dormandPrince853Integrator49.addSwitchingFunction(switchingFunction50, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator49.setMinReduction(100.0d);
        double double57 = dormandPrince853Integrator49.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction58 = null;
        dormandPrince853Integrator49.addSwitchingFunction(switchingFunction58, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler63 = dormandPrince853Integrator49.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator64 = null;
        stepHandler63.handleStep(stepInterpolator64, false);
        dormandPrince853Integrator21.setStepHandler(stepHandler63);
        dormandPrince853Integrator4.setStepHandler(stepHandler63);
        java.lang.Class<?> wildcardClass69 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.9d + "'", double44 == 0.9d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler63);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator12.getStepHandler();
        double double15 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator12.getStepHandler();
        double double18 = dormandPrince853Integrator12.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9486832980505138d + "'", double15 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double[] doubleArray22 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray25 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray22, doubleArray25);
        java.lang.String str27 = dormandPrince853Integrator26.getName();
        dormandPrince853Integrator26.setMinReduction(0.9d);
        java.lang.String str30 = dormandPrince853Integrator26.getName();
        dormandPrince853Integrator26.setMaxGrowth((double) 3);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator37.getStepHandler();
        dormandPrince853Integrator26.setStepHandler(stepHandler38);
        stepHandler38.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator41 = null;
        stepHandler38.handleStep(stepInterpolator41, true);
        stepHandler38.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator46 = null;
        stepHandler38.handleStep(stepInterpolator46, true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler38);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        double double19 = dormandPrince853Integrator4.getMinReduction();
        double double20 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, 3.0d, (double) (byte) 10, (double) '4');
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        int int12 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(7.211102550927978d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler19 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean20 = switchingFunctionsHandler19.stop();
        double double21 = switchingFunctionsHandler19.getEventTime();
        double[] doubleArray26 = new double[] { Double.NaN };
        double[] doubleArray35 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray38 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray35, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray26, doubleArray35);
        switchingFunctionsHandler19.stepAccepted(0.2d, doubleArray26);
        boolean boolean42 = switchingFunctionsHandler0.reset((double) 'a', doubleArray26);
        double double43 = switchingFunctionsHandler0.getEventTime();
        double double44 = switchingFunctionsHandler0.getEventTime();
        double double45 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator46 = null;
        boolean boolean47 = switchingFunctionsHandler0.evaluateStep(stepInterpolator46);
        boolean boolean48 = switchingFunctionsHandler0.stop();
        double double49 = switchingFunctionsHandler0.getEventTime();
        double double50 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        double double19 = dormandPrince853Integrator17.getMinStep();
        java.lang.String str20 = dormandPrince853Integrator17.getName();
        java.lang.String str21 = dormandPrince853Integrator17.getName();
        java.lang.String str22 = dormandPrince853Integrator17.getName();
        double double23 = dormandPrince853Integrator17.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9486832980505138d, (double) (-1L), (double) (byte) 10, 0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction(0.9486832980505138d);
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations8 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler10 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        boolean boolean12 = switchingFunctionsHandler10.evaluateStep(stepInterpolator11);
        double[] doubleArray22 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray25 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray22, doubleArray25);
        switchingFunctionsHandler10.stepAccepted(100.0d, doubleArray22);
        double double28 = switchingFunctionsHandler10.getEventTime();
        boolean boolean29 = switchingFunctionsHandler10.isEmpty();
        double double30 = switchingFunctionsHandler10.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler32 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean33 = switchingFunctionsHandler32.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler37 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator38 = null;
        boolean boolean39 = switchingFunctionsHandler37.evaluateStep(stepInterpolator38);
        double[] doubleArray49 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray52 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray49, doubleArray52);
        switchingFunctionsHandler37.stepAccepted(100.0d, doubleArray49);
        boolean boolean55 = switchingFunctionsHandler37.isEmpty();
        double[] doubleArray65 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray68 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray65, doubleArray68);
        boolean boolean70 = switchingFunctionsHandler37.reset(10.0d, doubleArray68);
        double[] doubleArray74 = new double[] { Double.NaN };
        double[] doubleArray83 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray86 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray83, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray74, doubleArray83);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray68, doubleArray83);
        switchingFunctionsHandler32.stepAccepted(0.9d, doubleArray68);
        switchingFunctionsHandler10.stepAccepted((double) (short) -1, doubleArray68);
        double[] doubleArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations8, 0.0d, doubleArray68, 3.732075599071396d, doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.9, 0.0]");
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        stepHandler18.handleStep(stepInterpolator19, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        java.lang.String str36 = dormandPrince853Integrator35.getName();
        dormandPrince853Integrator35.setSafety((double) 0L);
        dormandPrince853Integrator35.setMaxGrowth((double) 'a');
        int int41 = dormandPrince853Integrator35.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction42, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator35.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction54, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator53.setMinReduction(100.0d);
        double double61 = dormandPrince853Integrator53.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction62 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction62, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator53.getStepHandler();
        java.lang.String str68 = dormandPrince853Integrator53.getName();
        org.apache.commons.math.ode.StepHandler stepHandler69 = dormandPrince853Integrator53.getStepHandler();
        dormandPrince853Integrator35.setStepHandler(stepHandler69);
        dormandPrince853Integrator4.setStepHandler(stepHandler69);
        double double72 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setSafety((double) 100);
        double double75 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str68, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler69);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.2d + "'", double75 == 0.2d);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        double double23 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) 'a');
        dormandPrince853Integrator4.setMinReduction(14.142135623730951d);
        double double19 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        int int13 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 8, (double) 1.0f, (double) (-1L), 2.0d);
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, 0.9486832980505138d, (double) '4', 0);
        double double19 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.Class<?> wildcardClass20 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (double) (byte) 10, 0.0d, (double) 0);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 0.0d, (double) (byte) 1, 14.142135623730951d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        boolean boolean6 = stepHandler5.requiresDenseOutput();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        double double16 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator12.setInitialStepSize((double) '4');
        double double26 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        int int27 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations28 = null;
        double[] doubleArray30 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler32 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean33 = switchingFunctionsHandler32.stop();
        double double34 = switchingFunctionsHandler32.getEventTime();
        double[] doubleArray39 = new double[] { Double.NaN };
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray39, doubleArray48);
        switchingFunctionsHandler32.stepAccepted(0.2d, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator12.integrate(firstOrderDifferentialEquations28, (double) 1L, doubleArray30, (-1.0d), doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9486832980505138d + "'", double26 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler14 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler14);
        int int16 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations17 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler19 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean20 = switchingFunctionsHandler19.isEmpty();
        boolean boolean21 = switchingFunctionsHandler19.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler23 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean24 = switchingFunctionsHandler23.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        boolean boolean28 = switchingFunctionsHandler26.evaluateStep(stepInterpolator27);
        double[] doubleArray38 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray41 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray38, doubleArray41);
        switchingFunctionsHandler26.stepAccepted(100.0d, doubleArray38);
        switchingFunctionsHandler23.stepAccepted((double) (short) 10, doubleArray38);
        boolean boolean45 = switchingFunctionsHandler23.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler47 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator48 = null;
        boolean boolean49 = switchingFunctionsHandler47.evaluateStep(stepInterpolator48);
        double[] doubleArray59 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray62 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray59, doubleArray62);
        switchingFunctionsHandler47.stepAccepted(100.0d, doubleArray59);
        boolean boolean65 = switchingFunctionsHandler23.reset((double) 100, doubleArray59);
        boolean boolean66 = switchingFunctionsHandler19.reset((double) 100.0f, doubleArray59);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler68 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean69 = switchingFunctionsHandler68.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler71 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator72 = null;
        boolean boolean73 = switchingFunctionsHandler71.evaluateStep(stepInterpolator72);
        double[] doubleArray83 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray86 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray83, doubleArray86);
        switchingFunctionsHandler71.stepAccepted(100.0d, doubleArray83);
        switchingFunctionsHandler68.stepAccepted((double) (short) 10, doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations17, 2.0d, doubleArray59, (-1.0d), doubleArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.9, 0.0]");
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        double double21 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double[] doubleArray22 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray25 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray22, doubleArray25);
        java.lang.String str27 = dormandPrince853Integrator26.getName();
        dormandPrince853Integrator26.setMinReduction(0.9d);
        java.lang.String str30 = dormandPrince853Integrator26.getName();
        dormandPrince853Integrator26.setMaxGrowth((double) 3);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator37.getStepHandler();
        dormandPrince853Integrator26.setStepHandler(stepHandler38);
        stepHandler38.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator41 = null;
        stepHandler38.handleStep(stepInterpolator41, true);
        stepHandler38.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        stepHandler38.reset();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str27, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler38);
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction(97.0d);
        org.apache.commons.math.ode.StepHandler stepHandler17 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler17);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        int int14 = dormandPrince853Integrator4.getOrder();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        double double16 = dormandPrince853Integrator4.getMinStep();
        double double17 = dormandPrince853Integrator4.getCurrentStepStart();
        int int18 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction34, 14.142135623730951d, 0.2d, (int) (short) 10);
        java.lang.String str39 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction40, 2.0d, (double) 1L, (int) 'a');
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str39, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        dormandPrince853Integrator12.setMaxGrowth((double) (short) 1);
        double double21 = dormandPrince853Integrator12.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        double double16 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((-1.0d));
        int int19 = dormandPrince853Integrator4.getOrder();
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double[] doubleArray22 = new double[] { Double.NaN };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray22, doubleArray31);
        boolean boolean37 = switchingFunctionsHandler0.reset(100.0d, doubleArray22);
        double double38 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        switchingFunctionsHandler0.add(switchingFunction39, 0.9486832980505138d, (double) 0L, (int) (short) -1);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = switchingFunctionsHandler0.evaluateStep(stepInterpolator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean23 = switchingFunctionsHandler0.stop();
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        boolean boolean43 = switchingFunctionsHandler0.reset((double) 1L, doubleArray28);
        boolean boolean44 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        switchingFunctionsHandler0.add(switchingFunction45, 0.0d, (double) 0.0f, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction50 = null;
        switchingFunctionsHandler0.add(switchingFunction50, (double) 0, 100.0d, (int) '#');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction55 = null;
        switchingFunctionsHandler0.add(switchingFunction55, 100.0d, (double) (short) -1, 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction60 = null;
        switchingFunctionsHandler0.add(switchingFunction60, (double) (byte) 1, 0.0d, (-1));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) '4');
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double double18 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        boolean boolean20 = switchingFunctionsHandler0.evaluateStep(stepInterpolator19);
        boolean boolean21 = switchingFunctionsHandler0.isEmpty();
        double double22 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator23 = null;
        boolean boolean24 = switchingFunctionsHandler0.evaluateStep(stepInterpolator23);
        boolean boolean25 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        double double17 = dormandPrince853Integrator12.getSafety();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety((double) 2);
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        dormandPrince853Integrator12.setMinReduction(100.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 0, (double) 10, (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator12.getStepHandler();
        double double25 = dormandPrince853Integrator12.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 3, (double) 0, (double) 1L);
        dormandPrince853Integrator4.setSafety((-0.0d));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction12, (double) 10, (double) 'a', (int) (byte) 10);
        double double17 = dormandPrince853Integrator11.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction18, (double) 1.0f, (double) '#', (int) (short) 0);
        dormandPrince853Integrator11.setMaxGrowth((double) 0);
        double double25 = dormandPrince853Integrator11.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double31 = dormandPrince853Integrator30.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction32, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double37 = dormandPrince853Integrator30.getCurrentStepStart();
        java.lang.String str38 = dormandPrince853Integrator30.getName();
        double[] doubleArray47 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray50 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray47, doubleArray50);
        java.lang.String str52 = dormandPrince853Integrator51.getName();
        double[] doubleArray56 = new double[] { Double.NaN };
        double[] doubleArray65 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray68 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray65, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray56, doubleArray65);
        org.apache.commons.math.ode.StepHandler stepHandler71 = dormandPrince853Integrator70.getStepHandler();
        dormandPrince853Integrator51.setStepHandler(stepHandler71);
        dormandPrince853Integrator30.setStepHandler(stepHandler71);
        stepHandler71.reset();
        dormandPrince853Integrator11.setStepHandler(stepHandler71);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator76 = null;
        stepHandler71.handleStep(stepInterpolator76, false);
        stepHandler71.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler71);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.9d + "'", double31 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str52, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler71);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) (short) 0, 0.0d, (double) (-1L));
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        java.lang.String str19 = dormandPrince853Integrator18.getName();
        double[] doubleArray23 = new double[] { Double.NaN };
        double[] doubleArray32 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray35 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray32, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray23, doubleArray32);
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator37.getStepHandler();
        dormandPrince853Integrator18.setStepHandler(stepHandler38);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double46 = dormandPrince853Integrator45.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction47 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction47, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double52 = dormandPrince853Integrator45.getCurrentStepStart();
        java.lang.String str53 = dormandPrince853Integrator45.getName();
        java.lang.String str54 = dormandPrince853Integrator45.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction55 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction55, (double) ' ', (double) (short) 0, (int) '#');
        double double60 = dormandPrince853Integrator45.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction61 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction61, 1.0d, (double) 2, (int) (byte) 1);
        org.apache.commons.math.ode.StepHandler stepHandler66 = dormandPrince853Integrator45.getStepHandler();
        dormandPrince853Integrator18.setStepHandler(stepHandler66);
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator69 = null;
        stepHandler68.handleStep(stepInterpolator69, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler68);
        stepHandler68.reset();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str53, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str54, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(stepHandler66);
        org.junit.Assert.assertNotNull(stepHandler68);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double[] doubleArray24 = null;
        boolean boolean25 = switchingFunctionsHandler0.reset((double) 0L, doubleArray24);
        double double26 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler0.add(switchingFunction27, 14.142135623730951d, (double) 0.0f, (int) '#');
        boolean boolean32 = switchingFunctionsHandler0.isEmpty();
        double double33 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        switchingFunctionsHandler0.add(switchingFunction34, 17.320508075688775d, (double) (byte) 0, (int) 'a');
        double double39 = switchingFunctionsHandler0.getEventTime();
        boolean boolean40 = switchingFunctionsHandler0.isEmpty();
        boolean boolean41 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        double[] doubleArray10 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray13 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray10, doubleArray13);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler15 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean16 = switchingFunctionsHandler15.stop();
        double double17 = switchingFunctionsHandler15.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler15.add(switchingFunction18, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean23 = switchingFunctionsHandler15.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler25 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        boolean boolean27 = switchingFunctionsHandler25.evaluateStep(stepInterpolator26);
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        switchingFunctionsHandler25.stepAccepted(100.0d, doubleArray37);
        double[] doubleArray47 = new double[] { Double.NaN };
        double[] doubleArray56 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray59 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray56, doubleArray59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray47, doubleArray56);
        boolean boolean62 = switchingFunctionsHandler25.reset(100.0d, doubleArray47);
        boolean boolean63 = switchingFunctionsHandler15.reset((double) (-1), doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 3, (double) 10L, doubleArray13, doubleArray47);
        dormandPrince853Integrator64.setMinReduction(35.0d);
        dormandPrince853Integrator64.setMinReduction((double) ' ');
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        double double21 = switchingFunctionsHandler0.getEventTime();
        double double22 = switchingFunctionsHandler0.getEventTime();
        double double23 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler27 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler29 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        boolean boolean31 = switchingFunctionsHandler29.evaluateStep(stepInterpolator30);
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        switchingFunctionsHandler29.stepAccepted(100.0d, doubleArray41);
        switchingFunctionsHandler27.stepAccepted((double) (short) 1, doubleArray41);
        double[] doubleArray51 = new double[] { Double.NaN };
        double[] doubleArray60 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray63 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray60, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray51, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray41, doubleArray51);
        switchingFunctionsHandler0.stepAccepted(97.0d, doubleArray41);
        boolean boolean68 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler22 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        switchingFunctionsHandler22.stepAccepted((double) (short) 1, doubleArray36);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator43 = null;
        boolean boolean44 = switchingFunctionsHandler22.evaluateStep(stepInterpolator43);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        switchingFunctionsHandler22.add(switchingFunction45, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler51 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator52 = null;
        boolean boolean53 = switchingFunctionsHandler51.evaluateStep(stepInterpolator52);
        double[] doubleArray63 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray66 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray63, doubleArray66);
        switchingFunctionsHandler51.stepAccepted(100.0d, doubleArray63);
        boolean boolean69 = switchingFunctionsHandler51.isEmpty();
        double[] doubleArray79 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray82 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray79, doubleArray82);
        boolean boolean84 = switchingFunctionsHandler51.reset(10.0d, doubleArray82);
        boolean boolean85 = switchingFunctionsHandler22.reset((double) 10, doubleArray82);
        switchingFunctionsHandler0.stepAccepted((double) (byte) -1, doubleArray82);
        boolean boolean87 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double13 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction14, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double19 = dormandPrince853Integrator12.getSafety();
        double double20 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator25.addSwitchingFunction(switchingFunction26, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator25.setMinReduction(100.0d);
        double double33 = dormandPrince853Integrator25.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double39 = dormandPrince853Integrator38.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator38.addSwitchingFunction(switchingFunction40, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double45 = dormandPrince853Integrator38.getCurrentStepStart();
        dormandPrince853Integrator38.setInitialStepSize((double) 0.0f);
        java.lang.String str48 = dormandPrince853Integrator38.getName();
        java.io.IOException iOException50 = new java.io.IOException("hi!");
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray53, throwable54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        java.lang.String str57 = mathException56.getPattern();
        java.lang.Object[] objArray58 = mathException56.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray58);
        double[] doubleArray68 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray71 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray68, doubleArray71);
        java.lang.String str73 = dormandPrince853Integrator72.getName();
        dormandPrince853Integrator72.setMinReduction(0.9d);
        java.lang.String str76 = dormandPrince853Integrator72.getName();
        java.lang.Object[] objArray77 = new java.lang.Object[] { double20, double33, dormandPrince853Integrator38, "hi!", objArray58, dormandPrince853Integrator72 };
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray79, throwable80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray58, (java.lang.Throwable) mathException82);
        org.apache.commons.math.ode.IntegratorException integratorException84 = new org.apache.commons.math.ode.IntegratorException("", objArray58);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray3, (java.lang.Throwable) integratorException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException84);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", (java.lang.Throwable) mathException86);
        java.lang.Class<?> wildcardClass88 = mathException87.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.9d + "'", double39 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str76, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        boolean boolean33 = switchingFunctionsHandler0.reset(10.0d, doubleArray31);
        double double34 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        boolean boolean38 = switchingFunctionsHandler36.evaluateStep(stepInterpolator37);
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        switchingFunctionsHandler36.stepAccepted(100.0d, doubleArray48);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        switchingFunctionsHandler36.add(switchingFunction54, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean59 = switchingFunctionsHandler36.stop();
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        boolean boolean79 = switchingFunctionsHandler36.reset((double) 1L, doubleArray64);
        switchingFunctionsHandler0.stepAccepted((double) 0, doubleArray64);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator81 = null;
        boolean boolean82 = switchingFunctionsHandler0.evaluateStep(stepInterpolator81);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, 0.0d, (double) ' ', 0.9486832980505138d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        stepHandler8.reset();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler8);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) -1);
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (-0.0d), (double) (short) 10, (double) 1);
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator20.getStepHandler();
        boolean boolean22 = stepHandler21.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler21);
        dormandPrince853Integrator4.setSafety(0.6324555320336759d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        dormandPrince853Integrator4.setMinReduction((double) (-1));
        double double17 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        int int19 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        int int14 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double22 = dormandPrince853Integrator21.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction23, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction33 = null;
        dormandPrince853Integrator32.addSwitchingFunction(switchingFunction33, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator32.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator32.getStepHandler();
        boolean boolean41 = stepHandler40.requiresDenseOutput();
        boolean boolean42 = stepHandler40.requiresDenseOutput();
        dormandPrince853Integrator21.setStepHandler(stepHandler40);
        double double44 = dormandPrince853Integrator21.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction50 = null;
        dormandPrince853Integrator49.addSwitchingFunction(switchingFunction50, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator49.setMinReduction(100.0d);
        double double57 = dormandPrince853Integrator49.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction58 = null;
        dormandPrince853Integrator49.addSwitchingFunction(switchingFunction58, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler63 = dormandPrince853Integrator49.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator64 = null;
        stepHandler63.handleStep(stepInterpolator64, false);
        dormandPrince853Integrator21.setStepHandler(stepHandler63);
        dormandPrince853Integrator4.setStepHandler(stepHandler63);
        double double69 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.9d + "'", double44 == 0.9d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler63);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction11, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double16 = dormandPrince853Integrator9.getSafety();
        double double17 = dormandPrince853Integrator9.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction23, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator22.setMinReduction(100.0d);
        double double30 = dormandPrince853Integrator22.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double36 = dormandPrince853Integrator35.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction37, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double42 = dormandPrince853Integrator35.getCurrentStepStart();
        dormandPrince853Integrator35.setInitialStepSize((double) 0.0f);
        java.lang.String str45 = dormandPrince853Integrator35.getName();
        java.io.IOException iOException47 = new java.io.IOException("hi!");
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray50, throwable51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        java.lang.String str54 = mathException53.getPattern();
        java.lang.Object[] objArray55 = mathException53.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray55);
        double[] doubleArray65 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray68 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray65, doubleArray68);
        java.lang.String str70 = dormandPrince853Integrator69.getName();
        dormandPrince853Integrator69.setMinReduction(0.9d);
        java.lang.String str73 = dormandPrince853Integrator69.getName();
        java.lang.Object[] objArray74 = new java.lang.Object[] { double17, double30, dormandPrince853Integrator35, "hi!", objArray55, dormandPrince853Integrator69 };
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray76, throwable77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray55, (java.lang.Throwable) mathException79);
        org.apache.commons.math.ode.IntegratorException integratorException81 = new org.apache.commons.math.ode.IntegratorException("", objArray55);
        java.lang.Object[] objArray83 = new java.lang.Object[] {};
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray83, throwable84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException85);
        java.lang.String str87 = mathException86.getPattern();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray55, (java.lang.Throwable) mathException86);
        java.lang.String[] strArray93 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException94 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray93);
        org.apache.commons.math.ode.DerivativeException derivativeException95 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray93);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray93);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray55, (java.lang.Throwable) mathException96);
        org.apache.commons.math.ode.IntegratorException integratorException98 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) mathException96);
        org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) mathException96);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.9d + "'", double36 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        dormandPrince853Integrator4.setMinReduction((double) 1.0f);
        java.lang.Class<?> wildcardClass16 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getMinReduction();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double20 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction21, 1.0d, (double) 10L, (-1));
        double double26 = dormandPrince853Integrator12.getMaxGrowth();
        java.lang.Class<?> wildcardClass27 = dormandPrince853Integrator12.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9486832980505138d + "'", double19 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        stepHandler18.handleStep(stepInterpolator19, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double23 = dormandPrince853Integrator4.getMinStep();
        double double24 = dormandPrince853Integrator4.getMinStep();
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize((double) 3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler3 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        boolean boolean5 = switchingFunctionsHandler3.evaluateStep(stepInterpolator4);
        double[] doubleArray15 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray18 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray15, doubleArray18);
        switchingFunctionsHandler3.stepAccepted(100.0d, doubleArray15);
        switchingFunctionsHandler0.stepAccepted((double) (short) 10, doubleArray15);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        switchingFunctionsHandler0.add(switchingFunction22, (double) (byte) 10, (double) 100, 0);
        boolean boolean27 = switchingFunctionsHandler0.stop();
        double[] doubleArray39 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray42 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray39, doubleArray42);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler44 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator45 = null;
        boolean boolean46 = switchingFunctionsHandler44.evaluateStep(stepInterpolator45);
        double[] doubleArray56 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray59 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray56, doubleArray59);
        switchingFunctionsHandler44.stepAccepted(100.0d, doubleArray56);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler63 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean64 = switchingFunctionsHandler63.stop();
        double double65 = switchingFunctionsHandler63.getEventTime();
        double[] doubleArray70 = new double[] { Double.NaN };
        double[] doubleArray79 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray82 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray79, doubleArray82);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray70, doubleArray79);
        switchingFunctionsHandler63.stepAccepted(0.2d, doubleArray70);
        boolean boolean86 = switchingFunctionsHandler44.reset((double) 'a', doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, (double) 100, doubleArray42, doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted((double) (short) 0, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getSafety();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler19 = null;
        dormandPrince853Integrator12.setStepHandler(stepHandler19);
        dormandPrince853Integrator12.setInitialStepSize((double) 0.0f);
        double double23 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9486832980505138d + "'", double23 == 0.9486832980505138d);
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 100.0d, 0.9d, 10.0d);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double14 = dormandPrince853Integrator13.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator13.addSwitchingFunction(switchingFunction15, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double20 = dormandPrince853Integrator13.getSafety();
        double double21 = dormandPrince853Integrator13.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction27, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator26.setMinReduction(100.0d);
        double double34 = dormandPrince853Integrator26.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction41, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double46 = dormandPrince853Integrator39.getCurrentStepStart();
        dormandPrince853Integrator39.setInitialStepSize((double) 0.0f);
        java.lang.String str49 = dormandPrince853Integrator39.getName();
        java.io.IOException iOException51 = new java.io.IOException("hi!");
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray54, throwable55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        java.lang.String str58 = mathException57.getPattern();
        java.lang.Object[] objArray59 = mathException57.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray59);
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        java.lang.String str74 = dormandPrince853Integrator73.getName();
        dormandPrince853Integrator73.setMinReduction(0.9d);
        java.lang.String str77 = dormandPrince853Integrator73.getName();
        java.lang.Object[] objArray78 = new java.lang.Object[] { double21, double34, dormandPrince853Integrator39, "hi!", objArray59, dormandPrince853Integrator73 };
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("hi!", objArray80, throwable81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray59, (java.lang.Throwable) mathException83);
        org.apache.commons.math.ode.IntegratorException integratorException85 = new org.apache.commons.math.ode.IntegratorException("", objArray59);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray4, (java.lang.Throwable) integratorException85);
        org.apache.commons.math.ode.IntegratorException integratorException87 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException85);
        java.lang.String str88 = integratorException87.getPattern();
        java.lang.Object[] objArray89 = integratorException87.getArguments();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) integratorException87);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) integratorException87);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        double double18 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator17.getCurrentStepStart();
        double double20 = dormandPrince853Integrator17.getMinReduction();
        dormandPrince853Integrator17.setInitialStepSize((double) (short) 10);
        double double23 = dormandPrince853Integrator17.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double29 = dormandPrince853Integrator28.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction30, (double) '#', (double) (-1.0f), (int) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction40, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator39.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator39.getStepHandler();
        boolean boolean48 = stepHandler47.requiresDenseOutput();
        boolean boolean49 = stepHandler47.requiresDenseOutput();
        dormandPrince853Integrator28.setStepHandler(stepHandler47);
        double double51 = dormandPrince853Integrator28.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction57 = null;
        dormandPrince853Integrator56.addSwitchingFunction(switchingFunction57, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator56.setMinReduction(100.0d);
        double double64 = dormandPrince853Integrator56.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction65 = null;
        dormandPrince853Integrator56.addSwitchingFunction(switchingFunction65, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler70 = dormandPrince853Integrator56.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator71 = null;
        stepHandler70.handleStep(stepInterpolator71, false);
        dormandPrince853Integrator28.setStepHandler(stepHandler70);
        dormandPrince853Integrator17.setStepHandler(stepHandler70);
        double double76 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        double double77 = dormandPrince853Integrator17.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.2d + "'", double20 == 0.2d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9d + "'", double29 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.9d + "'", double51 == 0.9d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler70);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(7.211102550927978d, 3.732075599071396d, 1.7320508075688772d, (double) (short) 1);
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean23 = switchingFunctionsHandler0.stop();
        boolean boolean24 = switchingFunctionsHandler0.stop();
        boolean boolean25 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = switchingFunctionsHandler0.evaluateStep(stepInterpolator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getSafety();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        java.lang.String str19 = dormandPrince853Integrator12.getName();
        double double20 = dormandPrince853Integrator12.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        switchingFunctionsHandler0.add(switchingFunction19, (double) 0.0f, (double) (short) 100, (int) (short) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        switchingFunctionsHandler0.add(switchingFunction24, (double) (-1.0f), 0.0d, 10);
        java.lang.Class<?> wildcardClass29 = switchingFunctionsHandler0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double double19 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler21 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean22 = switchingFunctionsHandler21.stop();
        double double23 = switchingFunctionsHandler21.getEventTime();
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        switchingFunctionsHandler21.stepAccepted(0.2d, doubleArray28);
        boolean boolean44 = switchingFunctionsHandler0.reset((double) '4', doubleArray28);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler46 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean47 = switchingFunctionsHandler46.stop();
        double double48 = switchingFunctionsHandler46.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction49 = null;
        switchingFunctionsHandler46.add(switchingFunction49, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean54 = switchingFunctionsHandler46.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler56 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator57 = null;
        boolean boolean58 = switchingFunctionsHandler56.evaluateStep(stepInterpolator57);
        double[] doubleArray68 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray71 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray68, doubleArray71);
        switchingFunctionsHandler56.stepAccepted(100.0d, doubleArray68);
        double[] doubleArray78 = new double[] { Double.NaN };
        double[] doubleArray87 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray90 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray87, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray78, doubleArray87);
        boolean boolean93 = switchingFunctionsHandler56.reset(100.0d, doubleArray78);
        boolean boolean94 = switchingFunctionsHandler46.reset((double) (-1), doubleArray78);
        boolean boolean95 = switchingFunctionsHandler0.reset((double) (short) 10, doubleArray78);
        boolean boolean96 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction29, (double) 10, (double) 'a', (int) (byte) 10);
        int int34 = dormandPrince853Integrator28.getOrder();
        double double35 = dormandPrince853Integrator28.getMinStep();
        dormandPrince853Integrator28.setMaxGrowth((double) 10L);
        double double38 = dormandPrince853Integrator28.getCurrentStepStart();
        dormandPrince853Integrator28.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction46, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator45.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler53 = dormandPrince853Integrator45.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction54, (double) '4', (double) (-1L), 3);
        dormandPrince853Integrator45.setMaxGrowth(0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator45.getStepHandler();
        dormandPrince853Integrator45.setMaxGrowth((double) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler64 = dormandPrince853Integrator45.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator65 = null;
        stepHandler64.handleStep(stepInterpolator65, false);
        dormandPrince853Integrator28.setStepHandler(stepHandler64);
        dormandPrince853Integrator12.setStepHandler(stepHandler64);
        java.lang.Class<?> wildcardClass70 = dormandPrince853Integrator12.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(stepHandler53);
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertNotNull(stepHandler64);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) 100);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        double double17 = dormandPrince853Integrator4.getMinReduction();
        double double18 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) 1);
        double double16 = dormandPrince853Integrator4.getSafety();
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) ' ');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        double double13 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (-1L), (double) ' ', (int) (byte) 1);
        int int19 = dormandPrince853Integrator4.getOrder();
        int int20 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize(0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler17 = null;
        dormandPrince853Integrator12.setStepHandler(stepHandler17);
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator12.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNull(stepHandler19);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 1.0f, (double) 0, (int) (byte) 0);
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        int int12 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        stepHandler15.reset();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(stepHandler15);
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        double[] doubleArray9 = new double[] { Double.NaN };
        double[] doubleArray18 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray21 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray18, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray9, doubleArray18);
        double[] doubleArray32 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray35 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray32, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray9, doubleArray32);
        boolean boolean38 = switchingFunctionsHandler0.reset((double) 1, doubleArray9);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        switchingFunctionsHandler0.add(switchingFunction39, (double) 8, (double) ' ', (int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        double[] doubleArray2 = null;
        double[] doubleArray10 = new double[] { Double.NaN };
        double[] doubleArray19 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray22 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray19, doubleArray22);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray10, doubleArray19);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler27 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler29 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        boolean boolean31 = switchingFunctionsHandler29.evaluateStep(stepInterpolator30);
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        switchingFunctionsHandler29.stepAccepted(100.0d, doubleArray41);
        switchingFunctionsHandler27.stepAccepted((double) (short) 1, doubleArray41);
        double[] doubleArray51 = new double[] { Double.NaN };
        double[] doubleArray60 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray63 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray60, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray51, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray41, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) 0.0f, doubleArray19, doubleArray41);
        double[] doubleArray76 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray79 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray76, doubleArray79);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) 1.0f, doubleArray41, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) 1, doubleArray2, doubleArray76);
        org.apache.commons.math.ode.StepHandler stepHandler83 = dormandPrince853Integrator82.getStepHandler();
        java.lang.Class<?> wildcardClass84 = stepHandler83.getClass();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double double18 = switchingFunctionsHandler0.getEventTime();
        boolean boolean19 = switchingFunctionsHandler0.isEmpty();
        java.lang.Class<?> wildcardClass20 = switchingFunctionsHandler0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 1.0f, (double) 0, (int) (byte) 0);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety((double) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator17.getStepHandler();
        double double20 = dormandPrince853Integrator17.getMaxGrowth();
        double double21 = dormandPrince853Integrator17.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double27 = dormandPrince853Integrator26.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction28, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double33 = dormandPrince853Integrator26.getCurrentStepStart();
        double double34 = dormandPrince853Integrator26.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator17.setStepHandler(stepHandler35);
        int int37 = dormandPrince853Integrator17.getOrder();
        int int38 = dormandPrince853Integrator17.getOrder();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.9d + "'", double27 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        dormandPrince853Integrator4.setMinReduction((double) (-1.0f));
        double double22 = dormandPrince853Integrator4.getSafety();
        int int23 = dormandPrince853Integrator4.getOrder();
        double double24 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        boolean boolean2 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (-1.0d), (double) 1L, (int) '#');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler9 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler11 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        boolean boolean13 = switchingFunctionsHandler11.evaluateStep(stepInterpolator12);
        double[] doubleArray23 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray26 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray23, doubleArray26);
        switchingFunctionsHandler11.stepAccepted(100.0d, doubleArray23);
        switchingFunctionsHandler9.stepAccepted((double) (short) 1, doubleArray23);
        double double30 = switchingFunctionsHandler9.getEventTime();
        double double31 = switchingFunctionsHandler9.getEventTime();
        double double32 = switchingFunctionsHandler9.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler38 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        boolean boolean40 = switchingFunctionsHandler38.evaluateStep(stepInterpolator39);
        double[] doubleArray50 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray53 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray50, doubleArray53);
        switchingFunctionsHandler38.stepAccepted(100.0d, doubleArray50);
        switchingFunctionsHandler36.stepAccepted((double) (short) 1, doubleArray50);
        double[] doubleArray60 = new double[] { Double.NaN };
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray60, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray50, doubleArray60);
        switchingFunctionsHandler9.stepAccepted(97.0d, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(0.2d, doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        int int13 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) 0, (double) (byte) 1, 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        dormandPrince853Integrator12.setMaxGrowth((double) 'a');
        int int18 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator12.setInitialStepSize((double) '4');
        double double26 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        int int27 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction28, (double) 10, (double) '4', 3);
        java.lang.Class<?> wildcardClass33 = dormandPrince853Integrator12.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9486832980505138d + "'", double26 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double14 = dormandPrince853Integrator13.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator13.addSwitchingFunction(switchingFunction15, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double20 = dormandPrince853Integrator13.getSafety();
        double double21 = dormandPrince853Integrator13.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction27, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator26.setMinReduction(100.0d);
        double double34 = dormandPrince853Integrator26.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction41, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double46 = dormandPrince853Integrator39.getCurrentStepStart();
        dormandPrince853Integrator39.setInitialStepSize((double) 0.0f);
        java.lang.String str49 = dormandPrince853Integrator39.getName();
        java.io.IOException iOException51 = new java.io.IOException("hi!");
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray54, throwable55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        java.lang.String str58 = mathException57.getPattern();
        java.lang.Object[] objArray59 = mathException57.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray59);
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        java.lang.String str74 = dormandPrince853Integrator73.getName();
        dormandPrince853Integrator73.setMinReduction(0.9d);
        java.lang.String str77 = dormandPrince853Integrator73.getName();
        java.lang.Object[] objArray78 = new java.lang.Object[] { double21, double34, dormandPrince853Integrator39, "hi!", objArray59, dormandPrince853Integrator73 };
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("hi!", objArray80, throwable81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray59, (java.lang.Throwable) mathException83);
        org.apache.commons.math.ode.IntegratorException integratorException85 = new org.apache.commons.math.ode.IntegratorException("", objArray59);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray4, (java.lang.Throwable) integratorException85);
        org.apache.commons.math.ode.IntegratorException integratorException87 = new org.apache.commons.math.ode.IntegratorException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray4);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", (java.lang.Throwable) integratorException87);
        java.io.IOException iOException89 = new java.io.IOException((java.lang.Throwable) integratorException87);
        java.lang.String str90 = integratorException87.toString();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str90, "org.apache.commons.math.ode.IntegratorException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMinReduction();
        int int16 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety((double) (byte) 0);
        double double19 = dormandPrince853Integrator4.getMaxStep();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        java.lang.String str33 = dormandPrince853Integrator32.getName();
        dormandPrince853Integrator32.setMinReduction(0.9d);
        java.lang.String str36 = dormandPrince853Integrator32.getName();
        double double37 = dormandPrince853Integrator32.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator32.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        stepHandler38.handleStep(stepInterpolator39, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        java.lang.String str43 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.9d + "'", double37 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        int int19 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction20, (double) (-1L), (double) (byte) 1, (int) (short) 1);
        java.lang.String str25 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler26);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        double[] doubleArray7 = new double[] { Double.NaN };
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray7, doubleArray16);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        boolean boolean28 = switchingFunctionsHandler26.evaluateStep(stepInterpolator27);
        double[] doubleArray38 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray41 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray38, doubleArray41);
        switchingFunctionsHandler26.stepAccepted(100.0d, doubleArray38);
        switchingFunctionsHandler24.stepAccepted((double) (short) 1, doubleArray38);
        double[] doubleArray48 = new double[] { Double.NaN };
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray48, doubleArray57);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray38, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) 0.0f, doubleArray16, doubleArray38);
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) 1.0f, doubleArray38, doubleArray73);
        java.lang.String str79 = dormandPrince853Integrator78.getName();
        double double80 = dormandPrince853Integrator78.getMaxStep();
        java.lang.Class<?> wildcardClass81 = dormandPrince853Integrator78.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str79, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        switchingFunctionsHandler0.add(switchingFunction21, (double) (short) 0, (-1.0d), 1);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = switchingFunctionsHandler0.evaluateStep(stepInterpolator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double31 = dormandPrince853Integrator4.getMaxGrowth();
        double double32 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str33 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize((double) 10.0f);
        double double36 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction37, (double) (short) -1, 3.732075599071396d, (int) ' ');
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler14 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler16 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator17 = null;
        boolean boolean18 = switchingFunctionsHandler16.evaluateStep(stepInterpolator17);
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        switchingFunctionsHandler16.stepAccepted(100.0d, doubleArray28);
        switchingFunctionsHandler14.stepAccepted((double) (short) 1, doubleArray28);
        double[] doubleArray38 = new double[] { Double.NaN };
        double[] doubleArray47 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray50 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray47, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray38, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray28, doubleArray38);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler54 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean55 = switchingFunctionsHandler54.stop();
        double double56 = switchingFunctionsHandler54.getEventTime();
        double[] doubleArray61 = new double[] { Double.NaN };
        double[] doubleArray70 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray73 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray70, doubleArray73);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray61, doubleArray70);
        switchingFunctionsHandler54.stepAccepted(0.2d, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) -1, doubleArray28, doubleArray61);
        boolean boolean78 = switchingFunctionsHandler0.reset(10.0d, doubleArray61);
        boolean boolean79 = switchingFunctionsHandler0.stop();
        double double80 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction81 = null;
        switchingFunctionsHandler0.add(switchingFunction81, 1.7320508075688772d, (double) '4', 10);
        boolean boolean86 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        java.lang.Throwable throwable5 = null;
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", objArray4, throwable5);
        java.io.IOException iOException7 = new java.io.IOException("hi!", (java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double15 = dormandPrince853Integrator14.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator14.addSwitchingFunction(switchingFunction16, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double21 = dormandPrince853Integrator14.getSafety();
        double double22 = dormandPrince853Integrator14.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator27.addSwitchingFunction(switchingFunction28, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator27.setMinReduction(100.0d);
        double double35 = dormandPrince853Integrator27.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double41 = dormandPrince853Integrator40.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        dormandPrince853Integrator40.addSwitchingFunction(switchingFunction42, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double47 = dormandPrince853Integrator40.getCurrentStepStart();
        dormandPrince853Integrator40.setInitialStepSize((double) 0.0f);
        java.lang.String str50 = dormandPrince853Integrator40.getName();
        java.io.IOException iOException52 = new java.io.IOException("hi!");
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        java.lang.Throwable throwable56 = null;
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("hi!", objArray55, throwable56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException57);
        java.lang.String str59 = mathException58.getPattern();
        java.lang.Object[] objArray60 = mathException58.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException61 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray60);
        double[] doubleArray70 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray73 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray70, doubleArray73);
        java.lang.String str75 = dormandPrince853Integrator74.getName();
        dormandPrince853Integrator74.setMinReduction(0.9d);
        java.lang.String str78 = dormandPrince853Integrator74.getName();
        java.lang.Object[] objArray79 = new java.lang.Object[] { double22, double35, dormandPrince853Integrator40, "hi!", objArray60, dormandPrince853Integrator74 };
        java.lang.Object[] objArray81 = new java.lang.Object[] {};
        java.lang.Throwable throwable82 = null;
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("hi!", objArray81, throwable82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray60, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("java.io.IOException", (java.lang.Object[]) throwableArray8, (java.lang.Throwable) mathException85);
        org.apache.commons.math.ode.IntegratorException integratorException87 = new org.apache.commons.math.ode.IntegratorException("", (java.lang.Object[]) throwableArray8);
        org.apache.commons.math.ode.IntegratorException integratorException88 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException87);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9d + "'", double41 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str50, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str75, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str78, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, (double) 0, (double) 1.0f, 0);
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        double double21 = switchingFunctionsHandler0.getEventTime();
        double double22 = switchingFunctionsHandler0.getEventTime();
        double double23 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler25 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean26 = switchingFunctionsHandler25.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler28 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        boolean boolean30 = switchingFunctionsHandler28.evaluateStep(stepInterpolator29);
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        switchingFunctionsHandler28.stepAccepted(100.0d, doubleArray40);
        switchingFunctionsHandler25.stepAccepted((double) (short) 10, doubleArray40);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler48 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean49 = switchingFunctionsHandler48.stop();
        double double50 = switchingFunctionsHandler48.getEventTime();
        double[] doubleArray55 = new double[] { Double.NaN };
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray55, doubleArray64);
        switchingFunctionsHandler48.stepAccepted(0.2d, doubleArray55);
        boolean boolean71 = switchingFunctionsHandler25.reset((double) (byte) -1, doubleArray55);
        switchingFunctionsHandler0.stepAccepted(8.0d, doubleArray55);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator73 = null;
        boolean boolean74 = switchingFunctionsHandler0.evaluateStep(stepInterpolator73);
        java.lang.Class<?> wildcardClass75 = switchingFunctionsHandler0.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        boolean boolean22 = switchingFunctionsHandler0.evaluateStep(stepInterpolator21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        switchingFunctionsHandler0.add(switchingFunction28, (double) 100.0f, (double) 10L, 8);
        boolean boolean33 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = switchingFunctionsHandler0.evaluateStep(stepInterpolator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction13, 100.0d, (double) '#', (int) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler17 = null;
        dormandPrince853Integrator12.setStepHandler(stepHandler17);
        double double19 = dormandPrince853Integrator12.getCurrentStepStart();
        double double20 = dormandPrince853Integrator12.getCurrentStepStart();
        double double21 = dormandPrince853Integrator12.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations16 = null;
        double[] doubleArray21 = new double[] { Double.NaN };
        double[] doubleArray30 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray33 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray30, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray21, doubleArray30);
        double[] doubleArray37 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations16, 4.47213595499958d, doubleArray21, 0.2d, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.9, 0.0]");
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMaxGrowth((double) 3);
        int int19 = dormandPrince853Integrator12.getOrder();
        double double20 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double21 = dormandPrince853Integrator12.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9486832980505138d + "'", double20 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.0d, 0.2d, (double) 8, (double) 8);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.6324555320336759d + "'", double6 == 0.6324555320336759d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMaxGrowth();
        double double16 = dormandPrince853Integrator4.getSafety();
        double[] doubleArray25 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray28 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray25, doubleArray28);
        java.lang.String str30 = dormandPrince853Integrator29.getName();
        dormandPrince853Integrator29.setMinReduction(0.9d);
        java.lang.String str33 = dormandPrince853Integrator29.getName();
        double double34 = dormandPrince853Integrator29.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator29.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        boolean boolean37 = stepHandler35.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str30, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.9d + "'", double34 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, 0.0d, (double) 1, (double) (-1.0f));
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        switchingFunctionsHandler0.add(switchingFunction8, (double) (byte) 1, (double) (byte) 100, (int) (short) 1);
        boolean boolean13 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        switchingFunctionsHandler0.add(switchingFunction14, 0.0d, (double) 1L, (int) (byte) 10);
        boolean boolean19 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler21 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean22 = switchingFunctionsHandler21.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        boolean boolean28 = switchingFunctionsHandler26.evaluateStep(stepInterpolator27);
        double[] doubleArray38 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray41 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray38, doubleArray41);
        switchingFunctionsHandler26.stepAccepted(100.0d, doubleArray38);
        boolean boolean44 = switchingFunctionsHandler26.isEmpty();
        double[] doubleArray54 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray57 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray54, doubleArray57);
        boolean boolean59 = switchingFunctionsHandler26.reset(10.0d, doubleArray57);
        double[] doubleArray63 = new double[] { Double.NaN };
        double[] doubleArray72 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray75 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray72, doubleArray75);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray63, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray57, doubleArray72);
        switchingFunctionsHandler21.stepAccepted(0.9d, doubleArray57);
        boolean boolean80 = switchingFunctionsHandler0.reset((double) 10L, doubleArray57);
        boolean boolean81 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double10 = dormandPrince853Integrator9.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction11, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double16 = dormandPrince853Integrator9.getSafety();
        double double17 = dormandPrince853Integrator9.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator22.addSwitchingFunction(switchingFunction23, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator22.setMinReduction(100.0d);
        double double30 = dormandPrince853Integrator22.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double36 = dormandPrince853Integrator35.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction37, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double42 = dormandPrince853Integrator35.getCurrentStepStart();
        dormandPrince853Integrator35.setInitialStepSize((double) 0.0f);
        java.lang.String str45 = dormandPrince853Integrator35.getName();
        java.io.IOException iOException47 = new java.io.IOException("hi!");
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        java.lang.Throwable throwable51 = null;
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", objArray50, throwable51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException52);
        java.lang.String str54 = mathException53.getPattern();
        java.lang.Object[] objArray55 = mathException53.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException56 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray55);
        double[] doubleArray65 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray68 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray65, doubleArray68);
        java.lang.String str70 = dormandPrince853Integrator69.getName();
        dormandPrince853Integrator69.setMinReduction(0.9d);
        java.lang.String str73 = dormandPrince853Integrator69.getName();
        java.lang.Object[] objArray74 = new java.lang.Object[] { double17, double30, dormandPrince853Integrator35, "hi!", objArray55, dormandPrince853Integrator69 };
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", objArray76, throwable77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray55, (java.lang.Throwable) mathException79);
        org.apache.commons.math.ode.IntegratorException integratorException81 = new org.apache.commons.math.ode.IntegratorException("", objArray55);
        java.lang.Object[] objArray83 = new java.lang.Object[] {};
        java.lang.Throwable throwable84 = null;
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("hi!", objArray83, throwable84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException85);
        java.lang.String str87 = mathException86.getPattern();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray55, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray55);
        java.lang.String str91 = mathException90.getPattern();
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException90);
        java.io.IOException iOException93 = new java.io.IOException("java.io.IOException: hi!", (java.lang.Throwable) mathException92);
        org.apache.commons.math.ode.IntegratorException integratorException94 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) iOException93);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.9d + "'", double36 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str70, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)" + "'", str91, "org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 35.0d, (double) 0.0f, 8);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = switchingFunctionsHandler0.evaluateStep(stepInterpolator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction12, 100.0d, (double) (-1.0f), (int) (short) 0);
        double double17 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 10.0d, Double.NaN, 17.320508075688775d);
        double double5 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, 31.622776601683793d, (double) (short) 1, (int) (short) 10);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler12);
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double11 = dormandPrince853Integrator10.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction12, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double17 = dormandPrince853Integrator10.getSafety();
        double double18 = dormandPrince853Integrator10.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction24, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator23.setMinReduction(100.0d);
        double double31 = dormandPrince853Integrator23.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double37 = dormandPrince853Integrator36.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction38 = null;
        dormandPrince853Integrator36.addSwitchingFunction(switchingFunction38, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double43 = dormandPrince853Integrator36.getCurrentStepStart();
        dormandPrince853Integrator36.setInitialStepSize((double) 0.0f);
        java.lang.String str46 = dormandPrince853Integrator36.getName();
        java.io.IOException iOException48 = new java.io.IOException("hi!");
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray51, throwable52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException53);
        java.lang.String str55 = mathException54.getPattern();
        java.lang.Object[] objArray56 = mathException54.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException57 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray56);
        double[] doubleArray66 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray69 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray66, doubleArray69);
        java.lang.String str71 = dormandPrince853Integrator70.getName();
        dormandPrince853Integrator70.setMinReduction(0.9d);
        java.lang.String str74 = dormandPrince853Integrator70.getName();
        java.lang.Object[] objArray75 = new java.lang.Object[] { double18, double31, dormandPrince853Integrator36, "hi!", objArray56, dormandPrince853Integrator70 };
        java.lang.Object[] objArray77 = new java.lang.Object[] {};
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray77, throwable78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray56, (java.lang.Throwable) mathException80);
        org.apache.commons.math.ode.IntegratorException integratorException82 = new org.apache.commons.math.ode.IntegratorException("", objArray56);
        java.lang.Object[] objArray84 = new java.lang.Object[] {};
        java.lang.Throwable throwable85 = null;
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("hi!", objArray84, throwable85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        java.lang.String str88 = mathException87.getPattern();
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray56, (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray56);
        java.lang.String[] strArray94 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException95 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray94);
        org.apache.commons.math.ode.IntegratorException integratorException96 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray94);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", objArray56, (java.lang.Throwable) integratorException96);
        java.lang.Throwable[] throwableArray98 = mathException97.getSuppressed();
        org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) mathException97);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.9d + "'", double37 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str46, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str71, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction20, 3.0d, (double) 1.0f, (int) (short) 0);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator12.getStepHandler();
        double double26 = dormandPrince853Integrator12.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.0d, (double) 100L, (double) (short) 0, (double) 1L);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler2.stepAccepted((double) (short) 1, doubleArray16);
        double[] doubleArray26 = new double[] { Double.NaN };
        double[] doubleArray35 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray38 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray35, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray26, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray16, doubleArray26);
        double double42 = dormandPrince853Integrator41.getSafety();
        double double43 = dormandPrince853Integrator41.getCurrentStepStart();
        double double44 = dormandPrince853Integrator41.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction45, (double) 10L, Double.NaN, (int) (byte) 10);
        double double50 = dormandPrince853Integrator41.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler51 = null;
        dormandPrince853Integrator41.setStepHandler(stepHandler51);
        double double53 = dormandPrince853Integrator41.getSafety();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9d + "'", double42 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.9d + "'", double53 == 0.9d);
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, Double.NaN, (double) 2, 17.320508075688775d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double15 = dormandPrince853Integrator14.getSafety();
        double double16 = dormandPrince853Integrator14.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        stepHandler29.reset();
        dormandPrince853Integrator14.setStepHandler(stepHandler29);
        dormandPrince853Integrator9.setStepHandler(stepHandler29);
        stepHandler29.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler29);
        double double38 = dormandPrince853Integrator4.getSafety();
        double double39 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.9d + "'", double38 == 0.9d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator4.getStepHandler();
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int18 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize((double) 100L);
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(stepHandler21);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double double14 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations15 = null;
        double[] doubleArray22 = new double[] { Double.NaN };
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray22, doubleArray31);
        double[] doubleArray45 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray48 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray45, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray22, doubleArray45);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler52 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator53 = null;
        boolean boolean54 = switchingFunctionsHandler52.evaluateStep(stepInterpolator53);
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        switchingFunctionsHandler52.stepAccepted(100.0d, doubleArray64);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler71 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean72 = switchingFunctionsHandler71.stop();
        double double73 = switchingFunctionsHandler71.getEventTime();
        double[] doubleArray78 = new double[] { Double.NaN };
        double[] doubleArray87 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray90 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray87, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray78, doubleArray87);
        switchingFunctionsHandler71.stepAccepted(0.2d, doubleArray78);
        boolean boolean94 = switchingFunctionsHandler52.reset((double) 'a', doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator12.integrate(firstOrderDifferentialEquations15, (double) (short) -1, doubleArray45, 0.0d, doubleArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9486832980505138d + "'", double14 == 0.9486832980505138d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator12.getStepHandler();
        double double15 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        dormandPrince853Integrator12.setSafety(10.0d);
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator12.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator20 = null;
        stepHandler19.handleStep(stepInterpolator20, false);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9486832980505138d + "'", double15 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler19);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, 0.0d, (double) ' ', 0.9486832980505138d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction((double) 100);
        double double10 = dormandPrince853Integrator4.getMinStep();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setSafety((double) 1L);
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.Class<?> wildcardClass16 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 1.0f, (double) '#', (int) (short) 0);
        int int16 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setInitialStepSize((double) 0L);
        double double19 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        int int21 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations22 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        switchingFunctionsHandler24.add(switchingFunction42, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean47 = switchingFunctionsHandler24.stop();
        double[] doubleArray52 = new double[] { Double.NaN };
        double[] doubleArray61 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray64 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray61, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray52, doubleArray61);
        boolean boolean67 = switchingFunctionsHandler24.reset((double) 1L, doubleArray52);
        double[] doubleArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations22, 5.885661912765424d, doubleArray52, 0.6324555320336759d, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        java.lang.Class<?> wildcardClass17 = stepHandler16.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        double double18 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator17.getCurrentStepStart();
        double double20 = dormandPrince853Integrator17.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction22, (double) ' ', 0.9486832980505138d, (int) '4');
        dormandPrince853Integrator17.setSafety(8.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler21);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) ' ', Double.NaN, (double) '4');
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double[] doubleArray24 = null;
        boolean boolean25 = switchingFunctionsHandler0.reset((double) 0L, doubleArray24);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        switchingFunctionsHandler0.add(switchingFunction26, 0.0d, 1.0d, (int) '4');
        boolean boolean31 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler33 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler35 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator36 = null;
        boolean boolean37 = switchingFunctionsHandler35.evaluateStep(stepInterpolator36);
        double[] doubleArray47 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray50 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray47, doubleArray50);
        switchingFunctionsHandler35.stepAccepted(100.0d, doubleArray47);
        switchingFunctionsHandler33.stepAccepted((double) (short) 1, doubleArray47);
        double double54 = switchingFunctionsHandler33.getEventTime();
        double double55 = switchingFunctionsHandler33.getEventTime();
        double[] doubleArray64 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray64, doubleArray73);
        switchingFunctionsHandler33.stepAccepted((double) 1L, doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(0.9486832980505138d, doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        double[] doubleArray5 = new double[] { Double.NaN };
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray5, doubleArray14);
        double[] doubleArray27 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray27, doubleArray36);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (-1.0f), doubleArray5, doubleArray27);
        int int43 = dormandPrince853Integrator42.getOrder();
        double double44 = dormandPrince853Integrator42.getCurrentSignedStepsize();
        double double45 = dormandPrince853Integrator42.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-0.0d) + "'", double44 == (-0.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double double23 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler27 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        boolean boolean29 = switchingFunctionsHandler27.evaluateStep(stepInterpolator28);
        double[] doubleArray39 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray42 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray39, doubleArray42);
        switchingFunctionsHandler27.stepAccepted(100.0d, doubleArray39);
        boolean boolean45 = switchingFunctionsHandler27.isEmpty();
        double[] doubleArray55 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray58 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray55, doubleArray58);
        boolean boolean60 = switchingFunctionsHandler27.reset(10.0d, doubleArray58);
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray58, doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(0.0d, doubleArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getSafety();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        dormandPrince853Integrator12.setInitialStepSize(0.2d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int11 = dormandPrince853Integrator4.getOrder();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) 10.0f, (double) 10.0f, (double) (byte) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 10.0d, (double) 0.0f, 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator14.addSwitchingFunction(switchingFunction15, (double) 10, (double) 'a', (int) (byte) 10);
        int int20 = dormandPrince853Integrator14.getOrder();
        double double21 = dormandPrince853Integrator14.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator14.getStepHandler();
        double double23 = dormandPrince853Integrator14.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler24);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler24.handleStep(stepInterpolator26, false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        double double13 = dormandPrince853Integrator12.getMinStep();
        dormandPrince853Integrator12.setInitialStepSize((double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        dormandPrince853Integrator12.setInitialStepSize(2.0d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        double double25 = dormandPrince853Integrator23.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction31, (double) 10, (double) 'a', (int) (byte) 10);
        int int36 = dormandPrince853Integrator30.getOrder();
        double double37 = dormandPrince853Integrator30.getCurrentSignedStepsize();
        java.lang.String str38 = dormandPrince853Integrator30.getName();
        double double39 = dormandPrince853Integrator30.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator30.getStepHandler();
        stepHandler40.reset();
        dormandPrince853Integrator23.setStepHandler(stepHandler40);
        dormandPrince853Integrator12.setStepHandler(stepHandler40);
        java.lang.Class<?> wildcardClass44 = dormandPrince853Integrator12.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        switchingFunctionsHandler0.add(switchingFunction18, (double) (-1L), (double) 3, (int) (byte) 100);
        double[] doubleArray24 = null;
        boolean boolean25 = switchingFunctionsHandler0.reset((double) 0L, doubleArray24);
        double double26 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        switchingFunctionsHandler0.add(switchingFunction27, 14.142135623730951d, (double) 0.0f, (int) '#');
        boolean boolean32 = switchingFunctionsHandler0.isEmpty();
        double double33 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        switchingFunctionsHandler0.add(switchingFunction34, 17.320508075688775d, (double) (byte) 0, (int) 'a');
        double double39 = switchingFunctionsHandler0.getEventTime();
        boolean boolean40 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        switchingFunctionsHandler0.add(switchingFunction41, (double) 1, Double.NaN, (int) (byte) 10);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator46 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = switchingFunctionsHandler0.evaluateStep(stepInterpolator46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator21.addSwitchingFunction(switchingFunction22, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator21.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator21.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        stepHandler29.handleStep(stepInterpolator30, false);
        boolean boolean33 = stepHandler29.requiresDenseOutput();
        dormandPrince853Integrator12.setStepHandler(stepHandler29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator39.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler41 = dormandPrince853Integrator39.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler41);
        double double43 = dormandPrince853Integrator12.getCurrentStepStart();
        java.lang.String str44 = dormandPrince853Integrator12.getName();
        double double45 = dormandPrince853Integrator12.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertNotNull(stepHandler41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) 0, 10.0d, (double) 3);
        java.lang.Class<?> wildcardClass5 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction31, (double) 0.0f, 0.2d, (int) (byte) 1);
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator4.getStepHandler();
        double double37 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5.916079783099616d + "'", double37 == 5.916079783099616d);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 1.0d, (double) (short) -1, 0);
        dormandPrince853Integrator4.setSafety(0.0d);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        double[] doubleArray5 = new double[] { Double.NaN };
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray5, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler22 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        switchingFunctionsHandler22.stepAccepted((double) (short) 1, doubleArray36);
        double[] doubleArray46 = new double[] { Double.NaN };
        double[] doubleArray55 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray58 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray55, doubleArray58);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray46, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray36, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 100, (double) 0.0f, doubleArray14, doubleArray36);
        double double63 = dormandPrince853Integrator62.getMinReduction();
        dormandPrince853Integrator62.setSafety(0.0d);
        int int66 = dormandPrince853Integrator62.getOrder();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.2d + "'", double63 == 0.2d);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        int int17 = dormandPrince853Integrator4.getOrder();
        double double18 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        stepHandler18.handleStep(stepInterpolator19, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double23 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        double double26 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator31.addSwitchingFunction(switchingFunction32, (double) 10, (double) 'a', (int) (byte) 10);
        int int37 = dormandPrince853Integrator31.getOrder();
        double double38 = dormandPrince853Integrator31.getCurrentSignedStepsize();
        java.lang.String str39 = dormandPrince853Integrator31.getName();
        double double40 = dormandPrince853Integrator31.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler41 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler41);
        stepHandler41.reset();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str39, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(stepHandler41);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 10L, 0.9486832980505138d, (int) (byte) -1);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        double double21 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str22 = dormandPrince853Integrator4.getName();
        int int23 = dormandPrince853Integrator4.getOrder();
        double double24 = dormandPrince853Integrator4.getMinReduction();
        double double25 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction31, (double) 10, (double) 'a', (int) (byte) 10);
        int int36 = dormandPrince853Integrator30.getOrder();
        double double37 = dormandPrince853Integrator30.getCurrentSignedStepsize();
        double double38 = dormandPrince853Integrator30.getCurrentSignedStepsize();
        int int39 = dormandPrince853Integrator30.getOrder();
        double double40 = dormandPrince853Integrator30.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction41, (double) 100, (double) (short) 0, (int) (short) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double51 = dormandPrince853Integrator50.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction52 = null;
        dormandPrince853Integrator50.addSwitchingFunction(switchingFunction52, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double57 = dormandPrince853Integrator50.getSafety();
        double double58 = dormandPrince853Integrator50.getMaxGrowth();
        double double59 = dormandPrince853Integrator50.getCurrentStepStart();
        double double60 = dormandPrince853Integrator50.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator50.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator62 = null;
        stepHandler61.handleStep(stepInterpolator62, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator65 = null;
        stepHandler61.handleStep(stepInterpolator65, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator68 = null;
        stepHandler61.handleStep(stepInterpolator68, true);
        dormandPrince853Integrator30.setStepHandler(stepHandler61);
        dormandPrince853Integrator4.setStepHandler(stepHandler61);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.2d + "'", double24 == 0.2d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.2d + "'", double40 == 0.2d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.9d + "'", double51 == 0.9d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.9d + "'", double57 == 0.9d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.2d + "'", double60 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler61);
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        double[] doubleArray5 = new double[] { Double.NaN };
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray5, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler22 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler24 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        boolean boolean26 = switchingFunctionsHandler24.evaluateStep(stepInterpolator25);
        double[] doubleArray36 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray39 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray36, doubleArray39);
        switchingFunctionsHandler24.stepAccepted(100.0d, doubleArray36);
        switchingFunctionsHandler22.stepAccepted((double) (short) 1, doubleArray36);
        double[] doubleArray46 = new double[] { Double.NaN };
        double[] doubleArray55 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray58 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray55, doubleArray58);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray46, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray36, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (double) '#', doubleArray14, doubleArray36);
        dormandPrince853Integrator62.setMaxGrowth((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.9, 0.0]");
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth(17.320508075688775d);
        double double16 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2d + "'", double16 == 0.2d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        int int13 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, (double) 10, 10.0d, (-1));
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        int int22 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        boolean boolean22 = switchingFunctionsHandler0.evaluateStep(stepInterpolator21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler29 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        boolean boolean31 = switchingFunctionsHandler29.evaluateStep(stepInterpolator30);
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        switchingFunctionsHandler29.stepAccepted(100.0d, doubleArray41);
        boolean boolean47 = switchingFunctionsHandler29.isEmpty();
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        boolean boolean62 = switchingFunctionsHandler29.reset(10.0d, doubleArray60);
        boolean boolean63 = switchingFunctionsHandler0.reset((double) 10, doubleArray60);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler65 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler67 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator68 = null;
        boolean boolean69 = switchingFunctionsHandler67.evaluateStep(stepInterpolator68);
        double[] doubleArray79 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray82 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray79, doubleArray82);
        switchingFunctionsHandler67.stepAccepted(100.0d, doubleArray79);
        switchingFunctionsHandler65.stepAccepted((double) (short) 1, doubleArray79);
        boolean boolean86 = switchingFunctionsHandler0.reset((double) 0.0f, doubleArray79);
        boolean boolean87 = switchingFunctionsHandler0.isEmpty();
        boolean boolean88 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator89 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = switchingFunctionsHandler0.evaluateStep(stepInterpolator89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        double double18 = switchingFunctionsHandler0.getEventTime();
        boolean boolean19 = switchingFunctionsHandler0.isEmpty();
        double double20 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        boolean boolean22 = switchingFunctionsHandler0.evaluateStep(stepInterpolator21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 4.47213595499958d, (double) 10L, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        double double13 = dormandPrince853Integrator12.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction14, 100.0d, (double) 1L, (int) (byte) 10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction24, (double) 10, (double) 'a', (int) (byte) 10);
        double double29 = dormandPrince853Integrator23.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction30, (double) 1.0f, (double) '#', (int) (short) 0);
        double double35 = dormandPrince853Integrator23.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double46 = dormandPrince853Integrator45.getSafety();
        double double47 = dormandPrince853Integrator45.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction53 = null;
        dormandPrince853Integrator52.addSwitchingFunction(switchingFunction53, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator52.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator52.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator61 = null;
        stepHandler60.handleStep(stepInterpolator61, false);
        stepHandler60.reset();
        dormandPrince853Integrator45.setStepHandler(stepHandler60);
        dormandPrince853Integrator40.setStepHandler(stepHandler60);
        stepHandler60.reset();
        dormandPrince853Integrator23.setStepHandler(stepHandler60);
        dormandPrince853Integrator12.setStepHandler(stepHandler60);
        stepHandler60.reset();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler60);
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        java.lang.String str14 = dormandPrince853Integrator12.getName();
        double double15 = dormandPrince853Integrator12.getMaxStep();
        dormandPrince853Integrator12.setInitialStepSize((double) 10L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setInitialStepSize((double) 1L);
        int int12 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 10L, 0.9486832980505138d, (int) (byte) -1);
        double double18 = dormandPrince853Integrator4.getCurrentStepStart();
        double double19 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double12 = dormandPrince853Integrator11.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator17.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        stepHandler25.handleStep(stepInterpolator26, false);
        dormandPrince853Integrator11.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double31 = dormandPrince853Integrator4.getMaxGrowth();
        double double32 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction38 = null;
        dormandPrince853Integrator37.addSwitchingFunction(switchingFunction38, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator37.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator37.getStepHandler();
        double double46 = dormandPrince853Integrator37.getMaxStep();
        double double47 = dormandPrince853Integrator37.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double53 = dormandPrince853Integrator52.getSafety();
        double double54 = dormandPrince853Integrator52.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction60 = null;
        dormandPrince853Integrator59.addSwitchingFunction(switchingFunction60, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator59.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator59.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator68 = null;
        stepHandler67.handleStep(stepInterpolator68, false);
        stepHandler67.reset();
        dormandPrince853Integrator52.setStepHandler(stepHandler67);
        dormandPrince853Integrator37.setStepHandler(stepHandler67);
        dormandPrince853Integrator4.setStepHandler(stepHandler67);
        double double75 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction81 = null;
        dormandPrince853Integrator80.addSwitchingFunction(switchingFunction81, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator80.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler88 = dormandPrince853Integrator80.getStepHandler();
        java.lang.String str89 = dormandPrince853Integrator80.getName();
        double double90 = dormandPrince853Integrator80.getMaxStep();
        double double91 = dormandPrince853Integrator80.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler92 = dormandPrince853Integrator80.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler92);
        int int94 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.9d + "'", double53 == 0.9d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler67);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(stepHandler88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str89, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 10.0d + "'", double90 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertNotNull(stepHandler92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 8 + "'", int94 == 8);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        switchingFunctionsHandler0.add(switchingFunction8, (double) (byte) 1, (double) (byte) 100, (int) (short) 1);
        boolean boolean13 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        switchingFunctionsHandler0.add(switchingFunction14, 0.0d, (double) 1L, (int) (byte) 10);
        boolean boolean19 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler21 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean22 = switchingFunctionsHandler21.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler26 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        boolean boolean28 = switchingFunctionsHandler26.evaluateStep(stepInterpolator27);
        double[] doubleArray38 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray41 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray38, doubleArray41);
        switchingFunctionsHandler26.stepAccepted(100.0d, doubleArray38);
        boolean boolean44 = switchingFunctionsHandler26.isEmpty();
        double[] doubleArray54 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray57 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray54, doubleArray57);
        boolean boolean59 = switchingFunctionsHandler26.reset(10.0d, doubleArray57);
        double[] doubleArray63 = new double[] { Double.NaN };
        double[] doubleArray72 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray75 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray72, doubleArray75);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray63, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray57, doubleArray72);
        switchingFunctionsHandler21.stepAccepted(0.9d, doubleArray57);
        boolean boolean80 = switchingFunctionsHandler0.reset((double) 10L, doubleArray57);
        double double81 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, 14.142135623730951d, 1.0d, 35.0d);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 11.892071150027212d + "'", double5 == 11.892071150027212d);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        double double17 = dormandPrince853Integrator12.getMinStep();
        java.lang.Class<?> wildcardClass18 = dormandPrince853Integrator12.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 1.0f, (double) '#', (int) (short) 0);
        dormandPrince853Integrator4.setMaxGrowth((double) 0);
        double double18 = dormandPrince853Integrator4.getMinReduction();
        double double19 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.2d + "'", double18 == 0.2d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double19 = dormandPrince853Integrator18.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator24.addSwitchingFunction(switchingFunction25, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator24.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator24.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        stepHandler32.handleStep(stepInterpolator33, false);
        dormandPrince853Integrator18.setStepHandler(stepHandler32);
        dormandPrince853Integrator4.setStepHandler(stepHandler32);
        double double38 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction46, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator45.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler53 = dormandPrince853Integrator45.getStepHandler();
        double double54 = dormandPrince853Integrator45.getMaxStep();
        java.lang.String str55 = dormandPrince853Integrator45.getName();
        double double56 = dormandPrince853Integrator45.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator45.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler57);
        dormandPrince853Integrator4.setMinReduction((double) (byte) 1);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str55, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.9d + "'", double56 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler57);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        switchingFunctionsHandler0.add(switchingFunction21, (double) (byte) -1, (double) (byte) -1, 2);
        boolean boolean26 = switchingFunctionsHandler0.stop();
        boolean boolean27 = switchingFunctionsHandler0.isEmpty();
        boolean boolean28 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) 100);
        double double16 = dormandPrince853Integrator4.getSafety();
        java.lang.String str17 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.0d, (double) (short) 0, (double) (-1L), 8.0d);
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        dormandPrince853Integrator4.setMinReduction((double) (-1.0f));
        double double22 = dormandPrince853Integrator4.getSafety();
        double double23 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.Class<?> wildcardClass24 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, 8.0d, (double) 1, 2.0d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        java.lang.Class<?> wildcardClass6 = stepHandler5.getClass();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setSafety(1.7320508075688772d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator12.getStepHandler();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        dormandPrince853Integrator12.setMinReduction((double) ' ');
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator13.addSwitchingFunction(switchingFunction14, (double) 10, (double) 'a', (int) (byte) 10);
        int int19 = dormandPrince853Integrator13.getOrder();
        double double20 = dormandPrince853Integrator13.getCurrentSignedStepsize();
        double double21 = dormandPrince853Integrator13.getCurrentSignedStepsize();
        int int22 = dormandPrince853Integrator13.getOrder();
        double double23 = dormandPrince853Integrator13.getMinReduction();
        int int24 = dormandPrince853Integrator13.getOrder();
        int int25 = dormandPrince853Integrator13.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator30.addSwitchingFunction(switchingFunction31, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator30.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator30.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        stepHandler38.handleStep(stepInterpolator39, false);
        stepHandler38.reset();
        dormandPrince853Integrator13.setStepHandler(stepHandler38);
        stepHandler38.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        double double46 = dormandPrince853Integrator4.getSafety();
        double double47 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.2d + "'", double23 == 0.2d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.9d + "'", double46 == 0.9d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        double double34 = dormandPrince853Integrator12.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction40, (double) 10, (double) 'a', (int) (byte) 10);
        int int45 = dormandPrince853Integrator39.getOrder();
        double double46 = dormandPrince853Integrator39.getCurrentSignedStepsize();
        double double47 = dormandPrince853Integrator39.getCurrentSignedStepsize();
        int int48 = dormandPrince853Integrator39.getOrder();
        double double49 = dormandPrince853Integrator39.getMinReduction();
        int int50 = dormandPrince853Integrator39.getOrder();
        int int51 = dormandPrince853Integrator39.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction57 = null;
        dormandPrince853Integrator56.addSwitchingFunction(switchingFunction57, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator56.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler64 = dormandPrince853Integrator56.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator65 = null;
        stepHandler64.handleStep(stepInterpolator65, false);
        stepHandler64.reset();
        dormandPrince853Integrator39.setStepHandler(stepHandler64);
        dormandPrince853Integrator12.setStepHandler(stepHandler64);
        int int71 = dormandPrince853Integrator12.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.2d + "'", double49 == 0.2d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(stepHandler64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        double[] doubleArray3 = new double[] { Double.NaN };
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray3, doubleArray12);
        java.lang.String str18 = dormandPrince853Integrator17.getName();
        java.lang.String str19 = dormandPrince853Integrator17.getName();
        int int20 = dormandPrince853Integrator17.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction21, 0.6324555320336759d, 0.9d, (int) '#');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 1.0f, (double) 0, (int) (byte) 0);
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations10 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler12 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        boolean boolean14 = switchingFunctionsHandler12.evaluateStep(stepInterpolator13);
        double[] doubleArray24 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray27 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray24, doubleArray27);
        switchingFunctionsHandler12.stepAccepted(100.0d, doubleArray24);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler33 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean34 = switchingFunctionsHandler33.stop();
        double double35 = switchingFunctionsHandler33.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler37 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator38 = null;
        boolean boolean39 = switchingFunctionsHandler37.evaluateStep(stepInterpolator38);
        double[] doubleArray49 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray52 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray49, doubleArray52);
        switchingFunctionsHandler37.stepAccepted(100.0d, doubleArray49);
        switchingFunctionsHandler33.stepAccepted(10.0d, doubleArray49);
        double[] doubleArray66 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray69 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray66, doubleArray69);
        double[] doubleArray74 = new double[] { Double.NaN };
        double[] doubleArray83 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray86 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray83, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray74, doubleArray83);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (short) 10, doubleArray66, doubleArray74);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator(17.320508075688775d, 1.0d, doubleArray49, doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations10, 2.0d, doubleArray24, (double) 0, doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.9, 0.0]");
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        boolean boolean22 = switchingFunctionsHandler0.evaluateStep(stepInterpolator21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler29 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        boolean boolean31 = switchingFunctionsHandler29.evaluateStep(stepInterpolator30);
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        switchingFunctionsHandler29.stepAccepted(100.0d, doubleArray41);
        boolean boolean47 = switchingFunctionsHandler29.isEmpty();
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        boolean boolean62 = switchingFunctionsHandler29.reset(10.0d, doubleArray60);
        boolean boolean63 = switchingFunctionsHandler0.reset((double) 10, doubleArray60);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler65 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler67 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator68 = null;
        boolean boolean69 = switchingFunctionsHandler67.evaluateStep(stepInterpolator68);
        double[] doubleArray79 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray82 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray79, doubleArray82);
        switchingFunctionsHandler67.stepAccepted(100.0d, doubleArray79);
        switchingFunctionsHandler65.stepAccepted((double) (short) 1, doubleArray79);
        boolean boolean86 = switchingFunctionsHandler0.reset((double) 0.0f, doubleArray79);
        boolean boolean87 = switchingFunctionsHandler0.stop();
        boolean boolean88 = switchingFunctionsHandler0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 1.0f, (double) '#', (int) (short) 0);
        dormandPrince853Integrator4.setMaxGrowth((double) 0);
        double double18 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double24 = dormandPrince853Integrator23.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction25, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double30 = dormandPrince853Integrator23.getCurrentStepStart();
        java.lang.String str31 = dormandPrince853Integrator23.getName();
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        java.lang.String str45 = dormandPrince853Integrator44.getName();
        double[] doubleArray49 = new double[] { Double.NaN };
        double[] doubleArray58 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray61 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray58, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray49, doubleArray58);
        org.apache.commons.math.ode.StepHandler stepHandler64 = dormandPrince853Integrator63.getStepHandler();
        dormandPrince853Integrator44.setStepHandler(stepHandler64);
        dormandPrince853Integrator23.setStepHandler(stepHandler64);
        stepHandler64.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler64);
        double double69 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler64);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (short) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 2.0d, 2.0d, (int) (short) 100);
        java.lang.Class<?> wildcardClass22 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        boolean boolean22 = switchingFunctionsHandler0.evaluateStep(stepInterpolator21);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        switchingFunctionsHandler0.add(switchingFunction23, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler29 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        boolean boolean31 = switchingFunctionsHandler29.evaluateStep(stepInterpolator30);
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        switchingFunctionsHandler29.stepAccepted(100.0d, doubleArray41);
        boolean boolean47 = switchingFunctionsHandler29.isEmpty();
        double[] doubleArray57 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray60 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray57, doubleArray60);
        boolean boolean62 = switchingFunctionsHandler29.reset(10.0d, doubleArray60);
        boolean boolean63 = switchingFunctionsHandler0.reset((double) 10, doubleArray60);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler65 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler67 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator68 = null;
        boolean boolean69 = switchingFunctionsHandler67.evaluateStep(stepInterpolator68);
        double[] doubleArray79 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray82 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray79, doubleArray82);
        switchingFunctionsHandler67.stepAccepted(100.0d, doubleArray79);
        switchingFunctionsHandler65.stepAccepted((double) (short) 1, doubleArray79);
        boolean boolean86 = switchingFunctionsHandler0.reset((double) 0.0f, doubleArray79);
        double double87 = switchingFunctionsHandler0.getEventTime();
        boolean boolean88 = switchingFunctionsHandler0.isEmpty();
        boolean boolean89 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator90 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = switchingFunctionsHandler0.evaluateStep(stepInterpolator90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        boolean boolean33 = switchingFunctionsHandler0.reset(10.0d, doubleArray31);
        double double34 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        boolean boolean38 = switchingFunctionsHandler36.evaluateStep(stepInterpolator37);
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        switchingFunctionsHandler36.stepAccepted(100.0d, doubleArray48);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        switchingFunctionsHandler36.add(switchingFunction54, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean59 = switchingFunctionsHandler36.stop();
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        boolean boolean79 = switchingFunctionsHandler36.reset((double) 1L, doubleArray64);
        switchingFunctionsHandler0.stepAccepted((double) 0, doubleArray64);
        double double81 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction82 = null;
        switchingFunctionsHandler0.add(switchingFunction82, (double) (short) -1, 14.142135623730951d, (int) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction87 = null;
        switchingFunctionsHandler0.add(switchingFunction87, (double) (short) 1, 0.9486832980505138d, (int) '4');
        double double92 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction93 = null;
        switchingFunctionsHandler0.add(switchingFunction93, (double) ' ', (double) 10.0f, 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 1.0d, (double) (short) -1, 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double15 = dormandPrince853Integrator14.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator14.addSwitchingFunction(switchingFunction16, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double21 = dormandPrince853Integrator14.getCurrentStepStart();
        dormandPrince853Integrator14.setInitialStepSize((double) 0.0f);
        java.lang.String str24 = dormandPrince853Integrator14.getName();
        java.lang.String str25 = dormandPrince853Integrator14.getName();
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler26);
        double double28 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double29 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str25, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 5.916079783099616d + "'", double28 == 5.916079783099616d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.9d + "'", double29 == 0.9d);
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        java.io.IOException iOException6 = new java.io.IOException("hi!", (java.lang.Throwable) mathException5);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double14 = dormandPrince853Integrator13.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator13.addSwitchingFunction(switchingFunction15, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double20 = dormandPrince853Integrator13.getSafety();
        double double21 = dormandPrince853Integrator13.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction27, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator26.setMinReduction(100.0d);
        double double34 = dormandPrince853Integrator26.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction41, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double46 = dormandPrince853Integrator39.getCurrentStepStart();
        dormandPrince853Integrator39.setInitialStepSize((double) 0.0f);
        java.lang.String str49 = dormandPrince853Integrator39.getName();
        java.io.IOException iOException51 = new java.io.IOException("hi!");
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray54, throwable55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        java.lang.String str58 = mathException57.getPattern();
        java.lang.Object[] objArray59 = mathException57.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray59);
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        java.lang.String str74 = dormandPrince853Integrator73.getName();
        dormandPrince853Integrator73.setMinReduction(0.9d);
        java.lang.String str77 = dormandPrince853Integrator73.getName();
        java.lang.Object[] objArray78 = new java.lang.Object[] { double21, double34, dormandPrince853Integrator39, "hi!", objArray59, dormandPrince853Integrator73 };
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("hi!", objArray80, throwable81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray59, (java.lang.Throwable) mathException83);
        org.apache.commons.math.ode.IntegratorException integratorException85 = new org.apache.commons.math.ode.IntegratorException("", objArray59);
        mathException5.addSuppressed((java.lang.Throwable) integratorException85);
        java.lang.Object[] objArray87 = integratorException85.getArguments();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)", objArray87);
        java.lang.String str89 = mathException88.toString();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)" + "'", str89, "org.apache.commons.math.MathException: org.apache.commons.math.ode.IntegratorException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setInitialStepSize(4.47213595499958d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double21 = dormandPrince853Integrator20.getMaxStep();
        java.lang.String str22 = dormandPrince853Integrator20.getName();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction26, 17.320508075688775d, 17.320508075688775d, 10);
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator4.getStepHandler();
        stepHandler31.reset();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.0d + "'", double21 == 2.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(stepHandler31);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        double[] doubleArray2 = null;
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler5 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean6 = switchingFunctionsHandler5.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler8 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        boolean boolean10 = switchingFunctionsHandler8.evaluateStep(stepInterpolator9);
        double[] doubleArray20 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray23 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray20, doubleArray23);
        switchingFunctionsHandler8.stepAccepted(100.0d, doubleArray20);
        switchingFunctionsHandler5.stepAccepted((double) (short) 10, doubleArray20);
        boolean boolean27 = switchingFunctionsHandler5.isEmpty();
        boolean boolean28 = switchingFunctionsHandler5.isEmpty();
        double[] doubleArray37 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray46 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray49 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray46, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray37, doubleArray46);
        boolean boolean52 = switchingFunctionsHandler5.reset((double) (short) 0, doubleArray37);
        double[] doubleArray58 = new double[] { Double.NaN };
        double[] doubleArray67 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray70 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray67, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray58, doubleArray67);
        double[] doubleArray80 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray89 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray92 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray89, doubleArray92);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray80, doubleArray89);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator95 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (-1.0f), doubleArray58, doubleArray80);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (-1L), doubleArray37, doubleArray58);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator97 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) 1.0f, doubleArray2, doubleArray58);
        double double98 = dormandPrince853Integrator97.getMinReduction();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.2d + "'", double98 == 0.2d);
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth(100.0d);
        int int17 = dormandPrince853Integrator4.getOrder();
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) (byte) -1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMinReduction(3.732075599071396d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        stepHandler18.handleStep(stepInterpolator19, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        java.lang.String str36 = dormandPrince853Integrator35.getName();
        dormandPrince853Integrator35.setSafety((double) 0L);
        dormandPrince853Integrator35.setMaxGrowth((double) 'a');
        int int41 = dormandPrince853Integrator35.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction42 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction42, (double) 100L, (double) 1.0f, (int) 'a');
        dormandPrince853Integrator35.setInitialStepSize((double) '4');
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction54, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator53.setMinReduction(100.0d);
        double double61 = dormandPrince853Integrator53.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction62 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction62, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator53.getStepHandler();
        java.lang.String str68 = dormandPrince853Integrator53.getName();
        org.apache.commons.math.ode.StepHandler stepHandler69 = dormandPrince853Integrator53.getStepHandler();
        dormandPrince853Integrator35.setStepHandler(stepHandler69);
        dormandPrince853Integrator4.setStepHandler(stepHandler69);
        double double72 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int73 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str68, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler69);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        double double18 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) -1, (-1.0d), (double) (byte) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double32 = dormandPrince853Integrator31.getSafety();
        double double33 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator38.addSwitchingFunction(switchingFunction39, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator38.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator38.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator47 = null;
        stepHandler46.handleStep(stepInterpolator47, false);
        stepHandler46.reset();
        dormandPrince853Integrator31.setStepHandler(stepHandler46);
        dormandPrince853Integrator26.setStepHandler(stepHandler46);
        double double53 = dormandPrince853Integrator26.getCurrentStepStart();
        dormandPrince853Integrator26.setMinReduction(0.9486832980505138d);
        double double56 = dormandPrince853Integrator26.getCurrentSignedStepsize();
        int int57 = dormandPrince853Integrator26.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler58 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler58);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(stepHandler58);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler0.stepAccepted(10.0d, doubleArray16);
        boolean boolean23 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        boolean boolean25 = switchingFunctionsHandler0.evaluateStep(stepInterpolator24);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler27 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        boolean boolean29 = switchingFunctionsHandler27.evaluateStep(stepInterpolator28);
        double[] doubleArray39 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray42 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray39, doubleArray42);
        switchingFunctionsHandler27.stepAccepted(100.0d, doubleArray39);
        boolean boolean45 = switchingFunctionsHandler27.isEmpty();
        double double46 = switchingFunctionsHandler27.getEventTime();
        boolean boolean47 = switchingFunctionsHandler27.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler51 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler53 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator54 = null;
        boolean boolean55 = switchingFunctionsHandler53.evaluateStep(stepInterpolator54);
        double[] doubleArray65 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray68 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray65, doubleArray68);
        switchingFunctionsHandler53.stepAccepted(100.0d, doubleArray65);
        switchingFunctionsHandler51.stepAccepted((double) (short) 1, doubleArray65);
        double[] doubleArray75 = new double[] { Double.NaN };
        double[] doubleArray84 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray87 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray84, doubleArray87);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray75, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray65, doubleArray75);
        switchingFunctionsHandler27.stepAccepted(0.0d, doubleArray65);
        switchingFunctionsHandler0.stepAccepted((double) (byte) 1, doubleArray65);
        boolean boolean93 = switchingFunctionsHandler0.stop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        boolean boolean20 = switchingFunctionsHandler2.isEmpty();
        double[] doubleArray30 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray33 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray30, doubleArray33);
        boolean boolean35 = switchingFunctionsHandler2.reset(10.0d, doubleArray33);
        double[] doubleArray39 = new double[] { Double.NaN };
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray39, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray33, doubleArray48);
        dormandPrince853Integrator54.setMinReduction((double) (byte) -1);
        double double57 = dormandPrince853Integrator54.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction63 = null;
        dormandPrince853Integrator62.addSwitchingFunction(switchingFunction63, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator62.setMinReduction(100.0d);
        double double70 = dormandPrince853Integrator62.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction71 = null;
        dormandPrince853Integrator62.addSwitchingFunction(switchingFunction71, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler76 = dormandPrince853Integrator62.getStepHandler();
        java.lang.String str77 = dormandPrince853Integrator62.getName();
        org.apache.commons.math.ode.StepHandler stepHandler78 = dormandPrince853Integrator62.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator79 = null;
        stepHandler78.handleStep(stepInterpolator79, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator82 = null;
        stepHandler78.handleStep(stepInterpolator82, true);
        dormandPrince853Integrator54.setStepHandler(stepHandler78);
        stepHandler78.reset();
        stepHandler78.reset();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler78);
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        double double9 = dormandPrince853Integrator4.getMaxStep();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.916079783099616d + "'", double7 == 5.916079783099616d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        java.lang.Throwable throwable3 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray2, throwable3);
        java.io.IOException iOException5 = new java.io.IOException("hi!", (java.lang.Throwable) mathException4);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double13 = dormandPrince853Integrator12.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction14, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double19 = dormandPrince853Integrator12.getSafety();
        double double20 = dormandPrince853Integrator12.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator25.addSwitchingFunction(switchingFunction26, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator25.setMinReduction(100.0d);
        double double33 = dormandPrince853Integrator25.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double39 = dormandPrince853Integrator38.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator38.addSwitchingFunction(switchingFunction40, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double45 = dormandPrince853Integrator38.getCurrentStepStart();
        dormandPrince853Integrator38.setInitialStepSize((double) 0.0f);
        java.lang.String str48 = dormandPrince853Integrator38.getName();
        java.io.IOException iOException50 = new java.io.IOException("hi!");
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        java.lang.Throwable throwable54 = null;
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray53, throwable54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        java.lang.String str57 = mathException56.getPattern();
        java.lang.Object[] objArray58 = mathException56.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException59 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray58);
        double[] doubleArray68 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray71 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray68, doubleArray71);
        java.lang.String str73 = dormandPrince853Integrator72.getName();
        dormandPrince853Integrator72.setMinReduction(0.9d);
        java.lang.String str76 = dormandPrince853Integrator72.getName();
        java.lang.Object[] objArray77 = new java.lang.Object[] { double20, double33, dormandPrince853Integrator38, "hi!", objArray58, dormandPrince853Integrator72 };
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        java.lang.Throwable throwable80 = null;
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("hi!", objArray79, throwable80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray58, (java.lang.Throwable) mathException82);
        org.apache.commons.math.ode.IntegratorException integratorException84 = new org.apache.commons.math.ode.IntegratorException("", objArray58);
        mathException4.addSuppressed((java.lang.Throwable) integratorException84);
        java.lang.String str86 = integratorException84.getPattern();
        java.io.IOException iOException87 = new java.io.IOException((java.lang.Throwable) integratorException84);
        java.lang.Object[] objArray88 = integratorException84.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException89 = new org.apache.commons.math.ode.IntegratorException((java.lang.Throwable) integratorException84);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException((java.lang.Throwable) integratorException89);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.9d + "'", double39 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str73, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str76, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        double double19 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        double[] doubleArray29 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray32 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray29, doubleArray32);
        java.lang.String str34 = dormandPrince853Integrator33.getName();
        dormandPrince853Integrator33.setMinReduction(0.9d);
        java.lang.String str37 = dormandPrince853Integrator33.getName();
        dormandPrince853Integrator33.setMaxGrowth((double) 3);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator33.setStepHandler(stepHandler45);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) ' ', (double) (-1.0f), 14.142135623730951d);
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator51.getStepHandler();
        dormandPrince853Integrator33.setStepHandler(stepHandler52);
        stepHandler52.reset();
        stepHandler52.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler52);
        java.lang.String str57 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler45);
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str57, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double11 = dormandPrince853Integrator10.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction12, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double17 = dormandPrince853Integrator10.getSafety();
        double double18 = dormandPrince853Integrator10.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction24, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator23.setMinReduction(100.0d);
        double double31 = dormandPrince853Integrator23.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double37 = dormandPrince853Integrator36.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction38 = null;
        dormandPrince853Integrator36.addSwitchingFunction(switchingFunction38, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double43 = dormandPrince853Integrator36.getCurrentStepStart();
        dormandPrince853Integrator36.setInitialStepSize((double) 0.0f);
        java.lang.String str46 = dormandPrince853Integrator36.getName();
        java.io.IOException iOException48 = new java.io.IOException("hi!");
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        java.lang.Throwable throwable52 = null;
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("hi!", objArray51, throwable52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException53);
        java.lang.String str55 = mathException54.getPattern();
        java.lang.Object[] objArray56 = mathException54.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException57 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray56);
        double[] doubleArray66 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray69 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray66, doubleArray69);
        java.lang.String str71 = dormandPrince853Integrator70.getName();
        dormandPrince853Integrator70.setMinReduction(0.9d);
        java.lang.String str74 = dormandPrince853Integrator70.getName();
        java.lang.Object[] objArray75 = new java.lang.Object[] { double18, double31, dormandPrince853Integrator36, "hi!", objArray56, dormandPrince853Integrator70 };
        java.lang.Object[] objArray77 = new java.lang.Object[] {};
        java.lang.Throwable throwable78 = null;
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("hi!", objArray77, throwable78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray56, (java.lang.Throwable) mathException80);
        org.apache.commons.math.ode.IntegratorException integratorException82 = new org.apache.commons.math.ode.IntegratorException("", objArray56);
        java.lang.Object[] objArray84 = new java.lang.Object[] {};
        java.lang.Throwable throwable85 = null;
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("hi!", objArray84, throwable85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        java.lang.String str88 = mathException87.getPattern();
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray56, (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", objArray56);
        java.lang.String[] strArray94 = new java.lang.String[] {};
        org.apache.commons.math.ode.DerivativeException derivativeException95 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray94);
        org.apache.commons.math.ode.IntegratorException integratorException96 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", (java.lang.Object[]) strArray94);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.IntegratorException", objArray56, (java.lang.Throwable) integratorException96);
        java.lang.Object[] objArray98 = integratorException96.getArguments();
        org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray98);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.9d + "'", double37 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str46, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str71, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(objArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray98), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray98), "[]");
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) ' ');
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 1);
        dormandPrince853Integrator4.setMinReduction(14.142135623730951d);
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations17 = null;
        double[] doubleArray29 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray32 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray29, doubleArray32);
        double[] doubleArray37 = new double[] { Double.NaN };
        double[] doubleArray46 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray49 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray46, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray37, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (short) 10, doubleArray29, doubleArray37);
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        double[] doubleArray72 = new double[] { Double.NaN };
        double[] doubleArray81 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray84 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray81, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray72, doubleArray81);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 0.0f, doubleArray67, doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations17, (double) 1L, doubleArray29, 0.0d, doubleArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.9, 0.0]");
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator12.getStepHandler();
        double double15 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator12.getMaxGrowth();
        dormandPrince853Integrator12.setMinReduction((double) (short) -1);
        double double19 = dormandPrince853Integrator12.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction20, (double) 100L, 5.916079783099616d, (int) (byte) -1);
        dormandPrince853Integrator12.setInitialStepSize((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9486832980505138d + "'", double15 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        java.lang.String str20 = dormandPrince853Integrator4.getName();
        int int21 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction27, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator26.setMinReduction(100.0d);
        double double34 = dormandPrince853Integrator26.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction35 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction35, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler40 = dormandPrince853Integrator26.getStepHandler();
        java.lang.String str41 = dormandPrince853Integrator26.getName();
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator26.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator43 = null;
        stepHandler42.handleStep(stepInterpolator43, true);
        dormandPrince853Integrator4.setStepHandler(stepHandler42);
        double double47 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str41, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) '#', 0.9d, (double) (short) 100);
        dormandPrince853Integrator4.setMaxGrowth(0.0d);
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) (short) -1);
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.916079783099616d + "'", double7 == 5.916079783099616d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 5.916079783099616d + "'", double11 == 5.916079783099616d);
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        int int13 = dormandPrince853Integrator4.getOrder();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        int int15 = dormandPrince853Integrator4.getOrder();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 1.0d, (double) 100.0f, (double) (-1.0f));
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double11 = dormandPrince853Integrator10.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction12, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double17 = dormandPrince853Integrator10.getCurrentStepStart();
        dormandPrince853Integrator10.setInitialStepSize((double) 0.0f);
        java.lang.String str20 = dormandPrince853Integrator10.getName();
        java.lang.String str21 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator10.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler22);
        stepHandler22.reset();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler22);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler10 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean11 = switchingFunctionsHandler10.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler13 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        boolean boolean15 = switchingFunctionsHandler13.evaluateStep(stepInterpolator14);
        double[] doubleArray25 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray28 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray25, doubleArray28);
        switchingFunctionsHandler13.stepAccepted(100.0d, doubleArray25);
        switchingFunctionsHandler10.stepAccepted((double) (short) 10, doubleArray25);
        boolean boolean32 = switchingFunctionsHandler10.isEmpty();
        boolean boolean33 = switchingFunctionsHandler10.isEmpty();
        double[] doubleArray42 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray51 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray54 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray51, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray42, doubleArray51);
        boolean boolean57 = switchingFunctionsHandler10.reset((double) (short) 0, doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted((double) (byte) 100, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 97.0d, 100.0d, (int) '4');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction22, (double) ' ', 0.0d, 10);
        double double27 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        boolean boolean20 = switchingFunctionsHandler2.isEmpty();
        double[] doubleArray30 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray33 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray30, doubleArray33);
        boolean boolean35 = switchingFunctionsHandler2.reset(10.0d, doubleArray33);
        double[] doubleArray39 = new double[] { Double.NaN };
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray39, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) (byte) 10, doubleArray33, doubleArray48);
        dormandPrince853Integrator54.setMinReduction((double) (byte) -1);
        double double57 = dormandPrince853Integrator54.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction63 = null;
        dormandPrince853Integrator62.addSwitchingFunction(switchingFunction63, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator62.setMinReduction(100.0d);
        double double70 = dormandPrince853Integrator62.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction71 = null;
        dormandPrince853Integrator62.addSwitchingFunction(switchingFunction71, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler76 = dormandPrince853Integrator62.getStepHandler();
        java.lang.String str77 = dormandPrince853Integrator62.getName();
        org.apache.commons.math.ode.StepHandler stepHandler78 = dormandPrince853Integrator62.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator79 = null;
        stepHandler78.handleStep(stepInterpolator79, true);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator82 = null;
        stepHandler78.handleStep(stepInterpolator82, true);
        dormandPrince853Integrator54.setStepHandler(stepHandler78);
        java.lang.String str86 = dormandPrince853Integrator54.getName();
        java.lang.String str87 = dormandPrince853Integrator54.getName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler78);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str86, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str87, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) '#', 0.2d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator3 = null;
        boolean boolean4 = switchingFunctionsHandler2.evaluateStep(stepInterpolator3);
        double[] doubleArray14 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray17 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray14, doubleArray17);
        switchingFunctionsHandler2.stepAccepted(100.0d, doubleArray14);
        switchingFunctionsHandler0.stepAccepted((double) (short) 1, doubleArray14);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        switchingFunctionsHandler0.add(switchingFunction21, (double) (short) 0, (-1.0d), 1);
        boolean boolean26 = switchingFunctionsHandler0.isEmpty();
        double double27 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = switchingFunctionsHandler0.evaluateStep(stepInterpolator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setSafety((double) 1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 10);
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler14 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double21 = dormandPrince853Integrator20.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction22, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double27 = dormandPrince853Integrator20.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator20.getStepHandler();
        stepHandler28.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler28);
        stepHandler28.reset();
        stepHandler28.reset();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler28);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 3, (double) 100.0f, (double) 0L, (double) (byte) 100);
        java.lang.Class<?> wildcardClass5 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 1.0f, (double) 0, (int) (byte) 0);
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) (-1), 97.0d, 1);
        int int16 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(13.92838827718412d);
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations19 = null;
        double[] doubleArray28 = new double[] { Double.NaN };
        double[] doubleArray37 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray40 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray37, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray28, doubleArray37);
        double[] doubleArray51 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray54 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray51, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 100L, doubleArray28, doubleArray51);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler57 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator58 = null;
        boolean boolean59 = switchingFunctionsHandler57.evaluateStep(stepInterpolator58);
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        switchingFunctionsHandler57.stepAccepted(100.0d, doubleArray69);
        boolean boolean75 = switchingFunctionsHandler57.isEmpty();
        double[] doubleArray85 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray88 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray85, doubleArray88);
        boolean boolean90 = switchingFunctionsHandler57.reset(10.0d, doubleArray88);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 3, doubleArray28, doubleArray88);
        double[] doubleArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations19, 31.810829150682025d, doubleArray28, (-0.0d), doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator10.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        stepHandler18.handleStep(stepInterpolator19, false);
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        double double23 = dormandPrince853Integrator4.getMinStep();
        double double24 = dormandPrince853Integrator4.getMinStep();
        double double25 = dormandPrince853Integrator4.getCurrentStepStart();
        double double26 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth(100.0d);
        dormandPrince853Integrator4.setMinReduction((-1.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setInitialStepSize((double) 100.0f);
        double double15 = dormandPrince853Integrator4.getSafety();
        int int16 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction17, 5.885661912765424d, (double) 10L, (int) ' ');
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator2 = null;
        boolean boolean3 = switchingFunctionsHandler0.evaluateStep(stepInterpolator2);
        boolean boolean4 = switchingFunctionsHandler0.isEmpty();
        boolean boolean5 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        switchingFunctionsHandler0.add(switchingFunction6, (double) (short) 10, (double) (byte) -1, (int) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        switchingFunctionsHandler0.add(switchingFunction11, 8.0d, 2.0d, (int) (byte) 1);
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler17 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler19 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator20 = null;
        boolean boolean21 = switchingFunctionsHandler19.evaluateStep(stepInterpolator20);
        double[] doubleArray31 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray34 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray31, doubleArray34);
        switchingFunctionsHandler19.stepAccepted(100.0d, doubleArray31);
        switchingFunctionsHandler17.stepAccepted((double) (short) 1, doubleArray31);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator38 = null;
        boolean boolean39 = switchingFunctionsHandler17.evaluateStep(stepInterpolator38);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        switchingFunctionsHandler17.add(switchingFunction40, 0.2d, 10.0d, (int) 'a');
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler46 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator47 = null;
        boolean boolean48 = switchingFunctionsHandler46.evaluateStep(stepInterpolator47);
        double[] doubleArray58 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray61 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray58, doubleArray61);
        switchingFunctionsHandler46.stepAccepted(100.0d, doubleArray58);
        boolean boolean64 = switchingFunctionsHandler46.isEmpty();
        double[] doubleArray74 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray77 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray74, doubleArray77);
        boolean boolean79 = switchingFunctionsHandler46.reset(10.0d, doubleArray77);
        boolean boolean80 = switchingFunctionsHandler17.reset((double) 10, doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            switchingFunctionsHandler0.stepAccepted(1.7320508075688772d, doubleArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double18 = dormandPrince853Integrator17.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction24 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction24, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator23.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator23.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator32 = null;
        stepHandler31.handleStep(stepInterpolator32, false);
        dormandPrince853Integrator17.setStepHandler(stepHandler31);
        dormandPrince853Integrator4.setStepHandler(stepHandler31);
        double double37 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler31);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 2, 0.9d, (double) (byte) 1);
        double double21 = dormandPrince853Integrator20.getMaxStep();
        java.lang.String str22 = dormandPrince853Integrator20.getName();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        dormandPrince853Integrator4.setMinReduction((double) 10.0f);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.0d + "'", double21 == 2.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler23);
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction18, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator17.setMinReduction(100.0d);
        double double25 = dormandPrince853Integrator17.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction26, (double) 3, (double) (-1L), (int) (byte) -1);
        double double31 = dormandPrince853Integrator17.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction32 = null;
        dormandPrince853Integrator17.addSwitchingFunction(switchingFunction32, (double) (-1), (double) 1.0f, 8);
        java.lang.String str37 = dormandPrince853Integrator17.getName();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler38);
        java.lang.String str40 = dormandPrince853Integrator4.getName();
        java.lang.Class<?> wildcardClass41 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str40, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(stepHandler9);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        double double19 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator1 = null;
        boolean boolean2 = switchingFunctionsHandler0.evaluateStep(stepInterpolator1);
        double[] doubleArray12 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray15 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray12, doubleArray15);
        switchingFunctionsHandler0.stepAccepted(100.0d, doubleArray12);
        boolean boolean18 = switchingFunctionsHandler0.isEmpty();
        double[] doubleArray28 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray31 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray28, doubleArray31);
        boolean boolean33 = switchingFunctionsHandler0.reset(10.0d, doubleArray31);
        double double34 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler36 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        boolean boolean38 = switchingFunctionsHandler36.evaluateStep(stepInterpolator37);
        double[] doubleArray48 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray51 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray48, doubleArray51);
        switchingFunctionsHandler36.stepAccepted(100.0d, doubleArray48);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        switchingFunctionsHandler36.add(switchingFunction54, 100.0d, (double) 0.0f, (int) (byte) 1);
        boolean boolean59 = switchingFunctionsHandler36.stop();
        double[] doubleArray64 = new double[] { Double.NaN };
        double[] doubleArray73 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray76 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray73, doubleArray76);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray64, doubleArray73);
        boolean boolean79 = switchingFunctionsHandler36.reset((double) 1L, doubleArray64);
        switchingFunctionsHandler0.stepAccepted((double) 0, doubleArray64);
        double double81 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction82 = null;
        switchingFunctionsHandler0.add(switchingFunction82, (double) (short) -1, 14.142135623730951d, (int) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction87 = null;
        switchingFunctionsHandler0.add(switchingFunction87, (double) (short) 1, 0.9486832980505138d, (int) '4');
        boolean boolean92 = switchingFunctionsHandler0.stop();
        double double93 = switchingFunctionsHandler0.getEventTime();
        double double94 = switchingFunctionsHandler0.getEventTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue(Double.isNaN(double94));
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        int int17 = dormandPrince853Integrator4.getOrder();
        int int18 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, (double) 1L, 0.9d, (double) (-1));
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, 10.0d, 1.7320508075688772d, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler6);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator4.getStepHandler();
        double double19 = dormandPrince853Integrator4.getMinReduction();
        double double20 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth(1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str16 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        int int10 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        stepHandler11.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        stepHandler11.handleStep(stepInterpolator13, false);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator16 = null;
        stepHandler11.handleStep(stepInterpolator16, true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double double13 = dormandPrince853Integrator4.getMaxStep();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, 5.916079783099616d, (double) 100, (int) 'a');
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        int int17 = dormandPrince853Integrator12.getOrder();
        double double18 = dormandPrince853Integrator12.getMaxGrowth();
        double double19 = dormandPrince853Integrator12.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getSafety();
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getMinReduction();
        double double14 = dormandPrince853Integrator4.getSafety();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.StepHandler stepHandler18 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler18);
        dormandPrince853Integrator4.setSafety((double) 8);
        double double22 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double28 = dormandPrince853Integrator27.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator27.addSwitchingFunction(switchingFunction29, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double34 = dormandPrince853Integrator27.getCurrentStepStart();
        dormandPrince853Integrator27.setInitialStepSize((double) 0.0f);
        java.lang.String str37 = dormandPrince853Integrator27.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction38 = null;
        dormandPrince853Integrator27.addSwitchingFunction(switchingFunction38, Double.NaN, (double) 100.0f, (int) (byte) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        dormandPrince853Integrator47.addSwitchingFunction(switchingFunction48, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator47.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator47.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator56 = null;
        stepHandler55.handleStep(stepInterpolator56, false);
        boolean boolean59 = stepHandler55.requiresDenseOutput();
        dormandPrince853Integrator27.setStepHandler(stepHandler55);
        dormandPrince853Integrator4.setStepHandler(stepHandler55);
        double double62 = dormandPrince853Integrator4.getSafety();
        double double63 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth(31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.9d + "'", double28 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 8.0d + "'", double62 == 8.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 1.0f, (double) '#', (int) (short) 0);
        dormandPrince853Integrator4.setMaxGrowth((double) 0);
        double double18 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double24 = dormandPrince853Integrator23.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction25, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double30 = dormandPrince853Integrator23.getCurrentStepStart();
        java.lang.String str31 = dormandPrince853Integrator23.getName();
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        java.lang.String str45 = dormandPrince853Integrator44.getName();
        double[] doubleArray49 = new double[] { Double.NaN };
        double[] doubleArray58 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray61 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray58, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray49, doubleArray58);
        org.apache.commons.math.ode.StepHandler stepHandler64 = dormandPrince853Integrator63.getStepHandler();
        dormandPrince853Integrator44.setStepHandler(stepHandler64);
        dormandPrince853Integrator23.setStepHandler(stepHandler64);
        stepHandler64.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler64);
        boolean boolean69 = stepHandler64.requiresDenseOutput();
        boolean boolean70 = stepHandler64.requiresDenseOutput();
        boolean boolean71 = stepHandler64.requiresDenseOutput();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler4 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        boolean boolean6 = switchingFunctionsHandler4.evaluateStep(stepInterpolator5);
        double[] doubleArray16 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray19 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray16, doubleArray19);
        switchingFunctionsHandler4.stepAccepted(100.0d, doubleArray16);
        switchingFunctionsHandler2.stepAccepted((double) (short) 1, doubleArray16);
        double[] doubleArray26 = new double[] { Double.NaN };
        double[] doubleArray35 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray38 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray35, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray26, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray16, doubleArray26);
        double double42 = dormandPrince853Integrator41.getSafety();
        java.lang.String str43 = dormandPrince853Integrator41.getName();
        java.lang.Class<?> wildcardClass44 = dormandPrince853Integrator41.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9d + "'", double42 == 0.9d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str43, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        java.lang.Object[] objArray3 = new java.lang.Object[] {};
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray3, throwable4);
        java.io.IOException iOException6 = new java.io.IOException("hi!", (java.lang.Throwable) mathException5);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double14 = dormandPrince853Integrator13.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator13.addSwitchingFunction(switchingFunction15, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double20 = dormandPrince853Integrator13.getSafety();
        double double21 = dormandPrince853Integrator13.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction27, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator26.setMinReduction(100.0d);
        double double34 = dormandPrince853Integrator26.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction41, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double46 = dormandPrince853Integrator39.getCurrentStepStart();
        dormandPrince853Integrator39.setInitialStepSize((double) 0.0f);
        java.lang.String str49 = dormandPrince853Integrator39.getName();
        java.io.IOException iOException51 = new java.io.IOException("hi!");
        java.lang.Object[] objArray54 = new java.lang.Object[] {};
        java.lang.Throwable throwable55 = null;
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", objArray54, throwable55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        java.lang.String str58 = mathException57.getPattern();
        java.lang.Object[] objArray59 = mathException57.getArguments();
        org.apache.commons.math.ode.IntegratorException integratorException60 = new org.apache.commons.math.ode.IntegratorException("Dormand-Prince 8 (5, 3)", objArray59);
        double[] doubleArray69 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray72 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray69, doubleArray72);
        java.lang.String str74 = dormandPrince853Integrator73.getName();
        dormandPrince853Integrator73.setMinReduction(0.9d);
        java.lang.String str77 = dormandPrince853Integrator73.getName();
        java.lang.Object[] objArray78 = new java.lang.Object[] { double21, double34, dormandPrince853Integrator39, "hi!", objArray59, dormandPrince853Integrator73 };
        java.lang.Object[] objArray80 = new java.lang.Object[] {};
        java.lang.Throwable throwable81 = null;
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("hi!", objArray80, throwable81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("Dormand-Prince 8 (5, 3)", objArray59, (java.lang.Throwable) mathException83);
        org.apache.commons.math.ode.IntegratorException integratorException85 = new org.apache.commons.math.ode.IntegratorException("", objArray59);
        mathException5.addSuppressed((java.lang.Throwable) integratorException85);
        java.lang.String str87 = integratorException85.getPattern();
        java.lang.Object[] objArray88 = integratorException85.getArguments();
        java.io.IOException iOException89 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)", (java.lang.Throwable) integratorException85);
        java.lang.String str90 = iOException89.toString();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)" + "'", str90, "java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 3, (double) 0, (double) 1L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) (-1L), 0.0d, (int) ' ');
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.7320508075688772d + "'", double10 == 1.7320508075688772d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) 1.0f, (double) '#', (int) (short) 0);
        dormandPrince853Integrator4.setMaxGrowth((double) 0);
        double double18 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double24 = dormandPrince853Integrator23.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction25, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double30 = dormandPrince853Integrator23.getCurrentStepStart();
        java.lang.String str31 = dormandPrince853Integrator23.getName();
        double[] doubleArray40 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray43 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray40, doubleArray43);
        java.lang.String str45 = dormandPrince853Integrator44.getName();
        double[] doubleArray49 = new double[] { Double.NaN };
        double[] doubleArray58 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray61 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray58, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray49, doubleArray58);
        org.apache.commons.math.ode.StepHandler stepHandler64 = dormandPrince853Integrator63.getStepHandler();
        dormandPrince853Integrator44.setStepHandler(stepHandler64);
        dormandPrince853Integrator23.setStepHandler(stepHandler64);
        stepHandler64.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler64);
        boolean boolean69 = stepHandler64.requiresDenseOutput();
        boolean boolean70 = stepHandler64.requiresDenseOutput();
        stepHandler64.reset();
        stepHandler64.reset();
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str31, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) 3, (double) (-1L), (int) (byte) -1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) (short) 0, (double) 1, (double) 100);
        dormandPrince853Integrator22.setMaxGrowth((double) (short) -1);
        dormandPrince853Integrator22.setMaxGrowth(0.9486832980505138d);
        double[] doubleArray30 = new double[] { Double.NaN };
        double[] doubleArray39 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray42 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray39, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray30, doubleArray39);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction45 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction45, (double) 8, (double) '4', 0);
        org.apache.commons.math.ode.StepHandler stepHandler50 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator22.setStepHandler(stepHandler50);
        boolean boolean52 = stepHandler50.requiresDenseOutput();
        stepHandler50.reset();
        dormandPrince853Integrator4.setStepHandler(stepHandler50);
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        int int57 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, Double.NaN, (double) 0, (double) (short) 0);
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        dormandPrince853Integrator12.setMinReduction(0.9d);
        java.lang.String str16 = dormandPrince853Integrator12.getName();
        double double17 = dormandPrince853Integrator12.getCurrentStepStart();
        double double18 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction19, (double) (-1), (double) 10L, 0);
        dormandPrince853Integrator12.setMinReduction((double) 8);
        dormandPrince853Integrator12.setMinReduction((-1.0d));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator12.addSwitchingFunction(switchingFunction28, (double) (-1), 1.0d, 0);
        double double33 = dormandPrince853Integrator12.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9486832980505138d + "'", double18 == 0.9486832980505138d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator12.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction40, (double) 10, (double) 'a', (int) (byte) 10);
        int int45 = dormandPrince853Integrator39.getOrder();
        double double46 = dormandPrince853Integrator39.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction52 = null;
        dormandPrince853Integrator51.addSwitchingFunction(switchingFunction52, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator51.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler59 = dormandPrince853Integrator51.getStepHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator60 = null;
        stepHandler59.handleStep(stepInterpolator60, false);
        stepHandler59.reset();
        dormandPrince853Integrator39.setStepHandler(stepHandler59);
        dormandPrince853Integrator12.setStepHandler(stepHandler59);
        java.lang.String str66 = dormandPrince853Integrator12.getName();
        double double67 = dormandPrince853Integrator12.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler59);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str66, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.9486832980505138d + "'", double67 == 0.9486832980505138d);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        double[] doubleArray8 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray11 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray8, doubleArray11);
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double[] doubleArray17 = new double[] { Double.NaN };
        double[] doubleArray26 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray29 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray26, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray17, doubleArray26);
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler32);
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator12.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double40 = dormandPrince853Integrator39.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction41, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double46 = dormandPrince853Integrator39.getCurrentStepStart();
        java.lang.String str47 = dormandPrince853Integrator39.getName();
        java.lang.String str48 = dormandPrince853Integrator39.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction49 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction49, (double) ' ', (double) (short) 0, (int) '#');
        double double54 = dormandPrince853Integrator39.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction55 = null;
        dormandPrince853Integrator39.addSwitchingFunction(switchingFunction55, 1.0d, (double) 2, (int) (byte) 1);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator39.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler60);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator62 = null;
        stepHandler60.handleStep(stepInterpolator62, false);
        stepHandler60.reset();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str47, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str48, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(stepHandler60);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        double double10 = dormandPrince853Integrator4.getSafety();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) ' ');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) (short) 100, (double) (short) -1, (int) 'a');
        dormandPrince853Integrator4.setInitialStepSize((double) '#');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction21, 13.92838827718412d, (double) (short) 10, (-1));
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        double double28 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double double15 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        int int17 = dormandPrince853Integrator4.getOrder();
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) '4', (double) (-1L), 3);
        dormandPrince853Integrator4.setMaxGrowth(0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        double double23 = dormandPrince853Integrator4.getSafety();
        java.lang.String str24 = dormandPrince853Integrator4.getName();
        java.lang.Class<?> wildcardClass25 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, (double) (byte) 1, (double) 100.0f, (double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler7 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler7);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator13.addSwitchingFunction(switchingFunction14, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator13.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator13.getStepHandler();
        double double22 = dormandPrince853Integrator13.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler23 = null;
        dormandPrince853Integrator13.setStepHandler(stepHandler23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        double double30 = dormandPrince853Integrator29.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator29.addSwitchingFunction(switchingFunction31, (double) '#', (double) (-1.0f), (int) (short) 100);
        double double36 = dormandPrince853Integrator29.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator29.getStepHandler();
        stepHandler37.reset();
        dormandPrince853Integrator13.setStepHandler(stepHandler37);
        boolean boolean40 = stepHandler37.requiresDenseOutput();
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        double double42 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertNotNull(stepHandler21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.9d + "'", double30 == 0.9d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9d + "'", double42 == 0.9d);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (byte) 10, (double) (short) 100, (double) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) 10, (double) 'a', (int) (byte) 10);
        dormandPrince853Integrator4.setMinReduction(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        double double14 = dormandPrince853Integrator4.getMinReduction();
        double double15 = dormandPrince853Integrator4.getMaxStep();
        double double16 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler2 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean3 = switchingFunctionsHandler2.stop();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler5 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        boolean boolean7 = switchingFunctionsHandler5.evaluateStep(stepInterpolator6);
        double[] doubleArray17 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray20 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray17, doubleArray20);
        switchingFunctionsHandler5.stepAccepted(100.0d, doubleArray17);
        switchingFunctionsHandler2.stepAccepted((double) (short) 10, doubleArray17);
        boolean boolean24 = switchingFunctionsHandler2.isEmpty();
        boolean boolean25 = switchingFunctionsHandler2.isEmpty();
        double[] doubleArray34 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray43 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray46 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray43, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray34, doubleArray43);
        boolean boolean49 = switchingFunctionsHandler2.reset((double) (short) 0, doubleArray34);
        double[] doubleArray55 = new double[] { Double.NaN };
        double[] doubleArray64 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray67 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray64, doubleArray67);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray55, doubleArray64);
        double[] doubleArray77 = new double[] { (short) -1, (byte) -1, '4', 10L, ' ' };
        double[] doubleArray86 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray89 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray86, doubleArray89);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (byte) 0, doubleArray77, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (-1.0f), doubleArray55, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (-1L), doubleArray34, doubleArray55);
        java.lang.String str94 = dormandPrince853Integrator93.getName();
        double double95 = dormandPrince853Integrator93.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, -1.0, 52.0, 10.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.9, 0.0]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str94, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-0.0d), (double) 10.0f, (double) (-1L), 1.0d);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler0 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        boolean boolean1 = switchingFunctionsHandler0.stop();
        double double2 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction3 = null;
        switchingFunctionsHandler0.add(switchingFunction3, (double) (byte) 0, (double) 10.0f, 1);
        boolean boolean8 = switchingFunctionsHandler0.isEmpty();
        org.apache.commons.math.ode.SwitchingFunctionsHandler switchingFunctionsHandler10 = new org.apache.commons.math.ode.SwitchingFunctionsHandler();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        boolean boolean12 = switchingFunctionsHandler10.evaluateStep(stepInterpolator11);
        double[] doubleArray22 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray25 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray22, doubleArray25);
        switchingFunctionsHandler10.stepAccepted(100.0d, doubleArray22);
        double[] doubleArray32 = new double[] { Double.NaN };
        double[] doubleArray41 = new double[] { 0.0d, 100L, (short) 100, 1.0f, (short) -1, (byte) 10 };
        double[] doubleArray44 = new double[] { 0.9d, 0.0f };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 0.9d, doubleArray41, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) (short) 0, doubleArray32, doubleArray41);
        boolean boolean47 = switchingFunctionsHandler10.reset(100.0d, doubleArray32);
        boolean boolean48 = switchingFunctionsHandler0.reset((double) (-1), doubleArray32);
        boolean boolean49 = switchingFunctionsHandler0.stop();
        boolean boolean50 = switchingFunctionsHandler0.stop();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        switchingFunctionsHandler0.add(switchingFunction51, (double) 100, (double) (-1L), 0);
        boolean boolean56 = switchingFunctionsHandler0.stop();
        double double57 = switchingFunctionsHandler0.getEventTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator58 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = switchingFunctionsHandler0.evaluateStep(stepInterpolator58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.9, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 100.0, 100.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.9, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }
}

